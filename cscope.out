cscope 15 C:\Private\Programing\LPC\CheddarFirmware-feature-gpio"               0001647415
	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\croutine.c

28 
	~"FªeRTOS.h
"

29 
	~"èsk.h
"

30 
	~"¸outöe.h
"

33 #if–
c⁄figUSE_CO_ROUTINES
 != 0 )

39 #ifde‡
p‹tREMOVE_STATIC_QUALIFIER


40 

	)

45 
Li°_t
 
	gpxRódyCoRoutöeLi°s
[ 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 ];

46 
Li°_t
 
	gxDñayedCoRoutöeLi°1
;

47 
Li°_t
 
	gxDñayedCoRoutöeLi°2
;

48 
Li°_t
 * 
	gpxDñayedCoRoutöeLi°
;

49 
Li°_t
 * 
	gpxOvîÊowDñayedCoRoutöeLi°
;

50 
Li°_t
 
	gxPídögRódyCoRoutöeLi°
;

53 
CRCB_t
 * 
	gpxCuºítCoRoutöe
 = 
NULL
;

54 
UBa£Ty≥_t
 
	guxT›CoRoutöeRódyPri‹ôy
 = 0;

55 
TickTy≥_t
 
	gxCoRoutöeTickCou¡
 = 0, 
	gxLa°TickCou¡
 = 0, 
	gxPas£dTicks
 = 0;

58 
	#c‹INITIAL_STATE
 ( 0 )

	)

67 
	#¥vAddCoRoutöeToRódyQueue
–
pxCRCB
 ) \

69 if–
pxCRCB
->
uxPri‹ôy
 > 
uxT›CoRoutöeRódyPri‹ôy
 ) \

71 
uxT›CoRoutöeRódyPri‹ôy
 = 
pxCRCB
->
uxPri‹ôy
; \

73 
	`vLi°In£πEnd
––
Li°_t
 * ) &–
pxRódyCoRoutöeLi°s
[ 
pxCRCB
->
uxPri‹ôy
 ] ), &–pxCRCB->
xGíîicLi°Iãm
 ) ); \

74 }

	)

80 
¥vInôüli£CoRoutöeLi°s
( );

88 
¥vCheckPídögRódyLi°
( );

98 
¥vCheckDñayedLi°
( );

102 
Ba£Ty≥_t
 
	$xCoRoutöeCª©e
–
¸COROUTINE_CODE
 
pxCoRoutöeCode
, 
UBa£Ty≥_t
 
uxPri‹ôy
, UBa£Ty≥_à
uxIndex
 )

104 
Ba£Ty≥_t
 
xRëu∫
;

105 
CRCB_t
 *
pxCoRoutöe
;

108 
pxCoRoutöe
 = ( 
CRCB_t
 * ) 
	`pvP‹tMÆloc
( ( CRCB_t ) );

109 if–
pxCoRoutöe
 )

113 if–
pxCuºítCoRoutöe
 =
NULL
 )

115 
pxCuºítCoRoutöe
 = 
pxCoRoutöe
;

116 
	`¥vInôüli£CoRoutöeLi°s
();

120 if–
uxPri‹ôy
 >
c⁄figMAX_CO_ROUTINE_PRIORITIES
 )

122 
uxPri‹ôy
 = 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 - 1;

126 
pxCoRoutöe
->
uxSèã
 = 
c‹INITIAL_STATE
;

127 
pxCoRoutöe
->
uxPri‹ôy
 = uxPriority;

128 
pxCoRoutöe
->
uxIndex
 = uxIndex;

129 
pxCoRoutöe
->
pxCoRoutöeFun˘i⁄
 = 
pxCoRoutöeCode
;

132 
	`vLi°Inôüli£Iãm
–&–
pxCoRoutöe
->
xGíîicLi°Iãm
 ) );

133 
	`vLi°Inôüli£Iãm
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ) );

138 
	`li°SET_LIST_ITEM_OWNER
–&–
pxCoRoutöe
->
xGíîicLi°Iãm
 ),ÖxCoRoutine );

139 
	`li°SET_LIST_ITEM_OWNER
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ),ÖxCoRoutine );

142 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ), ( ( 
TickTy≥_t
 ) 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 - ( TickTy≥_àË
uxPri‹ôy
 ) );

146 
	`¥vAddCoRoutöeToRódyQueue
–
pxCoRoutöe
 );

148 
xRëu∫
 = 
pdPASS
;

152 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

155  
xRëu∫
;

156 
	}
}

159 
	$vCoRoutöeAddToDñayedLi°
–
TickTy≥_t
 
xTicksToDñay
, 
Li°_t
 *
pxEvítLi°
 )

161 
TickTy≥_t
 
xTimeToWake
;

165 
xTimeToWake
 = 
xCoRoutöeTickCou¡
 + 
xTicksToDñay
;

170 –Ë
	`uxLi°Remove
––
Li°Iãm_t
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

173 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ), 
xTimeToWake
 );

175 if–
xTimeToWake
 < 
xCoRoutöeTickCou¡
 )

179 
	`vLi°In£π
––
Li°_t
 * ) 
pxOvîÊowDñayedCoRoutöeLi°
, ( 
Li°Iãm_t
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

185 
	`vLi°In£π
––
Li°_t
 * ) 
pxDñayedCoRoutöeLi°
, ( 
Li°Iãm_t
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

188 if–
pxEvítLi°
 )

192 
	`vLi°In£π
–
pxEvítLi°
, &–
pxCuºítCoRoutöe
->
xEvítLi°Iãm
 ) );

194 
	}
}

197 
	$¥vCheckPídögRódyLi°
( )

202  
	`li°LIST_IS_EMPTY
–&
xPídögRódyCoRoutöeLi°
 ) =
pdFALSE
 )

204 
CRCB_t
 *
pxUnblockedCRCB
;

207 
	`p‹tDISABLE_INTERRUPTS
();

209 
pxUnblockedCRCB
 = ( 
CRCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–(&
xPídögRódyCoRoutöeLi°
) );

210 –Ë
	`uxLi°Remove
–&–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

212 
	`p‹tENABLE_INTERRUPTS
();

214 –Ë
	`uxLi°Remove
–&–
pxUnblockedCRCB
->
xGíîicLi°Iãm
 ) );

215 
	`¥vAddCoRoutöeToRódyQueue
–
pxUnblockedCRCB
 );

217 
	}
}

220 
	$¥vCheckDñayedLi°
( )

222 
CRCB_t
 *
pxCRCB
;

224 
xPas£dTicks
 = 
	`xTaskGëTickCou¡
(Ë- 
xLa°TickCou¡
;

225  
xPas£dTicks
 )

227 
xCoRoutöeTickCou¡
++;

228 
xPas£dTicks
--;

231 if–
xCoRoutöeTickCou¡
 == 0 )

233 
Li°_t
 * 
pxTemp
;

237 
pxTemp
 = 
pxDñayedCoRoutöeLi°
;

238 
pxDñayedCoRoutöeLi°
 = 
pxOvîÊowDñayedCoRoutöeLi°
;

239 
pxOvîÊowDñayedCoRoutöeLi°
 = 
pxTemp
;

243  
	`li°LIST_IS_EMPTY
–
pxDñayedCoRoutöeLi°
 ) =
pdFALSE
 )

245 
pxCRCB
 = ( 
CRCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedCoRoutöeLi°
 );

247 if–
xCoRoutöeTickCou¡
 < 
	`li°GET_LIST_ITEM_VALUE
–&–
pxCRCB
->
xGíîicLi°Iãm
 ) ) )

253 
	`p‹tDISABLE_INTERRUPTS
();

260 –Ë
	`uxLi°Remove
–&–
pxCRCB
->
xGíîicLi°Iãm
 ) );

263 if–
pxCRCB
->
xEvítLi°Iãm
.
pvC⁄èöî
 )

265 –Ë
	`uxLi°Remove
–&–
pxCRCB
->
xEvítLi°Iãm
 ) );

268 
	`p‹tENABLE_INTERRUPTS
();

270 
	`¥vAddCoRoutöeToRódyQueue
–
pxCRCB
 );

274 
xLa°TickCou¡
 = 
xCoRoutöeTickCou¡
;

275 
	}
}

278 
	$vCoRoutöeScheduÀ
( )

281 
	`¥vCheckPídögRódyLi°
();

284 
	`¥vCheckDñayedLi°
();

287  
	`li°LIST_IS_EMPTY
–&–
pxRódyCoRoutöeLi°s
[ 
uxT›CoRoutöeRódyPri‹ôy
 ] ) ) )

289 if–
uxT›CoRoutöeRódyPri‹ôy
 == 0 )

294 --
uxT›CoRoutöeRódyPri‹ôy
;

299 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítCoRoutöe
, &–
pxRódyCoRoutöeLi°s
[ 
uxT›CoRoutöeRódyPri‹ôy
 ] ) );

302 –
pxCuºítCoRoutöe
->
pxCoRoutöeFun˘i⁄
 )–pxCuºítCoRoutöe,ÖxCuºítCoRoutöe->
uxIndex
 );

305 
	}
}

308 
	$¥vInôüli£CoRoutöeLi°s
( )

310 
UBa£Ty≥_t
 
uxPri‹ôy
;

312  
uxPri‹ôy
 = 0; uxPri‹ôy < 
c⁄figMAX_CO_ROUTINE_PRIORITIES
; uxPriority++ )

314 
	`vLi°Inôüli£
––
Li°_t
 * ) &–
pxRódyCoRoutöeLi°s
[ 
uxPri‹ôy
 ] ) );

317 
	`vLi°Inôüli£
––
Li°_t
 * ) &
xDñayedCoRoutöeLi°1
 );

318 
	`vLi°Inôüli£
––
Li°_t
 * ) &
xDñayedCoRoutöeLi°2
 );

319 
	`vLi°Inôüli£
––
Li°_t
 * ) &
xPídögRódyCoRoutöeLi°
 );

323 
pxDñayedCoRoutöeLi°
 = &
xDñayedCoRoutöeLi°1
;

324 
pxOvîÊowDñayedCoRoutöeLi°
 = &
xDñayedCoRoutöeLi°2
;

325 
	}
}

328 
Ba£Ty≥_t
 
	$xCoRoutöeRemoveFromEvítLi°
–c⁄° 
Li°_t
 *
pxEvítLi°
 )

330 
CRCB_t
 *
pxUnblockedCRCB
;

331 
Ba£Ty≥_t
 
xRëu∫
;

336 
pxUnblockedCRCB
 = ( 
CRCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxEvítLi°
 );

337 –Ë
	`uxLi°Remove
–&–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

338 
	`vLi°In£πEnd
––
Li°_t
 * ) &–
xPídögRódyCoRoutöeLi°
 ), &–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

340 if–
pxUnblockedCRCB
->
uxPri‹ôy
 >
pxCuºítCoRoutöe
->uxPriority )

342 
xRëu∫
 = 
pdTRUE
;

346 
xRëu∫
 = 
pdFALSE
;

349  
xRëu∫
;

350 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\event_groups.c

29 
	~<°dlib.h
>

34 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

37 
	~"FªeRTOS.h
"

38 
	~"èsk.h
"

39 
	~"timîs.h
"

40 
	~"evít_groups.h
"

46 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


51 #i‡
c⁄figUSE_16_BIT_TICKS
 == 1

52 
	#evítCLEAR_EVENTS_ON_EXIT_BIT
 0x0100U

	)

53 
	#evítUNBLOCKED_DUE_TO_BIT_SET
 0x0200U

	)

54 
	#evítWAIT_FOR_ALL_BITS
 0x0400U

	)

55 
	#evítEVENT_BITS_CONTROL_BYTES
 0xff00U

	)

57 
	#evítCLEAR_EVENTS_ON_EXIT_BIT
 0x01000000UL

	)

58 
	#evítUNBLOCKED_DUE_TO_BIT_SET
 0x02000000UL

	)

59 
	#evítWAIT_FOR_ALL_BITS
 0x04000000UL

	)

60 
	#evítEVENT_BITS_CONTROL_BYTES
 0xff000000UL

	)

63 
	sxEvítGroupDeföôi⁄


65 
EvítBôs_t
 
	muxEvítBôs
;

66 
Li°_t
 
	mxTasksWaôögF‹Bôs
;

68 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

69 
UBa£Ty≥_t
 
	muxEvítGroupNumbî
;

72 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

73 
uöt8_t
 
	mucSètiˇŒyAŒoˇãd
;

75 } 
	tEvítGroup_t
;

87 
Ba£Ty≥_t
 
	$¥vTe°WaôC⁄dôi⁄
–c⁄° 
EvítBôs_t
 
uxCuºítEvítBôs
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, c⁄° 
Ba£Ty≥_t
 
xWaôF‹AŒBôs
 ) 
PRIVILEGED_FUNCTION
;

91 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

93 
EvítGroupH™dÀ_t
 
	$xEvítGroupCª©eSètic
–
SèticEvítGroup_t
 *
pxEvítGroupBuf„r
 )

95 
EvítGroup_t
 *
pxEvítBôs
;

98 
	`c⁄figASSERT
–
pxEvítGroupBuf„r
 );

100 #if–
c⁄figASSERT_DEFINED
 == 1 )

105 vﬁ©ûê
size_t
 
xSize
 = –
SèticEvítGroup_t
 );

106 
	`c⁄figASSERT
–
xSize
 =–
EvítGroup_t
 ) );

111 
pxEvítBôs
 = ( 
EvítGroup_t
 * ) 
pxEvítGroupBuf„r
;

113 if–
pxEvítBôs
 !
NULL
 )

115 
pxEvítBôs
->
uxEvítBôs
 = 0;

116 
	`vLi°Inôüli£
–&–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 ) );

118 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

123 
pxEvítBôs
->
ucSètiˇŒyAŒoˇãd
 = 
pdTRUE
;

127 
	`åa˚EVENT_GROUP_CREATE
–
pxEvítBôs
 );

131 
	`åa˚EVENT_GROUP_CREATE_FAILED
();

134  ( 
EvítGroupH™dÀ_t
 ) 
pxEvítBôs
;

135 
	}
}

140 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

142 
EvítGroupH™dÀ_t
 
	$xEvítGroupCª©e
( )

144 
EvítGroup_t
 *
pxEvítBôs
;

147 
pxEvítBôs
 = ( 
EvítGroup_t
 * ) 
	`pvP‹tMÆloc
( ( EventGroup_t ) );

149 if–
pxEvítBôs
 !
NULL
 )

151 
pxEvítBôs
->
uxEvítBôs
 = 0;

152 
	`vLi°Inôüli£
–&–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 ) );

154 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

159 
pxEvítBôs
->
ucSètiˇŒyAŒoˇãd
 = 
pdFALSE
;

163 
	`åa˚EVENT_GROUP_CREATE
–
pxEvítBôs
 );

167 
	`åa˚EVENT_GROUP_CREATE_FAILED
();

170  ( 
EvítGroupH™dÀ_t
 ) 
pxEvítBôs
;

171 
	}
}

176 
EvítBôs_t
 
	$xEvítGroupSync
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToSë
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, 
TickTy≥_t
 
xTicksToWaô
 )

178 
EvítBôs_t
 
uxOrigöÆBôVÆue
, 
uxRëu∫
;

179 
EvítGroup_t
 *
pxEvítBôs
 = ( EvítGroup_à* ) 
xEvítGroup
;

180 
Ba£Ty≥_t
 
xAÃódyYõlded
;

181 
Ba£Ty≥_t
 
xTimeoutOccuºed
 = 
pdFALSE
;

183 
	`c⁄figASSERT
––
uxBôsToWaôF‹
 & 
evítEVENT_BITS_CONTROL_BYTES
 ) == 0 );

184 
	`c⁄figASSERT
–
uxBôsToWaôF‹
 != 0 );

185 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

187 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

191 
	`vTaskSu•ídAŒ
();

193 
uxOrigöÆBôVÆue
 = 
pxEvítBôs
->
uxEvítBôs
;

195 –Ë
	`xEvítGroupSëBôs
–
xEvítGroup
, 
uxBôsToSë
 );

197 if–––
uxOrigöÆBôVÆue
 | 
uxBôsToSë
 ) & 
uxBôsToWaôF‹
 ) == uxBitsToWaitFor )

200 
uxRëu∫
 = ( 
uxOrigöÆBôVÆue
 | 
uxBôsToSë
 );

204 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToWaôF‹
;

206 
xTicksToWaô
 = 0;

210 if–
xTicksToWaô
 !–
TickTy≥_t
 ) 0 )

212 
	`åa˚EVENT_GROUP_SYNC_BLOCK
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
 );

217 
	`vTaskPœ˚OnUn‹dîedEvítLi°
–&–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 ), ( 
uxBôsToWaôF‹
 | 
evítCLEAR_EVENTS_ON_EXIT_BIT
 | 
evítWAIT_FOR_ALL_BITS
 ), 
xTicksToWaô
 );

223 
uxRëu∫
 = 0;

229 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

230 
xTimeoutOccuºed
 = 
pdTRUE
;

234 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

236 if–
xTicksToWaô
 !–
TickTy≥_t
 ) 0 )

238 if–
xAÃódyYõlded
 =
pdFALSE
 )

240 
	`p‹tYIELD_WITHIN_API
();

244 
	`mtCOVERAGE_TEST_MARKER
();

251 
uxRëu∫
 = 
	`uxTaskRe£tEvítIãmVÆue
();

253 if––
uxRëu∫
 & 
evítUNBLOCKED_DUE_TO_BIT_SET
 ) =–
EvítBôs_t
 ) 0 )

256 
	`èskENTER_CRITICAL
();

258 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

264 if––
uxRëu∫
 & 
uxBôsToWaôF‹
 ) == uxBitsToWaitFor )

266 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToWaôF‹
;

270 
	`mtCOVERAGE_TEST_MARKER
();

273 
	`èskEXIT_CRITICAL
();

275 
xTimeoutOccuºed
 = 
pdTRUE
;

284 
uxRëu∫
 &~
evítEVENT_BITS_CONTROL_BYTES
;

287 
	`åa˚EVENT_GROUP_SYNC_END
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 );

290 –Ë
xTimeoutOccuºed
;

292  
uxRëu∫
;

293 
	}
}

296 
EvítBôs_t
 
	$xEvítGroupWaôBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToWaôF‹
, c⁄° 
Ba£Ty≥_t
 
xCÀ¨OnExô
, c⁄° Ba£Ty≥_à
xWaôF‹AŒBôs
, 
TickTy≥_t
 
xTicksToWaô
 )

298 
EvítGroup_t
 *
pxEvítBôs
 = ( EvítGroup_à* ) 
xEvítGroup
;

299 
EvítBôs_t
 
uxRëu∫
, 
uxC⁄åﬁBôs
 = 0;

300 
Ba£Ty≥_t
 
xWaôC⁄dôi⁄Më
, 
xAÃódyYõlded
;

301 
Ba£Ty≥_t
 
xTimeoutOccuºed
 = 
pdFALSE
;

305 
	`c⁄figASSERT
–
xEvítGroup
 );

306 
	`c⁄figASSERT
––
uxBôsToWaôF‹
 & 
evítEVENT_BITS_CONTROL_BYTES
 ) == 0 );

307 
	`c⁄figASSERT
–
uxBôsToWaôF‹
 != 0 );

308 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

310 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

314 
	`vTaskSu•ídAŒ
();

316 c⁄° 
EvítBôs_t
 
uxCuºítEvítBôs
 = 
pxEvítBôs
->
uxEvítBôs
;

319 
xWaôC⁄dôi⁄Më
 = 
	`¥vTe°WaôC⁄dôi⁄
–
uxCuºítEvítBôs
, 
uxBôsToWaôF‹
, 
xWaôF‹AŒBôs
 );

321 if–
xWaôC⁄dôi⁄Më
 !
pdFALSE
 )

325 
uxRëu∫
 = 
uxCuºítEvítBôs
;

326 
xTicksToWaô
 = ( 
TickTy≥_t
 ) 0;

329 if–
xCÀ¨OnExô
 !
pdFALSE
 )

331 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToWaôF‹
;

335 
	`mtCOVERAGE_TEST_MARKER
();

338 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

342 
uxRëu∫
 = 
uxCuºítEvítBôs
;

343 
xTimeoutOccuºed
 = 
pdTRUE
;

351 if–
xCÀ¨OnExô
 !
pdFALSE
 )

353 
uxC⁄åﬁBôs
 |
evítCLEAR_EVENTS_ON_EXIT_BIT
;

357 
	`mtCOVERAGE_TEST_MARKER
();

360 if–
xWaôF‹AŒBôs
 !
pdFALSE
 )

362 
uxC⁄åﬁBôs
 |
evítWAIT_FOR_ALL_BITS
;

366 
	`mtCOVERAGE_TEST_MARKER
();

372 
	`vTaskPœ˚OnUn‹dîedEvítLi°
–&–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 ), ( 
uxBôsToWaôF‹
 | 
uxC⁄åﬁBôs
 ), 
xTicksToWaô
 );

377 
uxRëu∫
 = 0;

379 
	`åa˚EVENT_GROUP_WAIT_BITS_BLOCK
–
xEvítGroup
, 
uxBôsToWaôF‹
 );

382 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

384 if–
xTicksToWaô
 !–
TickTy≥_t
 ) 0 )

386 if–
xAÃódyYõlded
 =
pdFALSE
 )

388 
	`p‹tYIELD_WITHIN_API
();

392 
	`mtCOVERAGE_TEST_MARKER
();

399 
uxRëu∫
 = 
	`uxTaskRe£tEvítIãmVÆue
();

401 if––
uxRëu∫
 & 
evítUNBLOCKED_DUE_TO_BIT_SET
 ) =–
EvítBôs_t
 ) 0 )

403 
	`èskENTER_CRITICAL
();

406 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

410 if–
	`¥vTe°WaôC⁄dôi⁄
–
uxRëu∫
, 
uxBôsToWaôF‹
, 
xWaôF‹AŒBôs
 ) !
pdFALSE
 )

412 if–
xCÀ¨OnExô
 !
pdFALSE
 )

414 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToWaôF‹
;

418 
	`mtCOVERAGE_TEST_MARKER
();

423 
	`mtCOVERAGE_TEST_MARKER
();

425 
xTimeoutOccuºed
 = 
pdTRUE
;

427 
	`èskEXIT_CRITICAL
();

435 
uxRëu∫
 &~
evítEVENT_BITS_CONTROL_BYTES
;

437 
	`åa˚EVENT_GROUP_WAIT_BITS_END
–
xEvítGroup
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 );

440 –Ë
xTimeoutOccuºed
;

442  
uxRëu∫
;

443 
	}
}

446 
EvítBôs_t
 
	$xEvítGroupCÀ¨Bôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToCÀ¨
 )

448 
EvítGroup_t
 *
pxEvítBôs
 = ( EvítGroup_à* ) 
xEvítGroup
;

449 
EvítBôs_t
 
uxRëu∫
;

453 
	`c⁄figASSERT
–
xEvítGroup
 );

454 
	`c⁄figASSERT
––
uxBôsToCÀ¨
 & 
evítEVENT_BITS_CONTROL_BYTES
 ) == 0 );

456 
	`èskENTER_CRITICAL
();

458 
	`åa˚EVENT_GROUP_CLEAR_BITS
–
xEvítGroup
, 
uxBôsToCÀ¨
 );

462 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

465 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToCÀ¨
;

467 
	`èskEXIT_CRITICAL
();

469  
uxRëu∫
;

470 
	}
}

473 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
INCLUDE_xTimîPídFun˘i⁄CÆl
 =1 ) && ( 
c⁄figUSE_TIMERS
 == 1 ) )

475 
Ba£Ty≥_t
 
	$xEvítGroupCÀ¨BôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToCÀ¨
 )

477 
Ba£Ty≥_t
 
xRëu∫
;

479 
	`åa˚EVENT_GROUP_CLEAR_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToCÀ¨
 );

480 
xRëu∫
 = 
	`xTimîPídFun˘i⁄CÆlFromISR
–
vEvítGroupCÀ¨BôsCÆlback
, ( * ) 
xEvítGroup
, ( 
uöt32_t
 ) 
uxBôsToCÀ¨
, 
NULL
 );

482  
xRëu∫
;

483 
	}
}

488 
EvítBôs_t
 
	$xEvítGroupGëBôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
 )

490 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

491 
EvítGroup_t
 *
pxEvítBôs
 = ( EvítGroup_à* ) 
xEvítGroup
;

492 
EvítBôs_t
 
uxRëu∫
;

494 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

496 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

498 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

500  
uxRëu∫
;

501 
	}
}

504 
EvítBôs_t
 
	$xEvítGroupSëBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToSë
 )

506 
Li°Iãm_t
 *
pxLi°Iãm
, *
pxNext
;

507 
Li°Iãm_t
 c⁄° *
pxLi°End
;

508 
Li°_t
 *
pxLi°
;

509 
EvítBôs_t
 
uxBôsToCÀ¨
 = 0, 
uxBôsWaôedF‹
, 
uxC⁄åﬁBôs
;

510 
EvítGroup_t
 *
pxEvítBôs
 = ( EvítGroup_à* ) 
xEvítGroup
;

511 
Ba£Ty≥_t
 
xM©chFound
 = 
pdFALSE
;

515 
	`c⁄figASSERT
–
xEvítGroup
 );

516 
	`c⁄figASSERT
––
uxBôsToSë
 & 
evítEVENT_BITS_CONTROL_BYTES
 ) == 0 );

518 
pxLi°
 = &–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 );

519 
pxLi°End
 = 
	`li°GET_END_MARKER
–
pxLi°
 );

520 
	`vTaskSu•ídAŒ
();

522 
	`åa˚EVENT_GROUP_SET_BITS
–
xEvítGroup
, 
uxBôsToSë
 );

524 
pxLi°Iãm
 = 
	`li°GET_HEAD_ENTRY
–
pxLi°
 );

527 
pxEvítBôs
->
uxEvítBôs
 |
uxBôsToSë
;

530  
pxLi°Iãm
 !
pxLi°End
 )

532 
pxNext
 = 
	`li°GET_NEXT
–
pxLi°Iãm
 );

533 
uxBôsWaôedF‹
 = 
	`li°GET_LIST_ITEM_VALUE
–
pxLi°Iãm
 );

534 
xM©chFound
 = 
pdFALSE
;

537 
uxC⁄åﬁBôs
 = 
uxBôsWaôedF‹
 & 
evítEVENT_BITS_CONTROL_BYTES
;

538 
uxBôsWaôedF‹
 &~
evítEVENT_BITS_CONTROL_BYTES
;

540 if––
uxC⁄åﬁBôs
 & 
evítWAIT_FOR_ALL_BITS
 ) =–
EvítBôs_t
 ) 0 )

543 if––
uxBôsWaôedF‹
 & 
pxEvítBôs
->
uxEvítBôs
 ) !–
EvítBôs_t
 ) 0 )

545 
xM©chFound
 = 
pdTRUE
;

549 
	`mtCOVERAGE_TEST_MARKER
();

552 if––
uxBôsWaôedF‹
 & 
pxEvítBôs
->
uxEvítBôs
 ) == uxBitsWaitedFor )

555 
xM©chFound
 = 
pdTRUE
;

562 if–
xM©chFound
 !
pdFALSE
 )

565 if––
uxC⁄åﬁBôs
 & 
evítCLEAR_EVENTS_ON_EXIT_BIT
 ) !–
EvítBôs_t
 ) 0 )

567 
uxBôsToCÀ¨
 |
uxBôsWaôedF‹
;

571 
	`mtCOVERAGE_TEST_MARKER
();

579 
	`vTaskRemoveFromUn‹dîedEvítLi°
–
pxLi°Iãm
, 
pxEvítBôs
->
uxEvítBôs
 | 
evítUNBLOCKED_DUE_TO_BIT_SET
 );

585 
pxLi°Iãm
 = 
pxNext
;

590 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToCÀ¨
;

592 –Ë
	`xTaskResumeAŒ
();

594  
pxEvítBôs
->
uxEvítBôs
;

595 
	}
}

598 
	$vEvítGroupDñëe
–
EvítGroupH™dÀ_t
 
xEvítGroup
 )

600 
EvítGroup_t
 *
pxEvítBôs
 = ( EvítGroup_à* ) 
xEvítGroup
;

601 c⁄° 
Li°_t
 *
pxTasksWaôögF‹Bôs
 = &–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 );

603 
	`vTaskSu•ídAŒ
();

605 
	`åa˚EVENT_GROUP_DELETE
–
xEvítGroup
 );

607  
	`li°CURRENT_LIST_LENGTH
–
pxTasksWaôögF‹Bôs
 ) > ( 
UBa£Ty≥_t
 ) 0 )

611 
	`c⁄figASSERT
–
pxTasksWaôögF‹Bôs
->
xLi°End
.
pxNext
 !–c⁄° 
Li°Iãm_t
 * ) &(ÖxTasksWaitingForBits->xListEnd ) );

612 
	`vTaskRemoveFromUn‹dîedEvítLi°
–
pxTasksWaôögF‹Bôs
->
xLi°End
.
pxNext
, 
evítUNBLOCKED_DUE_TO_BIT_SET
 );

615 #if––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 0 ) )

619 
	`vP‹tFªe
–
pxEvítBôs
 );

621 #ñif––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

625 if–
pxEvítBôs
->
ucSètiˇŒyAŒoˇãd
 =–
uöt8_t
 ) 
pdFALSE
 )

627 
	`vP‹tFªe
–
pxEvítBôs
 );

631 
	`mtCOVERAGE_TEST_MARKER
();

636 –Ë
	`xTaskResumeAŒ
();

637 
	}
}

642 
	$vEvítGroupSëBôsCÆlback
–*
pvEvítGroup
, c⁄° 
uöt32_t
 
ulBôsToSë
 )

644 –Ë
	`xEvítGroupSëBôs
–
pvEvítGroup
, ( 
EvítBôs_t
 ) 
ulBôsToSë
 );

645 
	}
}

650 
	$vEvítGroupCÀ¨BôsCÆlback
–*
pvEvítGroup
, c⁄° 
uöt32_t
 
ulBôsToCÀ¨
 )

652 –Ë
	`xEvítGroupCÀ¨Bôs
–
pvEvítGroup
, ( 
EvítBôs_t
 ) 
ulBôsToCÀ¨
 );

653 
	}
}

656 
Ba£Ty≥_t
 
	$¥vTe°WaôC⁄dôi⁄
–c⁄° 
EvítBôs_t
 
uxCuºítEvítBôs
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, c⁄° 
Ba£Ty≥_t
 
xWaôF‹AŒBôs
 )

658 
Ba£Ty≥_t
 
xWaôC⁄dôi⁄Më
 = 
pdFALSE
;

660 if–
xWaôF‹AŒBôs
 =
pdFALSE
 )

664 if––
uxCuºítEvítBôs
 & 
uxBôsToWaôF‹
 ) !–
EvítBôs_t
 ) 0 )

666 
xWaôC⁄dôi⁄Më
 = 
pdTRUE
;

670 
	`mtCOVERAGE_TEST_MARKER
();

677 if––
uxCuºítEvítBôs
 & 
uxBôsToWaôF‹
 ) == uxBitsToWaitFor )

679 
xWaôC⁄dôi⁄Më
 = 
pdTRUE
;

683 
	`mtCOVERAGE_TEST_MARKER
();

687  
xWaôC⁄dôi⁄Më
;

688 
	}
}

691 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
INCLUDE_xTimîPídFun˘i⁄CÆl
 =1 ) && ( 
c⁄figUSE_TIMERS
 == 1 ) )

693 
Ba£Ty≥_t
 
	$xEvítGroupSëBôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToSë
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
 )

695 
Ba£Ty≥_t
 
xRëu∫
;

697 
	`åa˚EVENT_GROUP_SET_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToSë
 );

698 
xRëu∫
 = 
	`xTimîPídFun˘i⁄CÆlFromISR
–
vEvítGroupSëBôsCÆlback
, ( * ) 
xEvítGroup
, ( 
uöt32_t
 ) 
uxBôsToSë
, 
pxHighîPri‹ôyTaskWokí
 );

700  
xRëu∫
;

701 
	}
}

706 #i‡(
c⁄figUSE_TRACE_FACILITY
 == 1)

708 
UBa£Ty≥_t
 
	$uxEvítGroupGëNumbî
–* 
xEvítGroup
 )

710 
UBa£Ty≥_t
 
xRëu∫
;

711 
EvítGroup_t
 *
pxEvítBôs
 = ( EvítGroup_à* ) 
xEvítGroup
;

713 if–
xEvítGroup
 =
NULL
 )

715 
xRëu∫
 = 0;

719 
xRëu∫
 = 
pxEvítBôs
->
uxEvítGroupNumbî
;

722  
xRëu∫
;

723 
	}
}

728 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

730 
	$vEvítGroupSëNumbî
–* 
xEvítGroup
, 
UBa£Ty≥_t
 
uxEvítGroupNumbî
 )

732 ––
EvítGroup_t
 * ) 
xEvítGroup
 )->
uxEvítGroupNumbî
 = uxEventGroupNumber;

733 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\FreeRTOS.h

28 #i‚de‡
INC_FREERTOS_H


29 
	#INC_FREERTOS_H


	)

34 
	~<°ddef.h
>

49 
	~<°döt.h
>

51 #ifde‡
__˝lu•lus


56 
	~"FªeRTOSC⁄fig.h
"

59 
	~"¥ojdefs.h
"

62 
	~"p‹èbÀ.h
"

65 #i‚de‡
c⁄figUSE_NEWLIB_REENTRANT


66 
	#c⁄figUSE_NEWLIB_REENTRANT
 0

	)

70 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

71 
	~<ªít.h
>

79 #i‚de‡
c⁄figMINIMAL_STACK_SIZE


80 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figMINIMAL_STACK_SIZE
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
. c⁄figMINIMAL_STACK_SIZE 
deföes
 
the
 
size
 (ö 
w‹ds
Ë
of
Åhê
°ack
 
Æloˇãd
 
to
Åhê
idÀ
 
èsk
. 
Re„r
Åÿthê
demo
 
¥oje˘
 
¥ovided
 
your
 
p‹t
 
a
 
suôabÀ
 
vÆue
.

83 #i‚de‡
c⁄figMAX_PRIORITIES


84 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figMAX_PRIORITIES
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

87 #i‡
c⁄figMAX_PRIORITIES
 < 1

88 #îr‹ 
c⁄figMAX_PRIORITIES
 
mu°
 
be
 
deföed
 
to
 bê
gª©î
 
th™
 
‹
 
equÆ
Åo 1.

91 #i‚de‡
c⁄figUSE_PREEMPTION


92 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_PREEMPTION
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

95 #i‚de‡
c⁄figUSE_IDLE_HOOK


96 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_IDLE_HOOK
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

99 #i‚de‡
c⁄figUSE_TICK_HOOK


100 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_TICK_HOOK
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

103 #i‚de‡
c⁄figUSE_16_BIT_TICKS


104 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_16_BIT_TICKS
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

107 #i‚de‡
c⁄figUSE_CO_ROUTINES


108 
	#c⁄figUSE_CO_ROUTINES
 0

	)

111 #i‚de‡
INCLUDE_vTaskPri‹ôySë


112 
	#INCLUDE_vTaskPri‹ôySë
 0

	)

115 #i‚de‡
INCLUDE_uxTaskPri‹ôyGë


116 
	#INCLUDE_uxTaskPri‹ôyGë
 0

	)

119 #i‚de‡
INCLUDE_vTaskDñëe


120 
	#INCLUDE_vTaskDñëe
 0

	)

123 #i‚de‡
INCLUDE_vTaskSu•íd


124 
	#INCLUDE_vTaskSu•íd
 0

	)

127 #i‚de‡
INCLUDE_vTaskDñayU¡û


128 
	#INCLUDE_vTaskDñayU¡û
 0

	)

131 #i‚de‡
INCLUDE_vTaskDñay


132 
	#INCLUDE_vTaskDñay
 0

	)

135 #i‚de‡
INCLUDE_xTaskGëIdÀTaskH™dÀ


136 
	#INCLUDE_xTaskGëIdÀTaskH™dÀ
 0

	)

139 #i‚de‡
INCLUDE_xTaskAb‹tDñay


140 
	#INCLUDE_xTaskAb‹tDñay
 0

	)

143 #i‚de‡
INCLUDE_xQueueGëMuãxHﬁdî


144 
	#INCLUDE_xQueueGëMuãxHﬁdî
 0

	)

147 #i‚de‡
INCLUDE_xSem≠h‹eGëMuãxHﬁdî


148 
	#INCLUDE_xSem≠h‹eGëMuãxHﬁdî
 
INCLUDE_xQueueGëMuãxHﬁdî


	)

151 #i‚de‡
INCLUDE_xTaskGëH™dÀ


152 
	#INCLUDE_xTaskGëH™dÀ
 0

	)

155 #i‚de‡
INCLUDE_uxTaskGëSèckHighW©îM¨k


156 
	#INCLUDE_uxTaskGëSèckHighW©îM¨k
 0

	)

159 #i‚de‡
INCLUDE_eTaskGëSèã


160 
	#INCLUDE_eTaskGëSèã
 0

	)

163 #i‚de‡
INCLUDE_xTaskResumeFromISR


164 
	#INCLUDE_xTaskResumeFromISR
 1

	)

167 #i‚de‡
INCLUDE_xTimîPídFun˘i⁄CÆl


168 
	#INCLUDE_xTimîPídFun˘i⁄CÆl
 0

	)

171 #i‚de‡
INCLUDE_xTaskGëScheduÀrSèã


172 
	#INCLUDE_xTaskGëScheduÀrSèã
 0

	)

175 #i‚de‡
INCLUDE_xTaskGëCuºítTaskH™dÀ


176 
	#INCLUDE_xTaskGëCuºítTaskH™dÀ
 0

	)

179 #i‡
c⁄figUSE_CO_ROUTINES
 != 0

180 #i‚de‡
c⁄figMAX_CO_ROUTINE_PRIORITIES


181 #îr‹ 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 
mu°
 
be
 
gª©î
 
th™
 
‹
 
equÆ
 
to
 1.

185 #i‚de‡
c⁄figUSE_DAEMON_TASK_STARTUP_HOOK


186 
	#c⁄figUSE_DAEMON_TASK_STARTUP_HOOK
 0

	)

189 #i‚de‡
c⁄figUSE_APPLICATION_TASK_TAG


190 
	#c⁄figUSE_APPLICATION_TASK_TAG
 0

	)

193 #i‚de‡
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS


194 
	#c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 0

	)

197 #i‚de‡
c⁄figUSE_RECURSIVE_MUTEXES


198 
	#c⁄figUSE_RECURSIVE_MUTEXES
 0

	)

201 #i‚de‡
c⁄figUSE_MUTEXES


202 
	#c⁄figUSE_MUTEXES
 0

	)

205 #i‚de‡
c⁄figUSE_TIMERS


206 
	#c⁄figUSE_TIMERS
 0

	)

209 #i‚de‡
c⁄figUSE_COUNTING_SEMAPHORES


210 
	#c⁄figUSE_COUNTING_SEMAPHORES
 0

	)

213 #i‚de‡
c⁄figUSE_ALTERNATIVE_API


214 
	#c⁄figUSE_ALTERNATIVE_API
 0

	)

217 #i‚de‡
p‹tCRITICAL_NESTING_IN_TCB


218 
	#p‹tCRITICAL_NESTING_IN_TCB
 0

	)

221 #i‚de‡
c⁄figMAX_TASK_NAME_LEN


222 
	#c⁄figMAX_TASK_NAME_LEN
 16

	)

225 #i‚de‡
c⁄figIDLE_SHOULD_YIELD


226 
	#c⁄figIDLE_SHOULD_YIELD
 1

	)

229 #i‡
c⁄figMAX_TASK_NAME_LEN
 < 1

230 #îr‹ 
c⁄figMAX_TASK_NAME_LEN
 
mu°
 
be
 
£t
 
to
 
a
 
möimum
 
of
 1 
ö
 
FªeRTOSC⁄fig
.
h


233 #i‚de‡
c⁄figASSERT


234 
	#c⁄figASSERT
–
x
 )

	)

235 
	#c⁄figASSERT_DEFINED
 0

	)

237 
	#c⁄figASSERT_DEFINED
 1

	)

241 #i‡
c⁄figUSE_TIMERS
 == 1

243 #i‚de‡
c⁄figTIMER_TASK_PRIORITY


244 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_TASK_PRIORITY
 
mu°
 
Æso
 
be
 
deföed
.

247 #i‚de‡
c⁄figTIMER_QUEUE_LENGTH


248 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_QUEUE_LENGTH
 
mu°
 
Æso
 
be
 
deföed
.

251 #i‚de‡
c⁄figTIMER_TASK_STACK_DEPTH


252 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_TASK_STACK_DEPTH
 
mu°
 
Æso
 
be
 
deföed
.

257 #i‚de‡
p‹tSET_INTERRUPT_MASK_FROM_ISR


258 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë0

	)

261 #i‚de‡
p‹tCLEAR_INTERRUPT_MASK_FROM_ISR


262 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedSètusVÆue
 ) ( Ë
	)
uxSavedStatusValue

265 #i‚de‡
p‹tCLEAN_UP_TCB


266 
	#p‹tCLEAN_UP_TCB
–
pxTCB
 ) ( Ë
	)
pxTCB

269 #i‚de‡
p‹tPRE_TASK_DELETE_HOOK


270 
	#p‹tPRE_TASK_DELETE_HOOK
–
pvTaskToDñëe
, 
pxYõldPídög
 )

	)

273 #i‚de‡
p‹tSETUP_TCB


274 
	#p‹tSETUP_TCB
–
pxTCB
 ) ( Ë
	)
pxTCB

277 #i‚de‡
c⁄figQUEUE_REGISTRY_SIZE


278 
	#c⁄figQUEUE_REGISTRY_SIZE
 0U

	)

281 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 < 1 )

282 
	#vQueueAddToRegi°ry
–
xQueue
, 
pcName
 )

	)

283 
	#vQueueUƒegi°îQueue
–
xQueue
 )

	)

284 
	#pcQueueGëName
–
xQueue
 )

	)

287 #i‚de‡
p‹tPOINTER_SIZE_TYPE


288 
	#p‹tPOINTER_SIZE_TYPE
 
uöt32_t


	)

292 #i‚de‡
åa˚START


295 
	#åa˚START
()

	)

298 #i‚de‡
åa˚END


301 
	#åa˚END
()

	)

304 #i‚de‡
åa˚TASK_SWITCHED_IN


307 
	#åa˚TASK_SWITCHED_IN
()

	)

310 #i‚de‡
åa˚INCREASE_TICK_COUNT


313 
	#åa˚INCREASE_TICK_COUNT
–
x
 )

	)

316 #i‚de‡
åa˚LOW_POWER_IDLE_BEGIN


318 
	#åa˚LOW_POWER_IDLE_BEGIN
()

	)

321 #i‚def 
åa˚LOW_POWER_IDLE_END


323 
	#åa˚LOW_POWER_IDLE_END
()

	)

326 #i‚de‡
åa˚TASK_SWITCHED_OUT


329 
	#åa˚TASK_SWITCHED_OUT
()

	)

332 #i‚de‡
åa˚TASK_PRIORITY_INHERIT


338 
	#åa˚TASK_PRIORITY_INHERIT
–
pxTCBOfMuãxHﬁdî
, 
uxInhîôedPri‹ôy
 )

	)

341 #i‚de‡
åa˚TASK_PRIORITY_DISINHERIT


346 
	#åa˚TASK_PRIORITY_DISINHERIT
–
pxTCBOfMuãxHﬁdî
, 
uxOrigöÆPri‹ôy
 )

	)

349 #i‚de‡
åa˚BLOCKING_ON_QUEUE_RECEIVE


354 
	#åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 )

	)

357 #i‚de‡
åa˚BLOCKING_ON_QUEUE_PEEK


362 
	#åa˚BLOCKING_ON_QUEUE_PEEK
–
pxQueue
 )

	)

365 #i‚de‡
åa˚BLOCKING_ON_QUEUE_SEND


370 
	#åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 )

	)

373 #i‚de‡
c⁄figCHECK_FOR_STACK_OVERFLOW


374 
	#c⁄figCHECK_FOR_STACK_OVERFLOW
 0

	)

377 #i‚de‡
c⁄figRECORD_STACK_HIGH_ADDRESS


378 
	#c⁄figRECORD_STACK_HIGH_ADDRESS
 0

	)

381 #i‚de‡
c⁄figINCLUDE_FREERTOS_TASK_C_ADDITIONS_H


382 
	#c⁄figINCLUDE_FREERTOS_TASK_C_ADDITIONS_H
 0

	)

387 #i‚de‡
åa˚MOVED_TASK_TO_READY_STATE


388 
	#åa˚MOVED_TASK_TO_READY_STATE
–
pxTCB
 )

	)

391 #i‚de‡
åa˚POST_MOVED_TASK_TO_READY_STATE


392 
	#åa˚POST_MOVED_TASK_TO_READY_STATE
–
pxTCB
 )

	)

395 #i‚de‡
åa˚QUEUE_CREATE


396 
	#åa˚QUEUE_CREATE
–
pxNewQueue
 )

	)

399 #i‚de‡
åa˚QUEUE_CREATE_FAILED


400 
	#åa˚QUEUE_CREATE_FAILED
–
ucQueueTy≥
 )

	)

403 #i‚de‡
åa˚CREATE_MUTEX


404 
	#åa˚CREATE_MUTEX
–
pxNewQueue
 )

	)

407 #i‚de‡
åa˚CREATE_MUTEX_FAILED


408 
	#åa˚CREATE_MUTEX_FAILED
()

	)

411 #i‚de‡
åa˚GIVE_MUTEX_RECURSIVE


412 
	#åa˚GIVE_MUTEX_RECURSIVE
–
pxMuãx
 )

	)

415 #i‚de‡
åa˚GIVE_MUTEX_RECURSIVE_FAILED


416 
	#åa˚GIVE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 )

	)

419 #i‚de‡
åa˚TAKE_MUTEX_RECURSIVE


420 
	#åa˚TAKE_MUTEX_RECURSIVE
–
pxMuãx
 )

	)

423 #i‚de‡
åa˚TAKE_MUTEX_RECURSIVE_FAILED


424 
	#åa˚TAKE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 )

	)

427 #i‚de‡
åa˚CREATE_COUNTING_SEMAPHORE


428 
	#åa˚CREATE_COUNTING_SEMAPHORE
()

	)

431 #i‚de‡
åa˚CREATE_COUNTING_SEMAPHORE_FAILED


432 
	#åa˚CREATE_COUNTING_SEMAPHORE_FAILED
()

	)

435 #i‚de‡
åa˚QUEUE_SEND


436 
	#åa˚QUEUE_SEND
–
pxQueue
 )

	)

439 #i‚de‡
åa˚QUEUE_SEND_FAILED


440 
	#åa˚QUEUE_SEND_FAILED
–
pxQueue
 )

	)

443 #i‚de‡
åa˚QUEUE_RECEIVE


444 
	#åa˚QUEUE_RECEIVE
–
pxQueue
 )

	)

447 #i‚de‡
åa˚QUEUE_PEEK


448 
	#åa˚QUEUE_PEEK
–
pxQueue
 )

	)

451 #i‚de‡
åa˚QUEUE_PEEK_FAILED


452 
	#åa˚QUEUE_PEEK_FAILED
–
pxQueue
 )

	)

455 #i‚de‡
åa˚QUEUE_PEEK_FROM_ISR


456 
	#åa˚QUEUE_PEEK_FROM_ISR
–
pxQueue
 )

	)

459 #i‚de‡
åa˚QUEUE_RECEIVE_FAILED


460 
	#åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 )

	)

463 #i‚de‡
åa˚QUEUE_SEND_FROM_ISR


464 
	#åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 )

	)

467 #i‚de‡
åa˚QUEUE_SEND_FROM_ISR_FAILED


468 
	#åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 )

	)

471 #i‚de‡
åa˚QUEUE_RECEIVE_FROM_ISR


472 
	#åa˚QUEUE_RECEIVE_FROM_ISR
–
pxQueue
 )

	)

475 #i‚de‡
åa˚QUEUE_RECEIVE_FROM_ISR_FAILED


476 
	#åa˚QUEUE_RECEIVE_FROM_ISR_FAILED
–
pxQueue
 )

	)

479 #i‚de‡
åa˚QUEUE_PEEK_FROM_ISR_FAILED


480 
	#åa˚QUEUE_PEEK_FROM_ISR_FAILED
–
pxQueue
 )

	)

483 #i‚de‡
åa˚QUEUE_DELETE


484 
	#åa˚QUEUE_DELETE
–
pxQueue
 )

	)

487 #i‚de‡
åa˚TASK_CREATE


488 
	#åa˚TASK_CREATE
–
pxNewTCB
 )

	)

491 #i‚de‡
åa˚TASK_CREATE_FAILED


492 
	#åa˚TASK_CREATE_FAILED
()

	)

495 #i‚de‡
åa˚TASK_DELETE


496 
	#åa˚TASK_DELETE
–
pxTaskToDñëe
 )

	)

499 #i‚de‡
åa˚TASK_DELAY_UNTIL


500 
	#åa˚TASK_DELAY_UNTIL
–
x
 )

	)

503 #i‚de‡
åa˚TASK_DELAY


504 
	#åa˚TASK_DELAY
()

	)

507 #i‚de‡
åa˚TASK_PRIORITY_SET


508 
	#åa˚TASK_PRIORITY_SET
–
pxTask
, 
uxNewPri‹ôy
 )

	)

511 #i‚de‡
åa˚TASK_SUSPEND


512 
	#åa˚TASK_SUSPEND
–
pxTaskToSu•íd
 )

	)

515 #i‚de‡
åa˚TASK_RESUME


516 
	#åa˚TASK_RESUME
–
pxTaskToResume
 )

	)

519 #i‚de‡
åa˚TASK_RESUME_FROM_ISR


520 
	#åa˚TASK_RESUME_FROM_ISR
–
pxTaskToResume
 )

	)

523 #i‚de‡
åa˚TASK_INCREMENT_TICK


524 
	#åa˚TASK_INCREMENT_TICK
–
xTickCou¡
 )

	)

527 #i‚de‡
åa˚TIMER_CREATE


528 
	#åa˚TIMER_CREATE
–
pxNewTimî
 )

	)

531 #i‚de‡
åa˚TIMER_CREATE_FAILED


532 
	#åa˚TIMER_CREATE_FAILED
()

	)

535 #i‚de‡
åa˚TIMER_COMMAND_SEND


536 
	#åa˚TIMER_COMMAND_SEND
–
xTimî
, 
xMesßgeID
, 
xMesßgeVÆueVÆue
, 
xRëu∫
 )

	)

539 #i‚de‡
åa˚TIMER_EXPIRED


540 
	#åa˚TIMER_EXPIRED
–
pxTimî
 )

	)

543 #i‚de‡
åa˚TIMER_COMMAND_RECEIVED


544 
	#åa˚TIMER_COMMAND_RECEIVED
–
pxTimî
, 
xMesßgeID
, 
xMesßgeVÆue
 )

	)

547 #i‚de‡
åa˚MALLOC


548 
	#åa˚MALLOC
–
pvAddªss
, 
uiSize
 )

	)

551 #i‚de‡
åa˚FREE


552 
	#åa˚FREE
–
pvAddªss
, 
uiSize
 )

	)

555 #i‚de‡
åa˚EVENT_GROUP_CREATE


556 
	#åa˚EVENT_GROUP_CREATE
–
xEvítGroup
 )

	)

559 #i‚de‡
åa˚EVENT_GROUP_CREATE_FAILED


560 
	#åa˚EVENT_GROUP_CREATE_FAILED
()

	)

563 #i‚de‡
åa˚EVENT_GROUP_SYNC_BLOCK


564 
	#åa˚EVENT_GROUP_SYNC_BLOCK
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
 )

	)

567 #i‚de‡
åa˚EVENT_GROUP_SYNC_END


568 
	#åa˚EVENT_GROUP_SYNC_END
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 ) ( Ë
	)
xTimeoutOccurred

571 #i‚de‡
åa˚EVENT_GROUP_WAIT_BITS_BLOCK


572 
	#åa˚EVENT_GROUP_WAIT_BITS_BLOCK
–
xEvítGroup
, 
uxBôsToWaôF‹
 )

	)

575 #i‚de‡
åa˚EVENT_GROUP_WAIT_BITS_END


576 
	#åa˚EVENT_GROUP_WAIT_BITS_END
–
xEvítGroup
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 ) ( Ë
	)
xTimeoutOccurred

579 #i‚de‡
åa˚EVENT_GROUP_CLEAR_BITS


580 
	#åa˚EVENT_GROUP_CLEAR_BITS
–
xEvítGroup
, 
uxBôsToCÀ¨
 )

	)

583 #i‚de‡
åa˚EVENT_GROUP_CLEAR_BITS_FROM_ISR


584 
	#åa˚EVENT_GROUP_CLEAR_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToCÀ¨
 )

	)

587 #i‚de‡
åa˚EVENT_GROUP_SET_BITS


588 
	#åa˚EVENT_GROUP_SET_BITS
–
xEvítGroup
, 
uxBôsToSë
 )

	)

591 #i‚de‡
åa˚EVENT_GROUP_SET_BITS_FROM_ISR


592 
	#åa˚EVENT_GROUP_SET_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToSë
 )

	)

595 #i‚de‡
åa˚EVENT_GROUP_DELETE


596 
	#åa˚EVENT_GROUP_DELETE
–
xEvítGroup
 )

	)

599 #i‚de‡
åa˚PEND_FUNC_CALL


600 
	#åa˚PEND_FUNC_CALL
(
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
ªt
)

	)

603 #i‚de‡
åa˚PEND_FUNC_CALL_FROM_ISR


604 
	#åa˚PEND_FUNC_CALL_FROM_ISR
(
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
ªt
)

	)

607 #i‚de‡
åa˚QUEUE_REGISTRY_ADD


608 
	#åa˚QUEUE_REGISTRY_ADD
(
xQueue
, 
pcQueueName
)

	)

611 #i‚de‡
åa˚TASK_NOTIFY_TAKE_BLOCK


612 
	#åa˚TASK_NOTIFY_TAKE_BLOCK
()

	)

615 #i‚de‡
åa˚TASK_NOTIFY_TAKE


616 
	#åa˚TASK_NOTIFY_TAKE
()

	)

619 #i‚de‡
åa˚TASK_NOTIFY_WAIT_BLOCK


620 
	#åa˚TASK_NOTIFY_WAIT_BLOCK
()

	)

623 #i‚de‡
åa˚TASK_NOTIFY_WAIT


624 
	#åa˚TASK_NOTIFY_WAIT
()

	)

627 #i‚de‡
åa˚TASK_NOTIFY


628 
	#åa˚TASK_NOTIFY
()

	)

631 #i‚de‡
åa˚TASK_NOTIFY_FROM_ISR


632 
	#åa˚TASK_NOTIFY_FROM_ISR
()

	)

635 #i‚de‡
åa˚TASK_NOTIFY_GIVE_FROM_ISR


636 
	#åa˚TASK_NOTIFY_GIVE_FROM_ISR
()

	)

639 #i‚de‡
åa˚STREAM_BUFFER_CREATE_FAILED


640 
	#åa˚STREAM_BUFFER_CREATE_FAILED
–
xIsMesßgeBuf„r
 )

	)

643 #i‚de‡
åa˚STREAM_BUFFER_CREATE_STATIC_FAILED


644 
	#åa˚STREAM_BUFFER_CREATE_STATIC_FAILED
–
xRëu∫
, 
xIsMesßgeBuf„r
 )

	)

647 #i‚de‡
åa˚STREAM_BUFFER_CREATE


648 
	#åa˚STREAM_BUFFER_CREATE
–
pxSåómBuf„r
, 
xIsMesßgeBuf„r
 )

	)

651 #i‚de‡
åa˚STREAM_BUFFER_DELETE


652 
	#åa˚STREAM_BUFFER_DELETE
–
xSåómBuf„r
 )

	)

655 #i‚de‡
åa˚STREAM_BUFFER_RESET


656 
	#åa˚STREAM_BUFFER_RESET
–
xSåómBuf„r
 )

	)

659 #i‚de‡
åa˚BLOCKING_ON_STREAM_BUFFER_SEND


660 
	#åa˚BLOCKING_ON_STREAM_BUFFER_SEND
–
xSåómBuf„r
 )

	)

663 #i‚de‡
åa˚STREAM_BUFFER_SEND


664 
	#åa˚STREAM_BUFFER_SEND
–
xSåómBuf„r
, 
xByãsSít
 )

	)

667 #i‚de‡
åa˚STREAM_BUFFER_SEND_FAILED


668 
	#åa˚STREAM_BUFFER_SEND_FAILED
–
xSåómBuf„r
 )

	)

671 #i‚de‡
åa˚STREAM_BUFFER_SEND_FROM_ISR


672 
	#åa˚STREAM_BUFFER_SEND_FROM_ISR
–
xSåómBuf„r
, 
xByãsSít
 )

	)

675 #i‚de‡
åa˚BLOCKING_ON_STREAM_BUFFER_RECEIVE


676 
	#åa˚BLOCKING_ON_STREAM_BUFFER_RECEIVE
–
xSåómBuf„r
 )

	)

679 #i‚de‡
åa˚STREAM_BUFFER_RECEIVE


680 
	#åa˚STREAM_BUFFER_RECEIVE
–
xSåómBuf„r
, 
xRe˚ivedLígth
 )

	)

683 #i‚de‡
åa˚STREAM_BUFFER_RECEIVE_FAILED


684 
	#åa˚STREAM_BUFFER_RECEIVE_FAILED
–
xSåómBuf„r
 )

	)

687 #i‚de‡
åa˚STREAM_BUFFER_RECEIVE_FROM_ISR


688 
	#åa˚STREAM_BUFFER_RECEIVE_FROM_ISR
–
xSåómBuf„r
, 
xRe˚ivedLígth
 )

	)

691 #i‚de‡
c⁄figGENERATE_RUN_TIME_STATS


692 
	#c⁄figGENERATE_RUN_TIME_STATS
 0

	)

695 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

697 #i‚de‡
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS


698 #îr‹ 
If
 
c⁄figGENERATE_RUN_TIME_STATS
 
is
 
deföed
 
thí
 
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
 
mu°
 
Æso
 
be
 deföed.Ö‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS 
should
 
ˇŒ
 
a
 
p‹t
 
œyî
 
fun˘i⁄
 
to
 
£tup
á 
≥rùhîÆ
 
timî
/
cou¡î
 
th©
 
ˇn
Åhí bê
u£d
 
as
 
the
 
run
 
time
 cou¡îÅimê
ba£
.

701 #i‚de‡
p‹tGET_RUN_TIME_COUNTER_VALUE


702 #i‚de‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


703 #îr‹ 
If
 
c⁄figGENERATE_RUN_TIME_STATS
 
is
 
deföed
 
thí
 
eôhî
 
p‹tGET_RUN_TIME_COUNTER_VALUE
 
‹
 
p‹tALT_GET_RUN_TIME_COUNTER_VALUE
 
mu°
 
Æso
 
be
 deföed. 
Sì
 
the
 
exam∂es
 
¥ovided
 
™d
Åhê
FªeRTOS
 
web
 
sôe
 
m‹e
 
öf‹m©i⁄
.

709 #i‚de‡
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS


710 
	#p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
()

	)

713 #i‚de‡
c⁄figUSE_MALLOC_FAILED_HOOK


714 
	#c⁄figUSE_MALLOC_FAILED_HOOK
 0

	)

717 #i‚de‡
p‹tPRIVILEGE_BIT


718 
	#p‹tPRIVILEGE_BIT
 ( ( 
UBa£Ty≥_t
 ) 0x00 )

	)

721 #i‚de‡
p‹tYIELD_WITHIN_API


722 
	#p‹tYIELD_WITHIN_API
 
p‹tYIELD


	)

725 #i‚de‡
p‹tSUPPRESS_TICKS_AND_SLEEP


726 
	#p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 )

	)

729 #i‚de‡
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP


730 
	#c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 2

	)

733 #i‡
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 < 2

734 #îr‹ 
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 
mu°
 
nŸ
 
be
 
Àss
 
th™
 2

737 #i‚de‡
c⁄figUSE_TICKLESS_IDLE


738 
	#c⁄figUSE_TICKLESS_IDLE
 0

	)

741 #i‚de‡
c⁄figPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING


742 
	#c⁄figPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING
–
x
 )

	)

745 #i‚de‡
c⁄figPRE_SLEEP_PROCESSING


746 
	#c⁄figPRE_SLEEP_PROCESSING
–
x
 )

	)

749 #i‚de‡
c⁄figPOST_SLEEP_PROCESSING


750 
	#c⁄figPOST_SLEEP_PROCESSING
–
x
 )

	)

753 #i‚de‡
c⁄figUSE_QUEUE_SETS


754 
	#c⁄figUSE_QUEUE_SETS
 0

	)

757 #i‚de‡
p‹tTASK_USES_FLOATING_POINT


758 
	#p‹tTASK_USES_FLOATING_POINT
()

	)

761 #i‚de‡
p‹tTASK_CALLS_SECURE_FUNCTIONS


762 
	#p‹tTASK_CALLS_SECURE_FUNCTIONS
()

	)

765 #i‚de‡
c⁄figUSE_TIME_SLICING


766 
	#c⁄figUSE_TIME_SLICING
 1

	)

769 #i‚de‡
c⁄figINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS


770 
	#c⁄figINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS
 0

	)

773 #i‚de‡
c⁄figUSE_STATS_FORMATTING_FUNCTIONS


774 
	#c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 0

	)

777 #i‚de‡
p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID


778 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
()

	)

781 #i‚de‡
c⁄figUSE_TRACE_FACILITY


782 
	#c⁄figUSE_TRACE_FACILITY
 0

	)

785 #i‚de‡
mtCOVERAGE_TEST_MARKER


786 
	#mtCOVERAGE_TEST_MARKER
()

	)

789 #i‚de‡
mtCOVERAGE_TEST_DELAY


790 
	#mtCOVERAGE_TEST_DELAY
()

	)

793 #i‚de‡
p‹tASSERT_IF_IN_ISR


794 
	#p‹tASSERT_IF_IN_ISR
()

	)

797 #i‚de‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION


798 
	#c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 0

	)

801 #i‚de‡
c⁄figAPPLICATION_ALLOCATED_HEAP


802 
	#c⁄figAPPLICATION_ALLOCATED_HEAP
 0

	)

805 #i‚de‡
c⁄figUSE_TASK_NOTIFICATIONS


806 
	#c⁄figUSE_TASK_NOTIFICATIONS
 1

	)

809 #i‚de‡
p‹tTICK_TYPE_IS_ATOMIC


810 
	#p‹tTICK_TYPE_IS_ATOMIC
 0

	)

813 #i‚de‡
c⁄figSUPPORT_STATIC_ALLOCATION


815 
	#c⁄figSUPPORT_STATIC_ALLOCATION
 0

	)

818 #i‚de‡
c⁄figSUPPORT_DYNAMIC_ALLOCATION


820 
	#c⁄figSUPPORT_DYNAMIC_ALLOCATION
 1

	)

823 #i‚de‡
c⁄figSTACK_DEPTH_TYPE


826 
	#c⁄figSTACK_DEPTH_TYPE
 
uöt16_t


	)

830 #if–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

831 #if–
INCLUDE_vTaskSu•íd
 != 1 )

832 #îr‹ 
INCLUDE_vTaskSu•íd
 
mu°
 
be
 
£t
 
to
 1 
c⁄figUSE_TICKLESS_IDLE
 
is
 
nŸ
 setÅo 0

836 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =0 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 0 ) )

837 #îr‹ 
c⁄figSUPPORT_STATIC_ALLOCATION
 
™d
 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 
ˇ¬Ÿ
 
bŸh
 
be
 0, 
but
 
ˇn
 both be 1.

840 #if––
c⁄figUSE_RECURSIVE_MUTEXES
 =1 ) && ( 
c⁄figUSE_MUTEXES
 != 1 ) )

841 #îr‹ 
c⁄figUSE_MUTEXES
 
mu°
 
be
 
£t
 
to
 1Åÿ
u£
 
ªcursive
 
muãxes


844 #i‚de‡
c⁄figINITIAL_TICK_COUNT


845 
	#c⁄figINITIAL_TICK_COUNT
 0

	)

848 #if–
p‹tTICK_TYPE_IS_ATOMIC
 == 0 )

852 
	#p‹tTICK_TYPE_ENTER_CRITICAL
(Ë
	`p‹tENTER_CRITICAL
()

	)

853 
	#p‹tTICK_TYPE_EXIT_CRITICAL
(Ë
	`p‹tEXIT_CRITICAL
()

	)

854 
	#p‹tTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR
(Ë
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
()

	)

855 
	#p‹tTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR
–
x
 ) 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
––x ) )

	)

859 
	#p‹tTICK_TYPE_ENTER_CRITICAL
()

	)

860 
	#p‹tTICK_TYPE_EXIT_CRITICAL
()

	)

861 
	#p‹tTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR
(Ë0

	)

862 
	#p‹tTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR
–
x
 ) ( Ë
	)
x

867 #i‚de‡
c⁄figENABLE_BACKWARD_COMPATIBILITY


868 
	#c⁄figENABLE_BACKWARD_COMPATIBILITY
 1

	)

871 #i‚de‡
c⁄figPRINTF


882 
	#c⁄figPRINTF
–
X
 )

	)

885 #i‚de‡
c⁄figMAX


888 
	#c⁄figMAX
–
a
, 
b
 ) ( ( (á ) > ( b ) ) ? (á ) : ( b ) )

	)

891 #i‚de‡
c⁄figMIN


894 
	#c⁄figMIN
–
a
, 
b
 ) ( ( (á ) < ( b ) ) ? (á ) : ( b ) )

	)

897 #i‡
c⁄figENABLE_BACKWARD_COMPATIBILITY
 == 1

898 
	#eTaskSèãGë
 
eTaskGëSèã


	)

899 
	#p‹tTickTy≥
 
TickTy≥_t


	)

900 
	#xTaskH™dÀ
 
TaskH™dÀ_t


	)

901 
	#xQueueH™dÀ
 
QueueH™dÀ_t


	)

902 
	#xSem≠h‹eH™dÀ
 
Sem≠h‹eH™dÀ_t


	)

903 
	#xQueueSëH™dÀ
 
QueueSëH™dÀ_t


	)

904 
	#xQueueSëMembîH™dÀ
 
QueueSëMembîH™dÀ_t


	)

905 
	#xTimeOutTy≥
 
TimeOut_t


	)

906 
	#xMem‹yRegi⁄
 
Mem‹yRegi⁄_t


	)

907 
	#xTaskP¨amëîs
 
TaskP¨amëîs_t


	)

908 
	#xTaskSètusTy≥
 
TaskSètus_t


	)

909 
	#xTimîH™dÀ
 
TimîH™dÀ_t


	)

910 
	#xCoRoutöeH™dÀ
 
CoRoutöeH™dÀ_t


	)

911 
	#pdTASK_HOOK_CODE
 
TaskHookFun˘i⁄_t


	)

912 
	#p‹tTICK_RATE_MS
 
p‹tTICK_PERIOD_MS


	)

913 
	#pcTaskGëTaskName
 
pcTaskGëName


	)

914 
	#pcTimîGëTimîName
 
pcTimîGëName


	)

915 
	#pcQueueGëQueueName
 
pcQueueGëName


	)

916 
	#vTaskGëTaskInfo
 
vTaskGëInfo


	)

920 
	#tmrTIMER_CALLBACK
 
TimîCÆlbackFun˘i⁄_t


	)

921 
	#pdTASK_CODE
 
TaskFun˘i⁄_t


	)

922 
	#xLi°Iãm
 
Li°Iãm_t


	)

923 
	#xLi°
 
Li°_t


	)

926 #if–
c⁄figUSE_ALTERNATIVE_API
 != 0 )

927 #îr‹ 
The
 
Æã∫©ive
 
API
 
was
 
dïªˇãd
 
some
 
time
 
ago
, 
™d
 wa†
ªmoved
 
ö
 
FªeRTOS
 
V9
.0 0

934 #i‚de‡
c⁄figUSE_TASK_FPU_SUPPORT


935 
	#c⁄figUSE_TASK_FPU_SUPPORT
 1

	)

948 
	sxSTATIC_LIST_ITEM


950 
TickTy≥_t
 
xDummy1
;

951 *
pvDummy2
[ 4 ];

953 
xSTATIC_LIST_ITEM
 
	tSèticLi°Iãm_t
;

956 
	sxSTATIC_MINI_LIST_ITEM


958 
TickTy≥_t
 
xDummy1
;

959 *
pvDummy2
[ 2 ];

961 
xSTATIC_MINI_LIST_ITEM
 
	tSèticMöiLi°Iãm_t
;

964 
	sxSTATIC_LIST


966 
UBa£Ty≥_t
 
uxDummy1
;

967 *
pvDummy2
;

968 
SèticMöiLi°Iãm_t
 
xDummy3
;

969 } 
	tSèticLi°_t
;

984 
	sxSTATIC_TCB


986 *
pxDummy1
;

987 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

988 
xMPU_SETTINGS
 
xDummy2
;

990 
SèticLi°Iãm_t
 
xDummy3
[ 2 ];

991 
UBa£Ty≥_t
 
uxDummy5
;

992 *
pxDummy6
;

993 
uöt8_t
 
ucDummy7
[ 
c⁄figMAX_TASK_NAME_LEN
 ];

994 #i‡––
p‹tSTACK_GROWTH
 > 0 ) || ( 
c⁄figRECORD_STACK_HIGH_ADDRESS
 == 1 ) )

995 *
pxDummy8
;

997 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

998 
UBa£Ty≥_t
 
uxDummy9
;

1000 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1001 
UBa£Ty≥_t
 
uxDummy10
[ 2 ];

1003 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1004 
UBa£Ty≥_t
 
uxDummy12
[ 2 ];

1006 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

1007 *
pxDummy14
;

1009 #if–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 > 0 )

1010 *
pvDummy15
[ 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 ];

1012 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

1013 
uöt32_t
 
ulDummy16
;

1015 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

1016 
_ªít
 
xDummy17
;

1018 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

1019 
uöt32_t
 
ulDummy18
;

1020 
uöt8_t
 
ucDummy19
;

1022 #if–––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) ) || ( 
p‹tUSING_MPU_WRAPPERS
 == 1 ) )

1023 
uöt8_t
 
uxDummy20
;

1026 #if–
INCLUDE_xTaskAb‹tDñay
 == 1 )

1027 
uöt8_t
 
ucDummy21
;

1030 } 
	tSèticTask_t
;

1046 
	sxSTATIC_QUEUE


1048 *
pvDummy1
[ 3 ];

1052 *
pvDummy2
;

1053 
UBa£Ty≥_t
 
uxDummy2
;

1054 } 
u
;

1056 
SèticLi°_t
 
xDummy3
[ 2 ];

1057 
UBa£Ty≥_t
 
uxDummy4
[ 3 ];

1058 
uöt8_t
 
ucDummy5
[ 2 ];

1060 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

1061 
uöt8_t
 
ucDummy6
;

1064 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

1065 *
pvDummy7
;

1068 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1069 
UBa£Ty≥_t
 
uxDummy8
;

1070 
uöt8_t
 
ucDummy9
;

1073 } 
	tSèticQueue_t
;

1074 
SèticQueue_t
 
	tSèticSem≠h‹e_t
;

1090 
	sxSTATIC_EVENT_GROUP


1092 
TickTy≥_t
 
xDummy1
;

1093 
SèticLi°_t
 
xDummy2
;

1095 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1096 
UBa£Ty≥_t
 
uxDummy3
;

1099 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

1100 
uöt8_t
 
ucDummy4
;

1103 } 
	tSèticEvítGroup_t
;

1119 
	sxSTATIC_TIMER


1121 *
pvDummy1
;

1122 
SèticLi°Iãm_t
 
xDummy2
;

1123 
TickTy≥_t
 
xDummy3
;

1124 
UBa£Ty≥_t
 
uxDummy4
;

1125 *
pvDummy5
[ 2 ];

1126 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1127 
UBa£Ty≥_t
 
uxDummy6
;

1130 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

1131 
uöt8_t
 
ucDummy7
;

1134 } 
	tSèticTimî_t
;

1150 
	sxSTATIC_STREAM_BUFFER


1152 
size_t
 
uxDummy1
[ 4 ];

1153 * 
pvDummy2
[ 3 ];

1154 
uöt8_t
 
ucDummy3
;

1155 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1156 
UBa£Ty≥_t
 
uxDummy4
;

1158 } 
	tSèticSåómBuf„r_t
;

1161 
SèticSåómBuf„r_t
 
	tSèticMesßgeBuf„r_t
;

1163 #ifde‡
__˝lu•lus


	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\StackMacros.h

28 #i‚de‡
STACK_MACROS_H


29 
	#STACK_MACROS_H


	)

31 #i‚de‡
_MSC_VER


32 #w¨nög 
The
 
«me
 
of
 
this
 
fûe
 
has
 
ch™ged
 
to
 
°ack_ma¸os
.
h
. 
PÀa£
 
upd©e
 
your
 
code
 
acc‹dögly
. 
This
 
sour˚
 fûê(
which
 ha†
the
 
‹igöÆ
ÇameË
wûl
 
be
 
ªmoved
 
ö
 
futuª
 
ªÀa£d
.

51 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 =1 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

54 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

57 if–
pxCuºítTCB
->
pxT›OfSèck
 <pxCuºítTCB->
pxSèck
 ) \

59 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

61 }

	)

66 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 =1 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

69 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

73 if–
pxCuºítTCB
->
pxT›OfSèck
 >pxCuºítTCB->
pxEndOfSèck
 ) \

75 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

77 }

	)

82 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

84 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

86 c⁄° 
uöt32_t
 * c⁄° 
pulSèck
 = ( uöt32_à* ) 
pxCuºítTCB
->
pxSèck
; \

87 c⁄° 
uöt32_t
 
ulCheckVÆue
 = ( uint32_t ) 0xa5a5a5a5; \

89 if––
pulSèck
[ 0 ] !
ulCheckVÆue
 ) || \

90 –
pulSèck
[ 1 ] !
ulCheckVÆue
 ) || \

91 –
pulSèck
[ 2 ] !
ulCheckVÆue
 ) || \

92 –
pulSèck
[ 3 ] !
ulCheckVÆue
 ) ) \

94 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

96 }

	)

101 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

103 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

105 
öt8_t
 *
pcEndOfSèck
 = ( i¡8_à* ) 
pxCuºítTCB
->
pxEndOfSèck
; \

106 c⁄° 
uöt8_t
 
ucEx≥˘edSèckByãs
[] = { 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

107 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

108 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

109 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

110 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE }; \

113 
pcEndOfSèck
 -–
ucEx≥˘edSèckByãs
 ); \

116 if–
	`memcmp
––* ) 
pcEndOfSèck
, ( * ) 
ucEx≥˘edSèckByãs
, ( ucExpectedStackBytes ) ) != 0 ) \

118 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

120 }

	)

126 #i‚de‡
èskCHECK_FOR_STACK_OVERFLOW


127 
	#èskCHECK_FOR_STACK_OVERFLOW
()

	)

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\croutine.h

28 #i‚de‡
CO_ROUTINE_H


29 
	#CO_ROUTINE_H


	)

31 #i‚de‡
INC_FREERTOS_H


35 
	~"li°.h
"

37 #ifde‡
__˝lu•lus


44 * 
	tCoRoutöeH™dÀ_t
;

47 (*
¸COROUTINE_CODE
)–
	tCoRoutöeH™dÀ_t
, 
	tUBa£Ty≥_t
 );

49 
	sc‹CoRoutöeC⁄åﬁBlock


51 
¸COROUTINE_CODE
 
pxCoRoutöeFun˘i⁄
;

52 
Li°Iãm_t
 
xGíîicLi°Iãm
;

53 
Li°Iãm_t
 
xEvítLi°Iãm
;

54 
UBa£Ty≥_t
 
uxPri‹ôy
;

55 
UBa£Ty≥_t
 
uxIndex
;

56 
uöt16_t
 
uxSèã
;

57 } 
	tCRCB_t
;

131 
Ba£Ty≥_t
 
xCoRoutöeCª©e
–
¸COROUTINE_CODE
 
pxCoRoutöeCode
, 
UBa£Ty≥_t
 
uxPri‹ôy
, UBa£Ty≥_à
uxIndex
 );

173 
vCoRoutöeScheduÀ
( );

204 
	#¸START
–
pxCRCB
 )  ( ( 
CRCB_t
 * )–pxCRCB ) )->
uxSèã
 ) { 0:

	)

235 
	#¸END
(Ë}

	)

241 
	#¸SET_STATE0
–
xH™dÀ
 ) ( ( 
CRCB_t
 * )–xH™dÀ ) )->
uxSèã
 = (
__LINE__
 * 2); ; (__LINE__ * 2):

	)

242 
	#¸SET_STATE1
–
xH™dÀ
 ) ( ( 
CRCB_t
 * )–xH™dÀ ) )->
uxSèã
 = ((
__LINE__
 * 2)+1); ; ((__LINE__ * 2)+1):

	)

290 
	#¸DELAY
–
xH™dÀ
, 
xTicksToDñay
 ) \

291 if––
xTicksToDñay
 ) > 0 ) \

293 
	`vCoRoutöeAddToDñayedLi°
––
xTicksToDñay
 ), 
NULL
 ); \

295 
	`¸SET_STATE0
––
xH™dÀ
 ) );

	)

380 
	#¸QUEUE_SEND
–
xH™dÀ
, 
pxQueue
, 
pvIãmToQueue
, 
xTicksToWaô
, 
pxResu…
 ) \

382 *–
pxResu…
 ) = 
	`xQueueCRSíd
––
pxQueue
Ë, ( 
pvIãmToQueue
Ë, ( 
xTicksToWaô
 ) ); \

383 if–*–
pxResu…
 ) =
îrQUEUE_BLOCKED
 ) \

385 
	`¸SET_STATE0
––
xH™dÀ
 ) ); \

386 *
pxResu…
 = 
	`xQueueCRSíd
––
pxQueue
 ), ( 
pvIãmToQueue
 ), 0 ); \

388 if–*
pxResu…
 =
îrQUEUE_YIELD
 ) \

390 
	`¸SET_STATE1
––
xH™dÀ
 ) ); \

391 *
pxResu…
 = 
pdPASS
; \

393 }

	)

472 
	#¸QUEUE_RECEIVE
–
xH™dÀ
, 
pxQueue
, 
pvBuf„r
, 
xTicksToWaô
, 
pxResu…
 ) \

474 *–
pxResu…
 ) = 
	`xQueueCRRe˚ive
––
pxQueue
Ë, ( 
pvBuf„r
 ), ( 
xTicksToWaô
 ) ); \

475 if–*–
pxResu…
 ) =
îrQUEUE_BLOCKED
 ) \

477 
	`¸SET_STATE0
––
xH™dÀ
 ) ); \

478 *–
pxResu…
 ) = 
	`xQueueCRRe˚ive
––
pxQueue
Ë, ( 
pvBuf„r
 ), 0 ); \

480 if–*–
pxResu…
 ) =
îrQUEUE_YIELD
 ) \

482 
	`¸SET_STATE1
––
xH™dÀ
 ) ); \

483 *–
pxResu…
 ) = 
pdPASS
; \

485 }

	)

581 
	#¸QUEUE_SEND_FROM_ISR
–
pxQueue
, 
pvIãmToQueue
, 
xCoRoutöePªviou¶yWokí
 ) 
	`xQueueCRSídFromISR
––pxQueuê), (ÖvIãmToQueuê), ( xCoRoutöePªviou¶yWokí ) )

	)

694 
	#¸QUEUE_RECEIVE_FROM_ISR
–
pxQueue
, 
pvBuf„r
, 
pxCoRoutöeWokí
 ) 
	`xQueueCRRe˚iveFromISR
––pxQueuê), (ÖvBuf„∏), (ÖxCoRoutöeWokí ) )

	)

705 
vCoRoutöeAddToDñayedLi°
–
TickTy≥_t
 
xTicksToDñay
, 
Li°_t
 *
pxEvítLi°
 );

714 
Ba£Ty≥_t
 
xCoRoutöeRemoveFromEvítLi°
–c⁄° 
Li°_t
 *
pxEvítLi°
 );

716 #ifde‡
__˝lu•lus


	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\deprecated_definitions.h

28 #i‚de‡
DEPRECATED_DEFINITIONS_H


29 
	#DEPRECATED_DEFINITIONS_H


	)

41 #ifde‡
OPEN_WATCOM_INDUSTRIAL_PC_PORT


42 
	~"..\..\Sour˚\p‹èbÀ\ow©com\16bôdos\pc\p‹tma¸o.h
"

43 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

46 #ifde‡
OPEN_WATCOM_FLASH_LITE_186_PORT


47 
	~"..\..\Sour˚\p‹èbÀ\ow©com\16bôdos\Êsh186\p‹tma¸o.h
"

48 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

51 #ifde‡
GCC_MEGA_AVR


52 
	~"../p‹èbÀ/GCC/ATMega323/p‹tma¸o.h
"

55 #ifde‡
IAR_MEGA_AVR


56 
	~"../p‹èbÀ/IAR/ATMega323/p‹tma¸o.h
"

59 #ifde‡
MPLAB_PIC24_PORT


60 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC24_dsPIC/p‹tma¸o.h
"

63 #ifde‡
MPLAB_DSPIC_PORT


64 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC24_dsPIC/p‹tma¸o.h
"

67 #ifde‡
MPLAB_PIC18F_PORT


68 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC18F/p‹tma¸o.h
"

71 #ifde‡
MPLAB_PIC32MX_PORT


72 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC32MX/p‹tma¸o.h
"

75 #ifde‡
_FEDPICC


76 
	~"libFªeRTOS/In˛ude/p‹tma¸o.h
"

79 #ifde‡
SDCC_CYGNAL


80 
	~"../../Sour˚/p‹èbÀ/SDCC/Cyg«l/p‹tma¸o.h
"

83 #ifde‡
GCC_ARM7


84 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_LPC2000/p‹tma¸o.h
"

87 #ifde‡
GCC_ARM7_ECLIPSE


88 
	~"p‹tma¸o.h
"

91 #ifde‡
ROWLEY_LPC23xx


92 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_LPC23xx/p‹tma¸o.h
"

95 #ifde‡
IAR_MSP430


96 
	~"..\..\Sour˚\p‹èbÀ\IAR\MSP430\p‹tma¸o.h
"

99 #ifde‡
GCC_MSP430


100 
	~"../../Sour˚/p‹èbÀ/GCC/MSP430F449/p‹tma¸o.h
"

103 #ifde‡
ROWLEY_MSP430


104 
	~"../../Sour˚/p‹èbÀ/RowÀy/MSP430F449/p‹tma¸o.h
"

107 #ifde‡
ARM7_LPC21xx_KEIL_RVDS


108 
	~"..\..\Sour˚\p‹èbÀ\RVDS\ARM7_LPC21xx\p‹tma¸o.h
"

111 #ifde‡
SAM7_GCC


112 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_AT91SAM7S/p‹tma¸o.h
"

115 #ifde‡
SAM7_IAR


116 
	~"..\..\Sour˚\p‹èbÀ\IAR\AtmñSAM7S64\p‹tma¸o.h
"

119 #ifde‡
SAM9XE_IAR


120 
	~"..\..\Sour˚\p‹èbÀ\IAR\AtmñSAM9XE\p‹tma¸o.h
"

123 #ifde‡
LPC2000_IAR


124 
	~"..\..\Sour˚\p‹èbÀ\IAR\LPC2000\p‹tma¸o.h
"

127 #ifde‡
STR71X_IAR


128 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR71x\p‹tma¸o.h
"

131 #ifde‡
STR75X_IAR


132 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR75x\p‹tma¸o.h
"

135 #ifde‡
STR75X_GCC


136 
	~"..\..\Sour˚\p‹èbÀ\GCC\STR75x\p‹tma¸o.h
"

139 #ifde‡
STR91X_IAR


140 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR91x\p‹tma¸o.h
"

143 #ifde‡
GCC_H8S


144 
	~"../../Sour˚/p‹èbÀ/GCC/H8S2329/p‹tma¸o.h
"

147 #ifde‡
GCC_AT91FR40008


148 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_AT91FR40008/p‹tma¸o.h
"

151 #ifde‡
RVDS_ARMCM3_LM3S102


152 
	~"../../Sour˚/p‹èbÀ/RVDS/ARM_CM3/p‹tma¸o.h
"

155 #ifde‡
GCC_ARMCM3_LM3S102


156 
	~"../../Sour˚/p‹èbÀ/GCC/ARM_CM3/p‹tma¸o.h
"

159 #ifde‡
GCC_ARMCM3


160 
	~"../../Sour˚/p‹èbÀ/GCC/ARM_CM3/p‹tma¸o.h
"

163 #ifde‡
IAR_ARM_CM3


164 
	~"../../Sour˚/p‹èbÀ/IAR/ARM_CM3/p‹tma¸o.h
"

167 #ifde‡
IAR_ARMCM3_LM


168 
	~"../../Sour˚/p‹èbÀ/IAR/ARM_CM3/p‹tma¸o.h
"

171 #ifde‡
HCS12_CODE_WARRIOR


172 
	~"../../Sour˚/p‹èbÀ/CodeW¨ri‹/HCS12/p‹tma¸o.h
"

175 #ifde‡
MICROBLAZE_GCC


176 
	~"../../Sour˚/p‹èbÀ/GCC/Mi¸oBœze/p‹tma¸o.h
"

179 #ifde‡
TERN_EE


180 
	~"..\..\Sour˚\p‹èbÀ\P¨adigm\Tîn_EE\smÆl\p‹tma¸o.h
"

183 #ifde‡
GCC_HCS12


184 
	~"../../Sour˚/p‹èbÀ/GCC/HCS12/p‹tma¸o.h
"

187 #ifde‡
GCC_MCF5235


188 
	~"../../Sour˚/p‹èbÀ/GCC/MCF5235/p‹tma¸o.h
"

191 #ifde‡
COLDFIRE_V2_GCC


192 
	~"../../../Sour˚/p‹èbÀ/GCC/CﬁdFúe_V2/p‹tma¸o.h
"

195 #ifde‡
COLDFIRE_V2_CODEWARRIOR


196 
	~"../../Sour˚/p‹èbÀ/CodeW¨ri‹/CﬁdFúe_V2/p‹tma¸o.h
"

199 #ifde‡
GCC_PPC405


200 
	~"../../Sour˚/p‹èbÀ/GCC/PPC405_Xûöx/p‹tma¸o.h
"

203 #ifde‡
GCC_PPC440


204 
	~"../../Sour˚/p‹èbÀ/GCC/PPC440_Xûöx/p‹tma¸o.h
"

207 #ifde‡
_16FX_SOFTUNE


208 
	~"..\..\Sour˚\p‹èbÀ\So·u√\MB96340\p‹tma¸o.h
"

211 #ifde‡
BCC_INDUSTRIAL_PC_PORT


214 
	~"‰c⁄fig.h
"

215 
	~"..\p‹èbÀ\BCC\16BôDOS\PC\¥tma¸o.h
"

216 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

219 #ifde‡
BCC_FLASH_LITE_186_PORT


222 
	~"‰c⁄fig.h
"

223 
	~"..\p‹èbÀ\BCC\16BôDOS\Êsh186\¥tma¸o.h
"

224 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

227 #ifde‡
__GNUC__


228 #ifde‡
__AVR32_AVR32A__


229 
	~"p‹tma¸o.h
"

233 #ifde‡
__ICCAVR32__


234 #ifde‡
__CORE__


235 #i‡
__CORE__
 =
__AVR32A__


236 
	~"p‹tma¸o.h
"

241 #ifde‡
__91467D


242 
	~"p‹tma¸o.h
"

245 #ifde‡
__96340


246 
	~"p‹tma¸o.h
"

250 #ifde‡
__IAR_V850ES_Fx3__


251 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

254 #ifde‡
__IAR_V850ES_Jx3__


255 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

258 #ifde‡
__IAR_V850ES_Jx3_L__


259 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

262 #ifde‡
__IAR_V850ES_Jx2__


263 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

266 #ifde‡
__IAR_V850ES_Hx2__


267 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

270 #ifde‡
__IAR_78K0R_Kx3__


271 
	~"../../Sour˚/p‹èbÀ/IAR/78K0R/p‹tma¸o.h
"

274 #ifde‡
__IAR_78K0R_Kx3L__


275 
	~"../../Sour˚/p‹èbÀ/IAR/78K0R/p‹tma¸o.h
"

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\event_groups.h

28 #i‚de‡
EVENT_GROUPS_H


29 
	#EVENT_GROUPS_H


	)

31 #i‚de‡
INC_FREERTOS_H


32 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "includeÉvent_groups.h"

36 
	~"timîs.h
"

38 #ifde‡
__˝lu•lus


81 * 
	tEvítGroupH™dÀ_t
;

91 
TickTy≥_t
 
	tEvítBôs_t
;

145 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

146 
EvítGroupH™dÀ_t
 
xEvítGroupCª©e
–Ë
PRIVILEGED_FUNCTION
;

198 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

199 
EvítGroupH™dÀ_t
 
xEvítGroupCª©eSètic
–
SèticEvítGroup_t
 *
pxEvítGroupBuf„r
 ) 
PRIVILEGED_FUNCTION
;

294 
EvítBôs_t
 
xEvítGroupWaôBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, c⁄° 
Ba£Ty≥_t
 
xCÀ¨OnExô
, c⁄° Ba£Ty≥_à
xWaôF‹AŒBôs
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

351 
EvítBôs_t
 
xEvítGroupCÀ¨Bôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToCÀ¨
 ) 
PRIVILEGED_FUNCTION
;

406 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

407 
Ba£Ty≥_t
 
xEvítGroupCÀ¨BôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToSë
 ) 
PRIVILEGED_FUNCTION
;

409 
	#xEvítGroupCÀ¨BôsFromISR
–
xEvítGroup
, 
uxBôsToCÀ¨
 ) 
	`xTimîPídFun˘i⁄CÆlFromISR
–
vEvítGroupCÀ¨BôsCÆlback
, ( * ) xEvítGroup, ( 
uöt32_t
 ) uxBôsToCÀ¨, 
NULL
 )

	)

484 
EvítBôs_t
 
xEvítGroupSëBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToSë
 ) 
PRIVILEGED_FUNCTION
;

558 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

559 
Ba£Ty≥_t
 
xEvítGroupSëBôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToSë
, Ba£Ty≥_à*
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

561 
	#xEvítGroupSëBôsFromISR
–
xEvítGroup
, 
uxBôsToSë
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîPídFun˘i⁄CÆlFromISR
–
vEvítGroupSëBôsCÆlback
, ( * ) xEvítGroup, ( 
uöt32_t
 ) uxBôsToSë,ÖxHighîPri‹ôyTaskWokí )

	)

688 
EvítBôs_t
 
xEvítGroupSync
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToSë
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

707 
	#xEvítGroupGëBôs
–
xEvítGroup
 ) 
	`xEvítGroupCÀ¨Bôs
–xEvítGroup, 0 )

	)

724 
EvítBôs_t
 
xEvítGroupGëBôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
 ) 
PRIVILEGED_FUNCTION
;

738 
vEvítGroupDñëe
–
EvítGroupH™dÀ_t
 
xEvítGroup
 ) 
PRIVILEGED_FUNCTION
;

741 
vEvítGroupSëBôsCÆlback
–*
pvEvítGroup
, c⁄° 
uöt32_t
 
ulBôsToSë
 ) 
PRIVILEGED_FUNCTION
;

742 
vEvítGroupCÀ¨BôsCÆlback
–*
pvEvítGroup
, c⁄° 
uöt32_t
 
ulBôsToCÀ¨
 ) 
PRIVILEGED_FUNCTION
;

745 #i‡(
c⁄figUSE_TRACE_FACILITY
 == 1)

746 
UBa£Ty≥_t
 
uxEvítGroupGëNumbî
–* 
xEvítGroup
 ) 
PRIVILEGED_FUNCTION
;

747 
vEvítGroupSëNumbî
–* 
xEvítGroup
, 
UBa£Ty≥_t
 
uxEvítGroupNumbî
 ) 
PRIVILEGED_FUNCTION
;

750 #ifde‡
__˝lu•lus


	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\list.h

56 #i‚de‡
INC_FREERTOS_H


57 #îr‹ 
FªeRTOS
.
h
 
mu°
 
be
 
ö˛uded
 
bef‹e
 
li°
.h

60 #i‚de‡
LIST_H


61 
	#LIST_H


	)

91 #i‚de‡
c⁄figLIST_VOLATILE


92 
	#c⁄figLIST_VOLATILE


	)

95 #ifde‡
__˝lu•lus


104 #if–
c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
 == 0 )

106 
	#li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE


	)

107 
	#li°SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE


	)

108 
	#li°FIRST_LIST_INTEGRITY_CHECK_VALUE


	)

109 
	#li°SECOND_LIST_INTEGRITY_CHECK_VALUE


	)

110 
	#li°SET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 )

	)

111 
	#li°SET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 )

	)

112 
	#li°SET_LIST_INTEGRITY_CHECK_1_VALUE
–
pxLi°
 )

	)

113 
	#li°SET_LIST_INTEGRITY_CHECK_2_VALUE
–
pxLi°
 )

	)

114 
	#li°TEST_LIST_ITEM_INTEGRITY
–
pxIãm
 )

	)

115 
	#li°TEST_LIST_INTEGRITY
–
pxLi°
 )

	)

118 
	#li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°IãmI¡egrôyVÆue1
;

	)

119 
	#li°SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°IãmI¡egrôyVÆue2
;

	)

120 
	#li°FIRST_LIST_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°I¡egrôyVÆue1
;

	)

121 
	#li°SECOND_LIST_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°I¡egrôyVÆue2
;

	)

124 
	#li°SET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 ) (ÖxIãm )->
xLi°IãmI¡egrôyVÆue1
 = 
pdINTEGRITY_CHECK_VALUE


	)

125 
	#li°SET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 ) (ÖxIãm )->
xLi°IãmI¡egrôyVÆue2
 = 
pdINTEGRITY_CHECK_VALUE


	)

126 
	#li°SET_LIST_INTEGRITY_CHECK_1_VALUE
–
pxLi°
 ) (ÖxLi° )->
xLi°I¡egrôyVÆue1
 = 
pdINTEGRITY_CHECK_VALUE


	)

127 
	#li°SET_LIST_INTEGRITY_CHECK_2_VALUE
–
pxLi°
 ) (ÖxLi° )->
xLi°I¡egrôyVÆue2
 = 
pdINTEGRITY_CHECK_VALUE


	)

131 
	#li°TEST_LIST_ITEM_INTEGRITY
–
pxIãm
 ) 
	`c⁄figASSERT
–––pxIãm )->
xLi°IãmI¡egrôyVÆue1
 =
pdINTEGRITY_CHECK_VALUE
 ) && ( (ÖxIãm )->
xLi°IãmI¡egrôyVÆue2
 =pdINTEGRITY_CHECK_VALUE ) )

	)

132 
	#li°TEST_LIST_INTEGRITY
–
pxLi°
 ) 
	`c⁄figASSERT
–––pxLi° )->
xLi°I¡egrôyVÆue1
 =
pdINTEGRITY_CHECK_VALUE
 ) && ( (ÖxLi° )->
xLi°I¡egrôyVÆue2
 =pdINTEGRITY_CHECK_VALUE ) )

	)

139 
	sxLIST_ITEM


141 
li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE


142 
c⁄figLIST_VOLATILE
 
TickTy≥_t
 
	gxIãmVÆue
;

143 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
	gpxNext
;

144 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
	gpxPªvious
;

145 * 
	gpvOw√r
;

146 * 
c⁄figLIST_VOLATILE
 
	gpvC⁄èöî
;

147 
	gli°SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE


149 
xLIST_ITEM
 
	tLi°Iãm_t
;

151 
	sxMINI_LIST_ITEM


153 
li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE


154 
c⁄figLIST_VOLATILE
 
TickTy≥_t
 
	gxIãmVÆue
;

155 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
	gpxNext
;

156 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
	gpxPªvious
;

158 
xMINI_LIST_ITEM
 
	tMöiLi°Iãm_t
;

163 
	sxLIST


165 
li°FIRST_LIST_INTEGRITY_CHECK_VALUE


166 vﬁ©ûê
UBa£Ty≥_t
 
	guxNumbîOfIãms
;

167 
Li°Iãm_t
 * 
c⁄figLIST_VOLATILE
 
	gpxIndex
;

168 
MöiLi°Iãm_t
 
	gxLi°End
;

169 
	gli°SECOND_LIST_INTEGRITY_CHECK_VALUE


170 } 
	tLi°_t
;

179 
	#li°SET_LIST_ITEM_OWNER
–
pxLi°Iãm
, 
pxOw√r
 ) ( (ÖxLi°Iãm )->
pvOw√r
 = ( * ) (ÖxOw√∏Ë)

	)

188 
	#li°GET_LIST_ITEM_OWNER
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pvOw√r
 )

	)

197 
	#li°SET_LIST_ITEM_VALUE
–
pxLi°Iãm
, 
xVÆue
 ) ( (ÖxLi°Iãm )->
xIãmVÆue
 = ( xVÆuêË)

	)

207 
	#li°GET_LIST_ITEM_VALUE
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
xIãmVÆue
 )

	)

216 
	#li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxLi°
 ) ( ( (ÖxLi° )->
xLi°End
 ).
pxNext
->
xIãmVÆue
 )

	)

224 
	#li°GET_HEAD_ENTRY
–
pxLi°
 ) ( ( (ÖxLi° )->
xLi°End
 ).
pxNext
 )

	)

232 
	#li°GET_NEXT
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pxNext
 )

	)

240 
	#li°GET_END_MARKER
–
pxLi°
 ) ( ( 
Li°Iãm_t
 c⁄° * ) ( &––pxLi° )->
xLi°End
 ) ) )

	)

249 
	#li°LIST_IS_EMPTY
–
pxLi°
 ) ( ( 
Ba£Ty≥_t
 ) ( (ÖxLi° )->
uxNumbîOfIãms
 =–
UBa£Ty≥_t
 ) 0 ) )

	)

254 
	#li°CURRENT_LIST_LENGTH
–
pxLi°
 ) ( (ÖxLi° )->
uxNumbîOfIãms
 )

	)

276 
	#li°GET_OWNER_OF_NEXT_ENTRY
–
pxTCB
, 
pxLi°
 ) \

278 
Li°_t
 * c⁄° 
pxC⁄°Li°
 = ( 
pxLi°
 ); \

281 –
pxC⁄°Li°
 )->
pxIndex
 = (ÖxC⁄°Li° )->pxIndex->
pxNext
; \

282 if––* ) ( 
pxC⁄°Li°
 )->
pxIndex
 =–* ) &––pxC⁄°Li° )->
xLi°End
 ) ) \

284 –
pxC⁄°Li°
 )->
pxIndex
 = (ÖxC⁄°Li° )->pxIndex->
pxNext
; \

286 –
pxTCB
 ) = ( 
pxC⁄°Li°
 )->
pxIndex
->
pvOw√r
; \

287 }

	)

306 
	#li°GET_OWNER_OF_HEAD_ENTRY
–
pxLi°
 ) ( (&––pxLi° )->
xLi°End
 ))->
pxNext
->
pvOw√r
 )

	)

317 
	#li°IS_CONTAINED_WITHIN
–
pxLi°
, 
pxLi°Iãm
 ) ( ( 
Ba£Ty≥_t
 ) ( (ÖxLi°Iãm )->
pvC⁄èöî
 =–* ) (ÖxLi° ) ) )

	)

325 
	#li°LIST_ITEM_CONTAINER
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pvC⁄èöî
 )

	)

332 
	#li°LIST_IS_INITIALISED
–
pxLi°
 ) ( (ÖxLi° )->
xLi°End
.
xIãmVÆue
 =
p‹tMAX_DELAY
 )

	)

344 
vLi°Inôüli£
–
Li°_t
 * c⁄° 
pxLi°
 ) 
	gPRIVILEGED_FUNCTION
;

355 
vLi°Inôüli£Iãm
–
Li°Iãm_t
 * c⁄° 
pxIãm
 ) 
	gPRIVILEGED_FUNCTION
;

368 
vLi°In£π
–
Li°_t
 * c⁄° 
pxLi°
, 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 ) 
	gPRIVILEGED_FUNCTION
;

389 
vLi°In£πEnd
–
Li°_t
 * c⁄° 
pxLi°
, 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 ) 
	gPRIVILEGED_FUNCTION
;

404 
UBa£Ty≥_t
 
uxLi°Remove
–
Li°Iãm_t
 * c⁄° 
pxIãmToRemove
 ) 
	gPRIVILEGED_FUNCTION
;

406 #ifde‡
__˝lu•lus


	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\message_buffer.h

62 #i‚de‡
FREERTOS_MESSAGE_BUFFER_H


63 
	#FREERTOS_MESSAGE_BUFFER_H


	)

66 
	~"°ªam_buf„r.h
"

68 #i‡
deföed
–
__˝lu•lus
 )

78 * 
	tMesßgeBuf„rH™dÀ_t
;

138 
	#xMesßgeBuf„rCª©e
–
xBuf„rSizeByãs
 ) ( 
MesßgeBuf„rH™dÀ_t
 ) 
	`xSåómBuf„rGíîicCª©e
–xBuf„rSizeByãs, ( 
size_t
 ) 0, 
pdTRUE
 )

	)

204 
	#xMesßgeBuf„rCª©eSètic
–
xBuf„rSizeByãs
, 
pucMesßgeBuf„rSt‹ageAªa
, 
pxSèticMesßgeBuf„r
 ) ( 
MesßgeBuf„rH™dÀ_t
 ) 
	`xSåómBuf„rGíîicCª©eSètic
–xBuf„rSizeByãs, 0, 
pdTRUE
,ÖucMesßgeBuf„rSt‹ageAªa,ÖxSèticMesßgeBuf„∏)

	)

303 
	#xMesßgeBuf„rSíd
–
xMesßgeBuf„r
, 
pvTxD©a
, 
xD©aLígthByãs
, 
xTicksToWaô
 ) 
	`xSåómBuf„rSíd
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„r,ÖvTxD©a, xD©aLígthByãs, xTicksToWaô )

	)

407 
	#xMesßgeBuf„rSídFromISR
–
xMesßgeBuf„r
, 
pvTxD©a
, 
xD©aLígthByãs
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xSåómBuf„rSídFromISR
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„r,ÖvTxD©a, xD©aLígthByãs,ÖxHighîPri‹ôyTaskWokí )

	)

495 
	#xMesßgeBuf„rRe˚ive
–
xMesßgeBuf„r
, 
pvRxD©a
, 
xBuf„rLígthByãs
, 
xTicksToWaô
 ) 
	`xSåómBuf„rRe˚ive
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„r,ÖvRxD©a, xBuf„rLígthByãs, xTicksToWaô )

	)

596 
	#xMesßgeBuf„rRe˚iveFromISR
–
xMesßgeBuf„r
, 
pvRxD©a
, 
xBuf„rLígthByãs
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xSåómBuf„rRe˚iveFromISR
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„r,ÖvRxD©a, xBuf„rLígthByãs,ÖxHighîPri‹ôyTaskWokí )

	)

616 
	#vMesßgeBuf„rDñëe
–
xMesßgeBuf„r
 ) 
	`vSåómBuf„rDñëe
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„∏)

	)

633 
	#xMesßgeBuf„rIsFuŒ
–
xMesßgeBuf„r
 ) 
	`xSåómBuf„rIsFuŒ
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„∏)

	)

649 
	#xMesßgeBuf„rIsEm±y
–
xMesßgeBuf„r
 ) 
	`xSåómBuf„rIsEm±y
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„∏)

	)

672 
	#xMesßgeBuf„rRe£t
–
xMesßgeBuf„r
 ) 
	`xSåómBuf„rRe£t
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„∏)

	)

694 
	#xMesßgeBuf„rS∑˚AvaûabÀ
–
xMesßgeBuf„r
 ) 
	`xSåómBuf„rS∑˚sAvaûabÀ
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„∏)

	)

733 
	#xMesßgeBuf„rSídCom∂ëedFromISR
–
xMesßgeBuf„r
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xSåómBuf„rSídCom∂ëedFromISR
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„r,ÖxHighîPri‹ôyTaskWokí )

	)

773 
	#xMesßgeBuf„rRe˚iveCom∂ëedFromISR
–
xMesßgeBuf„r
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xSåómBuf„rRe˚iveCom∂ëedFromISR
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„r,ÖxHighîPri‹ôyTaskWokí )

	)

775 #i‡
deföed
–
__˝lu•lus
 )

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\mpu_prototypes.h

37 #i‚de‡
MPU_PROTOTYPES_H


38 
	#MPU_PROTOTYPES_H


	)

41 
Ba£Ty≥_t
 
MPU_xTaskCª©e
–
TaskFun˘i⁄_t
 
pxTaskCode
, c⁄° * c⁄° 
pcName
, c⁄° 
uöt16_t
 
usSèckDïth
, * c⁄° 
pvP¨amëîs
, 
UBa£Ty≥_t
 
uxPri‹ôy
, 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
 );

42 
TaskH™dÀ_t
 
MPU_xTaskCª©eSètic
–
TaskFun˘i⁄_t
 
pxTaskCode
, c⁄° * c⁄° 
pcName
, c⁄° 
uöt32_t
 
ulSèckDïth
, * c⁄° 
pvP¨amëîs
, 
UBa£Ty≥_t
 
uxPri‹ôy
, 
SèckTy≥_t
 * c⁄° 
puxSèckBuf„r
, 
SèticTask_t
 * c⁄° 
pxTaskBuf„r
 );

43 
Ba£Ty≥_t
 
MPU_xTaskCª©eRe°ri˘ed
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
, 
TaskH™dÀ_t
 *
pxCª©edTask
 );

44 
Ba£Ty≥_t
 
MPU_xTaskCª©eRe°ri˘edSètic
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
, 
TaskH™dÀ_t
 *
pxCª©edTask
 );

45 
MPU_vTaskAŒoˇãMPURegi⁄s
–
TaskH™dÀ_t
 
xTask
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
pxRegi⁄s
 );

46 
MPU_vTaskDñëe
–
TaskH™dÀ_t
 
xTaskToDñëe
 );

47 
MPU_vTaskDñay
–c⁄° 
TickTy≥_t
 
xTicksToDñay
 );

48 
MPU_vTaskDñayU¡û
–
TickTy≥_t
 * c⁄° 
pxPªviousWakeTime
, c⁄° TickTy≥_à
xTimeIn¸emít
 );

49 
Ba£Ty≥_t
 
MPU_xTaskAb‹tDñay
–
TaskH™dÀ_t
 
xTask
 );

50 
UBa£Ty≥_t
 
MPU_uxTaskPri‹ôyGë
–
TaskH™dÀ_t
 
xTask
 );

51 
eTaskSèã
 
MPU_eTaskGëSèã
–
TaskH™dÀ_t
 
xTask
 );

52 
MPU_vTaskGëInfo
–
TaskH™dÀ_t
 
xTask
, 
TaskSètus_t
 *
pxTaskSètus
, 
Ba£Ty≥_t
 
xGëFªeSèckS∑˚
, 
eTaskSèã
 
eSèã
 );

53 
MPU_vTaskPri‹ôySë
–
TaskH™dÀ_t
 
xTask
, 
UBa£Ty≥_t
 
uxNewPri‹ôy
 );

54 
MPU_vTaskSu•íd
–
TaskH™dÀ_t
 
xTaskToSu•íd
 );

55 
MPU_vTaskResume
–
TaskH™dÀ_t
 
xTaskToResume
 );

56 
MPU_vTaskSèπScheduÀr
( );

57 
MPU_vTaskSu•ídAŒ
( );

58 
Ba£Ty≥_t
 
MPU_xTaskResumeAŒ
( );

59 
TickTy≥_t
 
MPU_xTaskGëTickCou¡
( );

60 
UBa£Ty≥_t
 
MPU_uxTaskGëNumbîOfTasks
( );

61 * 
MPU_pcTaskGëName
–
TaskH™dÀ_t
 
xTaskToQuîy
 );

62 
TaskH™dÀ_t
 
MPU_xTaskGëH™dÀ
–c⁄° *
pcNameToQuîy
 );

63 
UBa£Ty≥_t
 
MPU_uxTaskGëSèckHighW©îM¨k
–
TaskH™dÀ_t
 
xTask
 );

64 
MPU_vTaskSëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
, 
TaskHookFun˘i⁄_t
 
pxHookFun˘i⁄
 );

65 
TaskHookFun˘i⁄_t
 
MPU_xTaskGëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
 );

66 
MPU_vTaskSëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToSë
, 
Ba£Ty≥_t
 
xIndex
, *
pvVÆue
 );

67 * 
MPU_pvTaskGëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToQuîy
, 
Ba£Ty≥_t
 
xIndex
 );

68 
Ba£Ty≥_t
 
MPU_xTaskCÆlAµliˇti⁄TaskHook
–
TaskH™dÀ_t
 
xTask
, *
pvP¨amëî
 );

69 
TaskH™dÀ_t
 
MPU_xTaskGëIdÀTaskH™dÀ
( );

70 
UBa£Ty≥_t
 
MPU_uxTaskGëSy°emSèã
–
TaskSètus_t
 * c⁄° 
pxTaskSètusAºay
, c⁄° UBa£Ty≥_à
uxAºaySize
, 
uöt32_t
 * c⁄° 
pulTŸÆRunTime
 );

71 
MPU_vTaskLi°
–* 
pcWrôeBuf„r
 );

72 
MPU_vTaskGëRunTimeSèts
–*
pcWrôeBuf„r
 );

73 
Ba£Ty≥_t
 
MPU_xTaskGíîicNŸify
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
 );

74 
Ba£Ty≥_t
 
MPU_xTaskNŸifyWaô
–
uöt32_t
 
ulBôsToCÀ¨OnE¡ry
, uöt32_à
ulBôsToCÀ¨OnExô
, uöt32_à*
pulNŸifiˇti⁄VÆue
, 
TickTy≥_t
 
xTicksToWaô
 );

75 
uöt32_t
 
MPU_ulTaskNŸifyTake
–
Ba£Ty≥_t
 
xCÀ¨Cou¡OnExô
, 
TickTy≥_t
 
xTicksToWaô
 );

76 
Ba£Ty≥_t
 
MPU_xTaskNŸifySèãCÀ¨
–
TaskH™dÀ_t
 
xTask
 );

77 
Ba£Ty≥_t
 
MPU_xTaskIn¸emítTick
( );

78 
TaskH™dÀ_t
 
MPU_xTaskGëCuºítTaskH™dÀ
( );

79 
MPU_vTaskSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 );

80 
Ba£Ty≥_t
 
MPU_xTaskCheckF‹TimeOut
–
TimeOut_t
 * c⁄° 
pxTimeOut
, 
TickTy≥_t
 * c⁄° 
pxTicksToWaô
 );

81 
MPU_vTaskMis£dYõld
( );

82 
Ba£Ty≥_t
 
MPU_xTaskGëScheduÀrSèã
( );

85 
Ba£Ty≥_t
 
MPU_xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° Ba£Ty≥_à
xC›yPosôi⁄
 );

86 
Ba£Ty≥_t
 
MPU_xQueueRe˚ive
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
 );

87 
Ba£Ty≥_t
 
MPU_xQueuePìk
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
 );

88 
Ba£Ty≥_t
 
MPU_xQueueSem≠h‹eTake
–
QueueH™dÀ_t
 
xQueue
, 
TickTy≥_t
 
xTicksToWaô
 );

89 
UBa£Ty≥_t
 
MPU_uxQueueMesßgesWaôög
–c⁄° 
QueueH™dÀ_t
 
xQueue
 );

90 
UBa£Ty≥_t
 
MPU_uxQueueS∑˚sAvaûabÀ
–c⁄° 
QueueH™dÀ_t
 
xQueue
 );

91 
MPU_vQueueDñëe
–
QueueH™dÀ_t
 
xQueue
 );

92 
QueueH™dÀ_t
 
MPU_xQueueCª©eMuãx
–c⁄° 
uöt8_t
 
ucQueueTy≥
 );

93 
QueueH™dÀ_t
 
MPU_xQueueCª©eMuãxSètic
–c⁄° 
uöt8_t
 
ucQueueTy≥
, 
SèticQueue_t
 *
pxSèticQueue
 );

94 
QueueH™dÀ_t
 
MPU_xQueueCª©eCou¡ögSem≠h‹e
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
 );

95 
QueueH™dÀ_t
 
MPU_xQueueCª©eCou¡ögSem≠h‹eSètic
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
, 
SèticQueue_t
 *
pxSèticQueue
 );

96 * 
MPU_xQueueGëMuãxHﬁdî
–
QueueH™dÀ_t
 
xSem≠h‹e
 );

97 
Ba£Ty≥_t
 
MPU_xQueueTakeMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
, 
TickTy≥_t
 
xTicksToWaô
 );

98 
Ba£Ty≥_t
 
MPU_xQueueGiveMuãxRecursive
–
QueueH™dÀ_t
 
pxMuãx
 );

99 
MPU_vQueueAddToRegi°ry
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pcName
 );

100 
MPU_vQueueUƒegi°îQueue
–
QueueH™dÀ_t
 
xQueue
 );

101 c⁄° * 
MPU_pcQueueGëName
–
QueueH™dÀ_t
 
xQueue
 );

102 
QueueH™dÀ_t
 
MPU_xQueueGíîicCª©e
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, c⁄° 
uöt8_t
 
ucQueueTy≥
 );

103 
QueueH™dÀ_t
 
MPU_xQueueGíîicCª©eSètic
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, 
uöt8_t
 *
pucQueueSt‹age
, 
SèticQueue_t
 *
pxSèticQueue
, c⁄° uöt8_à
ucQueueTy≥
 );

104 
QueueSëH™dÀ_t
 
MPU_xQueueCª©eSë
–c⁄° 
UBa£Ty≥_t
 
uxEvítQueueLígth
 );

105 
Ba£Ty≥_t
 
MPU_xQueueAddToSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 );

106 
Ba£Ty≥_t
 
MPU_xQueueRemoveFromSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 );

107 
QueueSëMembîH™dÀ_t
 
MPU_xQueueSñe˘FromSë
–
QueueSëH™dÀ_t
 
xQueueSë
, c⁄° 
TickTy≥_t
 
xTicksToWaô
 );

108 
Ba£Ty≥_t
 
MPU_xQueueGíîicRe£t
–
QueueH™dÀ_t
 
xQueue
, Ba£Ty≥_à
xNewQueue
 );

109 
MPU_vQueueSëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
, 
UBa£Ty≥_t
 
uxQueueNumbî
 );

110 
UBa£Ty≥_t
 
MPU_uxQueueGëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
 );

111 
uöt8_t
 
MPU_ucQueueGëQueueTy≥
–
QueueH™dÀ_t
 
xQueue
 );

114 
TimîH™dÀ_t
 
MPU_xTimîCª©e
–c⁄° * c⁄° 
pcTimîName
, c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
, c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
, * c⁄° 
pvTimîID
, 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
 );

115 
TimîH™dÀ_t
 
MPU_xTimîCª©eSètic
–c⁄° * c⁄° 
pcTimîName
, c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
, c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
, * c⁄° 
pvTimîID
, 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
, 
SèticTimî_t
 *
pxTimîBuf„r
 );

116 * 
MPU_pvTimîGëTimîID
–c⁄° 
TimîH™dÀ_t
 
xTimî
 );

117 
MPU_vTimîSëTimîID
–
TimîH™dÀ_t
 
xTimî
, *
pvNewID
 );

118 
Ba£Ty≥_t
 
MPU_xTimîIsTimîA˘ive
–
TimîH™dÀ_t
 
xTimî
 );

119 
TaskH™dÀ_t
 
MPU_xTimîGëTimîD´m⁄TaskH™dÀ
( );

120 
Ba£Ty≥_t
 
MPU_xTimîPídFun˘i⁄CÆl
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, 
TickTy≥_t
 
xTicksToWaô
 );

121 c⁄° * 
MPU_pcTimîGëName
–
TimîH™dÀ_t
 
xTimî
 );

122 
TickTy≥_t
 
MPU_xTimîGëPîiod
–
TimîH™dÀ_t
 
xTimî
 );

123 
TickTy≥_t
 
MPU_xTimîGëExpúyTime
–
TimîH™dÀ_t
 
xTimî
 );

124 
Ba£Ty≥_t
 
MPU_xTimîCª©eTimîTask
( );

125 
Ba£Ty≥_t
 
MPU_xTimîGíîicComm™d
–
TimîH™dÀ_t
 
xTimî
, c⁄° Ba£Ty≥_à
xComm™dID
, c⁄° 
TickTy≥_t
 
xO±i⁄ÆVÆue
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° TickTy≥_à
xTicksToWaô
 );

128 
EvítGroupH™dÀ_t
 
MPU_xEvítGroupCª©e
( );

129 
EvítGroupH™dÀ_t
 
MPU_xEvítGroupCª©eSètic
–
SèticEvítGroup_t
 *
pxEvítGroupBuf„r
 );

130 
EvítBôs_t
 
MPU_xEvítGroupWaôBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, c⁄° 
Ba£Ty≥_t
 
xCÀ¨OnExô
, c⁄° Ba£Ty≥_à
xWaôF‹AŒBôs
, 
TickTy≥_t
 
xTicksToWaô
 );

131 
EvítBôs_t
 
MPU_xEvítGroupCÀ¨Bôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToCÀ¨
 );

132 
EvítBôs_t
 
MPU_xEvítGroupSëBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToSë
 );

133 
EvítBôs_t
 
MPU_xEvítGroupSync
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToSë
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, 
TickTy≥_t
 
xTicksToWaô
 );

134 
MPU_vEvítGroupDñëe
–
EvítGroupH™dÀ_t
 
xEvítGroup
 );

135 
UBa£Ty≥_t
 
MPU_uxEvítGroupGëNumbî
–* 
xEvítGroup
 );

138 
size_t
 
MPU_xSåómBuf„rSíd
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, c⁄° *
pvTxD©a
, size_à
xD©aLígthByãs
, 
TickTy≥_t
 
xTicksToWaô
 );

139 
size_t
 
MPU_xSåómBuf„rSídFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, c⁄° *
pvTxD©a
, size_à
xD©aLígthByãs
, 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 );

140 
size_t
 
MPU_xSåómBuf„rRe˚ive
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, *
pvRxD©a
, size_à
xBuf„rLígthByãs
, 
TickTy≥_t
 
xTicksToWaô
 );

141 
size_t
 
MPU_xSåómBuf„rRe˚iveFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, *
pvRxD©a
, size_à
xBuf„rLígthByãs
, 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 );

142 
MPU_vSåómBuf„rDñëe
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 );

143 
Ba£Ty≥_t
 
MPU_xSåómBuf„rIsFuŒ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 );

144 
Ba£Ty≥_t
 
MPU_xSåómBuf„rIsEm±y
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 );

145 
Ba£Ty≥_t
 
MPU_xSåómBuf„rRe£t
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 );

146 
size_t
 
MPU_xSåómBuf„rS∑˚sAvaûabÀ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 );

147 
size_t
 
MPU_xSåómBuf„rByãsAvaûabÀ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 );

148 
Ba£Ty≥_t
 
MPU_xSåómBuf„rSëTriggîLevñ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, 
size_t
 
xTriggîLevñ
 );

149 
SåómBuf„rH™dÀ_t
 
MPU_xSåómBuf„rGíîicCª©e
–
size_t
 
xBuf„rSizeByãs
, size_à
xTriggîLevñByãs
, 
Ba£Ty≥_t
 
xIsMesßgeBuf„r
 );

150 
SåómBuf„rH™dÀ_t
 
MPU_xSåómBuf„rGíîicCª©eSètic
–
size_t
 
xBuf„rSizeByãs
, size_à
xTriggîLevñByãs
, 
Ba£Ty≥_t
 
xIsMesßgeBuf„r
, 
uöt8_t
 * c⁄° 
pucSåómBuf„rSt‹ageAªa
, 
SèticSåómBuf„r_t
 * c⁄° 
pxSèticSåómBuf„r
 );

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\mpu_wrappers.h

28 #i‚de‡
MPU_WRAPPERS_H


29 
	#MPU_WRAPPERS_H


	)

33 #ifde‡
p‹tUSING_MPU_WRAPPERS


38 #i‚de‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


49 
	#xTaskCª©e
 
MPU_xTaskCª©e


	)

50 
	#xTaskCª©eSètic
 
MPU_xTaskCª©eSètic


	)

51 
	#xTaskCª©eRe°ri˘ed
 
MPU_xTaskCª©eRe°ri˘ed


	)

52 
	#vTaskAŒoˇãMPURegi⁄s
 
MPU_vTaskAŒoˇãMPURegi⁄s


	)

53 
	#vTaskDñëe
 
MPU_vTaskDñëe


	)

54 
	#vTaskDñay
 
MPU_vTaskDñay


	)

55 
	#vTaskDñayU¡û
 
MPU_vTaskDñayU¡û


	)

56 
	#xTaskAb‹tDñay
 
MPU_xTaskAb‹tDñay


	)

57 
	#uxTaskPri‹ôyGë
 
MPU_uxTaskPri‹ôyGë


	)

58 
	#eTaskGëSèã
 
MPU_eTaskGëSèã


	)

59 
	#vTaskGëInfo
 
MPU_vTaskGëInfo


	)

60 
	#vTaskPri‹ôySë
 
MPU_vTaskPri‹ôySë


	)

61 
	#vTaskSu•íd
 
MPU_vTaskSu•íd


	)

62 
	#vTaskResume
 
MPU_vTaskResume


	)

63 
	#vTaskSu•ídAŒ
 
MPU_vTaskSu•ídAŒ


	)

64 
	#xTaskResumeAŒ
 
MPU_xTaskResumeAŒ


	)

65 
	#xTaskGëTickCou¡
 
MPU_xTaskGëTickCou¡


	)

66 
	#uxTaskGëNumbîOfTasks
 
MPU_uxTaskGëNumbîOfTasks


	)

67 
	#pcTaskGëName
 
MPU_pcTaskGëName


	)

68 
	#xTaskGëH™dÀ
 
MPU_xTaskGëH™dÀ


	)

69 
	#uxTaskGëSèckHighW©îM¨k
 
MPU_uxTaskGëSèckHighW©îM¨k


	)

70 
	#vTaskSëAµliˇti⁄TaskTag
 
MPU_vTaskSëAµliˇti⁄TaskTag


	)

71 
	#xTaskGëAµliˇti⁄TaskTag
 
MPU_xTaskGëAµliˇti⁄TaskTag


	)

72 
	#vTaskSëThªadLoˇlSt‹agePoöãr
 
MPU_vTaskSëThªadLoˇlSt‹agePoöãr


	)

73 
	#pvTaskGëThªadLoˇlSt‹agePoöãr
 
MPU_pvTaskGëThªadLoˇlSt‹agePoöãr


	)

74 
	#xTaskCÆlAµliˇti⁄TaskHook
 
MPU_xTaskCÆlAµliˇti⁄TaskHook


	)

75 
	#xTaskGëIdÀTaskH™dÀ
 
MPU_xTaskGëIdÀTaskH™dÀ


	)

76 
	#uxTaskGëSy°emSèã
 
MPU_uxTaskGëSy°emSèã


	)

77 
	#vTaskLi°
 
MPU_vTaskLi°


	)

78 
	#vTaskGëRunTimeSèts
 
MPU_vTaskGëRunTimeSèts


	)

79 
	#xTaskGíîicNŸify
 
MPU_xTaskGíîicNŸify


	)

80 
	#xTaskNŸifyWaô
 
MPU_xTaskNŸifyWaô


	)

81 
	#ulTaskNŸifyTake
 
MPU_ulTaskNŸifyTake


	)

82 
	#xTaskNŸifySèãCÀ¨
 
MPU_xTaskNŸifySèãCÀ¨


	)

84 
	#xTaskGëCuºítTaskH™dÀ
 
MPU_xTaskGëCuºítTaskH™dÀ


	)

85 
	#vTaskSëTimeOutSèã
 
MPU_vTaskSëTimeOutSèã


	)

86 
	#xTaskCheckF‹TimeOut
 
MPU_xTaskCheckF‹TimeOut


	)

87 
	#xTaskGëScheduÀrSèã
 
MPU_xTaskGëScheduÀrSèã


	)

90 
	#xQueueGíîicSíd
 
MPU_xQueueGíîicSíd


	)

91 
	#xQueueRe˚ive
 
MPU_xQueueRe˚ive


	)

92 
	#xQueuePìk
 
MPU_xQueuePìk


	)

93 
	#xQueueSem≠h‹eTake
 
MPU_xQueueSem≠h‹eTake


	)

94 
	#uxQueueMesßgesWaôög
 
MPU_uxQueueMesßgesWaôög


	)

95 
	#uxQueueS∑˚sAvaûabÀ
 
MPU_uxQueueS∑˚sAvaûabÀ


	)

96 
	#vQueueDñëe
 
MPU_vQueueDñëe


	)

97 
	#xQueueCª©eMuãx
 
MPU_xQueueCª©eMuãx


	)

98 
	#xQueueCª©eMuãxSètic
 
MPU_xQueueCª©eMuãxSètic


	)

99 
	#xQueueCª©eCou¡ögSem≠h‹e
 
MPU_xQueueCª©eCou¡ögSem≠h‹e


	)

100 
	#xQueueCª©eCou¡ögSem≠h‹eSètic
 
MPU_xQueueCª©eCou¡ögSem≠h‹eSètic


	)

101 
	#xQueueGëMuãxHﬁdî
 
MPU_xQueueGëMuãxHﬁdî


	)

102 
	#xQueueTakeMuãxRecursive
 
MPU_xQueueTakeMuãxRecursive


	)

103 
	#xQueueGiveMuãxRecursive
 
MPU_xQueueGiveMuãxRecursive


	)

104 
	#xQueueGíîicCª©e
 
MPU_xQueueGíîicCª©e


	)

105 
	#xQueueGíîicCª©eSètic
 
MPU_xQueueGíîicCª©eSètic


	)

106 
	#xQueueCª©eSë
 
MPU_xQueueCª©eSë


	)

107 
	#xQueueAddToSë
 
MPU_xQueueAddToSë


	)

108 
	#xQueueRemoveFromSë
 
MPU_xQueueRemoveFromSë


	)

109 
	#xQueueSñe˘FromSë
 
MPU_xQueueSñe˘FromSë


	)

110 
	#xQueueGíîicRe£t
 
MPU_xQueueGíîicRe£t


	)

112 #if–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

113 
	#vQueueAddToRegi°ry
 
MPU_vQueueAddToRegi°ry


	)

114 
	#vQueueUƒegi°îQueue
 
MPU_vQueueUƒegi°îQueue


	)

115 
	#pcQueueGëName
 
MPU_pcQueueGëName


	)

119 
	#xTimîCª©e
 
MPU_xTimîCª©e


	)

120 
	#xTimîCª©eSètic
 
MPU_xTimîCª©eSètic


	)

121 
	#pvTimîGëTimîID
 
MPU_pvTimîGëTimîID


	)

122 
	#vTimîSëTimîID
 
MPU_vTimîSëTimîID


	)

123 
	#xTimîIsTimîA˘ive
 
MPU_xTimîIsTimîA˘ive


	)

124 
	#xTimîGëTimîD´m⁄TaskH™dÀ
 
MPU_xTimîGëTimîD´m⁄TaskH™dÀ


	)

125 
	#xTimîPídFun˘i⁄CÆl
 
MPU_xTimîPídFun˘i⁄CÆl


	)

126 
	#pcTimîGëName
 
MPU_pcTimîGëName


	)

127 
	#xTimîGëPîiod
 
MPU_xTimîGëPîiod


	)

128 
	#xTimîGëExpúyTime
 
MPU_xTimîGëExpúyTime


	)

129 
	#xTimîGíîicComm™d
 
MPU_xTimîGíîicComm™d


	)

132 
	#xEvítGroupCª©e
 
MPU_xEvítGroupCª©e


	)

133 
	#xEvítGroupCª©eSètic
 
MPU_xEvítGroupCª©eSètic


	)

134 
	#xEvítGroupWaôBôs
 
MPU_xEvítGroupWaôBôs


	)

135 
	#xEvítGroupCÀ¨Bôs
 
MPU_xEvítGroupCÀ¨Bôs


	)

136 
	#xEvítGroupSëBôs
 
MPU_xEvítGroupSëBôs


	)

137 
	#xEvítGroupSync
 
MPU_xEvítGroupSync


	)

138 
	#vEvítGroupDñëe
 
MPU_vEvítGroupDñëe


	)

142 
	#xSåómBuf„rSíd
 
MPU_xSåómBuf„rSíd


	)

143 
	#xSåómBuf„rSídFromISR
 
MPU_xSåómBuf„rSídFromISR


	)

144 
	#xSåómBuf„rRe˚ive
 
MPU_xSåómBuf„rRe˚ive


	)

145 
	#xSåómBuf„rRe˚iveFromISR
 
MPU_xSåómBuf„rRe˚iveFromISR


	)

146 
	#vSåómBuf„rDñëe
 
MPU_vSåómBuf„rDñëe


	)

147 
	#xSåómBuf„rIsFuŒ
 
MPU_xSåómBuf„rIsFuŒ


	)

148 
	#xSåómBuf„rIsEm±y
 
MPU_xSåómBuf„rIsEm±y


	)

149 
	#xSåómBuf„rRe£t
 
MPU_xSåómBuf„rRe£t


	)

150 
	#xSåómBuf„rS∑˚sAvaûabÀ
 
MPU_xSåómBuf„rS∑˚sAvaûabÀ


	)

151 
	#xSåómBuf„rByãsAvaûabÀ
 
MPU_xSåómBuf„rByãsAvaûabÀ


	)

152 
	#xSåómBuf„rSëTriggîLevñ
 
MPU_xSåómBuf„rSëTriggîLevñ


	)

153 
	#xSåómBuf„rGíîicCª©e
 
MPU_xSåómBuf„rGíîicCª©e


	)

154 
	#xSåómBuf„rGíîicCª©eSètic
 
MPU_xSåómBuf„rGíîicCª©eSètic


	)

160 
	#PRIVILEGED_FUNCTION


	)

161 
	#PRIVILEGED_DATA
 
	`__©åibuã__
((
	`£˘i⁄
("¥ivûeged_d©a")))

	)

166 
	#PRIVILEGED_FUNCTION
 
	`__©åibuã__
((
	`£˘i⁄
("¥ivûeged_fun˘i⁄s")))

	)

167 
	#PRIVILEGED_DATA
 
	`__©åibuã__
((
	`£˘i⁄
("¥ivûeged_d©a")))

	)

173 
	#PRIVILEGED_FUNCTION


	)

174 
	#PRIVILEGED_DATA


	)

175 
	#p‹tUSING_MPU_WRAPPERS
 0

	)

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\portable.h

32 #i‚de‡
PORTABLE_H


33 
	#PORTABLE_H


	)

45 
	~"dïªˇãd_deföôi⁄s.h
"

51 #i‚de‡
p‹tENTER_CRITICAL


52 
	~"p‹tma¸o.h
"

55 #i‡
p‹tBYTE_ALIGNMENT
 == 32

56 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x001‡)

	)

59 #i‡
p‹tBYTE_ALIGNMENT
 == 16

60 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x000‡)

	)

63 #i‡
p‹tBYTE_ALIGNMENT
 == 8

64 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0007 )

	)

67 #i‡
p‹tBYTE_ALIGNMENT
 == 4

68 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0003 )

	)

71 #i‡
p‹tBYTE_ALIGNMENT
 == 2

72 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0001 )

	)

75 #i‡
p‹tBYTE_ALIGNMENT
 == 1

76 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0000 )

	)

79 #i‚de‡
p‹tBYTE_ALIGNMENT_MASK


83 #i‚de‡
p‹tNUM_CONFIGURABLE_REGIONS


84 
	#p‹tNUM_CONFIGURABLE_REGIONS
 1

	)

87 #ifde‡
__˝lu•lus


91 
	~"mpu_wøµîs.h
"

99 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

100 
SèckTy≥_t
 *
pxP‹tInôüli£Sèck
–SèckTy≥_à*
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
, 
Ba£Ty≥_t
 
xRunPrivûeged
 ) 
PRIVILEGED_FUNCTION
;

102 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 ) 
PRIVILEGED_FUNCTION
;

106 
	sHópRegi⁄


108 
uöt8_t
 *
pucSèπAddªss
;

109 
size_t
 
xSizeInByãs
;

110 } 
	tHópRegi⁄_t
;

123 
	`vP‹tDeföeHópRegi⁄s
–c⁄° 
HópRegi⁄_t
 * c⁄° 
pxHópRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

129 *
	`pvP‹tMÆloc
–
size_t
 
xSize
 ) 
PRIVILEGED_FUNCTION
;

130 
	`vP‹tFªe
–*
pv
 ) 
PRIVILEGED_FUNCTION
;

131 
	`vP‹tInôüli£Blocks
–Ë
PRIVILEGED_FUNCTION
;

132 
size_t
 
	`xP‹tGëFªeHópSize
–Ë
PRIVILEGED_FUNCTION
;

133 
size_t
 
	`xP‹tGëMöimumEvîFªeHópSize
–Ë
PRIVILEGED_FUNCTION
;

139 
Ba£Ty≥_t
 
	`xP‹tSèπScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

146 
	`vP‹tEndScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

155 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

156 
xMEMORY_REGION
;

157 
	`vP‹tSt‹eTaskMPUSëtögs
–
xMPU_SETTINGS
 *
xMPUSëtögs
, c⁄° 
xMEMORY_REGION
 * c⁄° 
xRegi⁄s
, 
SèckTy≥_t
 *
pxBŸtomOfSèck
, 
uöt32_t
 
ulSèckDïth
 ) 
PRIVILEGED_FUNCTION
;

160 #ifde‡
__˝lu•lus


161 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\projdefs.h

28 #i‚de‡
PROJDEFS_H


29 
	#PROJDEFS_H


	)

35 (*
	tTaskFun˘i⁄_t
)( * );

40 #i‚de‡
pdMS_TO_TICKS


41 
	#pdMS_TO_TICKS
–
xTimeInMs
 ) ( ( 
TickTy≥_t
 ) ( ( ( TickTy≥_àË–xTimeInM†Ë* ( TickTy≥_àË
c⁄figTICK_RATE_HZ
 ) / ( TickTy≥_àË1000 ) )

	)

44 
	#pdFALSE
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

45 
	#pdTRUE
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

47 
	#pdPASS
 ( 
pdTRUE
 )

	)

48 
	#pdFAIL
 ( 
pdFALSE
 )

	)

49 
	#îrQUEUE_EMPTY
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

50 
	#îrQUEUE_FULL
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

53 
	#îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
 ( -1 )

	)

54 
	#îrQUEUE_BLOCKED
 ( -4 )

	)

55 
	#îrQUEUE_YIELD
 ( -5 )

	)

58 #i‚de‡
c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES


59 
	#c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
 0

	)

62 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

63 
	#pdINTEGRITY_CHECK_VALUE
 0x5a5a

	)

65 
	#pdINTEGRITY_CHECK_VALUE
 0x5a5a5a5aUL

	)

70 
	#pdFREERTOS_ERRNO_NONE
 0

	)

71 
	#pdFREERTOS_ERRNO_ENOENT
 2

	)

72 
	#pdFREERTOS_ERRNO_EINTR
 4

	)

73 
	#pdFREERTOS_ERRNO_EIO
 5

	)

74 
	#pdFREERTOS_ERRNO_ENXIO
 6

	)

75 
	#pdFREERTOS_ERRNO_EBADF
 9

	)

76 
	#pdFREERTOS_ERRNO_EAGAIN
 11

	)

77 
	#pdFREERTOS_ERRNO_EWOULDBLOCK
 11

	)

78 
	#pdFREERTOS_ERRNO_ENOMEM
 12

	)

79 
	#pdFREERTOS_ERRNO_EACCES
 13

	)

80 
	#pdFREERTOS_ERRNO_EFAULT
 14

	)

81 
	#pdFREERTOS_ERRNO_EBUSY
 16

	)

82 
	#pdFREERTOS_ERRNO_EEXIST
 17

	)

83 
	#pdFREERTOS_ERRNO_EXDEV
 18

	)

84 
	#pdFREERTOS_ERRNO_ENODEV
 19

	)

85 
	#pdFREERTOS_ERRNO_ENOTDIR
 20

	)

86 
	#pdFREERTOS_ERRNO_EISDIR
 21

	)

87 
	#pdFREERTOS_ERRNO_EINVAL
 22

	)

88 
	#pdFREERTOS_ERRNO_ENOSPC
 28

	)

89 
	#pdFREERTOS_ERRNO_ESPIPE
 29

	)

90 
	#pdFREERTOS_ERRNO_EROFS
 30

	)

91 
	#pdFREERTOS_ERRNO_EUNATCH
 42

	)

92 
	#pdFREERTOS_ERRNO_EBADE
 50

	)

93 
	#pdFREERTOS_ERRNO_EFTYPE
 79

	)

94 
	#pdFREERTOS_ERRNO_ENMFILE
 89

	)

95 
	#pdFREERTOS_ERRNO_ENOTEMPTY
 90

	)

96 
	#pdFREERTOS_ERRNO_ENAMETOOLONG
 91

	)

97 
	#pdFREERTOS_ERRNO_EOPNOTSUPP
 95

	)

98 
	#pdFREERTOS_ERRNO_ENOBUFS
 105

	)

99 
	#pdFREERTOS_ERRNO_ENOPROTOOPT
 109

	)

100 
	#pdFREERTOS_ERRNO_EADDRINUSE
 112

	)

101 
	#pdFREERTOS_ERRNO_ETIMEDOUT
 116

	)

102 
	#pdFREERTOS_ERRNO_EINPROGRESS
 119

	)

103 
	#pdFREERTOS_ERRNO_EALREADY
 120

	)

104 
	#pdFREERTOS_ERRNO_EADDRNOTAVAIL
 125

	)

105 
	#pdFREERTOS_ERRNO_EISCONN
 127

	)

106 
	#pdFREERTOS_ERRNO_ENOTCONN
 128

	)

107 
	#pdFREERTOS_ERRNO_ENOMEDIUM
 135

	)

108 
	#pdFREERTOS_ERRNO_EILSEQ
 138

	)

109 
	#pdFREERTOS_ERRNO_ECANCELED
 140

	)

113 
	#pdFREERTOS_LITTLE_ENDIAN
 0

	)

114 
	#pdFREERTOS_BIG_ENDIAN
 1

	)

117 
	#pdLITTLE_ENDIAN
 
pdFREERTOS_LITTLE_ENDIAN


	)

118 
	#pdBIG_ENDIAN
 
pdFREERTOS_BIG_ENDIAN


	)

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\queue.h

29 #i‚de‡
QUEUE_H


30 
	#QUEUE_H


	)

32 #i‚de‡
INC_FREERTOS_H


33 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "include queue.h"

36 #ifde‡
__˝lu•lus


46 * 
	tQueueH™dÀ_t
;

53 * 
	tQueueSëH™dÀ_t
;

60 * 
	tQueueSëMembîH™dÀ_t
;

63 
	#queueSEND_TO_BACK
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

64 
	#queueSEND_TO_FRONT
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

65 
	#queueOVERWRITE
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

68 
	#queueQUEUE_TYPE_BASE
 ( ( 
uöt8_t
 ) 0U )

	)

69 
	#queueQUEUE_TYPE_SET
 ( ( 
uöt8_t
 ) 0U )

	)

70 
	#queueQUEUE_TYPE_MUTEX
 ( ( 
uöt8_t
 ) 1U )

	)

71 
	#queueQUEUE_TYPE_COUNTING_SEMAPHORE
 ( ( 
uöt8_t
 ) 2U )

	)

72 
	#queueQUEUE_TYPE_BINARY_SEMAPHORE
 ( ( 
uöt8_t
 ) 3U )

	)

73 
	#queueQUEUE_TYPE_RECURSIVE_MUTEX
 ( ( 
uöt8_t
 ) 4U )

	)

143 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

144 
	#xQueueCª©e
–
uxQueueLígth
, 
uxIãmSize
 ) 
	`xQueueGíîicCª©e
––uxQueueLígth ), ( uxIãmSizê), ( 
queueQUEUE_TYPE_BASE
 ) )

	)

229 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

230 
	#xQueueCª©eSètic
–
uxQueueLígth
, 
uxIãmSize
, 
pucQueueSt‹age
, 
pxQueueBuf„r
 ) 
	`xQueueGíîicCª©eSètic
––uxQueueLígth ), ( uxIãmSizê), (ÖucQueueSt‹agê), (ÖxQueueBuf„∏), ( 
queueQUEUE_TYPE_BASE
 ) )

	)

311 
	#xQueueSídToFr⁄t
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_FRONT
 )

	)

393 
	#xQueueSídToBack
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_BACK
 )

	)

477 
	#xQueueSíd
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_BACK
 )

	)

560 
	#xQueueOvîwrôe
–
xQueue
, 
pvIãmToQueue
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), 0, 
queueOVERWRITE
 )

	)

648 
Ba£Ty≥_t
 
xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° Ba£Ty≥_à
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

742 
Ba£Ty≥_t
 
xQueuePìk
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

775 
Ba£Ty≥_t
 
xQueuePìkFromISR
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
 ) 
PRIVILEGED_FUNCTION
;

866 
Ba£Ty≥_t
 
xQueueRe˚ive
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

881 
UBa£Ty≥_t
 
uxQueueMesßgesWaôög
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

898 
UBa£Ty≥_t
 
uxQueueS∑˚sAvaûabÀ
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

912 
vQueueDñëe
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

982 
	#xQueueSídToFr⁄tFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_FRONT
 )

	)

1053 
	#xQueueSídToBackFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_BACK
 )

	)

1140 
	#xQueueOvîwrôeFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueOVERWRITE
 )

	)

1214 
	#xQueueSídFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_BACK
 )

	)

1293 
Ba£Ty≥_t
 
xQueueGíîicSídFromISR
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° Ba£Ty≥_à
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

1294 
Ba£Ty≥_t
 
xQueueGiveFromISR
–
QueueH™dÀ_t
 
xQueue
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

1383 
Ba£Ty≥_t
 
xQueueRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

1389 
Ba£Ty≥_t
 
xQueueIsQueueEm±yFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1390 
Ba£Ty≥_t
 
xQueueIsQueueFuŒFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1391 
UBa£Ty≥_t
 
uxQueueMesßgesWaôögFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1402 
Ba£Ty≥_t
 
xQueueCRSídFromISR
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pvIãmToQueue
, Ba£Ty≥_à
xCoRoutöePªviou¶yWokí
 );

1403 
Ba£Ty≥_t
 
xQueueCRRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
, *
pvBuf„r
, Ba£Ty≥_à*
pxTaskWokí
 );

1404 
Ba£Ty≥_t
 
xQueueCRSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
 );

1405 
Ba£Ty≥_t
 
xQueueCRRe˚ive
–
QueueH™dÀ_t
 
xQueue
, *
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
 );

1412 
QueueH™dÀ_t
 
xQueueCª©eMuãx
–c⁄° 
uöt8_t
 
ucQueueTy≥
 ) 
PRIVILEGED_FUNCTION
;

1413 
QueueH™dÀ_t
 
xQueueCª©eMuãxSètic
–c⁄° 
uöt8_t
 
ucQueueTy≥
, 
SèticQueue_t
 *
pxSèticQueue
 ) 
PRIVILEGED_FUNCTION
;

1414 
QueueH™dÀ_t
 
xQueueCª©eCou¡ögSem≠h‹e
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
 ) 
PRIVILEGED_FUNCTION
;

1415 
QueueH™dÀ_t
 
xQueueCª©eCou¡ögSem≠h‹eSètic
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
, 
SèticQueue_t
 *
pxSèticQueue
 ) 
PRIVILEGED_FUNCTION
;

1416 
Ba£Ty≥_t
 
xQueueSem≠h‹eTake
–
QueueH™dÀ_t
 
xQueue
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1417 * 
xQueueGëMuãxHﬁdî
–
QueueH™dÀ_t
 
xSem≠h‹e
 ) 
PRIVILEGED_FUNCTION
;

1418 * 
xQueueGëMuãxHﬁdîFromISR
–
QueueH™dÀ_t
 
xSem≠h‹e
 ) 
PRIVILEGED_FUNCTION
;

1424 
Ba£Ty≥_t
 
xQueueTakeMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1425 
Ba£Ty≥_t
 
xQueueGiveMuãxRecursive
–
QueueH™dÀ_t
 
pxMuãx
 ) 
PRIVILEGED_FUNCTION
;

1431 
	#xQueueRe£t
–
xQueue
 ) 
	`xQueueGíîicRe£t
–xQueue, 
pdFALSE
 )

	)

1455 #if–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1456 
vQueueAddToRegi°ry
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pcName
 ) 
PRIVILEGED_FUNCTION
;

1469 #if–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1470 
vQueueUƒegi°îQueue
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1484 #if–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1485 c⁄° *
pcQueueGëName
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1493 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

1494 
QueueH™dÀ_t
 
xQueueGíîicCª©e
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, c⁄° 
uöt8_t
 
ucQueueTy≥
 ) 
PRIVILEGED_FUNCTION
;

1502 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

1503 
QueueH™dÀ_t
 
xQueueGíîicCª©eSètic
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, 
uöt8_t
 *
pucQueueSt‹age
, 
SèticQueue_t
 *
pxSèticQueue
, c⁄° uöt8_à
ucQueueTy≥
 ) 
PRIVILEGED_FUNCTION
;

1554 
QueueSëH™dÀ_t
 
xQueueCª©eSë
–c⁄° 
UBa£Ty≥_t
 
uxEvítQueueLígth
 ) 
PRIVILEGED_FUNCTION
;

1578 
Ba£Ty≥_t
 
xQueueAddToSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 ) 
PRIVILEGED_FUNCTION
;

1597 
Ba£Ty≥_t
 
xQueueRemoveFromSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 ) 
PRIVILEGED_FUNCTION
;

1633 
QueueSëMembîH™dÀ_t
 
xQueueSñe˘FromSë
–
QueueSëH™dÀ_t
 
xQueueSë
, c⁄° 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1638 
QueueSëMembîH™dÀ_t
 
xQueueSñe˘FromSëFromISR
–
QueueSëH™dÀ_t
 
xQueueSë
 ) 
PRIVILEGED_FUNCTION
;

1641 
vQueueWaôF‹MesßgeRe°ri˘ed
–
QueueH™dÀ_t
 
xQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
 ) 
PRIVILEGED_FUNCTION
;

1642 
Ba£Ty≥_t
 
xQueueGíîicRe£t
–
QueueH™dÀ_t
 
xQueue
, Ba£Ty≥_à
xNewQueue
 ) 
PRIVILEGED_FUNCTION
;

1643 
vQueueSëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
, 
UBa£Ty≥_t
 
uxQueueNumbî
 ) 
PRIVILEGED_FUNCTION
;

1644 
UBa£Ty≥_t
 
uxQueueGëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1645 
uöt8_t
 
ucQueueGëQueueTy≥
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1648 #ifde‡
__˝lu•lus


	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\semphr.h

28 #i‚de‡
SEMAPHORE_H


29 
	#SEMAPHORE_H


	)

31 #i‚de‡
INC_FREERTOS_H


32 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "include semphr.h"

35 
	~"queue.h
"

37 
QueueH™dÀ_t
 
	tSem≠h‹eH™dÀ_t
;

39 
	#£mBINARY_SEMAPHORE_QUEUE_LENGTH
 ( ( 
uöt8_t
 ) 1U )

	)

40 
	#£mSEMAPHORE_QUEUE_ITEM_LENGTH
 ( ( 
uöt8_t
 ) 0U )

	)

41 
	#£mGIVE_BLOCK_TIME
 ( ( 
TickTy≥_t
 ) 0U )

	)

93 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

94 
	#vSem≠h‹eCª©eBö¨y
–
xSem≠h‹e
 ) \

96 –
xSem≠h‹e
 ) = 
	`xQueueGíîicCª©e
––
UBa£Ty≥_t
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_BINARY_SEMAPHORE
 ); \

97 if––
xSem≠h‹e
 ) !
NULL
 ) \

99 –Ë
	`xSem≠h‹eGive
––
xSem≠h‹e
 ) ); \

101 }

	)

161 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

162 
	#xSem≠h‹eCª©eBö¨y
(Ë
	`xQueueGíîicCª©e
––
UBa£Ty≥_t
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_BINARY_SEMAPHORE
 )

	)

220 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

221 
	#xSem≠h‹eCª©eBö¨ySètic
–
pxSèticSem≠h‹e
 ) 
	`xQueueGíîicCª©eSètic
––
UBa£Ty≥_t
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
, 
NULL
,ÖxSèticSem≠h‹e, 
queueQUEUE_TYPE_BINARY_SEMAPHORE
 )

	)

289 
	#xSem≠h‹eTake
–
xSem≠h‹e
, 
xBlockTime
 ) 
	`xQueueSem≠h‹eTake
––xSem≠h‹ê), ( xBlockTimêË)

	)

382 #if–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

383 
	#xSem≠h‹eTakeRecursive
–
xMuãx
, 
xBlockTime
 ) 
	`xQueueTakeMuãxRecursive
––xMuãx ), ( xBlockTimêË)

	)

447 
	#xSem≠h‹eGive
–
xSem≠h‹e
 ) 
	`xQueueGíîicSíd
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), 
NULL
, 
£mGIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 )

	)

531 #if–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

532 
	#xSem≠h‹eGiveRecursive
–
xMuãx
 ) 
	`xQueueGiveMuãxRecursive
––xMuãx ) )

	)

624 
	#xSem≠h‹eGiveFromISR
–
xSem≠h‹e
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGiveFromISR
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), (ÖxHighîPri‹ôyTaskWokí ) )

	)

658 
	#xSem≠h‹eTakeFromISR
–
xSem≠h‹e
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueRe˚iveFromISR
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), 
NULL
, (ÖxHighîPri‹ôyTaskWokí ) )

	)

715 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

716 
	#xSem≠h‹eCª©eMuãx
(Ë
	`xQueueCª©eMuãx
–
queueQUEUE_TYPE_MUTEX
 )

	)

776 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

777 
	#xSem≠h‹eCª©eMuãxSètic
–
pxMuãxBuf„r
 ) 
	`xQueueCª©eMuãxSètic
–
queueQUEUE_TYPE_MUTEX
, (ÖxMuãxBuf„∏Ë)

	)

844 #if––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 ) )

845 
	#xSem≠h‹eCª©eRecursiveMuãx
(Ë
	`xQueueCª©eMuãx
–
queueQUEUE_TYPE_RECURSIVE_MUTEX
 )

	)

917 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 ) )

918 
	#xSem≠h‹eCª©eRecursiveMuãxSètic
–
pxSèticSem≠h‹e
 ) 
	`xQueueCª©eMuãxSètic
–
queueQUEUE_TYPE_RECURSIVE_MUTEX
,ÖxSèticSem≠h‹ê)

	)

997 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

998 
	#xSem≠h‹eCª©eCou¡ög
–
uxMaxCou¡
, 
uxInôülCou¡
 ) 
	`xQueueCª©eCou¡ögSem≠h‹e
––uxMaxCou¡ ), ( uxInôülCou¡ ) )

	)

1082 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

1083 
	#xSem≠h‹eCª©eCou¡ögSètic
–
uxMaxCou¡
, 
uxInôülCou¡
, 
pxSem≠h‹eBuf„r
 ) 
	`xQueueCª©eCou¡ögSem≠h‹eSètic
––uxMaxCou¡ ), ( uxInôülCou¡ ), (ÖxSem≠h‹eBuf„∏Ë)

	)

1098 
	#vSem≠h‹eDñëe
–
xSem≠h‹e
 ) 
	`vQueueDñëe
––
QueueH™dÀ_t
 ) ( xSem≠h‹êË)

	)

1113 
	#xSem≠h‹eGëMuãxHﬁdî
–
xSem≠h‹e
 ) 
	`xQueueGëMuãxHﬁdî
––xSem≠h‹êË)

	)

1124 
	#xSem≠h‹eGëMuãxHﬁdîFromISR
–
xSem≠h‹e
 ) 
	`xQueueGëMuãxHﬁdîFromISR
––xSem≠h‹êË)

	)

1136 
	#uxSem≠h‹eGëCou¡
–
xSem≠h‹e
 ) 
	`uxQueueMesßgesWaôög
––
QueueH™dÀ_t
 ) ( xSem≠h‹êË)

	)

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\stack_macros.h

28 #i‚de‡
STACK_MACROS_H


29 
	#STACK_MACROS_H


	)

47 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 =1 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

50 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

53 if–
pxCuºítTCB
->
pxT›OfSèck
 <pxCuºítTCB->
pxSèck
 ) \

55 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

57 }

	)

62 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 =1 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

65 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

69 if–
pxCuºítTCB
->
pxT›OfSèck
 >pxCuºítTCB->
pxEndOfSèck
 ) \

71 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

73 }

	)

78 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

80 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

82 c⁄° 
uöt32_t
 * c⁄° 
pulSèck
 = ( uöt32_à* ) 
pxCuºítTCB
->
pxSèck
; \

83 c⁄° 
uöt32_t
 
ulCheckVÆue
 = ( uint32_t ) 0xa5a5a5a5; \

85 if––
pulSèck
[ 0 ] !
ulCheckVÆue
 ) || \

86 –
pulSèck
[ 1 ] !
ulCheckVÆue
 ) || \

87 –
pulSèck
[ 2 ] !
ulCheckVÆue
 ) || \

88 –
pulSèck
[ 3 ] !
ulCheckVÆue
 ) ) \

90 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

92 }

	)

97 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

99 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

101 
öt8_t
 *
pcEndOfSèck
 = ( i¡8_à* ) 
pxCuºítTCB
->
pxEndOfSèck
; \

102 c⁄° 
uöt8_t
 
ucEx≥˘edSèckByãs
[] = { 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

103 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

104 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

105 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

106 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE }; \

109 
pcEndOfSèck
 -–
ucEx≥˘edSèckByãs
 ); \

112 if–
	`memcmp
––* ) 
pcEndOfSèck
, ( * ) 
ucEx≥˘edSèckByãs
, ( ucExpectedStackBytes ) ) != 0 ) \

114 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

116 }

	)

122 #i‚de‡
èskCHECK_FOR_STACK_OVERFLOW


123 
	#èskCHECK_FOR_STACK_OVERFLOW
()

	)

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\stream_buffer.h

51 #i‚de‡
STREAM_BUFFER_H


52 
	#STREAM_BUFFER_H


	)

54 #i‡
deföed
–
__˝lu•lus
 )

64 * 
	tSåómBuf„rH™dÀ_t
;

132 
	#xSåómBuf„rCª©e
–
xBuf„rSizeByãs
, 
xTriggîLevñByãs
 ) 
	`xSåómBuf„rGíîicCª©e
–xBuf„rSizeByãs, xTriggîLevñByãs, 
pdFALSE
 )

	)

213 
	#xSåómBuf„rCª©eSètic
–
xBuf„rSizeByãs
, 
xTriggîLevñByãs
, 
pucSåómBuf„rSt‹ageAªa
, 
pxSèticSåómBuf„r
 ) 
	`xSåómBuf„rGíîicCª©eSètic
–xBuf„rSizeByãs, xTriggîLevñByãs, 
pdFALSE
,ÖucSåómBuf„rSt‹ageAªa,ÖxSèticSåómBuf„∏)

	)

307 
size_t
 
xSåómBuf„rSíd
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

308 c⁄° *
pvTxD©a
,

309 
size_t
 
xD©aLígthByãs
,

310 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

408 
size_t
 
xSåómBuf„rSídFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

409 c⁄° *
pvTxD©a
,

410 
size_t
 
xD©aLígthByãs
,

411 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

497 
size_t
 
xSåómBuf„rRe˚ive
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

498 *
pvRxD©a
,

499 
size_t
 
xBuf„rLígthByãs
,

500 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

583 
size_t
 
xSåómBuf„rRe˚iveFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

584 *
pvRxD©a
,

585 
size_t
 
xBuf„rLígthByãs
,

586 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

608 
vSåómBuf„rDñëe
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

628 
Ba£Ty≥_t
 
xSåómBuf„rIsFuŒ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

648 
Ba£Ty≥_t
 
xSåómBuf„rIsEm±y
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

671 
Ba£Ty≥_t
 
xSåómBuf„rRe£t
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

692 
size_t
 
xSåómBuf„rS∑˚sAvaûabÀ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

713 
size_t
 
xSåómBuf„rByãsAvaûabÀ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

750 
Ba£Ty≥_t
 
xSåómBuf„rSëTriggîLevñ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, 
size_t
 
xTriggîLevñ
 ) 
PRIVILEGED_FUNCTION
;

789 
Ba£Ty≥_t
 
xSåómBuf„rSídCom∂ëedFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, Ba£Ty≥_à*
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

829 
Ba£Ty≥_t
 
xSåómBuf„rRe˚iveCom∂ëedFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, Ba£Ty≥_à*
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

832 
SåómBuf„rH™dÀ_t
 
xSåómBuf„rGíîicCª©e
–
size_t
 
xBuf„rSizeByãs
,

833 
size_t
 
xTriggîLevñByãs
,

834 
Ba£Ty≥_t
 
xIsMesßgeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

836 
SåómBuf„rH™dÀ_t
 
xSåómBuf„rGíîicCª©eSètic
–
size_t
 
xBuf„rSizeByãs
,

837 
size_t
 
xTriggîLevñByãs
,

838 
Ba£Ty≥_t
 
xIsMesßgeBuf„r
,

839 
uöt8_t
 * c⁄° 
pucSåómBuf„rSt‹ageAªa
,

840 
SèticSåómBuf„r_t
 * c⁄° 
pxSèticSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

842 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

843 
vSåómBuf„rSëSåómBuf„rNumbî
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, 
UBa£Ty≥_t
 
uxSåómBuf„rNumbî
 ) 
PRIVILEGED_FUNCTION
;

844 
UBa£Ty≥_t
 
uxSåómBuf„rGëSåómBuf„rNumbî
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

845 
uöt8_t
 
ucSåómBuf„rGëSåómBuf„rTy≥
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

848 #i‡
deföed
–
__˝lu•lus
 )

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\task.h

29 #i‚de‡
INC_TASK_H


30 
	#INC_TASK_H


	)

32 #i‚de‡
INC_FREERTOS_H


36 
	~"li°.h
"

38 #ifde‡
__˝lu•lus


46 
	#tskKERNEL_VERSION_NUMBER
 "V10.0.1"

	)

47 
	#tskKERNEL_VERSION_MAJOR
 10

	)

48 
	#tskKERNEL_VERSION_MINOR
 0

	)

49 
	#tskKERNEL_VERSION_BUILD
 1

	)

61 * 
	tTaskH™dÀ_t
;

67 
Ba£Ty≥_t
 (*
	tTaskHookFun˘i⁄_t
)( * );

72 
eRu¬ög
 = 0,

73 
eRódy
,

74 
eBlocked
,

75 
eSu•íded
,

76 
eDñëed
,

77 
eInvÆid


78 } 
	teTaskSèã
;

83 
eNoA˘i⁄
 = 0,

84 
eSëBôs
,

85 
eIn¸emít
,

86 
eSëVÆueWôhOvîwrôe
,

87 
eSëVÆueWôhoutOvîwrôe


88 } 
	teNŸifyA˘i⁄
;

93 
	sxTIME_OUT


95 
Ba£Ty≥_t
 
xOvîÊowCou¡
;

96 
TickTy≥_t
 
xTimeOnE¡îög
;

97 } 
	tTimeOut_t
;

102 
	sxMEMORY_REGION


104 *
pvBa£Addªss
;

105 
uöt32_t
 
ulLígthInByãs
;

106 
uöt32_t
 
ulP¨amëîs
;

107 } 
	tMem‹yRegi⁄_t
;

112 
	sxTASK_PARAMETERS


114 
TaskFun˘i⁄_t
 
pvTaskCode
;

115 c⁄° * c⁄° 
pcName
;

116 
uöt16_t
 
usSèckDïth
;

117 *
pvP¨amëîs
;

118 
UBa£Ty≥_t
 
uxPri‹ôy
;

119 
SèckTy≥_t
 *
puxSèckBuf„r
;

120 
Mem‹yRegi⁄_t
 
xRegi⁄s
[ 
p‹tNUM_CONFIGURABLE_REGIONS
 ];

121 #i‡––
p‹tUSING_MPU_WRAPPERS
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

122 
SèticTask_t
 * c⁄° 
pxTaskBuf„r
;

124 } 
	tTaskP¨amëîs_t
;

128 
	sxTASK_STATUS


130 
TaskH™dÀ_t
 
xH™dÀ
;

131 c⁄° *
pcTaskName
;

132 
UBa£Ty≥_t
 
xTaskNumbî
;

133 
eTaskSèã
 
eCuºítSèã
;

134 
UBa£Ty≥_t
 
uxCuºítPri‹ôy
;

135 
UBa£Ty≥_t
 
uxBa£Pri‹ôy
;

136 
uöt32_t
 
ulRunTimeCou¡î
;

137 
SèckTy≥_t
 *
pxSèckBa£
;

138 
uöt16_t
 
usSèckHighW©îM¨k
;

139 } 
	tTaskSètus_t
;

144 
eAb‹tSÀï
 = 0,

145 
eSènd¨dSÀï
,

146 
eNoTasksWaôögTimeout


147 } 
	teSÀïModeSètus
;

154 
	#tskIDLE_PRIORITY
 ( ( 
UBa£Ty≥_t
 ) 0U )

	)

164 
	#èskYIELD
(Ë
	`p‹tYIELD
()

	)

178 
	#èskENTER_CRITICAL
(Ë
	`p‹tENTER_CRITICAL
()

	)

179 
	#èskENTER_CRITICAL_FROM_ISR
(Ë
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
()

	)

193 
	#èskEXIT_CRITICAL
(Ë
	`p‹tEXIT_CRITICAL
()

	)

194 
	#èskEXIT_CRITICAL_FROM_ISR
–
x
 ) 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–x )

	)

203 
	#èskDISABLE_INTERRUPTS
(Ë
	`p‹tDISABLE_INTERRUPTS
()

	)

213 
	#èskENABLE_INTERRUPTS
(Ë
	`p‹tENABLE_INTERRUPTS
()

	)

218 
	#èskSCHEDULER_SUSPENDED
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

219 
	#èskSCHEDULER_NOT_STARTED
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

220 
	#èskSCHEDULER_RUNNING
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

320 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

321 
Ba£Ty≥_t
 
xTaskCª©e
–
TaskFun˘i⁄_t
 
pxTaskCode
,

322 c⁄° * c⁄° 
pcName
,

323 c⁄° 
c⁄figSTACK_DEPTH_TYPE
 
usSèckDïth
,

324 * c⁄° 
pvP¨amëîs
,

325 
UBa£Ty≥_t
 
uxPri‹ôy
,

326 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
 ) 
PRIVILEGED_FUNCTION
;

436 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

437 
TaskH™dÀ_t
 
xTaskCª©eSètic
–
TaskFun˘i⁄_t
 
pxTaskCode
,

438 c⁄° * c⁄° 
pcName
,

439 c⁄° 
uöt32_t
 
ulSèckDïth
,

440 * c⁄° 
pvP¨amëîs
,

441 
UBa£Ty≥_t
 
uxPri‹ôy
,

442 
SèckTy≥_t
 * c⁄° 
puxSèckBuf„r
,

443 
SèticTask_t
 * c⁄° 
pxTaskBuf„r
 ) 
PRIVILEGED_FUNCTION
;

518 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

519 
Ba£Ty≥_t
 
xTaskCª©eRe°ri˘ed
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
, 
TaskH™dÀ_t
 *
pxCª©edTask
 ) 
PRIVILEGED_FUNCTION
;

606 #if––
p‹tUSING_MPU_WRAPPERS
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

607 
Ba£Ty≥_t
 
xTaskCª©eRe°ri˘edSètic
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
, 
TaskH™dÀ_t
 *
pxCª©edTask
 ) 
PRIVILEGED_FUNCTION
;

656 
vTaskAŒoˇãMPURegi⁄s
–
TaskH™dÀ_t
 
xTask
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
pxRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

697 
vTaskDñëe
–
TaskH™dÀ_t
 
xTaskToDñëe
 ) 
PRIVILEGED_FUNCTION
;

749 
vTaskDñay
–c⁄° 
TickTy≥_t
 
xTicksToDñay
 ) 
PRIVILEGED_FUNCTION
;

808 
vTaskDñayU¡û
–
TickTy≥_t
 * c⁄° 
pxPªviousWakeTime
, c⁄° TickTy≥_à
xTimeIn¸emít
 ) 
PRIVILEGED_FUNCTION
;

833 
Ba£Ty≥_t
 
xTaskAb‹tDñay
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

880 
UBa£Ty≥_t
 
uxTaskPri‹ôyGë
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

888 
UBa£Ty≥_t
 
uxTaskPri‹ôyGëFromISR
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

906 
eTaskSèã
 
eTaskGëSèã
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

962 
vTaskGëInfo
–
TaskH™dÀ_t
 
xTask
, 
TaskSètus_t
 *
pxTaskSètus
, 
Ba£Ty≥_t
 
xGëFªeSèckS∑˚
, 
eTaskSèã
 
eSèã
 ) 
PRIVILEGED_FUNCTION
;

1004 
vTaskPri‹ôySë
–
TaskH™dÀ_t
 
xTask
, 
UBa£Ty≥_t
 
uxNewPri‹ôy
 ) 
PRIVILEGED_FUNCTION
;

1055 
vTaskSu•íd
–
TaskH™dÀ_t
 
xTaskToSu•íd
 ) 
PRIVILEGED_FUNCTION
;

1104 
vTaskResume
–
TaskH™dÀ_t
 
xTaskToResume
 ) 
PRIVILEGED_FUNCTION
;

1133 
Ba£Ty≥_t
 
xTaskResumeFromISR
–
TaskH™dÀ_t
 
xTaskToResume
 ) 
PRIVILEGED_FUNCTION
;

1166 
vTaskSèπScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

1222 
vTaskEndScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

1273 
vTaskSu•ídAŒ
–Ë
PRIVILEGED_FUNCTION
;

1327 
Ba£Ty≥_t
 
xTaskResumeAŒ
–Ë
PRIVILEGED_FUNCTION
;

1342 
TickTy≥_t
 
xTaskGëTickCou¡
–Ë
PRIVILEGED_FUNCTION
;

1358 
TickTy≥_t
 
xTaskGëTickCou¡FromISR
–Ë
PRIVILEGED_FUNCTION
;

1372 
UBa£Ty≥_t
 
uxTaskGëNumbîOfTasks
–Ë
PRIVILEGED_FUNCTION
;

1385 *
pcTaskGëName
–
TaskH™dÀ_t
 
xTaskToQuîy
 ) 
PRIVILEGED_FUNCTION
;

1401 
TaskH™dÀ_t
 
xTaskGëH™dÀ
–c⁄° *
pcNameToQuîy
 ) 
PRIVILEGED_FUNCTION
;

1422 
UBa£Ty≥_t
 
uxTaskGëSèckHighW©îM¨k
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1430 #ifde‡
c⁄figUSE_APPLICATION_TASK_TAG


1431 #i‡
c⁄figUSE_APPLICATION_TASK_TAG
 == 1

1440 
vTaskSëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
, 
TaskHookFun˘i⁄_t
 
pxHookFun˘i⁄
 ) 
PRIVILEGED_FUNCTION
;

1448 
TaskHookFun˘i⁄_t
 
xTaskGëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1452 #if–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 > 0 )

1459 
vTaskSëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToSë
, 
Ba£Ty≥_t
 
xIndex
, *
pvVÆue
 ) 
PRIVILEGED_FUNCTION
;

1460 *
pvTaskGëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToQuîy
, 
Ba£Ty≥_t
 
xIndex
 ) 
PRIVILEGED_FUNCTION
;

1475 
Ba£Ty≥_t
 
xTaskCÆlAµliˇti⁄TaskHook
–
TaskH™dÀ_t
 
xTask
, *
pvP¨amëî
 ) 
PRIVILEGED_FUNCTION
;

1484 
TaskH™dÀ_t
 
xTaskGëIdÀTaskH™dÀ
–Ë
PRIVILEGED_FUNCTION
;

1583 
UBa£Ty≥_t
 
uxTaskGëSy°emSèã
–
TaskSètus_t
 * c⁄° 
pxTaskSètusAºay
, c⁄° UBa£Ty≥_à
uxAºaySize
, 
uöt32_t
 * c⁄° 
pulTŸÆRunTime
 ) 
PRIVILEGED_FUNCTION
;

1630 
vTaskLi°
–* 
pcWrôeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

1684 
vTaskGëRunTimeSèts
–*
pcWrôeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

1765 
Ba£Ty≥_t
 
xTaskGíîicNŸify
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
 ) 
PRIVILEGED_FUNCTION
;

1766 
	#xTaskNŸify
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
 ) 
	`xTaskGíîicNŸify
––xTaskToNŸify ), ( ulVÆuê), (ÉA˘i⁄ ), 
NULL
 )

	)

1767 
	#xTaskNŸifyAndQuîy
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
, 
pulPªviousNŸifyVÆue
 ) 
	`xTaskGíîicNŸify
––xTaskToNŸify ), ( ulVÆuê), (ÉA˘i⁄ ), (ÖulPªviousNŸifyVÆuêË)

	)

1856 
Ba£Ty≥_t
 
xTaskGíîicNŸifyFromISR
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
, Ba£Ty≥_à*
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

1857 
	#xTaskNŸifyFromISR
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTaskGíîicNŸifyFromISR
––xTaskToNŸify ), ( ulVÆuê), (ÉA˘i⁄ ), 
NULL
, (ÖxHighîPri‹ôyTaskWokí ) )

	)

1858 
	#xTaskNŸifyAndQuîyFromISR
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
, 
pulPªviousNŸifiˇti⁄VÆue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTaskGíîicNŸifyFromISR
––xTaskToNŸify ), ( ulVÆuê), (ÉA˘i⁄ ), (ÖulPªviousNŸifiˇti⁄VÆuê), (ÖxHighîPri‹ôyTaskWokí ) )

	)

1933 
Ba£Ty≥_t
 
xTaskNŸifyWaô
–
uöt32_t
 
ulBôsToCÀ¨OnE¡ry
, uöt32_à
ulBôsToCÀ¨OnExô
, uöt32_à*
pulNŸifiˇti⁄VÆue
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1979 
	#xTaskNŸifyGive
–
xTaskToNŸify
 ) 
	`xTaskGíîicNŸify
––xTaskToNŸify ), ( 0 ), 
eIn¸emít
, 
NULL
 )

	)

2034 
vTaskNŸifyGiveFromISR
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

2103 
uöt32_t
 
ulTaskNŸifyTake
–
Ba£Ty≥_t
 
xCÀ¨Cou¡OnExô
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

2119 
Ba£Ty≥_t
 
xTaskNŸifySèãCÀ¨
–
TaskH™dÀ_t
 
xTask
 );

2140 
Ba£Ty≥_t
 
xTaskIn¸emítTick
–Ë
PRIVILEGED_FUNCTION
;

2173 
vTaskPœ˚OnEvítLi°
–
Li°_t
 * c⁄° 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

2174 
vTaskPœ˚OnUn‹dîedEvítLi°
–
Li°_t
 * 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xIãmVÆue
, c⁄° TickTy≥_à
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

2187 
vTaskPœ˚OnEvítLi°Re°ri˘ed
–
Li°_t
 * c⁄° 
pxEvítLi°
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
 ) 
PRIVILEGED_FUNCTION
;

2213 
Ba£Ty≥_t
 
xTaskRemoveFromEvítLi°
–c⁄° 
Li°_t
 * c⁄° 
pxEvítLi°
 ) 
PRIVILEGED_FUNCTION
;

2214 
vTaskRemoveFromUn‹dîedEvítLi°
–
Li°Iãm_t
 * 
pxEvítLi°Iãm
, c⁄° 
TickTy≥_t
 
xIãmVÆue
 ) 
PRIVILEGED_FUNCTION
;

2224 
vTaskSwôchC⁄ãxt
–Ë
PRIVILEGED_FUNCTION
;

2230 
TickTy≥_t
 
uxTaskRe£tEvítIãmVÆue
–Ë
PRIVILEGED_FUNCTION
;

2235 
TaskH™dÀ_t
 
xTaskGëCuºítTaskH™dÀ
–Ë
PRIVILEGED_FUNCTION
;

2240 
vTaskSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 ) 
PRIVILEGED_FUNCTION
;

2246 
Ba£Ty≥_t
 
xTaskCheckF‹TimeOut
–
TimeOut_t
 * c⁄° 
pxTimeOut
, 
TickTy≥_t
 * c⁄° 
pxTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

2252 
vTaskMis£dYõld
–Ë
PRIVILEGED_FUNCTION
;

2258 
Ba£Ty≥_t
 
xTaskGëScheduÀrSèã
–Ë
PRIVILEGED_FUNCTION
;

2264 
Ba£Ty≥_t
 
xTaskPri‹ôyInhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 ) 
PRIVILEGED_FUNCTION
;

2270 
Ba£Ty≥_t
 
xTaskPri‹ôyDisöhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 ) 
PRIVILEGED_FUNCTION
;

2280 
vTaskPri‹ôyDisöhîôA·îTimeout
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
, 
UBa£Ty≥_t
 
uxHighe°Pri‹ôyWaôögTask
 ) 
PRIVILEGED_FUNCTION
;

2285 
UBa£Ty≥_t
 
uxTaskGëTaskNumbî
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

2291 
vTaskSëTaskNumbî
–
TaskH™dÀ_t
 
xTask
, c⁄° 
UBa£Ty≥_t
 
uxH™dÀ
 ) 
PRIVILEGED_FUNCTION
;

2301 
vTaskSãpTick
–c⁄° 
TickTy≥_t
 
xTicksToJump
 ) 
PRIVILEGED_FUNCTION
;

2317 
eSÀïModeSètus
 
eTaskC⁄fúmSÀïModeSètus
–Ë
PRIVILEGED_FUNCTION
;

2323 *
pvTaskIn¸emítMuãxHñdCou¡
–Ë
PRIVILEGED_FUNCTION
;

2329 
vTaskI¡î«lSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 ) 
PRIVILEGED_FUNCTION
;

2332 #ifde‡
__˝lu•lus


	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\timers.h

29 #i‚de‡
TIMERS_H


30 
	#TIMERS_H


	)

32 #i‚de‡
INC_FREERTOS_H


38 
	~"èsk.h
"

41 #ifde‡
__˝lu•lus


54 
	#tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) -2 )

	)

55 
	#tmrCOMMAND_EXECUTE_CALLBACK
 ( ( 
Ba£Ty≥_t
 ) -1 )

	)

56 
	#tmrCOMMAND_START_DONT_TRACE
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

57 
	#tmrCOMMAND_START
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

58 
	#tmrCOMMAND_RESET
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

59 
	#tmrCOMMAND_STOP
 ( ( 
Ba£Ty≥_t
 ) 3 )

	)

60 
	#tmrCOMMAND_CHANGE_PERIOD
 ( ( 
Ba£Ty≥_t
 ) 4 )

	)

61 
	#tmrCOMMAND_DELETE
 ( ( 
Ba£Ty≥_t
 ) 5 )

	)

63 
	#tmrFIRST_FROM_ISR_COMMAND
 ( ( 
Ba£Ty≥_t
 ) 6 )

	)

64 
	#tmrCOMMAND_START_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 6 )

	)

65 
	#tmrCOMMAND_RESET_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 7 )

	)

66 
	#tmrCOMMAND_STOP_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 8 )

	)

67 
	#tmrCOMMAND_CHANGE_PERIOD_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 9 )

	)

76 * 
	tTimîH™dÀ_t
;

81 (*
TimîCÆlbackFun˘i⁄_t
)–
	tTimîH™dÀ_t
 
	txTimî
 );

87 (*
PídedFun˘i⁄_t
)–*, 
	tuöt32_t
 );

226 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

227 
TimîH™dÀ_t
 
xTimîCª©e
–c⁄° * c⁄° 
pcTimîName
,

228 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

229 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

230 * c⁄° 
pvTimîID
,

231 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
 ) 
PRIVILEGED_FUNCTION
;

356 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

357 
TimîH™dÀ_t
 
xTimîCª©eSètic
–c⁄° * c⁄° 
pcTimîName
,

358 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

359 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

360 * c⁄° 
pvTimîID
,

361 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
,

362 
SèticTimî_t
 *
pxTimîBuf„r
 ) 
PRIVILEGED_FUNCTION
;

385 *
pvTimîGëTimîID
–c⁄° 
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

406 
vTimîSëTimîID
–
TimîH™dÀ_t
 
xTimî
, *
pvNewID
 ) 
PRIVILEGED_FUNCTION
;

443 
Ba£Ty≥_t
 
xTimîIsTimîA˘ive
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

451 
TaskH™dÀ_t
 
xTimîGëTimîD´m⁄TaskH™dÀ
–Ë
PRIVILEGED_FUNCTION
;

503 
	#xTimîSèπ
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START
, ( 
	`xTaskGëTickCou¡
(Ë), 
NULL
, ( xTicksToWaô ) )

	)

545 
	#xTimîSt›
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_STOP
, 0U, 
NULL
, ( xTicksToWaô ) )

	)

625 
	#xTimîCh™gePîiod
–
xTimî
, 
xNewPîiod
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_CHANGE_PERIOD
, ( xNewPîiod ), 
NULL
, ( xTicksToWaô ) )

	)

663 
	#xTimîDñëe
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_DELETE
, 0U, 
NULL
, ( xTicksToWaô ) )

	)

787 
	#xTimîRe£t
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_RESET
, ( 
	`xTaskGëTickCou¡
(Ë), 
NULL
, ( xTicksToWaô ) )

	)

873 
	#xTimîSèπFromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START_FROM_ISR
, ( 
	`xTaskGëTickCou¡FromISR
(Ë), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

936 
	#xTimîSt›FromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_STOP_FROM_ISR
, 0, (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

1009 
	#xTimîCh™gePîiodFromISR
–
xTimî
, 
xNewPîiod
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_CHANGE_PERIOD_FROM_ISR
, ( xNewPîiod ), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

1095 
	#xTimîRe£tFromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_RESET_FROM_ISR
, ( 
	`xTaskGëTickCou¡FromISR
(Ë), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

1186 
Ba£Ty≥_t
 
xTimîPídFun˘i⁄CÆlFromISR
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, Ba£Ty≥_à*
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

1220 
Ba£Ty≥_t
 
xTimîPídFun˘i⁄CÆl
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1231 c⁄° * 
pcTimîGëName
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

1242 
TickTy≥_t
 
xTimîGëPîiod
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

1257 
TickTy≥_t
 
xTimîGëExpúyTime
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

1263 
Ba£Ty≥_t
 
xTimîCª©eTimîTask
–Ë
PRIVILEGED_FUNCTION
;

1264 
Ba£Ty≥_t
 
xTimîGíîicComm™d
–
TimîH™dÀ_t
 
xTimî
, c⁄° Ba£Ty≥_à
xComm™dID
, c⁄° 
TickTy≥_t
 
xO±i⁄ÆVÆue
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° TickTy≥_à
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1266 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1267 
vTimîSëTimîNumbî
–
TimîH™dÀ_t
 
xTimî
, 
UBa£Ty≥_t
 
uxTimîNumbî
 ) 
PRIVILEGED_FUNCTION
;

1268 
UBa£Ty≥_t
 
uxTimîGëTimîNumbî
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

1271 #ifde‡
__˝lu•lus


	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\list.c

29 
	~<°dlib.h
>

30 
	~"FªeRTOS.h
"

31 
	~"li°.h
"

37 
	$vLi°Inôüli£
–
Li°_t
 * c⁄° 
pxLi°
 )

42 
pxLi°
->
pxIndex
 = ( 
Li°Iãm_t
 * ) &–pxLi°->
xLi°End
 );

46 
pxLi°
->
xLi°End
.
xIãmVÆue
 = 
p‹tMAX_DELAY
;

50 
pxLi°
->
xLi°End
.
pxNext
 = ( 
Li°Iãm_t
 * ) &(ÖxList->xListEnd );

51 
pxLi°
->
xLi°End
.
pxPªvious
 = ( 
Li°Iãm_t
 * ) &(ÖxList->xListEnd );

53 
pxLi°
->
uxNumbîOfIãms
 = ( 
UBa£Ty≥_t
 ) 0U;

57 
	`li°SET_LIST_INTEGRITY_CHECK_1_VALUE
–
pxLi°
 );

58 
	`li°SET_LIST_INTEGRITY_CHECK_2_VALUE
–
pxLi°
 );

59 
	}
}

62 
	$vLi°Inôüli£Iãm
–
Li°Iãm_t
 * c⁄° 
pxIãm
 )

65 
pxIãm
->
pvC⁄èöî
 = 
NULL
;

69 
	`li°SET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 );

70 
	`li°SET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 );

71 
	}
}

74 
	$vLi°In£πEnd
–
Li°_t
 * c⁄° 
pxLi°
, 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 )

76 
Li°Iãm_t
 * c⁄° 
pxIndex
 = 
pxLi°
->pxIndex;

81 
	`li°TEST_LIST_INTEGRITY
–
pxLi°
 );

82 
	`li°TEST_LIST_ITEM_INTEGRITY
–
pxNewLi°Iãm
 );

87 
pxNewLi°Iãm
->
pxNext
 = 
pxIndex
;

88 
pxNewLi°Iãm
->
pxPªvious
 = 
pxIndex
->pxPrevious;

91 
	`mtCOVERAGE_TEST_DELAY
();

93 
pxIndex
->
pxPªvious
->
pxNext
 = 
pxNewLi°Iãm
;

94 
pxIndex
->
pxPªvious
 = 
pxNewLi°Iãm
;

97 
pxNewLi°Iãm
->
pvC⁄èöî
 = ( * ) 
pxLi°
;

99 –
pxLi°
->
uxNumbîOfIãms
 )++;

100 
	}
}

103 
	$vLi°In£π
–
Li°_t
 * c⁄° 
pxLi°
, 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 )

105 
Li°Iãm_t
 *
pxIãøt‹
;

106 c⁄° 
TickTy≥_t
 
xVÆueOfIn£πi⁄
 = 
pxNewLi°Iãm
->
xIãmVÆue
;

111 
	`li°TEST_LIST_INTEGRITY
–
pxLi°
 );

112 
	`li°TEST_LIST_ITEM_INTEGRITY
–
pxNewLi°Iãm
 );

122 if–
xVÆueOfIn£πi⁄
 =
p‹tMAX_DELAY
 )

124 
pxIãøt‹
 = 
pxLi°
->
xLi°End
.
pxPªvious
;

150  
pxIãøt‹
 = ( 
Li°Iãm_t
 * ) &–
pxLi°
->
xLi°End
 );ÖxIãøt‹->
pxNext
->
xIãmVÆue
 <
xVÆueOfIn£πi⁄
;ÖxIterator =ÖxIterator->pxNext )

157 
pxNewLi°Iãm
->
pxNext
 = 
pxIãøt‹
->pxNext;

158 
pxNewLi°Iãm
->
pxNext
->
pxPªvious
 =ÖxNewListItem;

159 
pxNewLi°Iãm
->
pxPªvious
 = 
pxIãøt‹
;

160 
pxIãøt‹
->
pxNext
 = 
pxNewLi°Iãm
;

164 
pxNewLi°Iãm
->
pvC⁄èöî
 = ( * ) 
pxLi°
;

166 –
pxLi°
->
uxNumbîOfIãms
 )++;

167 
	}
}

170 
UBa£Ty≥_t
 
	$uxLi°Remove
–
Li°Iãm_t
 * c⁄° 
pxIãmToRemove
 )

174 
Li°_t
 * c⁄° 
pxLi°
 = ( Li°_à* ) 
pxIãmToRemove
->
pvC⁄èöî
;

176 
pxIãmToRemove
->
pxNext
->
pxPªvious
 =ÖxItemToRemove->pxPrevious;

177 
pxIãmToRemove
->
pxPªvious
->
pxNext
 =ÖxItemToRemove->pxNext;

180 
	`mtCOVERAGE_TEST_DELAY
();

183 if–
pxLi°
->
pxIndex
 =
pxIãmToRemove
 )

185 
pxLi°
->
pxIndex
 = 
pxIãmToRemove
->
pxPªvious
;

189 
	`mtCOVERAGE_TEST_MARKER
();

192 
pxIãmToRemove
->
pvC⁄èöî
 = 
NULL
;

193 –
pxLi°
->
uxNumbîOfIãms
 )--;

195  
pxLi°
->
uxNumbîOfIãms
;

196 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\portable\GCC\ARM_CM4F\port.c

33 
	~"FªeRTOS.h
"

34 
	~"èsk.h
"

36 #i‚de‡
__VFP_FP__


37 #îr‹ 
This
 
p‹t
 
ˇn
 
⁄ly
 
be
 
u£d
 
whí
 
the
 
¥oje˘
 
›ti⁄s
 
¨e
 
c⁄figuªd
 
to
 
íabÀ
 
h¨dw¨e
 
Êﬂtög
 
poöt
 
suµ‹t
.

40 #i‚de‡
c⁄figSYSTICK_CLOCK_HZ


41 
	#c⁄figSYSTICK_CLOCK_HZ
 
c⁄figCPU_CLOCK_HZ


	)

43 
	#p‹tNVIC_SYSTICK_CLK_BIT
 ( 1UL << 2UL )

	)

47 
	#p‹tNVIC_SYSTICK_CLK_BIT
 ( 0 )

	)

51 
	#p‹tNVIC_SYSTICK_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e010 ) )

	)

52 
	#p‹tNVIC_SYSTICK_LOAD_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e014 ) )

	)

53 
	#p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e018 ) )

	)

54 
	#p‹tNVIC_SYSPRI2_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed20 ) )

	)

56 
	#p‹tNVIC_SYSTICK_INT_BIT
 ( 1UL << 1UL )

	)

57 
	#p‹tNVIC_SYSTICK_ENABLE_BIT
 ( 1UL << 0UL )

	)

58 
	#p‹tNVIC_SYSTICK_COUNT_FLAG_BIT
 ( 1UL << 16UL )

	)

59 
	#p‹tNVIC_PENDSVCLEAR_BIT
 ( 1UL << 27UL )

	)

60 
	#p‹tNVIC_PEND_SYSTICK_CLEAR_BIT
 ( 1UL << 25UL )

	)

64 
	#p‹tCPUID
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xE000ed00 ) )

	)

65 
	#p‹tCORTEX_M7_r0p1_ID
 ( 0x410FC271UL )

	)

66 
	#p‹tCORTEX_M7_r0p0_ID
 ( 0x410FC270UL )

	)

68 
	#p‹tNVIC_PENDSV_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 16UL )

	)

69 
	#p‹tNVIC_SYSTICK_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24UL )

	)

72 
	#p‹tFIRST_USER_INTERRUPT_NUMBER
 ( 16 )

	)

73 
	#p‹tNVIC_IP_REGISTERS_OFFSET_16
 ( 0xE000E3F0 )

	)

74 
	#p‹tAIRCR_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xE000ED0C ) )

	)

75 
	#p‹tMAX_8_BIT_VALUE
 ( ( 
uöt8_t
 ) 0xf‡)

	)

76 
	#p‹tTOP_BIT_OF_BYTE
 ( ( 
uöt8_t
 ) 0x80 )

	)

77 
	#p‹tMAX_PRIGROUP_BITS
 ( ( 
uöt8_t
 ) 7 )

	)

78 
	#p‹tPRIORITY_GROUP_MASK
 ( 0x07UL << 8UL )

	)

79 
	#p‹tPRIGROUP_SHIFT
 ( 8UL )

	)

82 
	#p‹tVECTACTIVE_MASK
 ( 0xFFUL )

	)

85 
	#p‹tFPCCR
 ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ef34 )

	)

86 
	#p‹tASPEN_AND_LSPEN_BITS
 ( 0x3UL << 30UL )

	)

89 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

90 
	#p‹tINITIAL_EXC_RETURN
 ( 0xfffffffd )

	)

93 
	#p‹tMAX_24_BIT_NUMBER
 ( 0xffffffUL )

	)

97 
	#p‹tSTART_ADDRESS_MASK
 ( ( 
SèckTy≥_t
 ) 0xffffff„UL )

	)

102 
	#p‹tMISSED_COUNTS_FACTOR
 ( 45UL )

	)

107 #ifde‡
c⁄figTASK_RETURN_ADDRESS


108 
	#p‹tTASK_RETURN_ADDRESS
 
c⁄figTASK_RETURN_ADDRESS


	)

110 
	#p‹tTASK_RETURN_ADDRESS
 
¥vTaskExôEº‹


	)

118 
vP‹tSëupTimîI¡îru±
( );

123 
	$xP‹tPídSVH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

124 
	`xP‹tSysTickH™dÀr
( );

125 
	$vP‹tSVCH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

130 
	$¥vP‹tSèπFú°Task
–Ë
	`__©åibuã__
 (–
«ked
 ));

135 
	$vP‹tE«bÀVFP
–Ë
	`__©åibuã__
 (–
«ked
 ));

140 
	`¥vTaskExôEº‹
( );

146 
UBa£Ty≥_t
 
uxCrôiˇlNe°ög
 = 0xaaaaaaaa;

151 #if–
c⁄figUSE_TICKLESS_IDLE
 == 1 )

152 
uöt32_t
 
ulTimîCou¡sF‹O√Tick
 = 0;

159 #if–
c⁄figUSE_TICKLESS_IDLE
 == 1 )

160 
uöt32_t
 
xMaximumPossibÀSuµªs£dTicks
 = 0;

167 #if–
c⁄figUSE_TICKLESS_IDLE
 == 1 )

168 
uöt32_t
 
ulSt›≥dTimîCom≥nßti⁄
 = 0;

176 #if–
c⁄figASSERT_DEFINED
 == 1 )

177 
uöt8_t
 
ucMaxSysCÆlPri‹ôy
 = 0;

178 
uöt32_t
 
ulMaxPRIGROUPVÆue
 = 0;

179 c⁄° vﬁ©ûê
uöt8_t
 * c⁄° 
pcI¡îru±Pri‹ôyRegi°îs
 = ( c⁄° vﬁ©ûêuöt8_à* c⁄° ) 
p‹tNVIC_IP_REGISTERS_OFFSET_16
;

187 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

194 
pxT›OfSèck
--;

196 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

197 
pxT›OfSèck
--;

198 *
pxT›OfSèck
 = ( ( 
SèckTy≥_t
 ) 
pxCode
 ) & 
p‹tSTART_ADDRESS_MASK
;

199 
pxT›OfSèck
--;

200 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tTASK_RETURN_ADDRESS
;

203 
pxT›OfSèck
 -= 5;

204 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

208 
pxT›OfSèck
--;

209 *
pxT›OfSèck
 = 
p‹tINITIAL_EXC_RETURN
;

211 
pxT›OfSèck
 -= 8;

213  
pxT›OfSèck
;

214 
	}
}

217 
	$¥vTaskExôEº‹
( )

219 vﬁ©ûê
uöt32_t
 
ulDummy
 = 0;

227 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == ~0UL );

228 
	`p‹tDISABLE_INTERRUPTS
();

229  
ulDummy
 == 0 )

239 
	}
}

242 
	$vP‹tSVCH™dÀr
( )

244 
__asm
 volatile (

258 
	}
}

261 
	$¥vP‹tSèπFú°Task
( )

267 
__asm
 volatile(

281 
	}
}

287 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

291 
	`c⁄figASSERT
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 );

296 
	`c⁄figASSERT
–
p‹tCPUID
 !
p‹tCORTEX_M7_r0p1_ID
 );

297 
	`c⁄figASSERT
–
p‹tCPUID
 !
p‹tCORTEX_M7_r0p0_ID
 );

299 #if–
c⁄figASSERT_DEFINED
 == 1 )

301 vﬁ©ûê
uöt32_t
 
ulOrigöÆPri‹ôy
;

302 vﬁ©ûê
uöt8_t
 * c⁄° 
pucFú°U£rPri‹ôyRegi°î
 = ( vﬁ©ûêuöt8_à* c⁄° ) ( 
p‹tNVIC_IP_REGISTERS_OFFSET_16
 + 
p‹tFIRST_USER_INTERRUPT_NUMBER
 );

303 vﬁ©ûê
uöt8_t
 
ucMaxPri‹ôyVÆue
;

311 
ulOrigöÆPri‹ôy
 = *
pucFú°U£rPri‹ôyRegi°î
;

315 *
pucFú°U£rPri‹ôyRegi°î
 = 
p‹tMAX_8_BIT_VALUE
;

318 
ucMaxPri‹ôyVÆue
 = *
pucFú°U£rPri‹ôyRegi°î
;

321 
ucMaxSysCÆlPri‹ôy
 = 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 & 
ucMaxPri‹ôyVÆue
;

325 
ulMaxPRIGROUPVÆue
 = 
p‹tMAX_PRIGROUP_BITS
;

326  ( 
ucMaxPri‹ôyVÆue
 & 
p‹tTOP_BIT_OF_BYTE
 ) ==ÖortTOP_BIT_OF_BYTE )

328 
ulMaxPRIGROUPVÆue
--;

329 
ucMaxPri‹ôyVÆue
 <<–
uöt8_t
 ) 0x01;

332 #ifde‡
__NVIC_PRIO_BITS


337 
	`c⁄figASSERT
––
p‹tMAX_PRIGROUP_BITS
 - 
ulMaxPRIGROUPVÆue
 ) =
__NVIC_PRIO_BITS
 );

341 #ifde‡
c⁄figPRIO_BITS


346 
	`c⁄figASSERT
––
p‹tMAX_PRIGROUP_BITS
 - 
ulMaxPRIGROUPVÆue
 ) =
c⁄figPRIO_BITS
 );

352 
ulMaxPRIGROUPVÆue
 <<
p‹tPRIGROUP_SHIFT
;

353 
ulMaxPRIGROUPVÆue
 &
p‹tPRIORITY_GROUP_MASK
;

357 *
pucFú°U£rPri‹ôyRegi°î
 = 
ulOrigöÆPri‹ôy
;

362 
p‹tNVIC_SYSPRI2_REG
 |
p‹tNVIC_PENDSV_PRI
;

363 
p‹tNVIC_SYSPRI2_REG
 |
p‹tNVIC_SYSTICK_PRI
;

367 
	`vP‹tSëupTimîI¡îru±
();

370 
uxCrôiˇlNe°ög
 = 0;

373 
	`vP‹tE«bÀVFP
();

376 *–
p‹tFPCCR
 ) |
p‹tASPEN_AND_LSPEN_BITS
;

379 
	`¥vP‹tSèπFú°Task
();

387 
	`vTaskSwôchC⁄ãxt
();

388 
	`¥vTaskExôEº‹
();

392 
	}
}

395 
	$vP‹tEndScheduÀr
( )

399 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == 1000UL );

400 
	}
}

403 
	$vP‹tE¡îCrôiˇl
( )

405 
	`p‹tDISABLE_INTERRUPTS
();

406 
uxCrôiˇlNe°ög
++;

413 if–
uxCrôiˇlNe°ög
 == 1 )

415 
	`c⁄figASSERT
––
p‹tNVIC_INT_CTRL_REG
 & 
p‹tVECTACTIVE_MASK
 ) == 0 );

417 
	}
}

420 
	$vP‹tExôCrôiˇl
( )

422 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 );

423 
uxCrôiˇlNe°ög
--;

424 if–
uxCrôiˇlNe°ög
 == 0 )

426 
	`p‹tENABLE_INTERRUPTS
();

428 
	}
}

431 
	$xP‹tPídSVH™dÀr
( )

435 
__asm
 volatile

472 #ifde‡
WORKAROUND_PMU_CM001


473 #i‡
WORKAROUND_PMU_CM001
 == 1

483 ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
)

485 
	}
}

488 
	$xP‹tSysTickH™dÀr
( )

494 
	`p‹tDISABLE_INTERRUPTS
();

497 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

501 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT
;

504 
	`p‹tENABLE_INTERRUPTS
();

505 
	}
}

508 #if–
c⁄figUSE_TICKLESS_IDLE
 == 1 )

510 
__©åibuã__
((
wók
)Ë
	$vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 )

512 
uöt32_t
 
ulRñﬂdVÆue
, 
ulCom∂ëeTickPîiods
, 
ulCom∂ëedSysTickDe¸emíts
;

513 
TickTy≥_t
 
xModifübÀIdÀTime
;

516 if–
xEx≥˘edIdÀTime
 > 
xMaximumPossibÀSuµªs£dTicks
 )

518 
xEx≥˘edIdÀTime
 = 
xMaximumPossibÀSuµªs£dTicks
;

525 
p‹tNVIC_SYSTICK_CTRL_REG
 &~
p‹tNVIC_SYSTICK_ENABLE_BIT
;

530 
ulRñﬂdVÆue
 = 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 + ( 
ulTimîCou¡sF‹O√Tick
 * ( 
xEx≥˘edIdÀTime
 - 1UL ) );

531 if–
ulRñﬂdVÆue
 > 
ulSt›≥dTimîCom≥nßti⁄
 )

533 
ulRñﬂdVÆue
 -
ulSt›≥dTimîCom≥nßti⁄
;

538 
__asm
 volatile( "cpsid i" ::: "memory" );

539 
__asm
 volatile( "dsb" );

540 
__asm
 volatile( "isb" );

544 if–
	`eTaskC⁄fúmSÀïModeSètus
(Ë=
eAb‹tSÀï
 )

548 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
;

551 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

555 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulTimîCou¡sF‹O√Tick
 - 1UL;

559 
__asm
 volatile( "cpsie i" ::: "memory" );

564 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulRñﬂdVÆue
;

568 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

571 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

578 
xModifübÀIdÀTime
 = 
xEx≥˘edIdÀTime
;

579 
	`c⁄figPRE_SLEEP_PROCESSING
–
xModifübÀIdÀTime
 );

580 if–
xModifübÀIdÀTime
 > 0 )

582 
__asm
 volatile( "dsb" ::: "memory" );

583 
__asm
 volatile( "wfi" );

584 
__asm
 volatile( "isb" );

586 
	`c⁄figPOST_SLEEP_PROCESSING
–
xEx≥˘edIdÀTime
 );

591 
__asm
 volatile( "cpsie i" ::: "memory" );

592 
__asm
 volatile( "dsb" );

593 
__asm
 volatile( "isb" );

599 
__asm
 volatile( "cpsid i" ::: "memory" );

600 
__asm
 volatile( "dsb" );

601 
__asm
 volatile( "isb" );

610 
p‹tNVIC_SYSTICK_CTRL_REG
 = ( 
p‹tNVIC_SYSTICK_CLK_BIT
 | 
p‹tNVIC_SYSTICK_INT_BIT
 );

617 if––
p‹tNVIC_SYSTICK_CTRL_REG
 & 
p‹tNVIC_SYSTICK_COUNT_FLAG_BIT
 ) != 0 )

619 
uöt32_t
 
ulCÆcuœãdLﬂdVÆue
;

625 
ulCÆcuœãdLﬂdVÆue
 = ( 
ulTimîCou¡sF‹O√Tick
 - 1UL ) - ( 
ulRñﬂdVÆue
 - 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 );

630 if––
ulCÆcuœãdLﬂdVÆue
 < 
ulSt›≥dTimîCom≥nßti⁄
 ) || ( ulCÆcuœãdLﬂdVÆuê> 
ulTimîCou¡sF‹O√Tick
 ) )

632 
ulCÆcuœãdLﬂdVÆue
 = ( 
ulTimîCou¡sF‹O√Tick
 - 1UL );

635 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulCÆcuœãdLﬂdVÆue
;

640 
ulCom∂ëeTickPîiods
 = 
xEx≥˘edIdÀTime
 - 1UL;

648 
ulCom∂ëedSysTickDe¸emíts
 = ( 
xEx≥˘edIdÀTime
 * 
ulTimîCou¡sF‹O√Tick
 ) - 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
;

652 
ulCom∂ëeTickPîiods
 = 
ulCom∂ëedSysTickDe¸emíts
 / 
ulTimîCou¡sF‹O√Tick
;

656 
p‹tNVIC_SYSTICK_LOAD_REG
 = ( ( 
ulCom∂ëeTickPîiods
 + 1UL ) * 
ulTimîCou¡sF‹O√Tick
 ) - 
ulCom∂ëedSysTickDe¸emíts
;

662 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

663 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

664 
	`vTaskSãpTick
–
ulCom∂ëeTickPîiods
 );

665 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulTimîCou¡sF‹O√Tick
 - 1UL;

668 
__asm
 volatile( "cpsie i" ::: "memory" );

670 
	}
}

679 
__©åibuã__
(–
wók
 )Ë
	$vP‹tSëupTimîI¡îru±
( )

682 #if–
c⁄figUSE_TICKLESS_IDLE
 == 1 )

684 
ulTimîCou¡sF‹O√Tick
 = ( 
c⁄figSYSTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 );

685 
xMaximumPossibÀSuµªs£dTicks
 = 
p‹tMAX_24_BIT_NUMBER
 / 
ulTimîCou¡sF‹O√Tick
;

686 
ulSt›≥dTimîCom≥nßti⁄
 = 
p‹tMISSED_COUNTS_FACTOR
 / ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figSYSTICK_CLOCK_HZ
 );

691 
p‹tNVIC_SYSTICK_CTRL_REG
 = 0UL;

692 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

695 
p‹tNVIC_SYSTICK_LOAD_REG
 = ( 
c⁄figSYSTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

696 
p‹tNVIC_SYSTICK_CTRL_REG
 = ( 
p‹tNVIC_SYSTICK_CLK_BIT
 | 
p‹tNVIC_SYSTICK_INT_BIT
 | 
p‹tNVIC_SYSTICK_ENABLE_BIT
 );

697 
	}
}

701 
	$vP‹tE«bÀVFP
( )

703 
__asm
 volatile

712 
	}
}

715 #if–
c⁄figASSERT_DEFINED
 == 1 )

717 
	$vP‹tVÆid©eI¡îru±Pri‹ôy
( )

719 
uöt32_t
 
ulCuºítI¡îru±
;

720 
uöt8_t
 
ucCuºítPri‹ôy
;

723 
__asm
 vﬁ©ûe–"mr†%0, ip§" : "Ù"–
ulCuºítI¡îru±
 ) :: "memory" );

726 if–
ulCuºítI¡îru±
 >
p‹tFIRST_USER_INTERRUPT_NUMBER
 )

729 
ucCuºítPri‹ôy
 = 
pcI¡îru±Pri‹ôyRegi°îs
[ 
ulCuºítI¡îru±
 ];

754 
	`c⁄figASSERT
–
ucCuºítPri‹ôy
 >
ucMaxSysCÆlPri‹ôy
 );

770 
	`c⁄figASSERT
––
p‹tAIRCR_REG
 & 
p‹tPRIORITY_GROUP_MASK
 ) <
ulMaxPRIGROUPVÆue
 );

771 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\portable\GCC\ARM_CM4F\portmacro.h

29 #i‚de‡
PORTMACRO_H


30 
	#PORTMACRO_H


	)

32 #ifde‡
__˝lu•lus


47 
	#p‹tCHAR
 

	)

48 
	#p‹tFLOAT
 

	)

49 
	#p‹tDOUBLE
 

	)

50 
	#p‹tLONG
 

	)

51 
	#p‹tSHORT
 

	)

52 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

53 
	#p‹tBASE_TYPE
 

	)

55 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

56 
	tBa£Ty≥_t
;

57 
	tUBa£Ty≥_t
;

59 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

60 
uöt16_t
 
	tTickTy≥_t
;

61 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

63 
uöt32_t
 
	tTickTy≥_t
;

64 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

68 
	#p‹tTICK_TYPE_IS_ATOMIC
 1

	)

73 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

74 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

75 
	#p‹tBYTE_ALIGNMENT
 8

	)

79 
	#p‹tYIELD
() \

82 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT
; \

86 
__asm
 volatile( "dsb" ::: "memory" ); \

87 
__asm
 volatile( "isb" ); \

88 }

	)

90 
	#p‹tNVIC_INT_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed04 ) )

	)

91 
	#p‹tNVIC_PENDSVSET_BIT
 ( 1UL << 28UL )

	)

92 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed !
pdFALSE
 ) 
	`p‹tYIELD
()

	)

93 
	#p‹tYIELD_FROM_ISR
–
x
 ) 
	`p‹tEND_SWITCHING_ISR
–x )

	)

97 
vP‹tE¡îCrôiˇl
( );

98 
vP‹tExôCrôiˇl
( );

99 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tRai£BASEPRI
()

	)

100 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vP‹tSëBASEPRI
(x)

	)

101 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`vP‹tRai£BASEPRI
()

	)

102 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tSëBASEPRI
(0)

	)

103 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

104 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

111 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

112 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

116 #i‚de‡
p‹tSUPPRESS_TICKS_AND_SLEEP


117 
vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 );

118 
	#p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 ) 
	`vP‹tSuµªssTicksAndSÀï
–xEx≥˘edIdÀTimê)

	)

123 #i‚de‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION


124 
	#c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 1

	)

127 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

130 
__©åibuã__
––
Æways_ölöe
 ) ) 
ölöe
 
uöt8_t
 
ucP‹tCou¡LódögZîos
–
uöt32_t
 
ulBôm≠
 )

132 
uöt8_t
 
	gucRëu∫
;

134 
__asm
 vﬁ©ûê–"˛z %0, %1" : "Ù" ( 
ucRëu∫
 ) : "r" ( 
ulBôm≠
 ) : "memory" );

135  
	gucRëu∫
;

139 #if–
c⁄figMAX_PRIORITIES
 > 32 )

140 #îr‹ 
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 
ˇn
 
⁄ly
 
be
 
£t
 
to
 1 
whí
 
c⁄figMAX_PRIORITIES
 
is
 
Àss
 
th™
 
‹
 
equÆ
Åÿ32. 
It
 i†
vîy
 
øª
 
th©
 
a
 
sy°em
 
ªquúes
 
m‹e
Åh™ 10Åÿ15 
dif„ªn˚
 
¥i‹ôõs
 
as
 
èsks
Åh© 
sh¨e
á 
¥i‹ôy
 
wûl
 
time
 
¶i˚
.

144 
	#p‹tRECORD_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë|–1UL << ( uxPri‹ôy ) )

	)

145 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë&~–1UL << ( uxPri‹ôy ) )

	)

149 
	#p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxRódyPri‹ôõs
 ) uxT›Pri‹ôy = ( 31UL - ( 
uöt32_t
 ) 
	`ucP‹tCou¡LódögZîos
––uxRódyPri‹ôõ†ËË)

	)

155 #ifde‡
c⁄figASSERT


156 
vP‹tVÆid©eI¡îru±Pri‹ôy
( );

157 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`vP‹tVÆid©eI¡îru±Pri‹ôy
()

	)

161 
	#p‹tNOP
()

	)

163 
	#p‹tINLINE
 
__ölöe


	)

165 #i‚de‡
p‹tFORCE_INLINE


166 
	#p‹tFORCE_INLINE
 
ölöe
 
	`__©åibuã__
(–
Æways_ölöe
))

	)

169 
p‹tFORCE_INLINE
 
Ba£Ty≥_t
 
xP‹tIsInsideI¡îru±
( )

171 
uöt32_t
 
	gulCuºítI¡îru±
;

172 
Ba£Ty≥_t
 
	gxRëu∫
;

175 
__asm
 vﬁ©ûe–"mr†%0, ip§" : "Ù"–
ulCuºítI¡îru±
 ) :: "memory" );

177 if–
	gulCuºítI¡îru±
 == 0 )

179 
xRëu∫
 = 
pdFALSE
;

183 
	gxRëu∫
 = 
pdTRUE
;

186  
	gxRëu∫
;

191 
p‹tFORCE_INLINE
 
vP‹tRai£BASEPRI
( )

193 
uöt32_t
 
	gulNewBASEPRI
;

195 
__asm
 volatile

201 :"Ù" (
ulNewBASEPRI
Ë: "i" ( 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) : "memory"

207 
p‹tFORCE_INLINE
 
uöt32_t
 
ulP‹tRai£BASEPRI
( )

209 
uöt32_t
 
	gulOrigöÆBASEPRI
, 
	gulNewBASEPRI
;

211 
__asm
 volatile

218 :"Ù" (
ulOrigöÆBASEPRI
), "Ù" (
	gulNewBASEPRI
Ë: "i" ( 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) : "memory"

223  
	gulOrigöÆBASEPRI
;

227 
p‹tFORCE_INLINE
 
vP‹tSëBASEPRI
–
uöt32_t
 
ulNewMaskVÆue
 )

229 
__asm
 volatile

231 " m§ ba£¥i, %0 " :: "r" ( 
ulNewMaskVÆue
 ) : "memory"

237 #ifde‡
__˝lu•lus


	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\portable\MemMang\heap_4.c

36 
	~<°dlib.h
>

41 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

43 
	~"FªeRTOS.h
"

44 
	~"èsk.h
"

46 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


48 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 0 )

49 #îr‹ 
This
 
fûe
 
mu°
 
nŸ
 
be
 
u£d
 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 
is
 0

53 
	#hópMINIMUM_BLOCK_SIZE
 ( ( 
size_t
 ) ( 
xHópSåu˘Size
 << 1 ) )

	)

56 
	#hópBITS_PER_BYTE
 ( ( 
size_t
 ) 8 )

	)

59 #if–
c⁄figAPPLICATION_ALLOCATED_HEAP
 == 1 )

62 
uöt8_t
 
ucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

64 
uöt8_t
 
	gucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

69 
	sA_BLOCK_LINK


71 
A_BLOCK_LINK
 *
	mpxNextFªeBlock
;

72 
size_t
 
	mxBlockSize
;

73 } 
	tBlockLök_t
;

83 
¥vIn£πBlockI¡oFªeLi°
–
BlockLök_t
 *
pxBlockToIn£π
 );

89 
¥vHópInô
( );

95 c⁄° 
size_t
 
	gxHópSåu˘Size
 = ( –
BlockLök_t
 ) + ( ( size_àË–
p‹tBYTE_ALIGNMENT
 - 1 ) ) ) & ~––size_àË
p‹tBYTE_ALIGNMENT_MASK
 );

98 
BlockLök_t
 
	gxSèπ
, *
	gpxEnd
 = 
NULL
;

102 
size_t
 
	gxFªeByãsRemaöög
 = 0U;

103 
size_t
 
	gxMöimumEvîFªeByãsRemaöög
 = 0U;

109 
size_t
 
	gxBlockAŒoˇãdBô
 = 0;

113 *
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

115 
BlockLök_t
 *
pxBlock
, *
pxPªviousBlock
, *
pxNewBlockLök
;

116 *
pvRëu∫
 = 
NULL
;

118 
	`vTaskSu•ídAŒ
();

122 if–
pxEnd
 =
NULL
 )

124 
	`¥vHópInô
();

128 
	`mtCOVERAGE_TEST_MARKER
();

135 if––
xW™ãdSize
 & 
xBlockAŒoˇãdBô
 ) == 0 )

139 if–
xW™ãdSize
 > 0 )

141 
xW™ãdSize
 +
xHópSåu˘Size
;

145 if––
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) != 0x00 )

148 
xW™ãdSize
 +–
p‹tBYTE_ALIGNMENT
 - ( xW™ãdSizê& 
p‹tBYTE_ALIGNMENT_MASK
 ) );

149 
	`c⁄figASSERT
––
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) == 0 );

153 
	`mtCOVERAGE_TEST_MARKER
();

158 
	`mtCOVERAGE_TEST_MARKER
();

161 if––
xW™ãdSize
 > 0 ) && ( xW™ãdSizê<
xFªeByãsRemaöög
 ) )

165 
pxPªviousBlock
 = &
xSèπ
;

166 
pxBlock
 = 
xSèπ
.
pxNextFªeBlock
;

167  ( 
pxBlock
->
xBlockSize
 < 
xW™ãdSize
 ) && (ÖxBlock->
pxNextFªeBlock
 !
NULL
 ) )

169 
pxPªviousBlock
 = 
pxBlock
;

170 
pxBlock
 =ÖxBlock->
pxNextFªeBlock
;

175 if–
pxBlock
 !
pxEnd
 )

179 
pvRëu∫
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxPªviousBlock
->
pxNextFªeBlock
 ) + 
xHópSåu˘Size
 );

183 
pxPªviousBlock
->
pxNextFªeBlock
 = 
pxBlock
->pxNextFreeBlock;

187 if––
pxBlock
->
xBlockSize
 - 
xW™ãdSize
 ) > 
hópMINIMUM_BLOCK_SIZE
 )

193 
pxNewBlockLök
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxBlock
 ) + 
xW™ãdSize
 );

194 
	`c⁄figASSERT
––––
size_t
 ) 
pxNewBlockLök
 ) & 
p‹tBYTE_ALIGNMENT_MASK
 ) == 0 );

198 
pxNewBlockLök
->
xBlockSize
 = 
pxBlock
->xBlockSizê- 
xW™ãdSize
;

199 
pxBlock
->
xBlockSize
 = 
xW™ãdSize
;

202 
	`¥vIn£πBlockI¡oFªeLi°
–
pxNewBlockLök
 );

206 
	`mtCOVERAGE_TEST_MARKER
();

209 
xFªeByãsRemaöög
 -
pxBlock
->
xBlockSize
;

211 if–
xFªeByãsRemaöög
 < 
xMöimumEvîFªeByãsRemaöög
 )

213 
xMöimumEvîFªeByãsRemaöög
 = 
xFªeByãsRemaöög
;

217 
	`mtCOVERAGE_TEST_MARKER
();

222 
pxBlock
->
xBlockSize
 |
xBlockAŒoˇãdBô
;

223 
pxBlock
->
pxNextFªeBlock
 = 
NULL
;

227 
	`mtCOVERAGE_TEST_MARKER
();

232 
	`mtCOVERAGE_TEST_MARKER
();

237 
	`mtCOVERAGE_TEST_MARKER
();

240 
	`åa˚MALLOC
–
pvRëu∫
, 
xW™ãdSize
 );

242 –Ë
	`xTaskResumeAŒ
();

244 #if–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

246 if–
pvRëu∫
 =
NULL
 )

248 
	`vAµliˇti⁄MÆlocFaûedHook
( );

249 
	`vAµliˇti⁄MÆlocFaûedHook
();

253 
	`mtCOVERAGE_TEST_MARKER
();

258 
	`c⁄figASSERT
––––
size_t
 ) 
pvRëu∫
 ) & ( size_àË
p‹tBYTE_ALIGNMENT_MASK
 ) == 0 );

259  
pvRëu∫
;

260 
	}
}

263 
	$vP‹tFªe
–*
pv
 )

265 
uöt8_t
 *
puc
 = ( uöt8_à* ) 
pv
;

266 
BlockLök_t
 *
pxLök
;

268 if–
pv
 !
NULL
 )

272 
puc
 -
xHópSåu˘Size
;

275 
pxLök
 = ( * ) 
puc
;

278 
	`c⁄figASSERT
––
pxLök
->
xBlockSize
 & 
xBlockAŒoˇãdBô
 ) != 0 );

279 
	`c⁄figASSERT
–
pxLök
->
pxNextFªeBlock
 =
NULL
 );

281 if––
pxLök
->
xBlockSize
 & 
xBlockAŒoˇãdBô
 ) != 0 )

283 if–
pxLök
->
pxNextFªeBlock
 =
NULL
 )

287 
pxLök
->
xBlockSize
 &~
xBlockAŒoˇãdBô
;

289 
	`vTaskSu•ídAŒ
();

292 
xFªeByãsRemaöög
 +
pxLök
->
xBlockSize
;

293 
	`åa˚FREE
–
pv
, 
pxLök
->
xBlockSize
 );

294 
	`¥vIn£πBlockI¡oFªeLi°
–––
BlockLök_t
 * ) 
pxLök
 ) );

296 –Ë
	`xTaskResumeAŒ
();

300 
	`mtCOVERAGE_TEST_MARKER
();

305 
	`mtCOVERAGE_TEST_MARKER
();

308 
	}
}

311 
size_t
 
	$xP‹tGëFªeHópSize
( )

313  
xFªeByãsRemaöög
;

314 
	}
}

317 
size_t
 
	$xP‹tGëMöimumEvîFªeHópSize
( )

319  
xMöimumEvîFªeByãsRemaöög
;

320 
	}
}

323 
	$vP‹tInôüli£Blocks
( )

326 
	}
}

329 
	$¥vHópInô
( )

331 
BlockLök_t
 *
pxFú°FªeBlock
;

332 
uöt8_t
 *
pucAlig√dHóp
;

333 
size_t
 
uxAddªss
;

334 
size_t
 
xTŸÆHópSize
 = 
c⁄figTOTAL_HEAP_SIZE
;

337 
uxAddªss
 = ( 
size_t
 ) 
ucHóp
;

339 if––
uxAddªss
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) != 0 )

341 
uxAddªss
 +–
p‹tBYTE_ALIGNMENT
 - 1 );

342 
uxAddªss
 &~––
size_t
 ) 
p‹tBYTE_ALIGNMENT_MASK
 );

343 
xTŸÆHópSize
 -
uxAddªss
 - ( 
size_t
 ) 
ucHóp
;

346 
pucAlig√dHóp
 = ( 
uöt8_t
 * ) 
uxAddªss
;

350 
xSèπ
.
pxNextFªeBlock
 = ( * ) 
pucAlig√dHóp
;

351 
xSèπ
.
xBlockSize
 = ( 
size_t
 ) 0;

355 
uxAddªss
 = ( ( 
size_t
 ) 
pucAlig√dHóp
 ) + 
xTŸÆHópSize
;

356 
uxAddªss
 -
xHópSåu˘Size
;

357 
uxAddªss
 &~––
size_t
 ) 
p‹tBYTE_ALIGNMENT_MASK
 );

358 
pxEnd
 = ( * ) 
uxAddªss
;

359 
pxEnd
->
xBlockSize
 = 0;

360 
pxEnd
->
pxNextFªeBlock
 = 
NULL
;

364 
pxFú°FªeBlock
 = ( * ) 
pucAlig√dHóp
;

365 
pxFú°FªeBlock
->
xBlockSize
 = 
uxAddªss
 - ( 
size_t
 )ÖxFirstFreeBlock;

366 
pxFú°FªeBlock
->
pxNextFªeBlock
 = 
pxEnd
;

369 
xMöimumEvîFªeByãsRemaöög
 = 
pxFú°FªeBlock
->
xBlockSize
;

370 
xFªeByãsRemaöög
 = 
pxFú°FªeBlock
->
xBlockSize
;

373 
xBlockAŒoˇãdBô
 = ( ( 
size_t
 ) 1 ) << ( ( –size_àË* 
hópBITS_PER_BYTE
 ) - 1 );

374 
	}
}

377 
	$¥vIn£πBlockI¡oFªeLi°
–
BlockLök_t
 *
pxBlockToIn£π
 )

379 
BlockLök_t
 *
pxIãøt‹
;

380 
uöt8_t
 *
puc
;

384  
pxIãøt‹
 = &
xSèπ
;ÖxIãøt‹->
pxNextFªeBlock
 < 
pxBlockToIn£π
;ÖxIterator =ÖxIterator->pxNextFreeBlock )

391 
puc
 = ( 
uöt8_t
 * ) 
pxIãøt‹
;

392 if––
puc
 + 
pxIãøt‹
->
xBlockSize
 ) =–
uöt8_t
 * ) 
pxBlockToIn£π
 )

394 
pxIãøt‹
->
xBlockSize
 +
pxBlockToIn£π
->xBlockSize;

395 
pxBlockToIn£π
 = 
pxIãøt‹
;

399 
	`mtCOVERAGE_TEST_MARKER
();

404 
puc
 = ( 
uöt8_t
 * ) 
pxBlockToIn£π
;

405 if––
puc
 + 
pxBlockToIn£π
->
xBlockSize
 ) =–
uöt8_t
 * ) 
pxIãøt‹
->
pxNextFªeBlock
 )

407 if–
pxIãøt‹
->
pxNextFªeBlock
 !
pxEnd
 )

410 
pxBlockToIn£π
->
xBlockSize
 +
pxIãøt‹
->
pxNextFªeBlock
->xBlockSize;

411 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock->pxNextFreeBlock;

415 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxEnd
;

420 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock;

427 if–
pxIãøt‹
 !
pxBlockToIn£π
 )

429 
pxIãøt‹
->
pxNextFªeBlock
 = 
pxBlockToIn£π
;

433 
	`mtCOVERAGE_TEST_MARKER
();

435 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\queue.c

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

34 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

36 
	~"FªeRTOS.h
"

37 
	~"èsk.h
"

38 
	~"queue.h
"

40 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

41 
	~"¸outöe.h
"

48 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


52 
	#queueUNLOCKED
 ( ( 
öt8_t
 ) -1 )

	)

53 
	#queueLOCKED_UNMODIFIED
 ( ( 
öt8_t
 ) 0 )

	)

66 
	#pxMuãxHﬁdî
 
pcTaû


	)

67 
	#uxQueueTy≥
 
pcHód


	)

68 
	#queueQUEUE_IS_MUTEX
 
NULL


	)

72 
	#queueSEMAPHORE_QUEUE_ITEM_LENGTH
 ( ( 
UBa£Ty≥_t
 ) 0 )

	)

73 
	#queueMUTEX_GIVE_BLOCK_TIME
 ( ( 
TickTy≥_t
 ) 0U )

	)

75 #if–
c⁄figUSE_PREEMPTION
 == 0 )

78 
	#queueYIELD_IF_USING_PREEMPTION
()

	)

80 
	#queueYIELD_IF_USING_PREEMPTION
(Ë
	`p‹tYIELD_WITHIN_API
()

	)

88 
	sQueueDeföôi⁄


90 
öt8_t
 *
	mpcHód
;

91 
öt8_t
 *
	mpcTaû
;

92 
öt8_t
 *
	mpcWrôeTo
;

96 
öt8_t
 *
	mpcRódFrom
;

97 
UBa£Ty≥_t
 
	muxRecursiveCÆlCou¡
;

98 } 
	mu
;

100 
Li°_t
 
	mxTasksWaôögToSíd
;

101 
Li°_t
 
	mxTasksWaôögToRe˚ive
;

103 vﬁ©ûê
UBa£Ty≥_t
 
	muxMesßgesWaôög
;

104 
UBa£Ty≥_t
 
	muxLígth
;

105 
UBa£Ty≥_t
 
	muxIãmSize
;

107 vﬁ©ûê
öt8_t
 
	mcRxLock
;

108 vﬁ©ûê
öt8_t
 
	mcTxLock
;

110 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

111 
uöt8_t
 
	mucSètiˇŒyAŒoˇãd
;

114 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

115 
QueueDeföôi⁄
 *
	mpxQueueSëC⁄èöî
;

118 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

119 
UBa£Ty≥_t
 
	muxQueueNumbî
;

120 
uöt8_t
 
	mucQueueTy≥
;

123 } 
	txQUEUE
;

127 
xQUEUE
 
	tQueue_t
;

135 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

140 
	sQUEUE_REGISTRY_ITEM


142 c⁄° *
	mpcQueueName
;

143 
QueueH™dÀ_t
 
	mxH™dÀ
;

144 } 
	txQueueRegi°ryIãm
;

149 
xQueueRegi°ryIãm
 
	tQueueRegi°ryIãm_t
;

154 
PRIVILEGED_DATA
 
QueueRegi°ryIãm_t
 
	gxQueueRegi°ry
[ 
c⁄figQUEUE_REGISTRY_SIZE
 ];

166 
	$¥vU∆ockQueue
–
Queue_t
 * c⁄° 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

173 
Ba£Ty≥_t
 
	$¥vIsQueueEm±y
–c⁄° 
Queue_t
 *
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

180 
Ba£Ty≥_t
 
	$¥vIsQueueFuŒ
–c⁄° 
Queue_t
 *
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

186 
Ba£Ty≥_t
 
	$¥vC›yD©aToQueue
–
Queue_t
 * c⁄° 
pxQueue
, c⁄° *
pvIãmToQueue
, c⁄° 
Ba£Ty≥_t
 
xPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

191 
	$¥vC›yD©aFromQueue
–
Queue_t
 * c⁄° 
pxQueue
, * c⁄° 
pvBuf„r
 ) 
PRIVILEGED_FUNCTION
;

193 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

198 
Ba£Ty≥_t
 
	$¥vNŸifyQueueSëC⁄èöî
–c⁄° 
Queue_t
 * c⁄° 
pxQueue
, c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

205 
	$¥vInôüli£NewQueue
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, 
uöt8_t
 *
pucQueueSt‹age
, c⁄° uöt8_à
ucQueueTy≥
, 
Queue_t
 *
pxNewQueue
 ) 
PRIVILEGED_FUNCTION
;

212 #if–
c⁄figUSE_MUTEXES
 == 1 )

213 
	$¥vInôüli£Muãx
–
Queue_t
 *
pxNewQueue
 ) 
PRIVILEGED_FUNCTION
;

216 #if–
c⁄figUSE_MUTEXES
 == 1 )

224 
UBa£Ty≥_t
 
	$¥vGëDisöhîôPri‹ôyA·îTimeout
–c⁄° 
Queue_t
 * c⁄° 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

232 
	#¥vLockQueue
–
pxQueue
 ) \

233 
	`èskENTER_CRITICAL
(); \

235 if––
pxQueue
 )->
cRxLock
 =
queueUNLOCKED
 ) \

237 –
pxQueue
 )->
cRxLock
 = 
queueLOCKED_UNMODIFIED
; \

239 if––
pxQueue
 )->
cTxLock
 =
queueUNLOCKED
 ) \

241 –
pxQueue
 )->
cTxLock
 = 
queueLOCKED_UNMODIFIED
; \

243 
	}
} \

244 
	`èskEXIT_CRITICAL
()

	)

247 
Ba£Ty≥_t
 
	$xQueueGíîicRe£t
–
QueueH™dÀ_t
 
xQueue
, 
Ba£Ty≥_t
 
xNewQueue
 )

249 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

251 
	`c⁄figASSERT
–
pxQueue
 );

253 
	`èskENTER_CRITICAL
();

255 
pxQueue
->
pcTaû
 =ÖxQueue->
pcHód
 + (ÖxQueue->
uxLígth
 *ÖxQueue->
uxIãmSize
 );

256 
pxQueue
->
uxMesßgesWaôög
 = ( 
UBa£Ty≥_t
 ) 0U;

257 
pxQueue
->
pcWrôeTo
 =ÖxQueue->
pcHód
;

258 
pxQueue
->
u
.
pcRódFrom
 =ÖxQueue->
pcHód
 + ( (ÖxQueue->
uxLígth
 - ( 
UBa£Ty≥_t
 ) 1U ) *ÖxQueue->
uxIãmSize
 );

259 
pxQueue
->
cRxLock
 = 
queueUNLOCKED
;

260 
pxQueue
->
cTxLock
 = 
queueUNLOCKED
;

262 if–
xNewQueue
 =
pdFALSE
 )

269 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

271 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

273 
	`queueYIELD_IF_USING_PREEMPTION
();

277 
	`mtCOVERAGE_TEST_MARKER
();

282 
	`mtCOVERAGE_TEST_MARKER
();

288 
	`vLi°Inôüli£
–&–
pxQueue
->
xTasksWaôögToSíd
 ) );

289 
	`vLi°Inôüli£
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

292 
	`èskEXIT_CRITICAL
();

296  
pdPASS
;

297 
	}
}

300 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

302 
QueueH™dÀ_t
 
	$xQueueGíîicCª©eSètic
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, 
uöt8_t
 *
pucQueueSt‹age
, 
SèticQueue_t
 *
pxSèticQueue
, c⁄° uöt8_à
ucQueueTy≥
 )

304 
Queue_t
 *
pxNewQueue
;

306 
	`c⁄figASSERT
–
uxQueueLígth
 > ( 
UBa£Ty≥_t
 ) 0 );

310 
	`c⁄figASSERT
–
pxSèticQueue
 !
NULL
 );

314 
	`c⁄figASSERT
–!––
pucQueueSt‹age
 !
NULL
 ) && ( 
uxIãmSize
 == 0 ) ) );

315 
	`c⁄figASSERT
–!––
pucQueueSt‹age
 =
NULL
 ) && ( 
uxIãmSize
 != 0 ) ) );

317 #if–
c⁄figASSERT_DEFINED
 == 1 )

322 vﬁ©ûê
size_t
 
xSize
 = –
SèticQueue_t
 );

323 
	`c⁄figASSERT
–
xSize
 =–
Queue_t
 ) );

330 
pxNewQueue
 = ( 
Queue_t
 * ) 
pxSèticQueue
;

332 if–
pxNewQueue
 !
NULL
 )

334 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

339 
pxNewQueue
->
ucSètiˇŒyAŒoˇãd
 = 
pdTRUE
;

343 
	`¥vInôüli£NewQueue
–
uxQueueLígth
, 
uxIãmSize
, 
pucQueueSt‹age
, 
ucQueueTy≥
, 
pxNewQueue
 );

347 
	`åa˚QUEUE_CREATE_FAILED
–
ucQueueTy≥
 );

350  
pxNewQueue
;

351 
	}
}

356 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

358 
QueueH™dÀ_t
 
	$xQueueGíîicCª©e
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, c⁄° 
uöt8_t
 
ucQueueTy≥
 )

360 
Queue_t
 *
pxNewQueue
;

361 
size_t
 
xQueueSizeInByãs
;

362 
uöt8_t
 *
pucQueueSt‹age
;

364 
	`c⁄figASSERT
–
uxQueueLígth
 > ( 
UBa£Ty≥_t
 ) 0 );

366 if–
uxIãmSize
 =–
UBa£Ty≥_t
 ) 0 )

369 
xQueueSizeInByãs
 = ( 
size_t
 ) 0;

375 
xQueueSizeInByãs
 = ( 
size_t
 ) ( 
uxQueueLígth
 * 
uxIãmSize
 );

378 
pxNewQueue
 = ( 
Queue_t
 * ) 
	`pvP‹tMÆloc
––Queue_àË+ 
xQueueSizeInByãs
 );

380 if–
pxNewQueue
 !
NULL
 )

384 
pucQueueSt‹age
 = ( ( 
uöt8_t
 * ) 
pxNewQueue
 ) + –
Queue_t
 );

386 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

391 
pxNewQueue
->
ucSètiˇŒyAŒoˇãd
 = 
pdFALSE
;

395 
	`¥vInôüli£NewQueue
–
uxQueueLígth
, 
uxIãmSize
, 
pucQueueSt‹age
, 
ucQueueTy≥
, 
pxNewQueue
 );

399 
	`åa˚QUEUE_CREATE_FAILED
–
ucQueueTy≥
 );

402  
pxNewQueue
;

403 
	}
}

408 
	$¥vInôüli£NewQueue
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, 
uöt8_t
 *
pucQueueSt‹age
, c⁄° uöt8_à
ucQueueTy≥
, 
Queue_t
 *
pxNewQueue
 )

412 –Ë
ucQueueTy≥
;

414 if–
uxIãmSize
 =–
UBa£Ty≥_t
 ) 0 )

420 
pxNewQueue
->
pcHód
 = ( 
öt8_t
 * )ÖxNewQueue;

425 
pxNewQueue
->
pcHód
 = ( 
öt8_t
 * ) 
pucQueueSt‹age
;

430 
pxNewQueue
->
uxLígth
 = 
uxQueueLígth
;

431 
pxNewQueue
->
uxIãmSize
 = uxItemSize;

432 –Ë
	`xQueueGíîicRe£t
–
pxNewQueue
, 
pdTRUE
 );

434 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

436 
pxNewQueue
->
ucQueueTy≥
 = ucQueueType;

440 #if–
c⁄figUSE_QUEUE_SETS
 == 1 )

442 
pxNewQueue
->
pxQueueSëC⁄èöî
 = 
NULL
;

446 
	`åa˚QUEUE_CREATE
–
pxNewQueue
 );

447 
	}
}

450 #if–
c⁄figUSE_MUTEXES
 == 1 )

452 
	$¥vInôüli£Muãx
–
Queue_t
 *
pxNewQueue
 )

454 if–
pxNewQueue
 !
NULL
 )

460 
pxNewQueue
->
pxMuãxHﬁdî
 = 
NULL
;

461 
pxNewQueue
->
uxQueueTy≥
 = 
queueQUEUE_IS_MUTEX
;

464 
pxNewQueue
->
u
.
uxRecursiveCÆlCou¡
 = 0;

466 
	`åa˚CREATE_MUTEX
–
pxNewQueue
 );

469 –Ë
	`xQueueGíîicSíd
–
pxNewQueue
, 
NULL
, ( 
TickTy≥_t
 ) 0U, 
queueSEND_TO_BACK
 );

473 
	`åa˚CREATE_MUTEX_FAILED
();

475 
	}
}

480 #if––
c⁄figUSE_MUTEXES
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

482 
QueueH™dÀ_t
 
	$xQueueCª©eMuãx
–c⁄° 
uöt8_t
 
ucQueueTy≥
 )

484 
Queue_t
 *
pxNewQueue
;

485 c⁄° 
UBa£Ty≥_t
 
uxMuãxLígth
 = ( UBa£Ty≥_àË1, 
uxMuãxSize
 = ( UBaseType_t ) 0;

487 
pxNewQueue
 = ( 
Queue_t
 * ) 
	`xQueueGíîicCª©e
–
uxMuãxLígth
, 
uxMuãxSize
, 
ucQueueTy≥
 );

488 
	`¥vInôüli£Muãx
–
pxNewQueue
 );

490  
pxNewQueue
;

491 
	}
}

496 #if––
c⁄figUSE_MUTEXES
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

498 
QueueH™dÀ_t
 
	$xQueueCª©eMuãxSètic
–c⁄° 
uöt8_t
 
ucQueueTy≥
, 
SèticQueue_t
 *
pxSèticQueue
 )

500 
Queue_t
 *
pxNewQueue
;

501 c⁄° 
UBa£Ty≥_t
 
uxMuãxLígth
 = ( UBa£Ty≥_àË1, 
uxMuãxSize
 = ( UBaseType_t ) 0;

505 –Ë
ucQueueTy≥
;

507 
pxNewQueue
 = ( 
Queue_t
 * ) 
	`xQueueGíîicCª©eSètic
–
uxMuãxLígth
, 
uxMuãxSize
, 
NULL
, 
pxSèticQueue
, 
ucQueueTy≥
 );

508 
	`¥vInôüli£Muãx
–
pxNewQueue
 );

510  
pxNewQueue
;

511 
	}
}

516 #i‡––
c⁄figUSE_MUTEXES
 =1 ) && ( 
INCLUDE_xSem≠h‹eGëMuãxHﬁdî
 == 1 ) )

518 * 
	$xQueueGëMuãxHﬁdî
–
QueueH™dÀ_t
 
xSem≠h‹e
 )

520 *
pxRëu∫
;

527 
	`èskENTER_CRITICAL
();

529 if–––
Queue_t
 * ) 
xSem≠h‹e
 )->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

531 
pxRëu∫
 = ( * ) ( ( 
Queue_t
 * ) 
xSem≠h‹e
 )->
pxMuãxHﬁdî
;

535 
pxRëu∫
 = 
NULL
;

538 
	`èskEXIT_CRITICAL
();

540  
pxRëu∫
;

541 
	}
}

546 #i‡––
c⁄figUSE_MUTEXES
 =1 ) && ( 
INCLUDE_xSem≠h‹eGëMuãxHﬁdî
 == 1 ) )

548 * 
	$xQueueGëMuãxHﬁdîFromISR
–
QueueH™dÀ_t
 
xSem≠h‹e
 )

550 *
pxRëu∫
;

552 
	`c⁄figASSERT
–
xSem≠h‹e
 );

557 if–––
Queue_t
 * ) 
xSem≠h‹e
 )->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

559 
pxRëu∫
 = ( * ) ( ( 
Queue_t
 * ) 
xSem≠h‹e
 )->
pxMuãxHﬁdî
;

563 
pxRëu∫
 = 
NULL
;

566  
pxRëu∫
;

567 
	}
}

572 #i‡–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

574 
Ba£Ty≥_t
 
	$xQueueGiveMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
 )

576 
Ba£Ty≥_t
 
xRëu∫
;

577 
Queue_t
 * c⁄° 
pxMuãx
 = ( Queue_à* ) 
xMuãx
;

579 
	`c⁄figASSERT
–
pxMuãx
 );

587 if–
pxMuãx
->
pxMuãxHﬁdî
 =–* ) 
	`xTaskGëCuºítTaskH™dÀ
() )

589 
	`åa˚GIVE_MUTEX_RECURSIVE
–
pxMuãx
 );

596 –
pxMuãx
->
u
.
uxRecursiveCÆlCou¡
 )--;

599 if–
pxMuãx
->
u
.
uxRecursiveCÆlCou¡
 =–
UBa£Ty≥_t
 ) 0 )

603 –Ë
	`xQueueGíîicSíd
–
pxMuãx
, 
NULL
, 
queueMUTEX_GIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 );

607 
	`mtCOVERAGE_TEST_MARKER
();

610 
xRëu∫
 = 
pdPASS
;

616 
xRëu∫
 = 
pdFAIL
;

618 
	`åa˚GIVE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 );

621  
xRëu∫
;

622 
	}
}

627 #i‡–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

629 
Ba£Ty≥_t
 
	$xQueueTakeMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
, 
TickTy≥_t
 
xTicksToWaô
 )

631 
Ba£Ty≥_t
 
xRëu∫
;

632 
Queue_t
 * c⁄° 
pxMuãx
 = ( Queue_à* ) 
xMuãx
;

634 
	`c⁄figASSERT
–
pxMuãx
 );

639 
	`åa˚TAKE_MUTEX_RECURSIVE
–
pxMuãx
 );

641 if–
pxMuãx
->
pxMuãxHﬁdî
 =–* ) 
	`xTaskGëCuºítTaskH™dÀ
() )

643 –
pxMuãx
->
u
.
uxRecursiveCÆlCou¡
 )++;

644 
xRëu∫
 = 
pdPASS
;

648 
xRëu∫
 = 
	`xQueueSem≠h‹eTake
–
pxMuãx
, 
xTicksToWaô
 );

653 if–
xRëu∫
 !
pdFAIL
 )

655 –
pxMuãx
->
u
.
uxRecursiveCÆlCou¡
 )++;

659 
	`åa˚TAKE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 );

663  
xRëu∫
;

664 
	}
}

669 #if––
c⁄figUSE_COUNTING_SEMAPHORES
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

671 
QueueH™dÀ_t
 
	$xQueueCª©eCou¡ögSem≠h‹eSètic
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
, 
SèticQueue_t
 *
pxSèticQueue
 )

673 
QueueH™dÀ_t
 
xH™dÀ
;

675 
	`c⁄figASSERT
–
uxMaxCou¡
 != 0 );

676 
	`c⁄figASSERT
–
uxInôülCou¡
 <
uxMaxCou¡
 );

678 
xH™dÀ
 = 
	`xQueueGíîicCª©eSètic
–
uxMaxCou¡
, 
queueSEMAPHORE_QUEUE_ITEM_LENGTH
, 
NULL
, 
pxSèticQueue
, 
queueQUEUE_TYPE_COUNTING_SEMAPHORE
 );

680 if–
xH™dÀ
 !
NULL
 )

682 ––
Queue_t
 * ) 
xH™dÀ
 )->
uxMesßgesWaôög
 = 
uxInôülCou¡
;

684 
	`åa˚CREATE_COUNTING_SEMAPHORE
();

688 
	`åa˚CREATE_COUNTING_SEMAPHORE_FAILED
();

691  
xH™dÀ
;

692 
	}
}

697 #if––
c⁄figUSE_COUNTING_SEMAPHORES
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

699 
QueueH™dÀ_t
 
	$xQueueCª©eCou¡ögSem≠h‹e
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
 )

701 
QueueH™dÀ_t
 
xH™dÀ
;

703 
	`c⁄figASSERT
–
uxMaxCou¡
 != 0 );

704 
	`c⁄figASSERT
–
uxInôülCou¡
 <
uxMaxCou¡
 );

706 
xH™dÀ
 = 
	`xQueueGíîicCª©e
–
uxMaxCou¡
, 
queueSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_COUNTING_SEMAPHORE
 );

708 if–
xH™dÀ
 !
NULL
 )

710 ––
Queue_t
 * ) 
xH™dÀ
 )->
uxMesßgesWaôög
 = 
uxInôülCou¡
;

712 
	`åa˚CREATE_COUNTING_SEMAPHORE
();

716 
	`åa˚CREATE_COUNTING_SEMAPHORE_FAILED
();

719  
xH™dÀ
;

720 
	}
}

725 
Ba£Ty≥_t
 
	$xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 )

727 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
, 
xYõldRequúed
;

728 
TimeOut_t
 
xTimeOut
;

729 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

731 
	`c⁄figASSERT
–
pxQueue
 );

732 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

733 
	`c⁄figASSERT
–!––
xC›yPosôi⁄
 =
queueOVERWRITE
 ) && ( 
pxQueue
->
uxLígth
 != 1 ) ) );

734 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

736 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

746 
	`èskENTER_CRITICAL
();

752 if––
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 ) || ( 
xC›yPosôi⁄
 =
queueOVERWRITE
 ) )

754 
	`åa˚QUEUE_SEND
–
pxQueue
 );

755 
xYõldRequúed
 = 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

757 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

759 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

761 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
, 
xC›yPosôi⁄
 ) !
pdFALSE
 )

766 
	`queueYIELD_IF_USING_PREEMPTION
();

770 
	`mtCOVERAGE_TEST_MARKER
();

777 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

779 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

785 
	`queueYIELD_IF_USING_PREEMPTION
();

789 
	`mtCOVERAGE_TEST_MARKER
();

792 if–
xYõldRequúed
 !
pdFALSE
 )

798 
	`queueYIELD_IF_USING_PREEMPTION
();

802 
	`mtCOVERAGE_TEST_MARKER
();

810 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

812 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

818 
	`queueYIELD_IF_USING_PREEMPTION
();

822 
	`mtCOVERAGE_TEST_MARKER
();

825 if–
xYõldRequúed
 !
pdFALSE
 )

831 
	`queueYIELD_IF_USING_PREEMPTION
();

835 
	`mtCOVERAGE_TEST_MARKER
();

840 
	`èskEXIT_CRITICAL
();

841  
pdPASS
;

845 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

849 
	`èskEXIT_CRITICAL
();

853 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

854  
îrQUEUE_FULL
;

856 if–
xE¡ryTimeSë
 =
pdFALSE
 )

860 
	`vTaskI¡î«lSëTimeOutSèã
–&
xTimeOut
 );

861 
xE¡ryTimeSë
 = 
pdTRUE
;

866 
	`mtCOVERAGE_TEST_MARKER
();

870 
	`èskEXIT_CRITICAL
();

875 
	`vTaskSu•ídAŒ
();

876 
	`¥vLockQueue
–
pxQueue
 );

879 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

881 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

883 
	`åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 );

884 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ), 
xTicksToWaô
 );

891 
	`¥vU∆ockQueue
–
pxQueue
 );

898 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

900 
	`p‹tYIELD_WITHIN_API
();

906 
	`¥vU∆ockQueue
–
pxQueue
 );

907 –Ë
	`xTaskResumeAŒ
();

913 
	`¥vU∆ockQueue
–
pxQueue
 );

914 –Ë
	`xTaskResumeAŒ
();

916 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

917  
îrQUEUE_FULL
;

920 
	}
}

923 
Ba£Ty≥_t
 
	$xQueueGíîicSídFromISR
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° Ba£Ty≥_à
xC›yPosôi⁄
 )

925 
Ba£Ty≥_t
 
xRëu∫
;

926 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

927 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

929 
	`c⁄figASSERT
–
pxQueue
 );

930 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

931 
	`c⁄figASSERT
–!––
xC›yPosôi⁄
 =
queueOVERWRITE
 ) && ( 
pxQueue
->
uxLígth
 != 1 ) ) );

947 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

954 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

956 if––
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 ) || ( 
xC›yPosôi⁄
 =
queueOVERWRITE
 ) )

958 c⁄° 
öt8_t
 
cTxLock
 = 
pxQueue
->cTxLock;

960 
	`åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 );

967 –Ë
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

971 if–
cTxLock
 =
queueUNLOCKED
 )

973 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

975 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

977 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
, 
xC›yPosôi⁄
 ) !
pdFALSE
 )

982 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

984 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

988 
	`mtCOVERAGE_TEST_MARKER
();

993 
	`mtCOVERAGE_TEST_MARKER
();

998 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1000 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1004 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1006 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1010 
	`mtCOVERAGE_TEST_MARKER
();

1015 
	`mtCOVERAGE_TEST_MARKER
();

1020 
	`mtCOVERAGE_TEST_MARKER
();

1026 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1028 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1032 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1034 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1038 
	`mtCOVERAGE_TEST_MARKER
();

1043 
	`mtCOVERAGE_TEST_MARKER
();

1048 
	`mtCOVERAGE_TEST_MARKER
();

1057 
pxQueue
->
cTxLock
 = ( 
öt8_t
 ) ( cTxLock + 1 );

1060 
xRëu∫
 = 
pdPASS
;

1064 
	`åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 );

1065 
xRëu∫
 = 
îrQUEUE_FULL
;

1068 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1070  
xRëu∫
;

1071 
	}
}

1074 
Ba£Ty≥_t
 
	$xQueueGiveFromISR
–
QueueH™dÀ_t
 
xQueue
, 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 )

1076 
Ba£Ty≥_t
 
xRëu∫
;

1077 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1078 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1086 
	`c⁄figASSERT
–
pxQueue
 );

1090 
	`c⁄figASSERT
–
pxQueue
->
uxIãmSize
 == 0 );

1095 
	`c⁄figASSERT
–!––
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 ) && (ÖxQueue->
pxMuãxHﬁdî
 !
NULL
 ) ) );

1111 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1113 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1115 c⁄° 
UBa£Ty≥_t
 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

1120 if–
uxMesßgesWaôög
 < 
pxQueue
->
uxLígth
 )

1122 c⁄° 
öt8_t
 
cTxLock
 = 
pxQueue
->cTxLock;

1124 
	`åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 );

1132 
pxQueue
->
uxMesßgesWaôög
 = uxMesßgesWaôög + ( 
UBa£Ty≥_t
 ) 1;

1136 if–
cTxLock
 =
queueUNLOCKED
 )

1138 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

1140 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

1142 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
, 
queueSEND_TO_BACK
 ) !
pdFALSE
 )

1147 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1149 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1153 
	`mtCOVERAGE_TEST_MARKER
();

1158 
	`mtCOVERAGE_TEST_MARKER
();

1163 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1165 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1169 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1171 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1175 
	`mtCOVERAGE_TEST_MARKER
();

1180 
	`mtCOVERAGE_TEST_MARKER
();

1185 
	`mtCOVERAGE_TEST_MARKER
();

1191 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1193 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1197 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1199 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1203 
	`mtCOVERAGE_TEST_MARKER
();

1208 
	`mtCOVERAGE_TEST_MARKER
();

1213 
	`mtCOVERAGE_TEST_MARKER
();

1222 
pxQueue
->
cTxLock
 = ( 
öt8_t
 ) ( cTxLock + 1 );

1225 
xRëu∫
 = 
pdPASS
;

1229 
	`åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 );

1230 
xRëu∫
 = 
îrQUEUE_FULL
;

1233 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1235  
xRëu∫
;

1236 
	}
}

1239 
Ba£Ty≥_t
 
	$xQueueRe˚ive
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
 )

1241 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
;

1242 
TimeOut_t
 
xTimeOut
;

1243 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1246 
	`c⁄figASSERT
––
pxQueue
 ) );

1250 
	`c⁄figASSERT
–!–––
pvBuf„r
 ) =
NULL
 ) && ( ( 
pxQueue
 )->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1253 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

1255 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

1266 
	`èskENTER_CRITICAL
();

1268 c⁄° 
UBa£Ty≥_t
 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

1272 if–
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1275 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1276 
	`åa˚QUEUE_RECEIVE
–
pxQueue
 );

1277 
pxQueue
->
uxMesßgesWaôög
 = uxMesßgesWaôög - ( 
UBa£Ty≥_t
 ) 1;

1282 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1284 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1286 
	`queueYIELD_IF_USING_PREEMPTION
();

1290 
	`mtCOVERAGE_TEST_MARKER
();

1295 
	`mtCOVERAGE_TEST_MARKER
();

1298 
	`èskEXIT_CRITICAL
();

1299  
pdPASS
;

1303 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

1307 
	`èskEXIT_CRITICAL
();

1308 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1309  
îrQUEUE_EMPTY
;

1311 if–
xE¡ryTimeSë
 =
pdFALSE
 )

1315 
	`vTaskI¡î«lSëTimeOutSèã
–&
xTimeOut
 );

1316 
xE¡ryTimeSë
 = 
pdTRUE
;

1321 
	`mtCOVERAGE_TEST_MARKER
();

1325 
	`èskEXIT_CRITICAL
();

1330 
	`vTaskSu•ídAŒ
();

1331 
	`¥vLockQueue
–
pxQueue
 );

1334 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

1338 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1340 
	`åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 );

1341 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

1342 
	`¥vU∆ockQueue
–
pxQueue
 );

1343 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

1345 
	`p‹tYIELD_WITHIN_API
();

1349 
	`mtCOVERAGE_TEST_MARKER
();

1356 
	`¥vU∆ockQueue
–
pxQueue
 );

1357 –Ë
	`xTaskResumeAŒ
();

1364 
	`¥vU∆ockQueue
–
pxQueue
 );

1365 –Ë
	`xTaskResumeAŒ
();

1367 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1369 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1370  
îrQUEUE_EMPTY
;

1374 
	`mtCOVERAGE_TEST_MARKER
();

1378 
	}
}

1381 
Ba£Ty≥_t
 
	$xQueueSem≠h‹eTake
–
QueueH™dÀ_t
 
xQueue
, 
TickTy≥_t
 
xTicksToWaô
 )

1383 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
;

1384 
TimeOut_t
 
xTimeOut
;

1385 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1387 #if–
c⁄figUSE_MUTEXES
 == 1 )

1388 
Ba£Ty≥_t
 
xInhîô™˚Occuºed
 = 
pdFALSE
;

1392 
	`c⁄figASSERT
––
pxQueue
 ) );

1396 
	`c⁄figASSERT
–
pxQueue
->
uxIãmSize
 == 0 );

1399 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

1401 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

1412 
	`èskENTER_CRITICAL
();

1416 c⁄° 
UBa£Ty≥_t
 
uxSem≠h‹eCou¡
 = 
pxQueue
->
uxMesßgesWaôög
;

1420 if–
uxSem≠h‹eCou¡
 > ( 
UBa£Ty≥_t
 ) 0 )

1422 
	`åa˚QUEUE_RECEIVE
–
pxQueue
 );

1426 
pxQueue
->
uxMesßgesWaôög
 = 
uxSem≠h‹eCou¡
 - ( 
UBa£Ty≥_t
 ) 1;

1428 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1430 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

1434 
pxQueue
->
pxMuãxHﬁdî
 = ( 
öt8_t
 * ) 
	`pvTaskIn¸emítMuãxHñdCou¡
();

1438 
	`mtCOVERAGE_TEST_MARKER
();

1445 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1447 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1449 
	`queueYIELD_IF_USING_PREEMPTION
();

1453 
	`mtCOVERAGE_TEST_MARKER
();

1458 
	`mtCOVERAGE_TEST_MARKER
();

1461 
	`èskEXIT_CRITICAL
();

1462  
pdPASS
;

1466 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

1471 #if–
c⁄figUSE_MUTEXES
 == 1 )

1473 
	`c⁄figASSERT
–
xInhîô™˚Occuºed
 =
pdFALSE
 );

1479 
	`èskEXIT_CRITICAL
();

1480 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1481  
îrQUEUE_EMPTY
;

1483 if–
xE¡ryTimeSë
 =
pdFALSE
 )

1487 
	`vTaskI¡î«lSëTimeOutSèã
–&
xTimeOut
 );

1488 
xE¡ryTimeSë
 = 
pdTRUE
;

1493 
	`mtCOVERAGE_TEST_MARKER
();

1497 
	`èskEXIT_CRITICAL
();

1502 
	`vTaskSu•ídAŒ
();

1503 
	`¥vLockQueue
–
pxQueue
 );

1506 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

1512 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1514 
	`åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 );

1516 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1518 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

1520 
	`èskENTER_CRITICAL
();

1522 
xInhîô™˚Occuºed
 = 
	`xTaskPri‹ôyInhîô
––* ) 
pxQueue
->
pxMuãxHﬁdî
 );

1524 
	`èskEXIT_CRITICAL
();

1528 
	`mtCOVERAGE_TEST_MARKER
();

1533 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

1534 
	`¥vU∆ockQueue
–
pxQueue
 );

1535 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

1537 
	`p‹tYIELD_WITHIN_API
();

1541 
	`mtCOVERAGE_TEST_MARKER
();

1548 
	`¥vU∆ockQueue
–
pxQueue
 );

1549 –Ë
	`xTaskResumeAŒ
();

1555 
	`¥vU∆ockQueue
–
pxQueue
 );

1556 –Ë
	`xTaskResumeAŒ
();

1562 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1564 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1569 if–
xInhîô™˚Occuºed
 !
pdFALSE
 )

1571 
	`èskENTER_CRITICAL
();

1573 
UBa£Ty≥_t
 
uxHighe°WaôögPri‹ôy
;

1580 
uxHighe°WaôögPri‹ôy
 = 
	`¥vGëDisöhîôPri‹ôyA·îTimeout
–
pxQueue
 );

1581 
	`vTaskPri‹ôyDisöhîôA·îTimeout
––* ) 
pxQueue
->
pxMuãxHﬁdî
, 
uxHighe°WaôögPri‹ôy
 );

1583 
	`èskEXIT_CRITICAL
();

1588 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1589  
îrQUEUE_EMPTY
;

1593 
	`mtCOVERAGE_TEST_MARKER
();

1597 
	}
}

1600 
Ba£Ty≥_t
 
	$xQueuePìk
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
 )

1602 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
;

1603 
TimeOut_t
 
xTimeOut
;

1604 
öt8_t
 *
pcOrigöÆRódPosôi⁄
;

1605 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1608 
	`c⁄figASSERT
––
pxQueue
 ) );

1612 
	`c⁄figASSERT
–!–––
pvBuf„r
 ) =
NULL
 ) && ( ( 
pxQueue
 )->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1615 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

1617 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

1628 
	`èskENTER_CRITICAL
();

1630 c⁄° 
UBa£Ty≥_t
 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

1634 if–
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1639 
pcOrigöÆRódPosôi⁄
 = 
pxQueue
->
u
.
pcRódFrom
;

1641 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1642 
	`åa˚QUEUE_PEEK
–
pxQueue
 );

1645 
pxQueue
->
u
.
pcRódFrom
 = 
pcOrigöÆRódPosôi⁄
;

1649 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1651 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1654 
	`queueYIELD_IF_USING_PREEMPTION
();

1658 
	`mtCOVERAGE_TEST_MARKER
();

1663 
	`mtCOVERAGE_TEST_MARKER
();

1666 
	`èskEXIT_CRITICAL
();

1667  
pdPASS
;

1671 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

1675 
	`èskEXIT_CRITICAL
();

1676 
	`åa˚QUEUE_PEEK_FAILED
–
pxQueue
 );

1677  
îrQUEUE_EMPTY
;

1679 if–
xE¡ryTimeSë
 =
pdFALSE
 )

1684 
	`vTaskI¡î«lSëTimeOutSèã
–&
xTimeOut
 );

1685 
xE¡ryTimeSë
 = 
pdTRUE
;

1690 
	`mtCOVERAGE_TEST_MARKER
();

1694 
	`èskEXIT_CRITICAL
();

1699 
	`vTaskSu•ídAŒ
();

1700 
	`¥vLockQueue
–
pxQueue
 );

1703 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

1707 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1709 
	`åa˚BLOCKING_ON_QUEUE_PEEK
–
pxQueue
 );

1710 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

1711 
	`¥vU∆ockQueue
–
pxQueue
 );

1712 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

1714 
	`p‹tYIELD_WITHIN_API
();

1718 
	`mtCOVERAGE_TEST_MARKER
();

1725 
	`¥vU∆ockQueue
–
pxQueue
 );

1726 –Ë
	`xTaskResumeAŒ
();

1733 
	`¥vU∆ockQueue
–
pxQueue
 );

1734 –Ë
	`xTaskResumeAŒ
();

1736 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1738 
	`åa˚QUEUE_PEEK_FAILED
–
pxQueue
 );

1739  
îrQUEUE_EMPTY
;

1743 
	`mtCOVERAGE_TEST_MARKER
();

1747 
	}
}

1750 
Ba£Ty≥_t
 
	$xQueueRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 )

1752 
Ba£Ty≥_t
 
xRëu∫
;

1753 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1754 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1756 
	`c⁄figASSERT
–
pxQueue
 );

1757 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1773 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1775 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1777 c⁄° 
UBa£Ty≥_t
 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

1780 if–
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1782 c⁄° 
öt8_t
 
cRxLock
 = 
pxQueue
->cRxLock;

1784 
	`åa˚QUEUE_RECEIVE_FROM_ISR
–
pxQueue
 );

1786 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1787 
pxQueue
->
uxMesßgesWaôög
 = uxMesßgesWaôög - ( 
UBa£Ty≥_t
 ) 1;

1793 if–
cRxLock
 =
queueUNLOCKED
 )

1795 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1797 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1801 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1803 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1807 
	`mtCOVERAGE_TEST_MARKER
();

1812 
	`mtCOVERAGE_TEST_MARKER
();

1817 
	`mtCOVERAGE_TEST_MARKER
();

1824 
pxQueue
->
cRxLock
 = ( 
öt8_t
 ) ( cRxLock + 1 );

1827 
xRëu∫
 = 
pdPASS
;

1831 
xRëu∫
 = 
pdFAIL
;

1832 
	`åa˚QUEUE_RECEIVE_FROM_ISR_FAILED
–
pxQueue
 );

1835 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1837  
xRëu∫
;

1838 
	}
}

1841 
Ba£Ty≥_t
 
	$xQueuePìkFromISR
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
 )

1843 
Ba£Ty≥_t
 
xRëu∫
;

1844 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1845 
öt8_t
 *
pcOrigöÆRódPosôi⁄
;

1846 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1848 
	`c⁄figASSERT
–
pxQueue
 );

1849 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1850 
	`c⁄figASSERT
–
pxQueue
->
uxIãmSize
 != 0 );

1866 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1868 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1871 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1873 
	`åa˚QUEUE_PEEK_FROM_ISR
–
pxQueue
 );

1877 
pcOrigöÆRódPosôi⁄
 = 
pxQueue
->
u
.
pcRódFrom
;

1878 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1879 
pxQueue
->
u
.
pcRódFrom
 = 
pcOrigöÆRódPosôi⁄
;

1881 
xRëu∫
 = 
pdPASS
;

1885 
xRëu∫
 = 
pdFAIL
;

1886 
	`åa˚QUEUE_PEEK_FROM_ISR_FAILED
–
pxQueue
 );

1889 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1891  
xRëu∫
;

1892 
	}
}

1895 
UBa£Ty≥_t
 
	$uxQueueMesßgesWaôög
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

1897 
UBa£Ty≥_t
 
uxRëu∫
;

1899 
	`c⁄figASSERT
–
xQueue
 );

1901 
	`èskENTER_CRITICAL
();

1903 
uxRëu∫
 = ( ( 
Queue_t
 * ) 
xQueue
 )->
uxMesßgesWaôög
;

1905 
	`èskEXIT_CRITICAL
();

1907  
uxRëu∫
;

1908 
	}
}

1911 
UBa£Ty≥_t
 
	$uxQueueS∑˚sAvaûabÀ
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

1913 
UBa£Ty≥_t
 
uxRëu∫
;

1914 
Queue_t
 *
pxQueue
;

1916 
pxQueue
 = ( 
Queue_t
 * ) 
xQueue
;

1917 
	`c⁄figASSERT
–
pxQueue
 );

1919 
	`èskENTER_CRITICAL
();

1921 
uxRëu∫
 = 
pxQueue
->
uxLígth
 -ÖxQueue->
uxMesßgesWaôög
;

1923 
	`èskEXIT_CRITICAL
();

1925  
uxRëu∫
;

1926 
	}
}

1929 
UBa£Ty≥_t
 
	$uxQueueMesßgesWaôögFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

1931 
UBa£Ty≥_t
 
uxRëu∫
;

1933 
	`c⁄figASSERT
–
xQueue
 );

1935 
uxRëu∫
 = ( ( 
Queue_t
 * ) 
xQueue
 )->
uxMesßgesWaôög
;

1937  
uxRëu∫
;

1938 
	}
}

1941 
	$vQueueDñëe
–
QueueH™dÀ_t
 
xQueue
 )

1943 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1945 
	`c⁄figASSERT
–
pxQueue
 );

1946 
	`åa˚QUEUE_DELETE
–
pxQueue
 );

1948 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1950 
	`vQueueUƒegi°îQueue
–
pxQueue
 );

1954 #if––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 0 ) )

1958 
	`vP‹tFªe
–
pxQueue
 );

1960 #ñif––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

1964 if–
pxQueue
->
ucSètiˇŒyAŒoˇãd
 =–
uöt8_t
 ) 
pdFALSE
 )

1966 
	`vP‹tFªe
–
pxQueue
 );

1970 
	`mtCOVERAGE_TEST_MARKER
();

1977 –Ë
pxQueue
;

1980 
	}
}

1983 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1985 
UBa£Ty≥_t
 
	$uxQueueGëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
 )

1987  ( ( 
Queue_t
 * ) 
xQueue
 )->
uxQueueNumbî
;

1988 
	}
}

1993 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1995 
	$vQueueSëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
, 
UBa£Ty≥_t
 
uxQueueNumbî
 )

1997 ––
Queue_t
 * ) 
xQueue
 )->
uxQueueNumbî
 = uxQueueNumber;

1998 
	}
}

2003 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2005 
uöt8_t
 
	$ucQueueGëQueueTy≥
–
QueueH™dÀ_t
 
xQueue
 )

2007  ( ( 
Queue_t
 * ) 
xQueue
 )->
ucQueueTy≥
;

2008 
	}
}

2013 #if–
c⁄figUSE_MUTEXES
 == 1 )

2015 
UBa£Ty≥_t
 
	$¥vGëDisöhîôPri‹ôyA·îTimeout
–c⁄° 
Queue_t
 * c⁄° 
pxQueue
 )

2017 
UBa£Ty≥_t
 
uxHighe°Pri‹ôyOfWaôögTasks
;

2025 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) > 0 )

2027 
uxHighe°Pri‹ôyOfWaôögTasks
 = 
c⁄figMAX_PRIORITIES
 - 
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

2031 
uxHighe°Pri‹ôyOfWaôögTasks
 = 
tskIDLE_PRIORITY
;

2034  
uxHighe°Pri‹ôyOfWaôögTasks
;

2035 
	}
}

2040 
Ba£Ty≥_t
 
	$¥vC›yD©aToQueue
–
Queue_t
 * c⁄° 
pxQueue
, c⁄° *
pvIãmToQueue
, c⁄° 
Ba£Ty≥_t
 
xPosôi⁄
 )

2042 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

2043 
UBa£Ty≥_t
 
uxMesßgesWaôög
;

2047 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

2049 if–
pxQueue
->
uxIãmSize
 =–
UBa£Ty≥_t
 ) 0 )

2051 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

2053 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

2056 
xRëu∫
 = 
	`xTaskPri‹ôyDisöhîô
––* ) 
pxQueue
->
pxMuãxHﬁdî
 );

2057 
pxQueue
->
pxMuãxHﬁdî
 = 
NULL
;

2061 
	`mtCOVERAGE_TEST_MARKER
();

2066 if–
xPosôi⁄
 =
queueSEND_TO_BACK
 )

2068 –Ë
	`mem˝y
––* ) 
pxQueue
->
pcWrôeTo
, 
pvIãmToQueue
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

2069 
pxQueue
->
pcWrôeTo
 +pxQueue->
uxIãmSize
;

2070 if–
pxQueue
->
pcWrôeTo
 >pxQueue->
pcTaû
 )

2072 
pxQueue
->
pcWrôeTo
 =ÖxQueue->
pcHód
;

2076 
	`mtCOVERAGE_TEST_MARKER
();

2081 –Ë
	`mem˝y
––* ) 
pxQueue
->
u
.
pcRódFrom
, 
pvIãmToQueue
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

2082 
pxQueue
->
u
.
pcRódFrom
 -pxQueue->
uxIãmSize
;

2083 if–
pxQueue
->
u
.
pcRódFrom
 <ÖxQueue->
pcHód
 )

2085 
pxQueue
->
u
.
pcRódFrom
 = (ÖxQueue->
pcTaû
 -ÖxQueue->
uxIãmSize
 );

2089 
	`mtCOVERAGE_TEST_MARKER
();

2092 if–
xPosôi⁄
 =
queueOVERWRITE
 )

2094 if–
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

2100 --
uxMesßgesWaôög
;

2104 
	`mtCOVERAGE_TEST_MARKER
();

2109 
	`mtCOVERAGE_TEST_MARKER
();

2113 
pxQueue
->
uxMesßgesWaôög
 = uxMesßgesWaôög + ( 
UBa£Ty≥_t
 ) 1;

2115  
xRëu∫
;

2116 
	}
}

2119 
	$¥vC›yD©aFromQueue
–
Queue_t
 * c⁄° 
pxQueue
, * c⁄° 
pvBuf„r
 )

2121 if–
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0 )

2123 
pxQueue
->
u
.
pcRódFrom
 +pxQueue->
uxIãmSize
;

2124 if–
pxQueue
->
u
.
pcRódFrom
 >pxQueue->
pcTaû
 )

2126 
pxQueue
->
u
.
pcRódFrom
 =ÖxQueue->
pcHód
;

2130 
	`mtCOVERAGE_TEST_MARKER
();

2132 –Ë
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
u
.
pcRódFrom
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

2134 
	}
}

2137 
	$¥vU∆ockQueue
–
Queue_t
 * c⁄° 
pxQueue
 )

2145 
	`èskENTER_CRITICAL
();

2147 
öt8_t
 
cTxLock
 = 
pxQueue
->cTxLock;

2150  
cTxLock
 > 
queueLOCKED_UNMODIFIED
 )

2154 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2156 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

2158 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
, 
queueSEND_TO_BACK
 ) !
pdFALSE
 )

2163 
	`vTaskMis£dYõld
();

2167 
	`mtCOVERAGE_TEST_MARKER
();

2175 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2177 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2181 
	`vTaskMis£dYõld
();

2185 
	`mtCOVERAGE_TEST_MARKER
();

2198 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2200 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2204 
	`vTaskMis£dYõld
();

2208 
	`mtCOVERAGE_TEST_MARKER
();

2218 --
cTxLock
;

2221 
pxQueue
->
cTxLock
 = 
queueUNLOCKED
;

2223 
	`èskEXIT_CRITICAL
();

2226 
	`èskENTER_CRITICAL
();

2228 
öt8_t
 
cRxLock
 = 
pxQueue
->cRxLock;

2230  
cRxLock
 > 
queueLOCKED_UNMODIFIED
 )

2232 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

2234 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

2236 
	`vTaskMis£dYõld
();

2240 
	`mtCOVERAGE_TEST_MARKER
();

2243 --
cRxLock
;

2251 
pxQueue
->
cRxLock
 = 
queueUNLOCKED
;

2253 
	`èskEXIT_CRITICAL
();

2254 
	}
}

2257 
Ba£Ty≥_t
 
	$¥vIsQueueEm±y
–c⁄° 
Queue_t
 *
pxQueue
 )

2259 
Ba£Ty≥_t
 
xRëu∫
;

2261 
	`èskENTER_CRITICAL
();

2263 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0 )

2265 
xRëu∫
 = 
pdTRUE
;

2269 
xRëu∫
 = 
pdFALSE
;

2272 
	`èskEXIT_CRITICAL
();

2274  
xRëu∫
;

2275 
	}
}

2278 
Ba£Ty≥_t
 
	$xQueueIsQueueEm±yFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

2280 
Ba£Ty≥_t
 
xRëu∫
;

2282 
	`c⁄figASSERT
–
xQueue
 );

2283 if–––
Queue_t
 * ) 
xQueue
 )->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0 )

2285 
xRëu∫
 = 
pdTRUE
;

2289 
xRëu∫
 = 
pdFALSE
;

2292  
xRëu∫
;

2293 
	}
}

2296 
Ba£Ty≥_t
 
	$¥vIsQueueFuŒ
–c⁄° 
Queue_t
 *
pxQueue
 )

2298 
Ba£Ty≥_t
 
xRëu∫
;

2300 
	`èskENTER_CRITICAL
();

2302 if–
pxQueue
->
uxMesßgesWaôög
 =pxQueue->
uxLígth
 )

2304 
xRëu∫
 = 
pdTRUE
;

2308 
xRëu∫
 = 
pdFALSE
;

2311 
	`èskEXIT_CRITICAL
();

2313  
xRëu∫
;

2314 
	}
}

2317 
Ba£Ty≥_t
 
	$xQueueIsQueueFuŒFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

2319 
Ba£Ty≥_t
 
xRëu∫
;

2321 
	`c⁄figASSERT
–
xQueue
 );

2322 if–––
Queue_t
 * ) 
xQueue
 )->
uxMesßgesWaôög
 =––Queue_à* ) xQueuê)->
uxLígth
 )

2324 
xRëu∫
 = 
pdTRUE
;

2328 
xRëu∫
 = 
pdFALSE
;

2331  
xRëu∫
;

2332 
	}
}

2335 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2337 
Ba£Ty≥_t
 
	$xQueueCRSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
 )

2339 
Ba£Ty≥_t
 
xRëu∫
;

2340 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

2345 
	`p‹tDISABLE_INTERRUPTS
();

2347 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

2351 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

2355 
	`vCoRoutöeAddToDñayedLi°
–
xTicksToWaô
, &–
pxQueue
->
xTasksWaôögToSíd
 ) );

2356 
	`p‹tENABLE_INTERRUPTS
();

2357  
îrQUEUE_BLOCKED
;

2361 
	`p‹tENABLE_INTERRUPTS
();

2362  
îrQUEUE_FULL
;

2366 
	`p‹tENABLE_INTERRUPTS
();

2368 
	`p‹tDISABLE_INTERRUPTS
();

2370 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

2373 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
queueSEND_TO_BACK
 );

2374 
xRëu∫
 = 
pdPASS
;

2377 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2383 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2387 
xRëu∫
 = 
îrQUEUE_YIELD
;

2391 
	`mtCOVERAGE_TEST_MARKER
();

2396 
	`mtCOVERAGE_TEST_MARKER
();

2401 
xRëu∫
 = 
îrQUEUE_FULL
;

2404 
	`p‹tENABLE_INTERRUPTS
();

2406  
xRëu∫
;

2407 
	}
}

2412 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2414 
Ba£Ty≥_t
 
	$xQueueCRRe˚ive
–
QueueH™dÀ_t
 
xQueue
, *
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
 )

2416 
Ba£Ty≥_t
 
xRëu∫
;

2417 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

2422 
	`p‹tDISABLE_INTERRUPTS
();

2424 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0 )

2428 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

2432 
	`vCoRoutöeAddToDñayedLi°
–
xTicksToWaô
, &–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

2433 
	`p‹tENABLE_INTERRUPTS
();

2434  
îrQUEUE_BLOCKED
;

2438 
	`p‹tENABLE_INTERRUPTS
();

2439  
îrQUEUE_FULL
;

2444 
	`mtCOVERAGE_TEST_MARKER
();

2447 
	`p‹tENABLE_INTERRUPTS
();

2449 
	`p‹tDISABLE_INTERRUPTS
();

2451 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

2454 
pxQueue
->
u
.
pcRódFrom
 +pxQueue->
uxIãmSize
;

2455 if–
pxQueue
->
u
.
pcRódFrom
 >pxQueue->
pcTaû
 )

2457 
pxQueue
->
u
.
pcRódFrom
 =ÖxQueue->
pcHód
;

2461 
	`mtCOVERAGE_TEST_MARKER
();

2463 --–
pxQueue
->
uxMesßgesWaôög
 );

2464 –Ë
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
u
.
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

2466 
xRëu∫
 = 
pdPASS
;

2469 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

2475 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

2477 
xRëu∫
 = 
îrQUEUE_YIELD
;

2481 
	`mtCOVERAGE_TEST_MARKER
();

2486 
	`mtCOVERAGE_TEST_MARKER
();

2491 
xRëu∫
 = 
pdFAIL
;

2494 
	`p‹tENABLE_INTERRUPTS
();

2496  
xRëu∫
;

2497 
	}
}

2502 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2504 
Ba£Ty≥_t
 
	$xQueueCRSídFromISR
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pvIãmToQueue
, 
Ba£Ty≥_t
 
xCoRoutöePªviou¶yWokí
 )

2506 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

2510 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

2512 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
queueSEND_TO_BACK
 );

2516 if–
xCoRoutöePªviou¶yWokí
 =
pdFALSE
 )

2518 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2520 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2522  
pdTRUE
;

2526 
	`mtCOVERAGE_TEST_MARKER
();

2531 
	`mtCOVERAGE_TEST_MARKER
();

2536 
	`mtCOVERAGE_TEST_MARKER
();

2541 
	`mtCOVERAGE_TEST_MARKER
();

2544  
xCoRoutöePªviou¶yWokí
;

2545 
	}
}

2550 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2552 
Ba£Ty≥_t
 
	$xQueueCRRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
, *
pvBuf„r
, 
Ba£Ty≥_t
 *
pxCoRoutöeWokí
 )

2554 
Ba£Ty≥_t
 
xRëu∫
;

2555 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

2559 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

2562 
pxQueue
->
u
.
pcRódFrom
 +pxQueue->
uxIãmSize
;

2563 if–
pxQueue
->
u
.
pcRódFrom
 >pxQueue->
pcTaû
 )

2565 
pxQueue
->
u
.
pcRódFrom
 =ÖxQueue->
pcHód
;

2569 
	`mtCOVERAGE_TEST_MARKER
();

2571 --–
pxQueue
->
uxMesßgesWaôög
 );

2572 –Ë
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
u
.
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

2574 if––*
pxCoRoutöeWokí
 ) =
pdFALSE
 )

2576 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

2578 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

2580 *
pxCoRoutöeWokí
 = 
pdTRUE
;

2584 
	`mtCOVERAGE_TEST_MARKER
();

2589 
	`mtCOVERAGE_TEST_MARKER
();

2594 
	`mtCOVERAGE_TEST_MARKER
();

2597 
xRëu∫
 = 
pdPASS
;

2601 
xRëu∫
 = 
pdFAIL
;

2604  
xRëu∫
;

2605 
	}
}

2610 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

2612 
	$vQueueAddToRegi°ry
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pcQueueName
 )

2614 
UBa£Ty≥_t
 
ux
;

2618  
ux
 = ( 
UBa£Ty≥_t
 ) 0U; ux < ( UBa£Ty≥_àË
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

2620 if–
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 =
NULL
 )

2623 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 =ÖcQueueName;

2624 
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 = 
xQueue
;

2626 
	`åa˚QUEUE_REGISTRY_ADD
–
xQueue
, 
pcQueueName
 );

2631 
	`mtCOVERAGE_TEST_MARKER
();

2634 
	}
}

2639 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

2641 c⁄° *
	$pcQueueGëName
–
QueueH™dÀ_t
 
xQueue
 )

2643 
UBa£Ty≥_t
 
ux
;

2644 c⁄° *
pcRëu∫
 = 
NULL
;

2648  
ux
 = ( 
UBa£Ty≥_t
 ) 0U; ux < ( UBa£Ty≥_àË
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

2650 if–
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 =
xQueue
 )

2652 
pcRëu∫
 = 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
;

2657 
	`mtCOVERAGE_TEST_MARKER
();

2661  
pcRëu∫
;

2662 
	}
}

2667 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

2669 
	$vQueueUƒegi°îQueue
–
QueueH™dÀ_t
 
xQueue
 )

2671 
UBa£Ty≥_t
 
ux
;

2675  
ux
 = ( 
UBa£Ty≥_t
 ) 0U; ux < ( UBa£Ty≥_àË
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

2677 if–
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 =
xQueue
 )

2680 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 = 
NULL
;

2685 
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 = ( 
QueueH™dÀ_t
 ) 0;

2690 
	`mtCOVERAGE_TEST_MARKER
();

2694 
	}
}

2699 #i‡–
c⁄figUSE_TIMERS
 == 1 )

2701 
	$vQueueWaôF‹MesßgeRe°ri˘ed
–
QueueH™dÀ_t
 
xQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
 )

2703 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

2719 
	`¥vLockQueue
–
pxQueue
 );

2720 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0U )

2723 
	`vTaskPœ˚OnEvítLi°Re°ri˘ed
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
, 
xWaôIndeföôñy
 );

2727 
	`mtCOVERAGE_TEST_MARKER
();

2729 
	`¥vU∆ockQueue
–
pxQueue
 );

2730 
	}
}

2735 #if––
c⁄figUSE_QUEUE_SETS
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

2737 
QueueSëH™dÀ_t
 
	$xQueueCª©eSë
–c⁄° 
UBa£Ty≥_t
 
uxEvítQueueLígth
 )

2739 
QueueSëH™dÀ_t
 
pxQueue
;

2741 
pxQueue
 = 
	`xQueueGíîicCª©e
–
uxEvítQueueLígth
, ( 
UBa£Ty≥_t
 ) –
Queue_t
 * ), 
queueQUEUE_TYPE_SET
 );

2743  
pxQueue
;

2744 
	}
}

2749 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2751 
Ba£Ty≥_t
 
	$xQueueAddToSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 )

2753 
Ba£Ty≥_t
 
xRëu∫
;

2755 
	`èskENTER_CRITICAL
();

2757 if–––
Queue_t
 * ) 
xQueueOrSem≠h‹e
 )->
pxQueueSëC⁄èöî
 !
NULL
 )

2760 
xRëu∫
 = 
pdFAIL
;

2762 if–––
Queue_t
 * ) 
xQueueOrSem≠h‹e
 )->
uxMesßgesWaôög
 !–
UBa£Ty≥_t
 ) 0 )

2766 
xRëu∫
 = 
pdFAIL
;

2770 ––
Queue_t
 * ) 
xQueueOrSem≠h‹e
 )->
pxQueueSëC⁄èöî
 = 
xQueueSë
;

2771 
xRëu∫
 = 
pdPASS
;

2774 
	`èskEXIT_CRITICAL
();

2776  
xRëu∫
;

2777 
	}
}

2782 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2784 
Ba£Ty≥_t
 
	$xQueueRemoveFromSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 )

2786 
Ba£Ty≥_t
 
xRëu∫
;

2787 
Queue_t
 * c⁄° 
pxQueueOrSem≠h‹e
 = ( Queue_à* ) 
xQueueOrSem≠h‹e
;

2789 if–
pxQueueOrSem≠h‹e
->
pxQueueSëC⁄èöî
 !
xQueueSë
 )

2792 
xRëu∫
 = 
pdFAIL
;

2794 if–
pxQueueOrSem≠h‹e
->
uxMesßgesWaôög
 !–
UBa£Ty≥_t
 ) 0 )

2799 
xRëu∫
 = 
pdFAIL
;

2803 
	`èskENTER_CRITICAL
();

2806 
pxQueueOrSem≠h‹e
->
pxQueueSëC⁄èöî
 = 
NULL
;

2808 
	`èskEXIT_CRITICAL
();

2809 
xRëu∫
 = 
pdPASS
;

2812  
xRëu∫
;

2813 
	}
}

2818 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2820 
QueueSëMembîH™dÀ_t
 
	$xQueueSñe˘FromSë
–
QueueSëH™dÀ_t
 
xQueueSë
, 
TickTy≥_t
 c⁄° 
xTicksToWaô
 )

2822 
QueueSëMembîH™dÀ_t
 
xRëu∫
 = 
NULL
;

2824 –Ë
	`xQueueRe˚ive
––
QueueH™dÀ_t
 ) 
xQueueSë
, &
xRëu∫
, 
xTicksToWaô
 );

2825  
xRëu∫
;

2826 
	}
}

2831 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2833 
QueueSëMembîH™dÀ_t
 
	$xQueueSñe˘FromSëFromISR
–
QueueSëH™dÀ_t
 
xQueueSë
 )

2835 
QueueSëMembîH™dÀ_t
 
xRëu∫
 = 
NULL
;

2837 –Ë
	`xQueueRe˚iveFromISR
––
QueueH™dÀ_t
 ) 
xQueueSë
, &
xRëu∫
, 
NULL
 );

2838  
xRëu∫
;

2839 
	}
}

2844 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2846 
Ba£Ty≥_t
 
	$¥vNŸifyQueueSëC⁄èöî
–c⁄° 
Queue_t
 * c⁄° 
pxQueue
, c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 )

2848 
Queue_t
 *
pxQueueSëC⁄èöî
 = 
pxQueue
->pxQueueSetContainer;

2849 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

2853 
	`c⁄figASSERT
–
pxQueueSëC⁄èöî
 );

2854 
	`c⁄figASSERT
–
pxQueueSëC⁄èöî
->
uxMesßgesWaôög
 <ÖxQueueSëC⁄èöî->
uxLígth
 );

2856 if–
pxQueueSëC⁄èöî
->
uxMesßgesWaôög
 <ÖxQueueSëC⁄èöî->
uxLígth
 )

2858 c⁄° 
öt8_t
 
cTxLock
 = 
pxQueueSëC⁄èöî
->cTxLock;

2860 
	`åa˚QUEUE_SEND
–
pxQueueSëC⁄èöî
 );

2863 
xRëu∫
 = 
	`¥vC›yD©aToQueue
–
pxQueueSëC⁄èöî
, &
pxQueue
, 
xC›yPosôi⁄
 );

2865 if–
cTxLock
 =
queueUNLOCKED
 )

2867 if–
	`li°LIST_IS_EMPTY
–&–
pxQueueSëC⁄èöî
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2869 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueueSëC⁄èöî
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2872 
xRëu∫
 = 
pdTRUE
;

2876 
	`mtCOVERAGE_TEST_MARKER
();

2881 
	`mtCOVERAGE_TEST_MARKER
();

2886 
pxQueueSëC⁄èöî
->
cTxLock
 = ( 
öt8_t
 ) ( cTxLock + 1 );

2891 
	`mtCOVERAGE_TEST_MARKER
();

2894  
xRëu∫
;

2895 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\stream_buffer.c

29 
	~<°döt.h
>

30 
	~<°rög.h
>

35 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

38 
	~"FªeRTOS.h
"

39 
	~"èsk.h
"

40 
	~"°ªam_buf„r.h
"

42 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 != 1 )

43 #îr‹ 
c⁄figUSE_TASK_NOTIFICATIONS
 
mu°
 
be
 
£t
 
to
 1Åÿ
buûd
 
°ªam_buf„r
.
c


50 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


56 #i‚de‡
sbRECEIVE_COMPLETED


57 
	#sbRECEIVE_COMPLETED
–
pxSåómBuf„r
 ) \

58 
	`vTaskSu•ídAŒ
(); \

60 if––
pxSåómBuf„r
 )->
xTaskWaôögToSíd
 !
NULL
 ) \

62 –Ë
	`xTaskNŸify
––
pxSåómBuf„r
 )->
xTaskWaôögToSíd
, \

63 –
uöt32_t
 ) 0, \

64 
eNoA˘i⁄
 ); \

65 –
pxSåómBuf„r
 )->
xTaskWaôögToSíd
 = 
NULL
; \

68 –Ë
	`xTaskResumeAŒ
();

	)

71 #i‚de‡
sbRECEIVE_COMPLETED_FROM_ISR


72 
	#sbRECEIVE_COMPLETED_FROM_ISR
–
pxSåómBuf„r
, \

73 
pxHighîPri‹ôyTaskWokí
 ) \

75 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
; \

77 
uxSavedI¡îru±Sètus
 = ( 
UBa£Ty≥_t
 ) 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
(); \

79 if––
pxSåómBuf„r
 )->
xTaskWaôögToSíd
 !
NULL
 ) \

81 –Ë
	`xTaskNŸifyFromISR
––
pxSåómBuf„r
 )->
xTaskWaôögToSíd
, \

82 –
uöt32_t
 ) 0, \

83 
eNoA˘i⁄
, \

84 
pxHighîPri‹ôyTaskWokí
 ); \

85 –
pxSåómBuf„r
 )->
xTaskWaôögToSíd
 = 
NULL
; \

88 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 ); \

89 }

	)

95 #i‚de‡
sbSEND_COMPLETED


96 
	#sbSEND_COMPLETED
–
pxSåómBuf„r
 ) \

97 
	`vTaskSu•ídAŒ
(); \

99 if––
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
 !
NULL
 ) \

101 –Ë
	`xTaskNŸify
––
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
, \

102 –
uöt32_t
 ) 0, \

103 
eNoA˘i⁄
 ); \

104 –
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
 = 
NULL
; \

107 –Ë
	`xTaskResumeAŒ
();

	)

110 #i‚de‡
sbSEND_COMPLETE_FROM_ISR


111 
	#sbSEND_COMPLETE_FROM_ISR
–
pxSåómBuf„r
, 
pxHighîPri‹ôyTaskWokí
 ) \

113 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
; \

115 
uxSavedI¡îru±Sètus
 = ( 
UBa£Ty≥_t
 ) 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
(); \

117 if––
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
 !
NULL
 ) \

119 –Ë
	`xTaskNŸifyFromISR
––
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
, \

120 –
uöt32_t
 ) 0, \

121 
eNoA˘i⁄
, \

122 
pxHighîPri‹ôyTaskWokí
 ); \

123 –
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
 = 
NULL
; \

126 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 ); \

127 }

	)

132 
	#sbBYTES_TO_STORE_MESSAGE_LENGTH
 ( –
size_t
 ) )

	)

135 
	#sbFLAGS_IS_MESSAGE_BUFFER
 ( ( 
uöt8_t
 ) 1 )

	)

136 
	#sbFLAGS_IS_STATICALLY_ALLOCATED
 ( ( 
uöt8_t
 ) 2 )

	)

141 
	sxSTREAM_BUFFER


143 vﬁ©ûê
size_t
 
	mxTaû
;

144 vﬁ©ûê
size_t
 
	mxHód
;

145 
size_t
 
	mxLígth
;

146 
size_t
 
	mxTriggîLevñByãs
;

147 vﬁ©ûê
TaskH™dÀ_t
 
	mxTaskWaôögToRe˚ive
;

148 vﬁ©ûê
TaskH™dÀ_t
 
	mxTaskWaôögToSíd
;

149 
uöt8_t
 *
	mpucBuf„r
;

150 
uöt8_t
 
	mucFœgs
;

152 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

153 
UBa£Ty≥_t
 
	muxSåómBuf„rNumbî
;

155 } 
	tSåómBuf„r_t
;

160 
size_t
 
	$¥vByãsInBuf„r
–c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

168 
size_t
 
	$¥vWrôeByãsToBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
, c⁄° 
uöt8_t
 *
pucD©a
, 
size_t
 
xCou¡
 ) 
PRIVILEGED_FUNCTION
;

177 
size_t
 
	$¥vRódMesßgeFromBuf„r
–
SåómBuf„r_t
 *
pxSåómBuf„r
,

178 *
pvRxD©a
,

179 
size_t
 
xBuf„rLígthByãs
,

180 
size_t
 
xByãsAvaûabÀ
,

181 
size_t
 
xByãsToSt‹eMesßgeLígth
 ) 
PRIVILEGED_FUNCTION
;

190 
size_t
 
	$¥vWrôeMesßgeToBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
,

191 c⁄° * 
pvTxD©a
,

192 
size_t
 
xD©aLígthByãs
,

193 
size_t
 
xS∑˚
,

194 
size_t
 
xRequúedS∑˚
 ) 
PRIVILEGED_FUNCTION
;

200 
size_t
 
	`¥vRódByãsFromBuf„r
–
SåómBuf„r_t
 *
pxSåómBuf„r
,

201 
uöt8_t
 *
pucD©a
,

202 
size_t
 
xMaxCou¡
,

203 
size_t
 
xByãsAvaûabÀ
 ); 
PRIVILEGED_FUNCTION


209 
	$¥vInôüli£NewSåómBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
,

210 
uöt8_t
 * c⁄° 
pucBuf„r
,

211 
size_t
 
xBuf„rSizeByãs
,

212 
size_t
 
xTriggîLevñByãs
,

213 
Ba£Ty≥_t
 
xIsMesßgeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

217 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

219 
SåómBuf„rH™dÀ_t
 
	$xSåómBuf„rGíîicCª©e
–
size_t
 
xBuf„rSizeByãs
, size_à
xTriggîLevñByãs
, 
Ba£Ty≥_t
 
xIsMesßgeBuf„r
 )

221 
uöt8_t
 *
pucAŒoˇãdMem‹y
;

227 
	`c⁄figASSERT
–
xBuf„rSizeByãs
 > 
sbBYTES_TO_STORE_MESSAGE_LENGTH
 );

228 
	`c⁄figASSERT
–
xTriggîLevñByãs
 <
xBuf„rSizeByãs
 );

232 if–
xTriggîLevñByãs
 =–
size_t
 ) 0 )

234 
xTriggîLevñByãs
 = ( 
size_t
 ) 1;

245 
xBuf„rSizeByãs
++;

246 
pucAŒoˇãdMem‹y
 = ( 
uöt8_t
 * ) 
	`pvP‹tMÆloc
–
xBuf„rSizeByãs
 + –
SåómBuf„r_t
 ) );

248 if–
pucAŒoˇãdMem‹y
 !
NULL
 )

250 
	`¥vInôüli£NewSåómBuf„r
––
SåómBuf„r_t
 * ) 
pucAŒoˇãdMem‹y
,

251 
pucAŒoˇãdMem‹y
 + –
SåómBuf„r_t
 ),

252 
xBuf„rSizeByãs
,

253 
xTriggîLevñByãs
,

254 
xIsMesßgeBuf„r
 );

256 
	`åa˚STREAM_BUFFER_CREATE
–––
SåómBuf„r_t
 * ) 
pucAŒoˇãdMem‹y
 ), 
xIsMesßgeBuf„r
 );

260 
	`åa˚STREAM_BUFFER_CREATE_FAILED
–
xIsMesßgeBuf„r
 );

263  ( 
SåómBuf„rH™dÀ_t
 * ) 
pucAŒoˇãdMem‹y
;

264 
	}
}

269 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

271 
SåómBuf„rH™dÀ_t
 
	$xSåómBuf„rGíîicCª©eSètic
–
size_t
 
xBuf„rSizeByãs
,

272 
size_t
 
xTriggîLevñByãs
,

273 
Ba£Ty≥_t
 
xIsMesßgeBuf„r
,

274 
uöt8_t
 * c⁄° 
pucSåómBuf„rSt‹ageAªa
,

275 
SèticSåómBuf„r_t
 * c⁄° 
pxSèticSåómBuf„r
 )

277 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = ( SåómBuf„r_à* ) 
pxSèticSåómBuf„r
;

278 
SåómBuf„rH™dÀ_t
 
xRëu∫
;

280 
	`c⁄figASSERT
–
pucSåómBuf„rSt‹ageAªa
 );

281 
	`c⁄figASSERT
–
pxSèticSåómBuf„r
 );

282 
	`c⁄figASSERT
–
xTriggîLevñByãs
 <
xBuf„rSizeByãs
 );

286 if–
xTriggîLevñByãs
 =–
size_t
 ) 0 )

288 
xTriggîLevñByãs
 = ( 
size_t
 ) 1;

295 
	`c⁄figASSERT
–
xBuf„rSizeByãs
 > 
sbBYTES_TO_STORE_MESSAGE_LENGTH
 );

297 #if–
c⁄figASSERT_DEFINED
 == 1 )

302 vﬁ©ûê
size_t
 
xSize
 = –
SèticSåómBuf„r_t
 );

303 
	`c⁄figASSERT
–
xSize
 =–
SåómBuf„r_t
 ) );

307 if––
pucSåómBuf„rSt‹ageAªa
 !
NULL
 ) && ( 
pxSèticSåómBuf„r
 != NULL ) )

309 
	`¥vInôüli£NewSåómBuf„r
–
pxSåómBuf„r
,

310 
pucSåómBuf„rSt‹ageAªa
,

311 
xBuf„rSizeByãs
,

312 
xTriggîLevñByãs
,

313 
xIsMesßgeBuf„r
 );

317 
pxSåómBuf„r
->
ucFœgs
 |
sbFLAGS_IS_STATICALLY_ALLOCATED
;

319 
	`åa˚STREAM_BUFFER_CREATE
–
pxSåómBuf„r
, 
xIsMesßgeBuf„r
 );

321 
xRëu∫
 = ( 
SåómBuf„rH™dÀ_t
 ) 
pxSèticSåómBuf„r
;

325 
xRëu∫
 = 
NULL
;

326 
	`åa˚STREAM_BUFFER_CREATE_STATIC_FAILED
–
xRëu∫
, 
xIsMesßgeBuf„r
 );

329  
xRëu∫
;

330 
	}
}

335 
	$vSåómBuf„rDñëe
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

337 
SåómBuf„r_t
 * 
pxSåómBuf„r
 = ( SåómBuf„r_à* ) 
xSåómBuf„r
;

339 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

341 
	`åa˚STREAM_BUFFER_DELETE
–
xSåómBuf„r
 );

343 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_STATICALLY_ALLOCATED
 ) =–
uöt8_t
 ) 
pdFALSE
 )

345 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

349 
	`vP‹tFªe
––* ) 
pxSåómBuf„r
 );

355 
	`c⁄figASSERT
–
xSåómBuf„r
 =–
SåómBuf„rH™dÀ_t
 ) ~0 );

363 
	`mem£t
–
pxSåómBuf„r
, 0x00, –
SåómBuf„r_t
 ) );

365 
	}
}

368 
Ba£Ty≥_t
 
	$xSåómBuf„rRe£t
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

370 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = ( SåómBuf„r_à* ) 
xSåómBuf„r
;

371 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFAIL
, 
xIsMesßgeBuf„r
;

373 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

374 
UBa£Ty≥_t
 
uxSåómBuf„rNumbî
;

377 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

379 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

383 
uxSåómBuf„rNumbî
 = 
pxSåómBuf„r
->uxStreamBufferNumber;

388 if–
pxSåómBuf„r
->
xTaskWaôögToRe˚ive
 =
NULL
 )

390 if–
pxSåómBuf„r
->
xTaskWaôögToSíd
 =
NULL
 )

392 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

394 
xIsMesßgeBuf„r
 = 
pdTRUE
;

398 
xIsMesßgeBuf„r
 = 
pdFALSE
;

401 
	`¥vInôüli£NewSåómBuf„r
–
pxSåómBuf„r
,

402 
pxSåómBuf„r
->
pucBuf„r
,

403 
pxSåómBuf„r
->
xLígth
,

404 
pxSåómBuf„r
->
xTriggîLevñByãs
,

405 
xIsMesßgeBuf„r
 );

406 
xRëu∫
 = 
pdPASS
;

408 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

410 
pxSåómBuf„r
->
uxSåómBuf„rNumbî
 = uxStreamBufferNumber;

414 
	`åa˚STREAM_BUFFER_RESET
–
xSåómBuf„r
 );

418  
xRëu∫
;

419 
	}
}

422 
Ba£Ty≥_t
 
	$xSåómBuf„rSëTriggîLevñ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, 
size_t
 
xTriggîLevñ
 )

424 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = ( SåómBuf„r_à* ) 
xSåómBuf„r
;

425 
Ba£Ty≥_t
 
xRëu∫
;

427 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

430 if–
xTriggîLevñ
 =–
size_t
 ) 0 )

432 
xTriggîLevñ
 = ( 
size_t
 ) 1;

437 if–
xTriggîLevñ
 <
pxSåómBuf„r
->
xLígth
 )

439 
pxSåómBuf„r
->
xTriggîLevñByãs
 = 
xTriggîLevñ
;

440 
xRëu∫
 = 
pdPASS
;

444 
xRëu∫
 = 
pdFALSE
;

447  
xRëu∫
;

448 
	}
}

451 
size_t
 
	$xSåómBuf„rS∑˚sAvaûabÀ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

453 c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = ( SåómBuf„r_à* ) 
xSåómBuf„r
;

454 
size_t
 
xS∑˚
;

456 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

458 
xS∑˚
 = 
pxSåómBuf„r
->
xLígth
 +ÖxSåómBuf„r->
xTaû
;

459 
xS∑˚
 -
pxSåómBuf„r
->
xHód
;

460 
xS∑˚
 -–
size_t
 ) 1;

462 if–
xS∑˚
 >
pxSåómBuf„r
->
xLígth
 )

464 
xS∑˚
 -
pxSåómBuf„r
->
xLígth
;

468 
	`mtCOVERAGE_TEST_MARKER
();

471  
xS∑˚
;

472 
	}
}

475 
size_t
 
	$xSåómBuf„rByãsAvaûabÀ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

477 c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = ( SåómBuf„r_à* ) 
xSåómBuf„r
;

478 
size_t
 
xRëu∫
;

480 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

482 
xRëu∫
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

483  
xRëu∫
;

484 
	}
}

487 
size_t
 
	$xSåómBuf„rSíd
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

488 c⁄° *
pvTxD©a
,

489 
size_t
 
xD©aLígthByãs
,

490 
TickTy≥_t
 
xTicksToWaô
 )

492 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = ( SåómBuf„r_à* ) 
xSåómBuf„r
;

493 
size_t
 
xRëu∫
, 
xS∑˚
 = 0;

494 
size_t
 
xRequúedS∑˚
 = 
xD©aLígthByãs
;

495 
TimeOut_t
 
xTimeOut
;

497 
	`c⁄figASSERT
–
pvTxD©a
 );

498 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

504 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

506 
xRequúedS∑˚
 +
sbBYTES_TO_STORE_MESSAGE_LENGTH
;

510 
	`mtCOVERAGE_TEST_MARKER
();

513 if–
xTicksToWaô
 !–
TickTy≥_t
 ) 0 )

515 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

521 
	`èskENTER_CRITICAL
();

523 
xS∑˚
 = 
	`xSåómBuf„rS∑˚sAvaûabÀ
–
pxSåómBuf„r
 );

525 if–
xS∑˚
 < 
xRequúedS∑˚
 )

528 –Ë
	`xTaskNŸifySèãCÀ¨
–
NULL
 );

531 
	`c⁄figASSERT
–
pxSåómBuf„r
->
xTaskWaôögToSíd
 =
NULL
 );

532 
pxSåómBuf„r
->
xTaskWaôögToSíd
 = 
	`xTaskGëCuºítTaskH™dÀ
();

536 
	`èskEXIT_CRITICAL
();

540 
	`èskEXIT_CRITICAL
();

542 
	`åa˚BLOCKING_ON_STREAM_BUFFER_SEND
–
xSåómBuf„r
 );

543 –Ë
	`xTaskNŸifyWaô
––
uöt32_t
 ) 0, 
UINT32_MAX
, 
NULL
, 
xTicksToWaô
 );

544 
pxSåómBuf„r
->
xTaskWaôögToSíd
 = 
NULL
;

546 }  
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 );

550 
	`mtCOVERAGE_TEST_MARKER
();

553 if–
xS∑˚
 =–
size_t
 ) 0 )

555 
xS∑˚
 = 
	`xSåómBuf„rS∑˚sAvaûabÀ
–
pxSåómBuf„r
 );

559 
	`mtCOVERAGE_TEST_MARKER
();

562 
xRëu∫
 = 
	`¥vWrôeMesßgeToBuf„r
–
pxSåómBuf„r
, 
pvTxD©a
, 
xD©aLígthByãs
, 
xS∑˚
, 
xRequúedS∑˚
 );

564 if–
xRëu∫
 > ( 
size_t
 ) 0 )

566 
	`åa˚STREAM_BUFFER_SEND
–
xSåómBuf„r
, 
xRëu∫
 );

569 if–
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 ) >pxSåómBuf„r->
xTriggîLevñByãs
 )

571 
	`sbSEND_COMPLETED
–
pxSåómBuf„r
 );

575 
	`mtCOVERAGE_TEST_MARKER
();

580 
	`mtCOVERAGE_TEST_MARKER
();

581 
	`åa˚STREAM_BUFFER_SEND_FAILED
–
xSåómBuf„r
 );

584  
xRëu∫
;

585 
	}
}

588 
size_t
 
	$xSåómBuf„rSídFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

589 c⁄° *
pvTxD©a
,

590 
size_t
 
xD©aLígthByãs
,

591 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 )

593 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = ( SåómBuf„r_à* ) 
xSåómBuf„r
;

594 
size_t
 
xRëu∫
, 
xS∑˚
;

595 
size_t
 
xRequúedS∑˚
 = 
xD©aLígthByãs
;

597 
	`c⁄figASSERT
–
pvTxD©a
 );

598 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

604 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

606 
xRequúedS∑˚
 +
sbBYTES_TO_STORE_MESSAGE_LENGTH
;

610 
	`mtCOVERAGE_TEST_MARKER
();

613 
xS∑˚
 = 
	`xSåómBuf„rS∑˚sAvaûabÀ
–
pxSåómBuf„r
 );

614 
xRëu∫
 = 
	`¥vWrôeMesßgeToBuf„r
–
pxSåómBuf„r
, 
pvTxD©a
, 
xD©aLígthByãs
, 
xS∑˚
, 
xRequúedS∑˚
 );

616 if–
xRëu∫
 > ( 
size_t
 ) 0 )

619 if–
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 ) >pxSåómBuf„r->
xTriggîLevñByãs
 )

621 
	`sbSEND_COMPLETE_FROM_ISR
–
pxSåómBuf„r
, 
pxHighîPri‹ôyTaskWokí
 );

625 
	`mtCOVERAGE_TEST_MARKER
();

630 
	`mtCOVERAGE_TEST_MARKER
();

633 
	`åa˚STREAM_BUFFER_SEND_FROM_ISR
–
xSåómBuf„r
, 
xRëu∫
 );

635  
xRëu∫
;

636 
	}
}

639 
size_t
 
	$¥vWrôeMesßgeToBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
,

640 c⁄° * 
pvTxD©a
,

641 
size_t
 
xD©aLígthByãs
,

642 
size_t
 
xS∑˚
,

643 
size_t
 
xRequúedS∑˚
 )

645 
Ba£Ty≥_t
 
xShouldWrôe
;

646 
size_t
 
xRëu∫
;

648 if–
xS∑˚
 =–
size_t
 ) 0 )

652 
xShouldWrôe
 = 
pdFALSE
;

654 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) =–
uöt8_t
 ) 0 )

659 
xShouldWrôe
 = 
pdTRUE
;

660 
xD©aLígthByãs
 = 
	`c⁄figMIN
–xD©aLígthByãs, 
xS∑˚
 );

662 if–
xS∑˚
 >
xRequúedS∑˚
 )

668 
xShouldWrôe
 = 
pdTRUE
;

669 –Ë
	`¥vWrôeByãsToBuf„r
–
pxSåómBuf„r
, ( c⁄° 
uöt8_t
 * ) &–
xD©aLígthByãs
 ), 
sbBYTES_TO_STORE_MESSAGE_LENGTH
 );

674 
xShouldWrôe
 = 
pdFALSE
;

677 if–
xShouldWrôe
 !
pdFALSE
 )

680 
xRëu∫
 = 
	`¥vWrôeByãsToBuf„r
–
pxSåómBuf„r
, ( c⁄° 
uöt8_t
 * ) 
pvTxD©a
, 
xD©aLígthByãs
 );

684 
xRëu∫
 = 0;

687  
xRëu∫
;

688 
	}
}

691 
size_t
 
	$xSåómBuf„rRe˚ive
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

692 *
pvRxD©a
,

693 
size_t
 
xBuf„rLígthByãs
,

694 
TickTy≥_t
 
xTicksToWaô
 )

696 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = ( SåómBuf„r_à* ) 
xSåómBuf„r
;

697 
size_t
 
xRe˚ivedLígth
 = 0, 
xByãsAvaûabÀ
, 
xByãsToSt‹eMesßgeLígth
;

699 
	`c⁄figASSERT
–
pvRxD©a
 );

700 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

707 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

709 
xByãsToSt‹eMesßgeLígth
 = 
sbBYTES_TO_STORE_MESSAGE_LENGTH
;

713 
xByãsToSt‹eMesßgeLígth
 = 0;

716 if–
xTicksToWaô
 !–
TickTy≥_t
 ) 0 )

720 
	`èskENTER_CRITICAL
();

722 
xByãsAvaûabÀ
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

729 if–
xByãsAvaûabÀ
 <
xByãsToSt‹eMesßgeLígth
 )

732 –Ë
	`xTaskNŸifySèãCÀ¨
–
NULL
 );

735 
	`c⁄figASSERT
–
pxSåómBuf„r
->
xTaskWaôögToRe˚ive
 =
NULL
 );

736 
pxSåómBuf„r
->
xTaskWaôögToRe˚ive
 = 
	`xTaskGëCuºítTaskH™dÀ
();

740 
	`mtCOVERAGE_TEST_MARKER
();

743 
	`èskEXIT_CRITICAL
();

745 if–
xByãsAvaûabÀ
 <
xByãsToSt‹eMesßgeLígth
 )

748 
	`åa˚BLOCKING_ON_STREAM_BUFFER_RECEIVE
–
xSåómBuf„r
 );

749 –Ë
	`xTaskNŸifyWaô
––
uöt32_t
 ) 0, 
UINT32_MAX
, 
NULL
, 
xTicksToWaô
 );

750 
pxSåómBuf„r
->
xTaskWaôögToRe˚ive
 = 
NULL
;

753 
xByãsAvaûabÀ
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

757 
	`mtCOVERAGE_TEST_MARKER
();

762 
xByãsAvaûabÀ
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

770 if–
xByãsAvaûabÀ
 > 
xByãsToSt‹eMesßgeLígth
 )

772 
xRe˚ivedLígth
 = 
	`¥vRódMesßgeFromBuf„r
–
pxSåómBuf„r
, 
pvRxD©a
, 
xBuf„rLígthByãs
, 
xByãsAvaûabÀ
, 
xByãsToSt‹eMesßgeLígth
 );

775 if–
xRe˚ivedLígth
 !–
size_t
 ) 0 )

777 
	`åa˚STREAM_BUFFER_RECEIVE
–
xSåómBuf„r
, 
xRe˚ivedLígth
 );

778 
	`sbRECEIVE_COMPLETED
–
pxSåómBuf„r
 );

782 
	`mtCOVERAGE_TEST_MARKER
();

787 
	`åa˚STREAM_BUFFER_RECEIVE_FAILED
–
xSåómBuf„r
 );

788 
	`mtCOVERAGE_TEST_MARKER
();

791  
xRe˚ivedLígth
;

792 
	}
}

795 
size_t
 
	$xSåómBuf„rRe˚iveFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

796 *
pvRxD©a
,

797 
size_t
 
xBuf„rLígthByãs
,

798 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 )

800 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = ( SåómBuf„r_à* ) 
xSåómBuf„r
;

801 
size_t
 
xRe˚ivedLígth
 = 0, 
xByãsAvaûabÀ
, 
xByãsToSt‹eMesßgeLígth
;

803 
	`c⁄figASSERT
–
pvRxD©a
 );

804 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

811 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

813 
xByãsToSt‹eMesßgeLígth
 = 
sbBYTES_TO_STORE_MESSAGE_LENGTH
;

817 
xByãsToSt‹eMesßgeLígth
 = 0;

820 
xByãsAvaûabÀ
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

827 if–
xByãsAvaûabÀ
 > 
xByãsToSt‹eMesßgeLígth
 )

829 
xRe˚ivedLígth
 = 
	`¥vRódMesßgeFromBuf„r
–
pxSåómBuf„r
, 
pvRxD©a
, 
xBuf„rLígthByãs
, 
xByãsAvaûabÀ
, 
xByãsToSt‹eMesßgeLígth
 );

832 if–
xRe˚ivedLígth
 !–
size_t
 ) 0 )

834 
	`sbRECEIVE_COMPLETED_FROM_ISR
–
pxSåómBuf„r
, 
pxHighîPri‹ôyTaskWokí
 );

838 
	`mtCOVERAGE_TEST_MARKER
();

843 
	`mtCOVERAGE_TEST_MARKER
();

846 
	`åa˚STREAM_BUFFER_RECEIVE_FROM_ISR
–
xSåómBuf„r
, 
xRe˚ivedLígth
 );

848  
xRe˚ivedLígth
;

849 
	}
}

852 
size_t
 
	$¥vRódMesßgeFromBuf„r
–
SåómBuf„r_t
 *
pxSåómBuf„r
,

853 *
pvRxD©a
,

854 
size_t
 
xBuf„rLígthByãs
,

855 
size_t
 
xByãsAvaûabÀ
,

856 
size_t
 
xByãsToSt‹eMesßgeLígth
 )

858 
size_t
 
xOrigöÆTaû
, 
xRe˚ivedLígth
, 
xNextMesßgeLígth
;

860 if–
xByãsToSt‹eMesßgeLígth
 !–
size_t
 ) 0 )

866 
xOrigöÆTaû
 = 
pxSåómBuf„r
->
xTaû
;

867 –Ë
	`¥vRódByãsFromBuf„r
–
pxSåómBuf„r
, ( 
uöt8_t
 * ) &
xNextMesßgeLígth
, 
xByãsToSt‹eMesßgeLígth
, 
xByãsAvaûabÀ
 );

871 
xByãsAvaûabÀ
 -
xByãsToSt‹eMesßgeLígth
;

875 if–
xNextMesßgeLígth
 > 
xBuf„rLígthByãs
 )

880 
pxSåómBuf„r
->
xTaû
 = 
xOrigöÆTaû
;

881 
xNextMesßgeLígth
 = 0;

885 
	`mtCOVERAGE_TEST_MARKER
();

892 
xNextMesßgeLígth
 = 
xBuf„rLígthByãs
;

896 
xRe˚ivedLígth
 = 
	`¥vRódByãsFromBuf„r
–
pxSåómBuf„r
, ( 
uöt8_t
 * ) 
pvRxD©a
, 
xNextMesßgeLígth
, 
xByãsAvaûabÀ
 );

898  
xRe˚ivedLígth
;

899 
	}
}

902 
Ba£Ty≥_t
 
	$xSåómBuf„rIsEm±y
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

904 c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = ( SåómBuf„r_à* ) 
xSåómBuf„r
;

905 
Ba£Ty≥_t
 
xRëu∫
;

906 
size_t
 
xTaû
;

908 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

911 
xTaû
 = 
pxSåómBuf„r
->xTail;

912 if–
pxSåómBuf„r
->
xHód
 =
xTaû
 )

914 
xRëu∫
 = 
pdTRUE
;

918 
xRëu∫
 = 
pdFALSE
;

921  
xRëu∫
;

922 
	}
}

925 
Ba£Ty≥_t
 
	$xSåómBuf„rIsFuŒ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

927 
Ba£Ty≥_t
 
xRëu∫
;

928 
size_t
 
xByãsToSt‹eMesßgeLígth
;

929 c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = ( SåómBuf„r_à* ) 
xSåómBuf„r
;

931 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

937 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

939 
xByãsToSt‹eMesßgeLígth
 = 
sbBYTES_TO_STORE_MESSAGE_LENGTH
;

943 
xByãsToSt‹eMesßgeLígth
 = 0;

947 if–
	`xSåómBuf„rS∑˚sAvaûabÀ
–
xSåómBuf„r
 ) <
xByãsToSt‹eMesßgeLígth
 )

949 
xRëu∫
 = 
pdTRUE
;

953 
xRëu∫
 = 
pdFALSE
;

956  
xRëu∫
;

957 
	}
}

960 
Ba£Ty≥_t
 
	$xSåómBuf„rSídCom∂ëedFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
 )

962 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = ( SåómBuf„r_à* ) 
xSåómBuf„r
;

963 
Ba£Ty≥_t
 
xRëu∫
;

964 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

966 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

968 
uxSavedI¡îru±Sètus
 = ( 
UBa£Ty≥_t
 ) 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

970 if––
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
 !
NULL
 )

972 –Ë
	`xTaskNŸifyFromISR
––
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
,

973 –
uöt32_t
 ) 0,

974 
eNoA˘i⁄
,

975 
pxHighîPri‹ôyTaskWokí
 );

976 –
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
 = 
NULL
;

977 
xRëu∫
 = 
pdTRUE
;

981 
xRëu∫
 = 
pdFALSE
;

984 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

986  
xRëu∫
;

987 
	}
}

990 
Ba£Ty≥_t
 
	$xSåómBuf„rRe˚iveCom∂ëedFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
 )

992 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = ( SåómBuf„r_à* ) 
xSåómBuf„r
;

993 
Ba£Ty≥_t
 
xRëu∫
;

994 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

996 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

998 
uxSavedI¡îru±Sètus
 = ( 
UBa£Ty≥_t
 ) 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1000 if––
pxSåómBuf„r
 )->
xTaskWaôögToSíd
 !
NULL
 )

1002 –Ë
	`xTaskNŸifyFromISR
––
pxSåómBuf„r
 )->
xTaskWaôögToSíd
,

1003 –
uöt32_t
 ) 0,

1004 
eNoA˘i⁄
,

1005 
pxHighîPri‹ôyTaskWokí
 );

1006 –
pxSåómBuf„r
 )->
xTaskWaôögToSíd
 = 
NULL
;

1007 
xRëu∫
 = 
pdTRUE
;

1011 
xRëu∫
 = 
pdFALSE
;

1014 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1016  
xRëu∫
;

1017 
	}
}

1020 
size_t
 
	$¥vWrôeByãsToBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
, c⁄° 
uöt8_t
 *
pucD©a
, 
size_t
 
xCou¡
 )

1022 
size_t
 
xNextHód
, 
xFú°Lígth
;

1024 
	`c⁄figASSERT
–
xCou¡
 > ( 
size_t
 ) 0 );

1026 
xNextHód
 = 
pxSåómBuf„r
->
xHód
;

1031 
xFú°Lígth
 = 
	`c⁄figMIN
–
pxSåómBuf„r
->
xLígth
 - 
xNextHód
, 
xCou¡
 );

1034 
	`c⁄figASSERT
––
xNextHód
 + 
xFú°Lígth
 ) <
pxSåómBuf„r
->
xLígth
 );

1035 
	`mem˝y
––* ) ( &–
pxSåómBuf„r
->
pucBuf„r
[ 
xNextHód
 ] ) ), ( c⁄° * ) 
pucD©a
, 
xFú°Lígth
 );

1039 if–
xCou¡
 > 
xFú°Lígth
 )

1042 
	`c⁄figASSERT
––
xCou¡
 - 
xFú°Lígth
 ) <
pxSåómBuf„r
->
xLígth
 );

1043 
	`mem˝y
––* ) 
pxSåómBuf„r
->
pucBuf„r
, ( c⁄° * ) &–
pucD©a
[ 
xFú°Lígth
 ] ), 
xCou¡
 - xFirstLength );

1047 
	`mtCOVERAGE_TEST_MARKER
();

1050 
xNextHód
 +
xCou¡
;

1051 if–
xNextHód
 >
pxSåómBuf„r
->
xLígth
 )

1053 
xNextHód
 -
pxSåómBuf„r
->
xLígth
;

1057 
	`mtCOVERAGE_TEST_MARKER
();

1060 
pxSåómBuf„r
->
xHód
 = 
xNextHód
;

1062  
xCou¡
;

1063 
	}
}

1066 
size_t
 
	$¥vRódByãsFromBuf„r
–
SåómBuf„r_t
 *
pxSåómBuf„r
, 
uöt8_t
 *
pucD©a
, 
size_t
 
xMaxCou¡
, size_à
xByãsAvaûabÀ
 )

1068 
size_t
 
xCou¡
, 
xFú°Lígth
, 
xNextTaû
;

1071 
xCou¡
 = 
	`c⁄figMIN
–
xByãsAvaûabÀ
, 
xMaxCou¡
 );

1073 if–
xCou¡
 > ( 
size_t
 ) 0 )

1075 
xNextTaû
 = 
pxSåómBuf„r
->
xTaû
;

1080 
xFú°Lígth
 = 
	`c⁄figMIN
–
pxSåómBuf„r
->
xLígth
 - 
xNextTaû
, 
xCou¡
 );

1084 
	`c⁄figASSERT
–
xFú°Lígth
 <
xMaxCou¡
 );

1085 
	`c⁄figASSERT
––
xNextTaû
 + 
xFú°Lígth
 ) <
pxSåómBuf„r
->
xLígth
 );

1086 
	`mem˝y
––* ) 
pucD©a
, ( c⁄° * ) &–
pxSåómBuf„r
->
pucBuf„r
[ 
xNextTaû
 ] ), 
xFú°Lígth
 );

1090 if–
xCou¡
 > 
xFú°Lígth
 )

1093 
	`c⁄figASSERT
–
xCou¡
 <
xMaxCou¡
 );

1094 
	`mem˝y
––* ) &–
pucD©a
[ 
xFú°Lígth
 ] ), ( * ) ( 
pxSåómBuf„r
->
pucBuf„r
 ), 
xCou¡
 - xFirstLength );

1098 
	`mtCOVERAGE_TEST_MARKER
();

1103 
xNextTaû
 +
xCou¡
;

1105 if–
xNextTaû
 >
pxSåómBuf„r
->
xLígth
 )

1107 
xNextTaû
 -
pxSåómBuf„r
->
xLígth
;

1110 
pxSåómBuf„r
->
xTaû
 = 
xNextTaû
;

1114 
	`mtCOVERAGE_TEST_MARKER
();

1117  
xCou¡
;

1118 
	}
}

1121 
size_t
 
	$¥vByãsInBuf„r
–c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 )

1124 
size_t
 
xCou¡
;

1126 
xCou¡
 = 
pxSåómBuf„r
->
xLígth
 +ÖxSåómBuf„r->
xHód
;

1127 
xCou¡
 -
pxSåómBuf„r
->
xTaû
;

1128 i‡–
xCou¡
 >
pxSåómBuf„r
->
xLígth
 )

1130 
xCou¡
 -
pxSåómBuf„r
->
xLígth
;

1134 
	`mtCOVERAGE_TEST_MARKER
();

1137  
xCou¡
;

1138 
	}
}

1141 
	$¥vInôüli£NewSåómBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
,

1142 
uöt8_t
 * c⁄° 
pucBuf„r
,

1143 
size_t
 
xBuf„rSizeByãs
,

1144 
size_t
 
xTriggîLevñByãs
,

1145 
Ba£Ty≥_t
 
xIsMesßgeBuf„r
 )

1150 #if–
c⁄figASSERT_DEFINED
 == 1 )

1155 c⁄° 
Ba£Ty≥_t
 
xWrôeVÆue
 = 0x55;

1156 
	`c⁄figASSERT
–
	`mem£t
–
pucBuf„r
, ( Ë
xWrôeVÆue
, 
xBuf„rSizeByãs
 ) ==ÖucBuffer );

1160 
	`mem£t
––* ) 
pxSåómBuf„r
, 0x00, –
SåómBuf„r_t
 ) );

1161 
pxSåómBuf„r
->
pucBuf„r
 =ÖucBuffer;

1162 
pxSåómBuf„r
->
xLígth
 = 
xBuf„rSizeByãs
;

1163 
pxSåómBuf„r
->
xTriggîLevñByãs
 = xTriggerLevelBytes;

1165 if–
xIsMesßgeBuf„r
 !
pdFALSE
 )

1167 
pxSåómBuf„r
->
ucFœgs
 |
sbFLAGS_IS_MESSAGE_BUFFER
;

1169 
	}
}

1171 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1173 
UBa£Ty≥_t
 
	$uxSåómBuf„rGëSåómBuf„rNumbî
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

1175  ( ( 
SåómBuf„r_t
 * ) 
xSåómBuf„r
 )->
uxSåómBuf„rNumbî
;

1176 
	}
}

1181 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1183 
	$vSåómBuf„rSëSåómBuf„rNumbî
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, 
UBa£Ty≥_t
 
uxSåómBuf„rNumbî
 )

1185 ––
SåómBuf„r_t
 * ) 
xSåómBuf„r
 )->
uxSåómBuf„rNumbî
 = uxStreamBufferNumber;

1186 
	}
}

1191 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1193 
uöt8_t
 
	$ucSåómBuf„rGëSåómBuf„rTy≥
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

1195  ( ( 
SåómBuf„r_t
 * )
xSåómBuf„r
 )->
ucFœgs
 | 
sbFLAGS_IS_MESSAGE_BUFFER
;

1196 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\tasks.c

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

35 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

38 
	~"FªeRTOS.h
"

39 
	~"èsk.h
"

40 
	~"timîs.h
"

41 
	~"°ack_ma¸os.h
"

47 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


51 #i‡–
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 == 1 )

56 
	~<°dio.h
>

59 #if–
c⁄figUSE_PREEMPTION
 == 0 )

62 
	#èskYIELD_IF_USING_PREEMPTION
()

	)

64 
	#èskYIELD_IF_USING_PREEMPTION
(Ë
	`p‹tYIELD_WITHIN_API
()

	)

68 
	#èskNOT_WAITING_NOTIFICATION
 ( ( 
uöt8_t
 ) 0 )

	)

69 
	#èskWAITING_NOTIFICATION
 ( ( 
uöt8_t
 ) 1 )

	)

70 
	#èskNOTIFICATION_RECEIVED
 ( ( 
uöt8_t
 ) 2 )

	)

76 
	#tskSTACK_FILL_BYTE
 ( 0xa5U )

	)

95 
	#tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 ( ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) )

	)

96 
	#tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB
 ( ( 
uöt8_t
 ) 0 )

	)

97 
	#tskSTATICALLY_ALLOCATED_STACK_ONLY
 ( ( 
uöt8_t
 ) 1 )

	)

98 
	#tskSTATICALLY_ALLOCATED_STACK_AND_TCB
 ( ( 
uöt8_t
 ) 2 )

	)

103 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) || ( 
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 ) )

104 
	#tskSET_NEW_STACKS_TO_KNOWN_VALUE
 1

	)

106 
	#tskSET_NEW_STACKS_TO_KNOWN_VALUE
 0

	)

112 
	#tskRUNNING_CHAR
 ( 'X' )

	)

113 
	#tskBLOCKED_CHAR
 ( 'B' )

	)

114 
	#tskREADY_CHAR
 ( 'R' )

	)

115 
	#tskDELETED_CHAR
 ( 'D' )

	)

116 
	#tskSUSPENDED_CHAR
 ( 'S' )

	)

122 #ifde‡
p‹tREMOVE_STATIC_QUALIFIER


123 

	)

128 #i‚de‡
c⁄figIDLE_TASK_NAME


129 
	#c⁄figIDLE_TASK_NAME
 "IDLE"

	)

132 #i‡–
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 0 )

140 
	#èskRECORD_READY_PRIORITY
–
uxPri‹ôy
 ) \

142 if––
uxPri‹ôy
 ) > 
uxT›RódyPri‹ôy
 ) \

144 
uxT›RódyPri‹ôy
 = ( 
uxPri‹ôy
 ); \

146 }

	)

150 
	#èskSELECT_HIGHEST_PRIORITY_TASK
() \

152 
UBa£Ty≥_t
 
uxT›Pri‹ôy
 = 
uxT›RódyPri‹ôy
; \

155  
	`li°LIST_IS_EMPTY
–&–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ) ) \

157 
	`c⁄figASSERT
–
uxT›Pri‹ôy
 ); \

158 --
uxT›Pri‹ôy
; \

163 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítTCB
, &–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ); \

164 
uxT›RódyPri‹ôy
 = 
uxT›Pri‹ôy
; \

165 }

	)

172 
	#èskRESET_READY_PRIORITY
–
uxPri‹ôy
 )

	)

173 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 )

	)

182 
	#èskRECORD_READY_PRIORITY
–
uxPri‹ôy
 ) 
	`p‹tRECORD_READY_PRIORITY
–uxPri‹ôy, 
uxT›RódyPri‹ôy
 )

	)

186 
	#èskSELECT_HIGHEST_PRIORITY_TASK
() \

188 
UBa£Ty≥_t
 
uxT›Pri‹ôy
; \

191 
	`p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxT›RódyPri‹ôy
 ); \

192 
	`c⁄figASSERT
–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ) > 0 ); \

193 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítTCB
, &–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ); \

194 }

	)

201 
	#èskRESET_READY_PRIORITY
–
uxPri‹ôy
 ) \

203 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ ( 
uxPri‹ôy
 ) ] ) ) =–
UBa£Ty≥_t
 ) 0 ) \

205 
	`p‹tRESET_READY_PRIORITY
––
uxPri‹ôy
 ), ( 
uxT›RódyPri‹ôy
 ) ); \

207 }

	)

215 
	#èskSWITCH_DELAYED_LISTS
() \

217 
Li°_t
 *
pxTemp
; \

220 
	`c⁄figASSERT
––
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) ) ); \

222 
pxTemp
 = 
pxDñayedTaskLi°
; \

223 
pxDñayedTaskLi°
 = 
pxOvîÊowDñayedTaskLi°
; \

224 
pxOvîÊowDñayedTaskLi°
 = 
pxTemp
; \

225 
xNumOfOvîÊows
++; \

226 
	`¥vRe£tNextTaskUnblockTime
(); \

227 }

	)

235 
	#¥vAddTaskToRódyLi°
–
pxTCB
 ) \

236 
	`åa˚MOVED_TASK_TO_READY_STATE
–
pxTCB
 ); \

237 
	`èskRECORD_READY_PRIORITY
––
pxTCB
 )->
uxPri‹ôy
 ); \

238 
	`vLi°In£πEnd
–&–
pxRódyTasksLi°s
[ ( 
pxTCB
 )->
uxPri‹ôy
 ] ), &––pxTCB )->
xSèãLi°Iãm
 ) ); \

239 
	`åa˚POST_MOVED_TASK_TO_READY_STATE
–
pxTCB
 )

	)

248 
	#¥vGëTCBFromH™dÀ
–
pxH™dÀ
 ) ( ( (ÖxH™dÀ ) =
NULL
 ) ? ( 
TCB_t
 * ) 
pxCuºítTCB
 : ( TCB_à* ) (ÖxH™dÀ ) )

	)

258 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

259 
	#èskEVENT_LIST_ITEM_VALUE_IN_USE
 0x8000U

	)

261 
	#èskEVENT_LIST_ITEM_VALUE_IN_USE
 0x80000000UL

	)

269 
	stskTaskC⁄åﬁBlock


271 vﬁ©ûê
SèckTy≥_t
 *
	mpxT›OfSèck
;

273 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

274 
xMPU_SETTINGS
 
	mxMPUSëtögs
;

277 
Li°Iãm_t
 
	mxSèãLi°Iãm
;

278 
Li°Iãm_t
 
	mxEvítLi°Iãm
;

279 
UBa£Ty≥_t
 
	muxPri‹ôy
;

280 
SèckTy≥_t
 *
	mpxSèck
;

281 
	mpcTaskName
[ 
c⁄figMAX_TASK_NAME_LEN
 ];

283 #i‡––
p‹tSTACK_GROWTH
 > 0 ) || ( 
c⁄figRECORD_STACK_HIGH_ADDRESS
 == 1 ) )

284 
SèckTy≥_t
 *
	mpxEndOfSèck
;

287 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

288 
UBa£Ty≥_t
 
	muxCrôiˇlNe°ög
;

291 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

292 
UBa£Ty≥_t
 
	muxTCBNumbî
;

293 
UBa£Ty≥_t
 
	muxTaskNumbî
;

296 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

297 
UBa£Ty≥_t
 
	muxBa£Pri‹ôy
;

298 
UBa£Ty≥_t
 
	muxMuãxesHñd
;

301 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

302 
TaskHookFun˘i⁄_t
 
	mpxTaskTag
;

305 #if–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 > 0 )

306 *
	mpvThªadLoˇlSt‹agePoöãrs
[ 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 ];

309 #if–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

310 
uöt32_t
 
	mulRunTimeCou¡î
;

313 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

321 
_ªít
 
	mxNewLib_ªít
;

324 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

325 vﬁ©ûê
uöt32_t
 
	mulNŸifõdVÆue
;

326 vﬁ©ûê
uöt8_t
 
	mucNŸifySèã
;

331 #if–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

332 
uöt8_t
 
	mucSètiˇŒyAŒoˇãd
;

335 #if–
INCLUDE_xTaskAb‹tDñay
 == 1 )

336 
uöt8_t
 
	mucDñayAb‹ãd
;

339 } 
	ttskTCB
;

343 
tskTCB
 
	tTCB_t
;

348 
PRIVILEGED_DATA
 
TCB_t
 * vﬁ©ûê
	gpxCuºítTCB
 = 
NULL
;

351 
PRIVILEGED_DATA
 
Li°_t
 
	gpxRódyTasksLi°s
[ 
c⁄figMAX_PRIORITIES
 ];

352 
PRIVILEGED_DATA
 
Li°_t
 
	gxDñayedTaskLi°1
;

353 
PRIVILEGED_DATA
 
Li°_t
 
	gxDñayedTaskLi°2
;

354 
PRIVILEGED_DATA
 
Li°_t
 * vﬁ©ûê
	gpxDñayedTaskLi°
;

355 
PRIVILEGED_DATA
 
Li°_t
 * vﬁ©ûê
	gpxOvîÊowDñayedTaskLi°
;

356 
PRIVILEGED_DATA
 
Li°_t
 
	gxPídögRódyLi°
;

358 #if–
INCLUDE_vTaskDñëe
 == 1 )

360 
PRIVILEGED_DATA
 
Li°_t
 
	gxTasksWaôögTîmö©i⁄
;

361 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxDñëedTasksWaôögCÀ™Up
 = ( UBaseType_t ) 0U;

365 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

367 
PRIVILEGED_DATA
 
Li°_t
 
	gxSu•ídedTaskLi°
;

372 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxCuºítNumbîOfTasks
 = ( UBaseType_t ) 0U;

373 
PRIVILEGED_DATA
 vﬁ©ûê
TickTy≥_t
 
	gxTickCou¡
 = ( TickTy≥_àË
c⁄figINITIAL_TICK_COUNT
;

374 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxT›RódyPri‹ôy
 = 
tskIDLE_PRIORITY
;

375 
PRIVILEGED_DATA
 vﬁ©ûê
Ba£Ty≥_t
 
	gxScheduÀrRu¬ög
 = 
pdFALSE
;

376 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxPídedTicks
 = ( UBaseType_t ) 0U;

377 
PRIVILEGED_DATA
 vﬁ©ûê
Ba£Ty≥_t
 
	gxYõldPídög
 = 
pdFALSE
;

378 
PRIVILEGED_DATA
 vﬁ©ûê
Ba£Ty≥_t
 
	gxNumOfOvîÊows
 = ( BaseType_t ) 0;

379 
PRIVILEGED_DATA
 
UBa£Ty≥_t
 
	guxTaskNumbî
 = ( UBaseType_t ) 0U;

380 
PRIVILEGED_DATA
 vﬁ©ûê
TickTy≥_t
 
	gxNextTaskUnblockTime
 = ( TickType_t ) 0U;

381 
PRIVILEGED_DATA
 
TaskH™dÀ_t
 
	gxIdÀTaskH™dÀ
 = 
NULL
;

391 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxScheduÀrSu•íded
 = ( UBa£Ty≥_àË
pdFALSE
;

393 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

395 
PRIVILEGED_DATA
 
uöt32_t
 
	gulTaskSwôchedInTime
 = 0UL;

396 
PRIVILEGED_DATA
 
uöt32_t
 
	gulTŸÆRunTime
 = 0UL;

405 #if–
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 0 )

407 
vAµliˇti⁄SèckOvîÊowHook
–
TaskH™dÀ_t
 
xTask
, *
pcTaskName
 );

411 #if–
c⁄figUSE_TICK_HOOK
 > 0 )

413 
vAµliˇti⁄TickHook
( );

417 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

419 
vAµliˇti⁄GëIdÀTaskMem‹y
–
SèticTask_t
 **
µxIdÀTaskTCBBuf„r
, 
SèckTy≥_t
 **
µxIdÀTaskSèckBuf„r
, 
uöt32_t
 *
pulIdÀTaskSèckSize
 );

430 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

432 
Ba£Ty≥_t
 
	$¥vTaskIsTaskSu•íded
–c⁄° 
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

440 
	$¥vInôüli£TaskLi°s
–Ë
PRIVILEGED_FUNCTION
;

453 
	`p‹tTASK_FUNCTION_PROTO
–
¥vIdÀTask
, 
pvP¨amëîs
 );

462 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

464 
	$¥vDñëeTCB
–
TCB_t
 *
pxTCB
 ) 
PRIVILEGED_FUNCTION
;

473 
	$¥vCheckTasksWaôögTîmö©i⁄
–Ë
PRIVILEGED_FUNCTION
;

479 
	$¥vAddCuºítTaskToDñayedLi°
–
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xC™BlockIndeföôñy
 ) 
PRIVILEGED_FUNCTION
;

489 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

491 
UBa£Ty≥_t
 
	$¥vLi°TasksWôhöSögÀLi°
–
TaskSètus_t
 *
pxTaskSètusAºay
, 
Li°_t
 *
pxLi°
, 
eTaskSèã
 
eSèã
 ) 
PRIVILEGED_FUNCTION
;

499 #i‡–
INCLUDE_xTaskGëH™dÀ
 == 1 )

501 
TCB_t
 *
	$¥vSórchF‹NameWôhöSögÀLi°
–
Li°_t
 *
pxLi°
, c⁄° 
pcNameToQuîy
[] ) 
PRIVILEGED_FUNCTION
;

510 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 ) )

512 
uöt16_t
 
	$¥vTaskCheckFªeSèckS∑˚
–c⁄° 
uöt8_t
 * 
pucSèckByã
 ) 
PRIVILEGED_FUNCTION
;

525 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

527 
TickTy≥_t
 
	$¥vGëEx≥˘edIdÀTime
–Ë
PRIVILEGED_FUNCTION
;

535 
	`¥vRe£tNextTaskUnblockTime
( );

537 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) )

543 *
	$¥vWrôeNameToBuf„r
–*
pcBuf„r
, c⁄° *
pcTaskName
 ) 
PRIVILEGED_FUNCTION
;

551 
	$¥vInôüli£NewTask
–
TaskFun˘i⁄_t
 
pxTaskCode
,

552 c⁄° * c⁄° 
pcName
,

553 c⁄° 
uöt32_t
 
ulSèckDïth
,

554 * c⁄° 
pvP¨amëîs
,

555 
UBa£Ty≥_t
 
uxPri‹ôy
,

556 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
,

557 
TCB_t
 *
pxNewTCB
,

558 c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

564 
	$¥vAddNewTaskToRódyLi°
–
TCB_t
 *
pxNewTCB
 ) 
PRIVILEGED_FUNCTION
;

571 #ifde‡
FREERTOS_TASKS_C_ADDITIONS_INIT


573 
	$‰ìπos_èsks_c_addôi⁄s_öô
–Ë
PRIVILEGED_FUNCTION
;

579 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

581 
TaskH™dÀ_t
 
	$xTaskCª©eSètic
–
TaskFun˘i⁄_t
 
pxTaskCode
,

582 c⁄° * c⁄° 
pcName
,

583 c⁄° 
uöt32_t
 
ulSèckDïth
,

584 * c⁄° 
pvP¨amëîs
,

585 
UBa£Ty≥_t
 
uxPri‹ôy
,

586 
SèckTy≥_t
 * c⁄° 
puxSèckBuf„r
,

587 
SèticTask_t
 * c⁄° 
pxTaskBuf„r
 )

589 
TCB_t
 *
pxNewTCB
;

590 
TaskH™dÀ_t
 
xRëu∫
;

592 
	`c⁄figASSERT
–
puxSèckBuf„r
 !
NULL
 );

593 
	`c⁄figASSERT
–
pxTaskBuf„r
 !
NULL
 );

595 #if–
c⁄figASSERT_DEFINED
 == 1 )

600 vﬁ©ûê
size_t
 
xSize
 = –
SèticTask_t
 );

601 
	`c⁄figASSERT
–
xSize
 =–
TCB_t
 ) );

606 if––
pxTaskBuf„r
 !
NULL
 ) && ( 
puxSèckBuf„r
 != NULL ) )

610 
pxNewTCB
 = ( 
TCB_t
 * ) 
pxTaskBuf„r
;

611 
pxNewTCB
->
pxSèck
 = ( 
SèckTy≥_t
 * ) 
puxSèckBuf„r
;

613 #if–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

617 
pxNewTCB
->
ucSètiˇŒyAŒoˇãd
 = 
tskSTATICALLY_ALLOCATED_STACK_AND_TCB
;

621 
	`¥vInôüli£NewTask
–
pxTaskCode
, 
pcName
, 
ulSèckDïth
, 
pvP¨amëîs
, 
uxPri‹ôy
, &
xRëu∫
, 
pxNewTCB
, 
NULL
 );

622 
	`¥vAddNewTaskToRódyLi°
–
pxNewTCB
 );

626 
xRëu∫
 = 
NULL
;

629  
xRëu∫
;

630 
	}
}

635 #if––
p‹tUSING_MPU_WRAPPERS
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

637 
Ba£Ty≥_t
 
	$xTaskCª©eRe°ri˘edSètic
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
, 
TaskH™dÀ_t
 *
pxCª©edTask
 )

639 
TCB_t
 *
pxNewTCB
;

640 
Ba£Ty≥_t
 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

642 
	`c⁄figASSERT
–
pxTaskDeföôi⁄
->
puxSèckBuf„r
 !
NULL
 );

643 
	`c⁄figASSERT
–
pxTaskDeföôi⁄
->
pxTaskBuf„r
 !
NULL
 );

645 if––
pxTaskDeföôi⁄
->
puxSèckBuf„r
 !
NULL
 ) && (ÖxTaskDeföôi⁄->
pxTaskBuf„r
 != NULL ) )

650 
pxNewTCB
 = ( 
TCB_t
 * ) 
pxTaskDeföôi⁄
->
pxTaskBuf„r
;

653 
pxNewTCB
->
pxSèck
 = 
pxTaskDeföôi⁄
->
puxSèckBuf„r
;

655 #if–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

659 
pxNewTCB
->
ucSètiˇŒyAŒoˇãd
 = 
tskSTATICALLY_ALLOCATED_STACK_AND_TCB
;

663 
	`¥vInôüli£NewTask
–
pxTaskDeföôi⁄
->
pvTaskCode
,

664 
pxTaskDeföôi⁄
->
pcName
,

665 –
uöt32_t
 ) 
pxTaskDeföôi⁄
->
usSèckDïth
,

666 
pxTaskDeföôi⁄
->
pvP¨amëîs
,

667 
pxTaskDeföôi⁄
->
uxPri‹ôy
,

668 
pxCª©edTask
, 
pxNewTCB
,

669 
pxTaskDeföôi⁄
->
xRegi⁄s
 );

671 
	`¥vAddNewTaskToRódyLi°
–
pxNewTCB
 );

672 
xRëu∫
 = 
pdPASS
;

675  
xRëu∫
;

676 
	}
}

681 #if––
p‹tUSING_MPU_WRAPPERS
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

683 
Ba£Ty≥_t
 
	$xTaskCª©eRe°ri˘ed
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
, 
TaskH™dÀ_t
 *
pxCª©edTask
 )

685 
TCB_t
 *
pxNewTCB
;

686 
Ba£Ty≥_t
 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

688 
	`c⁄figASSERT
–
pxTaskDeföôi⁄
->
puxSèckBuf„r
 );

690 if–
pxTaskDeföôi⁄
->
puxSèckBuf„r
 !
NULL
 )

695 
pxNewTCB
 = ( 
TCB_t
 * ) 
	`pvP‹tMÆloc
( ( TCB_t ) );

697 if–
pxNewTCB
 !
NULL
 )

700 
pxNewTCB
->
pxSèck
 = 
pxTaskDeföôi⁄
->
puxSèckBuf„r
;

702 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

707 
pxNewTCB
->
ucSètiˇŒyAŒoˇãd
 = 
tskSTATICALLY_ALLOCATED_STACK_ONLY
;

711 
	`¥vInôüli£NewTask
–
pxTaskDeföôi⁄
->
pvTaskCode
,

712 
pxTaskDeföôi⁄
->
pcName
,

713 –
uöt32_t
 ) 
pxTaskDeföôi⁄
->
usSèckDïth
,

714 
pxTaskDeföôi⁄
->
pvP¨amëîs
,

715 
pxTaskDeföôi⁄
->
uxPri‹ôy
,

716 
pxCª©edTask
, 
pxNewTCB
,

717 
pxTaskDeföôi⁄
->
xRegi⁄s
 );

719 
	`¥vAddNewTaskToRódyLi°
–
pxNewTCB
 );

720 
xRëu∫
 = 
pdPASS
;

724  
xRëu∫
;

725 
	}
}

730 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

732 
Ba£Ty≥_t
 
	$xTaskCª©e
–
TaskFun˘i⁄_t
 
pxTaskCode
,

733 c⁄° * c⁄° 
pcName
,

734 c⁄° 
c⁄figSTACK_DEPTH_TYPE
 
usSèckDïth
,

735 * c⁄° 
pvP¨amëîs
,

736 
UBa£Ty≥_t
 
uxPri‹ôy
,

737 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
 )

739 
TCB_t
 *
pxNewTCB
;

740 
Ba£Ty≥_t
 
xRëu∫
;

745 #if–
p‹tSTACK_GROWTH
 > 0 )

750 
pxNewTCB
 = ( 
TCB_t
 * ) 
	`pvP‹tMÆloc
( ( TCB_t ) );

752 if–
pxNewTCB
 !
NULL
 )

757 
pxNewTCB
->
pxSèck
 = ( 
SèckTy≥_t
 * ) 
	`pvP‹tMÆloc
––––
size_t
 ) 
usSèckDïth
 ) * ( StackType_t ) ) );

759 if–
pxNewTCB
->
pxSèck
 =
NULL
 )

762 
	`vP‹tFªe
–
pxNewTCB
 );

763 
pxNewTCB
 = 
NULL
;

769 
SèckTy≥_t
 *
pxSèck
;

772 
pxSèck
 = ( 
SèckTy≥_t
 * ) 
	`pvP‹tMÆloc
––––
size_t
 ) 
usSèckDïth
 ) * ( StackType_t ) ) );

774 if–
pxSèck
 !
NULL
 )

777 
pxNewTCB
 = ( 
TCB_t
 * ) 
	`pvP‹tMÆloc
( ( TCB_t ) );

779 if–
pxNewTCB
 !
NULL
 )

782 
pxNewTCB
->
pxSèck
 =ÖxStack;

788 
	`vP‹tFªe
–
pxSèck
 );

793 
pxNewTCB
 = 
NULL
;

798 if–
pxNewTCB
 !
NULL
 )

800 #if–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

804 
pxNewTCB
->
ucSètiˇŒyAŒoˇãd
 = 
tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB
;

808 
	`¥vInôüli£NewTask
–
pxTaskCode
, 
pcName
, ( 
uöt32_t
 ) 
usSèckDïth
, 
pvP¨amëîs
, 
uxPri‹ôy
, 
pxCª©edTask
, 
pxNewTCB
, 
NULL
 );

809 
	`¥vAddNewTaskToRódyLi°
–
pxNewTCB
 );

810 
xRëu∫
 = 
pdPASS
;

814 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

817  
xRëu∫
;

818 
	}
}

823 
	$¥vInôüli£NewTask
–
TaskFun˘i⁄_t
 
pxTaskCode
,

824 c⁄° * c⁄° 
pcName
,

825 c⁄° 
uöt32_t
 
ulSèckDïth
,

826 * c⁄° 
pvP¨amëîs
,

827 
UBa£Ty≥_t
 
uxPri‹ôy
,

828 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
,

829 
TCB_t
 *
pxNewTCB
,

830 c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 )

832 
SèckTy≥_t
 *
pxT›OfSèck
;

833 
UBa£Ty≥_t
 
x
;

835 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

837 
Ba£Ty≥_t
 
xRunPrivûeged
;

838 if––
uxPri‹ôy
 & 
p‹tPRIVILEGE_BIT
 ) != 0U )

840 
xRunPrivûeged
 = 
pdTRUE
;

844 
xRunPrivûeged
 = 
pdFALSE
;

846 
uxPri‹ôy
 &~
p‹tPRIVILEGE_BIT
;

850 #if–
tskSET_NEW_STACKS_TO_KNOWN_VALUE
 == 1 )

853 –Ë
	`mem£t
–
pxNewTCB
->
pxSèck
, ( Ë
tskSTACK_FILL_BYTE
, ( 
size_t
 ) 
ulSèckDïth
 * –
SèckTy≥_t
 ) );

861 #if–
p‹tSTACK_GROWTH
 < 0 )

863 
pxT›OfSèck
 = 
pxNewTCB
->
pxSèck
 + ( 
ulSèckDïth
 - ( 
uöt32_t
 ) 1 );

864 
pxT›OfSèck
 = ( 
SèckTy≥_t
 * ) ( ( ( 
p‹tPOINTER_SIZE_TYPE
 )ÖxT›OfSèck ) & ( ~––p‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) ) );

867 
	`c⁄figASSERT
––––
p‹tPOINTER_SIZE_TYPE
 ) 
pxT›OfSèck
 & (Ö‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

869 #if–
c⁄figRECORD_STACK_HIGH_ADDRESS
 == 1 )

873 
pxNewTCB
->
pxEndOfSèck
 = 
pxT›OfSèck
;

879 
pxT›OfSèck
 = 
pxNewTCB
->
pxSèck
;

882 
	`c⁄figASSERT
––––
p‹tPOINTER_SIZE_TYPE
 ) 
pxNewTCB
->
pxSèck
 & (Ö‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

886 
pxNewTCB
->
pxEndOfSèck
 =ÖxNewTCB->
pxSèck
 + ( 
ulSèckDïth
 - ( 
uöt32_t
 ) 1 );

891  
x
 = ( 
UBa£Ty≥_t
 ) 0; x < ( UBa£Ty≥_àË
c⁄figMAX_TASK_NAME_LEN
; x++ )

893 
pxNewTCB
->
pcTaskName
[ 
x
 ] = 
pcName
[ x ];

898 if–
pcName
[ 
x
 ] == 0x00 )

904 
	`mtCOVERAGE_TEST_MARKER
();

910 
pxNewTCB
->
pcTaskName
[ 
c⁄figMAX_TASK_NAME_LEN
 - 1 ] = '\0';

914 if–
uxPri‹ôy
 >–
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 )

916 
uxPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( UBaseType_t ) 1U;

920 
	`mtCOVERAGE_TEST_MARKER
();

923 
pxNewTCB
->
uxPri‹ôy
 = uxPriority;

924 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

926 
pxNewTCB
->
uxBa£Pri‹ôy
 = 
uxPri‹ôy
;

927 
pxNewTCB
->
uxMuãxesHñd
 = 0;

931 
	`vLi°Inôüli£Iãm
–&–
pxNewTCB
->
xSèãLi°Iãm
 ) );

932 
	`vLi°Inôüli£Iãm
–&–
pxNewTCB
->
xEvítLi°Iãm
 ) );

936 
	`li°SET_LIST_ITEM_OWNER
–&–
pxNewTCB
->
xSèãLi°Iãm
 ),ÖxNewTCB );

939 
	`li°SET_LIST_ITEM_VALUE
–&–
pxNewTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
uxPri‹ôy
 );

940 
	`li°SET_LIST_ITEM_OWNER
–&–
pxNewTCB
->
xEvítLi°Iãm
 ),ÖxNewTCB );

942 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

944 
pxNewTCB
->
uxCrôiˇlNe°ög
 = ( 
UBa£Ty≥_t
 ) 0U;

948 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

950 
pxNewTCB
->
pxTaskTag
 = 
NULL
;

954 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

956 
pxNewTCB
->
ulRunTimeCou¡î
 = 0UL;

960 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

962 
	`vP‹tSt‹eTaskMPUSëtögs
–&–
pxNewTCB
->
xMPUSëtögs
 ), 
xRegi⁄s
,ÖxNewTCB->
pxSèck
, 
ulSèckDïth
 );

967 –Ë
xRegi⁄s
;

971 #if–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 != 0 )

973  
x
 = 0; x < ( 
UBa£Ty≥_t
 ) 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
; x++ )

975 
pxNewTCB
->
pvThªadLoˇlSt‹agePoöãrs
[ 
x
 ] = 
NULL
;

980 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

982 
pxNewTCB
->
ulNŸifõdVÆue
 = 0;

983 
pxNewTCB
->
ucNŸifySèã
 = 
èskNOT_WAITING_NOTIFICATION
;

987 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

990 
	`_REENT_INIT_PTR
––&–
pxNewTCB
->
xNewLib_ªít
 ) ) );

994 #if–
INCLUDE_xTaskAb‹tDñay
 == 1 )

996 
pxNewTCB
->
ucDñayAb‹ãd
 = 
pdFALSE
;

1004 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

1006 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck, 
pxTaskCode
, 
pvP¨amëîs
, 
xRunPrivûeged
 );

1010 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck, 
pxTaskCode
, 
pvP¨amëîs
 );

1014 if––* ) 
pxCª©edTask
 !
NULL
 )

1018 *
pxCª©edTask
 = ( 
TaskH™dÀ_t
 ) 
pxNewTCB
;

1022 
	`mtCOVERAGE_TEST_MARKER
();

1024 
	}
}

1027 
	$¥vAddNewTaskToRódyLi°
–
TCB_t
 *
pxNewTCB
 )

1031 
	`èskENTER_CRITICAL
();

1033 
uxCuºítNumbîOfTasks
++;

1034 if–
pxCuºítTCB
 =
NULL
 )

1038 
pxCuºítTCB
 = 
pxNewTCB
;

1040 if–
uxCuºítNumbîOfTasks
 =–
UBa£Ty≥_t
 ) 1 )

1045 
	`¥vInôüli£TaskLi°s
();

1049 
	`mtCOVERAGE_TEST_MARKER
();

1057 if–
xScheduÀrRu¬ög
 =
pdFALSE
 )

1059 if–
pxCuºítTCB
->
uxPri‹ôy
 <
pxNewTCB
->uxPriority )

1061 
pxCuºítTCB
 = 
pxNewTCB
;

1065 
	`mtCOVERAGE_TEST_MARKER
();

1070 
	`mtCOVERAGE_TEST_MARKER
();

1074 
uxTaskNumbî
++;

1076 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1079 
pxNewTCB
->
uxTCBNumbî
 = 
uxTaskNumbî
;

1082 
	`åa˚TASK_CREATE
–
pxNewTCB
 );

1084 
	`¥vAddTaskToRódyLi°
–
pxNewTCB
 );

1086 
	`p‹tSETUP_TCB
–
pxNewTCB
 );

1088 
	`èskEXIT_CRITICAL
();

1090 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1094 if–
pxCuºítTCB
->
uxPri‹ôy
 < 
pxNewTCB
->uxPriority )

1096 
	`èskYIELD_IF_USING_PREEMPTION
();

1100 
	`mtCOVERAGE_TEST_MARKER
();

1105 
	`mtCOVERAGE_TEST_MARKER
();

1107 
	}
}

1110 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

1112 
	$vTaskDñëe
–
TaskH™dÀ_t
 
xTaskToDñëe
 )

1114 
TCB_t
 *
pxTCB
;

1116 
	`èskENTER_CRITICAL
();

1120 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToDñëe
 );

1123 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

1125 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

1129 
	`mtCOVERAGE_TEST_MARKER
();

1133 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

1135 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

1139 
	`mtCOVERAGE_TEST_MARKER
();

1146 
uxTaskNumbî
++;

1148 if–
pxTCB
 =
pxCuºítTCB
 )

1155 
	`vLi°In£πEnd
–&
xTasksWaôögTîmö©i⁄
, &–
pxTCB
->
xSèãLi°Iãm
 ) );

1160 ++
uxDñëedTasksWaôögCÀ™Up
;

1167 
	`p‹tPRE_TASK_DELETE_HOOK
–
pxTCB
, &
xYõldPídög
 );

1171 --
uxCuºítNumbîOfTasks
;

1172 
	`¥vDñëeTCB
–
pxTCB
 );

1176 
	`¥vRe£tNextTaskUnblockTime
();

1179 
	`åa˚TASK_DELETE
–
pxTCB
 );

1181 
	`èskEXIT_CRITICAL
();

1185 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1187 if–
pxTCB
 =
pxCuºítTCB
 )

1189 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

1190 
	`p‹tYIELD_WITHIN_API
();

1194 
	`mtCOVERAGE_TEST_MARKER
();

1197 
	}
}

1202 #i‡–
INCLUDE_vTaskDñayU¡û
 == 1 )

1204 
	$vTaskDñayU¡û
–
TickTy≥_t
 * c⁄° 
pxPªviousWakeTime
, c⁄° TickTy≥_à
xTimeIn¸emít
 )

1206 
TickTy≥_t
 
xTimeToWake
;

1207 
Ba£Ty≥_t
 
xAÃódyYõlded
, 
xShouldDñay
 = 
pdFALSE
;

1209 
	`c⁄figASSERT
–
pxPªviousWakeTime
 );

1210 
	`c⁄figASSERT
––
xTimeIn¸emít
 > 0U ) );

1211 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

1213 
	`vTaskSu•ídAŒ
();

1217 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

1220 
xTimeToWake
 = *
pxPªviousWakeTime
 + 
xTimeIn¸emít
;

1222 if–
xC⁄°TickCou¡
 < *
pxPªviousWakeTime
 )

1229 if––
xTimeToWake
 < *
pxPªviousWakeTime
 ) && ( xTimeToWakê> 
xC⁄°TickCou¡
 ) )

1231 
xShouldDñay
 = 
pdTRUE
;

1235 
	`mtCOVERAGE_TEST_MARKER
();

1243 if––
xTimeToWake
 < *
pxPªviousWakeTime
 ) || ( xTimeToWakê> 
xC⁄°TickCou¡
 ) )

1245 
xShouldDñay
 = 
pdTRUE
;

1249 
	`mtCOVERAGE_TEST_MARKER
();

1254 *
pxPªviousWakeTime
 = 
xTimeToWake
;

1256 if–
xShouldDñay
 !
pdFALSE
 )

1258 
	`åa˚TASK_DELAY_UNTIL
–
xTimeToWake
 );

1262 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 - 
xC⁄°TickCou¡
, 
pdFALSE
 );

1266 
	`mtCOVERAGE_TEST_MARKER
();

1269 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

1273 if–
xAÃódyYõlded
 =
pdFALSE
 )

1275 
	`p‹tYIELD_WITHIN_API
();

1279 
	`mtCOVERAGE_TEST_MARKER
();

1281 
	}
}

1286 #i‡–
INCLUDE_vTaskDñay
 == 1 )

1288 
	$vTaskDñay
–c⁄° 
TickTy≥_t
 
xTicksToDñay
 )

1290 
Ba£Ty≥_t
 
xAÃódyYõlded
 = 
pdFALSE
;

1293 if–
xTicksToDñay
 > ( 
TickTy≥_t
 ) 0U )

1295 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

1296 
	`vTaskSu•ídAŒ
();

1298 
	`åa˚TASK_DELAY
();

1307 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToDñay
, 
pdFALSE
 );

1309 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

1313 
	`mtCOVERAGE_TEST_MARKER
();

1318 if–
xAÃódyYõlded
 =
pdFALSE
 )

1320 
	`p‹tYIELD_WITHIN_API
();

1324 
	`mtCOVERAGE_TEST_MARKER
();

1326 
	}
}

1331 #if––
INCLUDE_eTaskGëSèã
 =1 ) || ( 
c⁄figUSE_TRACE_FACILITY
 == 1 ) )

1333 
eTaskSèã
 
	$eTaskGëSèã
–
TaskH™dÀ_t
 
xTask
 )

1335 
eTaskSèã
 
eRëu∫
;

1336 
Li°_t
 *
pxSèãLi°
;

1337 c⁄° 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
xTask
;

1339 
	`c⁄figASSERT
–
pxTCB
 );

1341 if–
pxTCB
 =
pxCuºítTCB
 )

1344 
eRëu∫
 = 
eRu¬ög
;

1348 
	`èskENTER_CRITICAL
();

1350 
pxSèãLi°
 = ( 
Li°_t
 * ) 
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

1352 
	`èskEXIT_CRITICAL
();

1354 if––
pxSèãLi°
 =
pxDñayedTaskLi°
 ) || (ÖxSèãLi° =
pxOvîÊowDñayedTaskLi°
 ) )

1358 
eRëu∫
 = 
eBlocked
;

1361 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1362 if–
pxSèãLi°
 =&
xSu•ídedTaskLi°
 )

1367 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 )

1369 
eRëu∫
 = 
eSu•íded
;

1373 
eRëu∫
 = 
eBlocked
;

1378 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

1379 if––
pxSèãLi°
 =&
xTasksWaôögTîmö©i⁄
 ) || (ÖxSèãLi° =
NULL
 ) )

1384 
eRëu∫
 = 
eDñëed
;

1392 
eRëu∫
 = 
eRódy
;

1396  
eRëu∫
;

1397 
	}
}

1402 #i‡–
INCLUDE_uxTaskPri‹ôyGë
 == 1 )

1404 
UBa£Ty≥_t
 
	$uxTaskPri‹ôyGë
–
TaskH™dÀ_t
 
xTask
 )

1406 
TCB_t
 *
pxTCB
;

1407 
UBa£Ty≥_t
 
uxRëu∫
;

1409 
	`èskENTER_CRITICAL
();

1413 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

1414 
uxRëu∫
 = 
pxTCB
->
uxPri‹ôy
;

1416 
	`èskEXIT_CRITICAL
();

1418  
uxRëu∫
;

1419 
	}
}

1424 #i‡–
INCLUDE_uxTaskPri‹ôyGë
 == 1 )

1426 
UBa£Ty≥_t
 
	$uxTaskPri‹ôyGëFromISR
–
TaskH™dÀ_t
 
xTask
 )

1428 
TCB_t
 *
pxTCB
;

1429 
UBa£Ty≥_t
 
uxRëu∫
, 
uxSavedI¡îru±Sèã
;

1447 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1449 
uxSavedI¡îru±Sèã
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1453 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

1454 
uxRëu∫
 = 
pxTCB
->
uxPri‹ôy
;

1456 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sèã
 );

1458  
uxRëu∫
;

1459 
	}
}

1464 #i‡–
INCLUDE_vTaskPri‹ôySë
 == 1 )

1466 
	$vTaskPri‹ôySë
–
TaskH™dÀ_t
 
xTask
, 
UBa£Ty≥_t
 
uxNewPri‹ôy
 )

1468 
TCB_t
 *
pxTCB
;

1469 
UBa£Ty≥_t
 
uxCuºítBa£Pri‹ôy
, 
uxPri‹ôyU£dOnE¡ry
;

1470 
Ba£Ty≥_t
 
xYõldRequúed
 = 
pdFALSE
;

1472 
	`c⁄figASSERT
––
uxNewPri‹ôy
 < 
c⁄figMAX_PRIORITIES
 ) );

1475 if–
uxNewPri‹ôy
 >–
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 )

1477 
uxNewPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( UBaseType_t ) 1U;

1481 
	`mtCOVERAGE_TEST_MARKER
();

1484 
	`èskENTER_CRITICAL
();

1488 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

1490 
	`åa˚TASK_PRIORITY_SET
–
pxTCB
, 
uxNewPri‹ôy
 );

1492 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1494 
uxCuºítBa£Pri‹ôy
 = 
pxTCB
->
uxBa£Pri‹ôy
;

1498 
uxCuºítBa£Pri‹ôy
 = 
pxTCB
->
uxPri‹ôy
;

1502 if–
uxCuºítBa£Pri‹ôy
 !
uxNewPri‹ôy
 )

1506 if–
uxNewPri‹ôy
 > 
uxCuºítBa£Pri‹ôy
 )

1508 if–
pxTCB
 !
pxCuºítTCB
 )

1513 if–
uxNewPri‹ôy
 >
pxCuºítTCB
->
uxPri‹ôy
 )

1515 
xYõldRequúed
 = 
pdTRUE
;

1519 
	`mtCOVERAGE_TEST_MARKER
();

1529 if–
pxTCB
 =
pxCuºítTCB
 )

1534 
xYõldRequúed
 = 
pdTRUE
;

1546 
uxPri‹ôyU£dOnE¡ry
 = 
pxTCB
->
uxPri‹ôy
;

1548 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1552 if–
pxTCB
->
uxBa£Pri‹ôy
 =pxTCB->
uxPri‹ôy
 )

1554 
pxTCB
->
uxPri‹ôy
 = 
uxNewPri‹ôy
;

1558 
	`mtCOVERAGE_TEST_MARKER
();

1562 
pxTCB
->
uxBa£Pri‹ôy
 = 
uxNewPri‹ôy
;

1566 
pxTCB
->
uxPri‹ôy
 = 
uxNewPri‹ôy
;

1572 if––
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) & 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 ) == 0UL )

1574 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
uxNewPri‹ôy
 ) );

1578 
	`mtCOVERAGE_TEST_MARKER
();

1585 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
uxPri‹ôyU£dOnE¡ry
 ] ), &–
pxTCB
->
xSèãLi°Iãm
 ) ) !
pdFALSE
 )

1590 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

1595 
	`p‹tRESET_READY_PRIORITY
–
uxPri‹ôyU£dOnE¡ry
, 
uxT›RódyPri‹ôy
 );

1599 
	`mtCOVERAGE_TEST_MARKER
();

1601 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1605 
	`mtCOVERAGE_TEST_MARKER
();

1608 if–
xYõldRequúed
 !
pdFALSE
 )

1610 
	`èskYIELD_IF_USING_PREEMPTION
();

1614 
	`mtCOVERAGE_TEST_MARKER
();

1619 –Ë
uxPri‹ôyU£dOnE¡ry
;

1622 
	`èskEXIT_CRITICAL
();

1623 
	}
}

1628 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1630 
	$vTaskSu•íd
–
TaskH™dÀ_t
 
xTaskToSu•íd
 )

1632 
TCB_t
 *
pxTCB
;

1634 
	`èskENTER_CRITICAL
();

1638 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToSu•íd
 );

1640 
	`åa˚TASK_SUSPEND
–
pxTCB
 );

1644 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

1646 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

1650 
	`mtCOVERAGE_TEST_MARKER
();

1654 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

1656 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

1660 
	`mtCOVERAGE_TEST_MARKER
();

1663 
	`vLi°In£πEnd
–&
xSu•ídedTaskLi°
, &–
pxTCB
->
xSèãLi°Iãm
 ) );

1665 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

1667 if–
pxTCB
->
ucNŸifySèã
 =
èskWAITING_NOTIFICATION
 )

1671 
pxTCB
->
ucNŸifySèã
 = 
èskNOT_WAITING_NOTIFICATION
;

1676 
	`èskEXIT_CRITICAL
();

1678 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1682 
	`èskENTER_CRITICAL
();

1684 
	`¥vRe£tNextTaskUnblockTime
();

1686 
	`èskEXIT_CRITICAL
();

1690 
	`mtCOVERAGE_TEST_MARKER
();

1693 if–
pxTCB
 =
pxCuºítTCB
 )

1695 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1698 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

1699 
	`p‹tYIELD_WITHIN_API
();

1706 if–
	`li°CURRENT_LIST_LENGTH
–&
xSu•ídedTaskLi°
 ) =
uxCuºítNumbîOfTasks
 )

1712 
pxCuºítTCB
 = 
NULL
;

1716 
	`vTaskSwôchC⁄ãxt
();

1722 
	`mtCOVERAGE_TEST_MARKER
();

1724 
	}
}

1729 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1731 
Ba£Ty≥_t
 
	$¥vTaskIsTaskSu•íded
–c⁄° 
TaskH™dÀ_t
 
xTask
 )

1733 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

1734 c⁄° 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
xTask
;

1740 
	`c⁄figASSERT
–
xTask
 );

1743 if–
	`li°IS_CONTAINED_WITHIN
–&
xSu•ídedTaskLi°
, &–
pxTCB
->
xSèãLi°Iãm
 ) ) !
pdFALSE
 )

1746 if–
	`li°IS_CONTAINED_WITHIN
–&
xPídögRódyLi°
, &–
pxTCB
->
xEvítLi°Iãm
 ) ) =
pdFALSE
 )

1750 if–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTCB
->
xEvítLi°Iãm
 ) ) !
pdFALSE
 )

1752 
xRëu∫
 = 
pdTRUE
;

1756 
	`mtCOVERAGE_TEST_MARKER
();

1761 
	`mtCOVERAGE_TEST_MARKER
();

1766 
	`mtCOVERAGE_TEST_MARKER
();

1769  
xRëu∫
;

1770 
	}
}

1775 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1777 
	$vTaskResume
–
TaskH™dÀ_t
 
xTaskToResume
 )

1779 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
xTaskToResume
;

1782 
	`c⁄figASSERT
–
xTaskToResume
 );

1786 if––
pxTCB
 !
NULL
 ) && (ÖxTCB !
pxCuºítTCB
 ) )

1788 
	`èskENTER_CRITICAL
();

1790 if–
	`¥vTaskIsTaskSu•íded
–
pxTCB
 ) !
pdFALSE
 )

1792 
	`åa˚TASK_RESUME
–
pxTCB
 );

1796 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

1797 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1800 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1805 
	`èskYIELD_IF_USING_PREEMPTION
();

1809 
	`mtCOVERAGE_TEST_MARKER
();

1814 
	`mtCOVERAGE_TEST_MARKER
();

1817 
	`èskEXIT_CRITICAL
();

1821 
	`mtCOVERAGE_TEST_MARKER
();

1823 
	}
}

1829 #i‡––
INCLUDE_xTaskResumeFromISR
 =1 ) && ( 
INCLUDE_vTaskSu•íd
 == 1 ) )

1831 
Ba£Ty≥_t
 
	$xTaskResumeFromISR
–
TaskH™dÀ_t
 
xTaskToResume
 )

1833 
Ba£Ty≥_t
 
xYõldRequúed
 = 
pdFALSE
;

1834 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
xTaskToResume
;

1835 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1837 
	`c⁄figASSERT
–
xTaskToResume
 );

1855 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1857 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1859 if–
	`¥vTaskIsTaskSu•íded
–
pxTCB
 ) !
pdFALSE
 )

1861 
	`åa˚TASK_RESUME_FROM_ISR
–
pxTCB
 );

1864 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

1868 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1870 
xYõldRequúed
 = 
pdTRUE
;

1874 
	`mtCOVERAGE_TEST_MARKER
();

1877 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

1878 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1885 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxTCB
->
xEvítLi°Iãm
 ) );

1890 
	`mtCOVERAGE_TEST_MARKER
();

1893 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1895  
xYõldRequúed
;

1896 
	}
}

1901 
	$vTaskSèπScheduÀr
( )

1903 
Ba£Ty≥_t
 
xRëu∫
;

1906 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

1908 
SèticTask_t
 *
pxIdÀTaskTCBBuf„r
 = 
NULL
;

1909 
SèckTy≥_t
 *
pxIdÀTaskSèckBuf„r
 = 
NULL
;

1910 
uöt32_t
 
ulIdÀTaskSèckSize
;

1914 
	`vAµliˇti⁄GëIdÀTaskMem‹y
–&
pxIdÀTaskTCBBuf„r
, &
pxIdÀTaskSèckBuf„r
, &
ulIdÀTaskSèckSize
 );

1915 
xIdÀTaskH™dÀ
 = 
	`xTaskCª©eSètic
–
¥vIdÀTask
,

1916 
c⁄figIDLE_TASK_NAME
,

1917 
ulIdÀTaskSèckSize
,

1918 –* ) 
NULL
,

1919 –
tskIDLE_PRIORITY
 | 
p‹tPRIVILEGE_BIT
 ),

1920 
pxIdÀTaskSèckBuf„r
,

1921 
pxIdÀTaskTCBBuf„r
 );

1923 if–
xIdÀTaskH™dÀ
 !
NULL
 )

1925 
xRëu∫
 = 
pdPASS
;

1929 
xRëu∫
 = 
pdFAIL
;

1935 
xRëu∫
 = 
	`xTaskCª©e
–
¥vIdÀTask
,

1936 
c⁄figIDLE_TASK_NAME
,

1937 
c⁄figMINIMAL_STACK_SIZE
,

1938 –* ) 
NULL
,

1939 –
tskIDLE_PRIORITY
 | 
p‹tPRIVILEGE_BIT
 ),

1940 &
xIdÀTaskH™dÀ
 );

1944 #i‡–
c⁄figUSE_TIMERS
 == 1 )

1946 if–
xRëu∫
 =
pdPASS
 )

1948 
xRëu∫
 = 
	`xTimîCª©eTimîTask
();

1952 
	`mtCOVERAGE_TEST_MARKER
();

1957 if–
xRëu∫
 =
pdPASS
 )

1962 #ifde‡
FREERTOS_TASKS_C_ADDITIONS_INIT


1964 
	`‰ìπos_èsks_c_addôi⁄s_öô
();

1973 
	`p‹tDISABLE_INTERRUPTS
();

1975 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

1979 
_impuª_±r
 = &–
pxCuºítTCB
->
xNewLib_ªít
 );

1983 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

1984 
xScheduÀrRu¬ög
 = 
pdTRUE
;

1985 
xTickCou¡
 = ( 
TickTy≥_t
 ) 0U;

1993 
	`p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
();

1997 if–
	`xP‹tSèπScheduÀr
(Ë!
pdFALSE
 )

2012 
	`c⁄figASSERT
–
xRëu∫
 !
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
 );

2017 –Ë
xIdÀTaskH™dÀ
;

2018 
	}
}

2021 
	$vTaskEndScheduÀr
( )

2026 
	`p‹tDISABLE_INTERRUPTS
();

2027 
xScheduÀrRu¬ög
 = 
pdFALSE
;

2028 
	`vP‹tEndScheduÀr
();

2029 
	}
}

2032 
	$vTaskSu•ídAŒ
( )

2038 ++
uxScheduÀrSu•íded
;

2039 
	}
}

2042 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

2044 
TickTy≥_t
 
	$¥vGëEx≥˘edIdÀTime
( )

2046 
TickTy≥_t
 
xRëu∫
;

2047 
UBa£Ty≥_t
 
uxHighîPri‹ôyRódyTasks
 = 
pdFALSE
;

2053 #if–
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 0 )

2055 if–
uxT›RódyPri‹ôy
 > 
tskIDLE_PRIORITY
 )

2057 
uxHighîPri‹ôyRódyTasks
 = 
pdTRUE
;

2062 c⁄° 
UBa£Ty≥_t
 
uxLó°Signifiˇ¡Bô
 = ( UBaseType_t ) 0x01;

2069 if–
uxT›RódyPri‹ôy
 > 
uxLó°Signifiˇ¡Bô
 )

2071 
uxHighîPri‹ôyRódyTasks
 = 
pdTRUE
;

2073 
	}
}

2076 if–
	gpxCuºítTCB
->
	guxPri‹ôy
 > 
	gtskIDLE_PRIORITY
 )

2078 
	gxRëu∫
 = 0;

2080 if–
li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
tskIDLE_PRIORITY
 ] ) ) > 1 )

2085 
	gxRëu∫
 = 0;

2087 if–
	guxHighîPri‹ôyRódyTasks
 !
pdFALSE
 )

2092 
xRëu∫
 = 0;

2096 
	gxRëu∫
 = 
xNextTaskUnblockTime
 - 
xTickCou¡
;

2099  
	gxRëu∫
;

2105 
Ba£Ty≥_t
 
	$xTaskResumeAŒ
( )

2107 
TCB_t
 *
pxTCB
 = 
NULL
;

2108 
Ba£Ty≥_t
 
xAÃódyYõlded
 = 
pdFALSE
;

2112 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 );

2119 
	`èskENTER_CRITICAL
();

2121 --
uxScheduÀrSu•íded
;

2123 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

2125 if–
uxCuºítNumbîOfTasks
 > ( 
UBa£Ty≥_t
 ) 0U )

2129  
	`li°LIST_IS_EMPTY
–&
xPídögRódyLi°
 ) =
pdFALSE
 )

2131 
pxTCB
 = ( 
TCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
––&
xPídögRódyLi°
 ) );

2132 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

2133 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

2134 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

2138 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

2140 
xYõldPídög
 = 
pdTRUE
;

2144 
	`mtCOVERAGE_TEST_MARKER
();

2148 if–
pxTCB
 !
NULL
 )

2156 
	`¥vRe£tNextTaskUnblockTime
();

2164 
UBa£Ty≥_t
 
uxPídedCou¡s
 = 
uxPídedTicks
;

2166 if–
uxPídedCou¡s
 > ( 
UBa£Ty≥_t
 ) 0U )

2170 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

2172 
xYõldPídög
 = 
pdTRUE
;

2176 
	`mtCOVERAGE_TEST_MARKER
();

2178 --
uxPídedCou¡s
;

2179 }  
uxPídedCou¡s
 > ( 
UBa£Ty≥_t
 ) 0U );

2181 
uxPídedTicks
 = 0;

2185 
	`mtCOVERAGE_TEST_MARKER
();

2189 if–
xYõldPídög
 !
pdFALSE
 )

2191 #if–
c⁄figUSE_PREEMPTION
 != 0 )

2193 
xAÃódyYõlded
 = 
pdTRUE
;

2196 
	`èskYIELD_IF_USING_PREEMPTION
();

2200 
	`mtCOVERAGE_TEST_MARKER
();

2206 
	`mtCOVERAGE_TEST_MARKER
();

2209 
	`èskEXIT_CRITICAL
();

2211  
xAÃódyYõlded
;

2212 
	}
}

2215 
TickTy≥_t
 
	$xTaskGëTickCou¡
( )

2217 
TickTy≥_t
 
xTicks
;

2220 
	`p‹tTICK_TYPE_ENTER_CRITICAL
();

2222 
xTicks
 = 
xTickCou¡
;

2224 
	`p‹tTICK_TYPE_EXIT_CRITICAL
();

2226  
xTicks
;

2227 
	}
}

2230 
TickTy≥_t
 
	$xTaskGëTickCou¡FromISR
( )

2232 
TickTy≥_t
 
xRëu∫
;

2233 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

2249 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

2251 
uxSavedI¡îru±Sètus
 = 
	`p‹tTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR
();

2253 
xRëu∫
 = 
xTickCou¡
;

2255 
	`p‹tTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

2257  
xRëu∫
;

2258 
	}
}

2261 
UBa£Ty≥_t
 
	$uxTaskGëNumbîOfTasks
( )

2265  
uxCuºítNumbîOfTasks
;

2266 
	}
}

2269 *
	$pcTaskGëName
–
TaskH™dÀ_t
 
xTaskToQuîy
 )

2271 
TCB_t
 *
pxTCB
;

2275 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToQuîy
 );

2276 
	`c⁄figASSERT
–
pxTCB
 );

2277  &–
pxTCB
->
pcTaskName
[ 0 ] );

2278 
	}
}

2281 #i‡–
INCLUDE_xTaskGëH™dÀ
 == 1 )

2283 
TCB_t
 *
	$¥vSórchF‹NameWôhöSögÀLi°
–
Li°_t
 *
pxLi°
, c⁄° 
pcNameToQuîy
[] )

2285 
TCB_t
 *
pxNextTCB
, *
pxFú°TCB
, *
pxRëu∫
 = 
NULL
;

2286 
UBa£Ty≥_t
 
x
;

2287 
cNextCh¨
;

2291 if–
	`li°CURRENT_LIST_LENGTH
–
pxLi°
 ) > ( 
UBa£Ty≥_t
 ) 0 )

2293 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxFú°TCB
, 
pxLi°
 );

2297 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxNextTCB
, 
pxLi°
 );

2301  
x
 = ( 
UBa£Ty≥_t
 ) 0; x < ( UBa£Ty≥_àË
c⁄figMAX_TASK_NAME_LEN
; x++ )

2303 
cNextCh¨
 = 
pxNextTCB
->
pcTaskName
[ 
x
 ];

2305 if–
cNextCh¨
 !
pcNameToQuîy
[ 
x
 ] )

2310 if–
cNextCh¨
 == 0x00 )

2314 
pxRëu∫
 = 
pxNextTCB
;

2319 
	`mtCOVERAGE_TEST_MARKER
();

2323 if–
pxRëu∫
 !
NULL
 )

2329 }  
pxNextTCB
 !
pxFú°TCB
 );

2333 
	`mtCOVERAGE_TEST_MARKER
();

2336  
pxRëu∫
;

2337 
	}
}

2342 #i‡–
INCLUDE_xTaskGëH™dÀ
 == 1 )

2344 
TaskH™dÀ_t
 
	$xTaskGëH™dÀ
–c⁄° *
pcNameToQuîy
 )

2346 
UBa£Ty≥_t
 
uxQueue
 = 
c⁄figMAX_PRIORITIES
;

2347 
TCB_t
* 
pxTCB
;

2350 
	`c⁄figASSERT
–
	`°æí
–
pcNameToQuîy
 ) < 
c⁄figMAX_TASK_NAME_LEN
 );

2352 
	`vTaskSu•ídAŒ
();

2357 
uxQueue
--;

2358 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
––
Li°_t
 * ) &–
pxRódyTasksLi°s
[ 
uxQueue
 ] ), 
pcNameToQuîy
 );

2360 if–
pxTCB
 !
NULL
 )

2366 }  
uxQueue
 > ( 
UBa£Ty≥_t
 ) 
tskIDLE_PRIORITY
 );

2369 if–
pxTCB
 =
NULL
 )

2371 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
––
Li°_t
 * ) 
pxDñayedTaskLi°
, 
pcNameToQuîy
 );

2374 if–
pxTCB
 =
NULL
 )

2376 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
––
Li°_t
 * ) 
pxOvîÊowDñayedTaskLi°
, 
pcNameToQuîy
 );

2379 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

2381 if–
pxTCB
 =
NULL
 )

2384 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
–&
xSu•ídedTaskLi°
, 
pcNameToQuîy
 );

2389 #if–
INCLUDE_vTaskDñëe
 == 1 )

2391 if–
pxTCB
 =
NULL
 )

2394 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
–&
xTasksWaôögTîmö©i⁄
, 
pcNameToQuîy
 );

2399 –Ë
	`xTaskResumeAŒ
();

2401  ( 
TaskH™dÀ_t
 ) 
pxTCB
;

2402 
	}
}

2407 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2409 
UBa£Ty≥_t
 
	$uxTaskGëSy°emSèã
–
TaskSètus_t
 * c⁄° 
pxTaskSètusAºay
, c⁄° 
UBa£Ty≥_t
 
uxAºaySize
, 
uöt32_t
 * c⁄° 
pulTŸÆRunTime
 )

2411 
UBa£Ty≥_t
 
uxTask
 = 0, 
uxQueue
 = 
c⁄figMAX_PRIORITIES
;

2413 
	`vTaskSu•ídAŒ
();

2416 if–
uxAºaySize
 >
uxCuºítNumbîOfTasks
 )

2422 
uxQueue
--;

2423 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), &–
pxRódyTasksLi°s
[ 
uxQueue
 ] ), 
eRódy
 );

2425 }  
uxQueue
 > ( 
UBa£Ty≥_t
 ) 
tskIDLE_PRIORITY
 );

2429 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), ( 
Li°_t
 * ) 
pxDñayedTaskLi°
, 
eBlocked
 );

2430 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), ( 
Li°_t
 * ) 
pxOvîÊowDñayedTaskLi°
, 
eBlocked
 );

2432 #if–
INCLUDE_vTaskDñëe
 == 1 )

2436 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), &
xTasksWaôögTîmö©i⁄
, 
eDñëed
 );

2440 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

2444 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), &
xSu•ídedTaskLi°
, 
eSu•íded
 );

2448 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1)

2450 if–
pulTŸÆRunTime
 !
NULL
 )

2452 #ifde‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


2453 
	`p‹tALT_GET_RUN_TIME_COUNTER_VALUE
––*
pulTŸÆRunTime
 ) );

2455 *
pulTŸÆRunTime
 = 
	`p‹tGET_RUN_TIME_COUNTER_VALUE
();

2461 if–
pulTŸÆRunTime
 !
NULL
 )

2463 *
pulTŸÆRunTime
 = 0;

2470 
	`mtCOVERAGE_TEST_MARKER
();

2473 –Ë
	`xTaskResumeAŒ
();

2475  
uxTask
;

2476 
	}
}

2481 #i‡–
INCLUDE_xTaskGëIdÀTaskH™dÀ
 == 1 )

2483 
TaskH™dÀ_t
 
	$xTaskGëIdÀTaskH™dÀ
( )

2487 
	`c⁄figASSERT
––
xIdÀTaskH™dÀ
 !
NULL
 ) );

2488  
xIdÀTaskH™dÀ
;

2489 
	}
}

2498 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

2500 
	$vTaskSãpTick
–c⁄° 
TickTy≥_t
 
xTicksToJump
 )

2505 
	`c⁄figASSERT
––
xTickCou¡
 + 
xTicksToJump
 ) <
xNextTaskUnblockTime
 );

2506 
xTickCou¡
 +
xTicksToJump
;

2507 
	`åa˚INCREASE_TICK_COUNT
–
xTicksToJump
 );

2508 
	}
}

2513 #i‡–
INCLUDE_xTaskAb‹tDñay
 == 1 )

2515 
Ba£Ty≥_t
 
	$xTaskAb‹tDñay
–
TaskH™dÀ_t
 
xTask
 )

2517 
TCB_t
 *
pxTCB
 = ( TCB_à* ) 
xTask
;

2518 
Ba£Ty≥_t
 
xRëu∫
;

2520 
	`c⁄figASSERT
–
pxTCB
 );

2522 
	`vTaskSu•ídAŒ
();

2526 if–
	`eTaskGëSèã
–
xTask
 ) =
eBlocked
 )

2528 
xRëu∫
 = 
pdPASS
;

2533 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

2539 
	`èskENTER_CRITICAL
();

2541 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

2543 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

2544 
pxTCB
->
ucDñayAb‹ãd
 = 
pdTRUE
;

2548 
	`mtCOVERAGE_TEST_MARKER
();

2551 
	`èskEXIT_CRITICAL
();

2554 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

2558 #i‡–
c⁄figUSE_PREEMPTION
 == 1 )

2563 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

2567 
xYõldPídög
 = 
pdTRUE
;

2571 
	`mtCOVERAGE_TEST_MARKER
();

2578 
xRëu∫
 = 
pdFAIL
;

2581 –Ë
	`xTaskResumeAŒ
();

2583  
xRëu∫
;

2584 
	}
}

2589 
Ba£Ty≥_t
 
	$xTaskIn¸emítTick
( )

2591 
TCB_t
 * 
pxTCB
;

2592 
TickTy≥_t
 
xIãmVÆue
;

2593 
Ba£Ty≥_t
 
xSwôchRequúed
 = 
pdFALSE
;

2598 
	`åa˚TASK_INCREMENT_TICK
–
xTickCou¡
 );

2599 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

2603 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
 + ( TickType_t ) 1;

2607 
xTickCou¡
 = 
xC⁄°TickCou¡
;

2609 if–
xC⁄°TickCou¡
 =–
TickTy≥_t
 ) 0U )

2611 
	`èskSWITCH_DELAYED_LISTS
();

2615 
	`mtCOVERAGE_TEST_MARKER
();

2622 if–
xC⁄°TickCou¡
 >
xNextTaskUnblockTime
 )

2626 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) !
pdFALSE
 )

2633 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

2642 
pxTCB
 = ( 
TCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedTaskLi°
 );

2643 
xIãmVÆue
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

2645 if–
xC⁄°TickCou¡
 < 
xIãmVÆue
 )

2652 
xNextTaskUnblockTime
 = 
xIãmVÆue
;

2657 
	`mtCOVERAGE_TEST_MARKER
();

2661 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

2665 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

2667 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

2671 
	`mtCOVERAGE_TEST_MARKER
();

2676 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

2680 #i‡–
c⁄figUSE_PREEMPTION
 == 1 )

2686 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

2688 
xSwôchRequúed
 = 
pdTRUE
;

2692 
	`mtCOVERAGE_TEST_MARKER
();

2703 #i‡––
c⁄figUSE_PREEMPTION
 =1 ) && ( 
c⁄figUSE_TIME_SLICING
 == 1 ) )

2705 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
pxCuºítTCB
->
uxPri‹ôy
 ] ) ) > ( 
UBa£Ty≥_t
 ) 1 )

2707 
xSwôchRequúed
 = 
pdTRUE
;

2711 
	`mtCOVERAGE_TEST_MARKER
();

2716 #i‡–
c⁄figUSE_TICK_HOOK
 == 1 )

2720 if–
uxPídedTicks
 =–
UBa£Ty≥_t
 ) 0U )

2722 
	`vAµliˇti⁄TickHook
();

2726 
	`mtCOVERAGE_TEST_MARKER
();

2733 ++
uxPídedTicks
;

2737 #i‡–
c⁄figUSE_TICK_HOOK
 == 1 )

2739 
	`vAµliˇti⁄TickHook
();

2744 #i‡–
c⁄figUSE_PREEMPTION
 == 1 )

2746 if–
xYõldPídög
 !
pdFALSE
 )

2748 
xSwôchRequúed
 = 
pdTRUE
;

2752 
	`mtCOVERAGE_TEST_MARKER
();

2757  
xSwôchRequúed
;

2758 
	}
}

2761 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2763 
	$vTaskSëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
, 
TaskHookFun˘i⁄_t
 
pxHookFun˘i⁄
 )

2765 
TCB_t
 *
xTCB
;

2769 if–
xTask
 =
NULL
 )

2771 
xTCB
 = ( 
TCB_t
 * ) 
pxCuºítTCB
;

2775 
xTCB
 = ( 
TCB_t
 * ) 
xTask
;

2780 
	`èskENTER_CRITICAL
();

2781 
xTCB
->
pxTaskTag
 = 
pxHookFun˘i⁄
;

2782 
	`èskEXIT_CRITICAL
();

2783 
	}
}

2788 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2790 
TaskHookFun˘i⁄_t
 
	$xTaskGëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
 )

2792 
TCB_t
 *
xTCB
;

2793 
TaskHookFun˘i⁄_t
 
xRëu∫
;

2796 if–
xTask
 =
NULL
 )

2798 
xTCB
 = ( 
TCB_t
 * ) 
pxCuºítTCB
;

2802 
xTCB
 = ( 
TCB_t
 * ) 
xTask
;

2807 
	`èskENTER_CRITICAL
();

2809 
xRëu∫
 = 
xTCB
->
pxTaskTag
;

2811 
	`èskEXIT_CRITICAL
();

2813  
xRëu∫
;

2814 
	}
}

2819 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2821 
Ba£Ty≥_t
 
	$xTaskCÆlAµliˇti⁄TaskHook
–
TaskH™dÀ_t
 
xTask
, *
pvP¨amëî
 )

2823 
TCB_t
 *
xTCB
;

2824 
Ba£Ty≥_t
 
xRëu∫
;

2827 if–
xTask
 =
NULL
 )

2829 
xTCB
 = ( 
TCB_t
 * ) 
pxCuºítTCB
;

2833 
xTCB
 = ( 
TCB_t
 * ) 
xTask
;

2836 if–
xTCB
->
pxTaskTag
 !
NULL
 )

2838 
xRëu∫
 = 
xTCB
->
	`pxTaskTag
–
pvP¨amëî
 );

2842 
xRëu∫
 = 
pdFAIL
;

2845  
xRëu∫
;

2846 
	}
}

2851 
	$vTaskSwôchC⁄ãxt
( )

2853 if–
uxScheduÀrSu•íded
 !–
UBa£Ty≥_t
 ) 
pdFALSE
 )

2857 
xYõldPídög
 = 
pdTRUE
;

2861 
xYõldPídög
 = 
pdFALSE
;

2862 
	`åa˚TASK_SWITCHED_OUT
();

2864 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

2866 #ifde‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


2867 
	`p‹tALT_GET_RUN_TIME_COUNTER_VALUE
–
ulTŸÆRunTime
 );

2869 
ulTŸÆRunTime
 = 
	`p‹tGET_RUN_TIME_COUNTER_VALUE
();

2879 if–
ulTŸÆRunTime
 > 
ulTaskSwôchedInTime
 )

2881 
pxCuºítTCB
->
ulRunTimeCou¡î
 +–
ulTŸÆRunTime
 - 
ulTaskSwôchedInTime
 );

2885 
	`mtCOVERAGE_TEST_MARKER
();

2887 
ulTaskSwôchedInTime
 = 
ulTŸÆRunTime
;

2892 
	`èskCHECK_FOR_STACK_OVERFLOW
();

2896 
	`èskSELECT_HIGHEST_PRIORITY_TASK
();

2897 
	`åa˚TASK_SWITCHED_IN
();

2899 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

2903 
_impuª_±r
 = &–
pxCuºítTCB
->
xNewLib_ªít
 );

2907 
	}
}

2910 
	$vTaskPœ˚OnEvítLi°
–
Li°_t
 * c⁄° 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xTicksToWaô
 )

2912 
	`c⁄figASSERT
–
pxEvítLi°
 );

2921 
	`vLi°In£π
–
pxEvítLi°
, &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

2923 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
pdTRUE
 );

2924 
	}
}

2927 
	$vTaskPœ˚OnUn‹dîedEvítLi°
–
Li°_t
 * 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xIãmVÆue
, c⁄° TickTy≥_à
xTicksToWaô
 )

2929 
	`c⁄figASSERT
–
pxEvítLi°
 );

2933 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 != 0 );

2938 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xEvítLi°Iãm
 ), 
xIãmVÆue
 | 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 );

2945 
	`vLi°In£πEnd
–
pxEvítLi°
, &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

2947 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
pdTRUE
 );

2948 
	}
}

2951 #if–
c⁄figUSE_TIMERS
 == 1 )

2953 
	$vTaskPœ˚OnEvítLi°Re°ri˘ed
–
Li°_t
 * c⁄° 
pxEvítLi°
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
 )

2955 
	`c⁄figASSERT
–
pxEvítLi°
 );

2967 
	`vLi°In£πEnd
–
pxEvítLi°
, &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

2972 if–
xWaôIndeföôñy
 !
pdFALSE
 )

2974 
xTicksToWaô
 = 
p‹tMAX_DELAY
;

2977 
	`åa˚TASK_DELAY_UNTIL
––
xTickCou¡
 + 
xTicksToWaô
 ) );

2978 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
xWaôIndeföôñy
 );

2979 
	}
}

2984 
Ba£Ty≥_t
 
	$xTaskRemoveFromEvítLi°
–c⁄° 
Li°_t
 * c⁄° 
pxEvítLi°
 )

2986 
TCB_t
 *
pxUnblockedTCB
;

2987 
Ba£Ty≥_t
 
xRëu∫
;

3002 
pxUnblockedTCB
 = ( 
TCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxEvítLi°
 );

3003 
	`c⁄figASSERT
–
pxUnblockedTCB
 );

3004 –Ë
	`uxLi°Remove
–&–
pxUnblockedTCB
->
xEvítLi°Iãm
 ) );

3006 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

3008 –Ë
	`uxLi°Remove
–&–
pxUnblockedTCB
->
xSèãLi°Iãm
 ) );

3009 
	`¥vAddTaskToRódyLi°
–
pxUnblockedTCB
 );

3015 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxUnblockedTCB
->
xEvítLi°Iãm
 ) );

3018 if–
pxUnblockedTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

3023 
xRëu∫
 = 
pdTRUE
;

3027 
xYõldPídög
 = 
pdTRUE
;

3031 
xRëu∫
 = 
pdFALSE
;

3034 #if–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

3044 
	`¥vRe£tNextTaskUnblockTime
();

3048  
xRëu∫
;

3049 
	}
}

3052 
	$vTaskRemoveFromUn‹dîedEvítLi°
–
Li°Iãm_t
 * 
pxEvítLi°Iãm
, c⁄° 
TickTy≥_t
 
xIãmVÆue
 )

3054 
TCB_t
 *
pxUnblockedTCB
;

3058 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 !
pdFALSE
 );

3061 
	`li°SET_LIST_ITEM_VALUE
–
pxEvítLi°Iãm
, 
xIãmVÆue
 | 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 );

3065 
pxUnblockedTCB
 = ( 
TCB_t
 * ) 
	`li°GET_LIST_ITEM_OWNER
–
pxEvítLi°Iãm
 );

3066 
	`c⁄figASSERT
–
pxUnblockedTCB
 );

3067 –Ë
	`uxLi°Remove
–
pxEvítLi°Iãm
 );

3072 –Ë
	`uxLi°Remove
–&–
pxUnblockedTCB
->
xSèãLi°Iãm
 ) );

3073 
	`¥vAddTaskToRódyLi°
–
pxUnblockedTCB
 );

3075 if–
pxUnblockedTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

3081 
xYõldPídög
 = 
pdTRUE
;

3083 
	}
}

3086 
	$vTaskSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 )

3088 
	`c⁄figASSERT
–
pxTimeOut
 );

3089 
	`èskENTER_CRITICAL
();

3091 
pxTimeOut
->
xOvîÊowCou¡
 = 
xNumOfOvîÊows
;

3092 
pxTimeOut
->
xTimeOnE¡îög
 = 
xTickCou¡
;

3094 
	`èskEXIT_CRITICAL
();

3095 
	}
}

3098 
	$vTaskI¡î«lSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 )

3101 
pxTimeOut
->
xOvîÊowCou¡
 = 
xNumOfOvîÊows
;

3102 
pxTimeOut
->
xTimeOnE¡îög
 = 
xTickCou¡
;

3103 
	}
}

3106 
Ba£Ty≥_t
 
	$xTaskCheckF‹TimeOut
–
TimeOut_t
 * c⁄° 
pxTimeOut
, 
TickTy≥_t
 * c⁄° 
pxTicksToWaô
 )

3108 
Ba£Ty≥_t
 
xRëu∫
;

3110 
	`c⁄figASSERT
–
pxTimeOut
 );

3111 
	`c⁄figASSERT
–
pxTicksToWaô
 );

3113 
	`èskENTER_CRITICAL
();

3116 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

3117 c⁄° 
TickTy≥_t
 
xEœp£dTime
 = 
xC⁄°TickCou¡
 - 
pxTimeOut
->
xTimeOnE¡îög
;

3119 #if–
INCLUDE_xTaskAb‹tDñay
 == 1 )

3120 if–
pxCuºítTCB
->
ucDñayAb‹ãd
 !
pdFALSE
 )

3124 
pxCuºítTCB
->
ucDñayAb‹ãd
 = 
pdFALSE
;

3125 
xRëu∫
 = 
pdTRUE
;

3130 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

3131 if–*
pxTicksToWaô
 =
p‹tMAX_DELAY
 )

3136 
xRëu∫
 = 
pdFALSE
;

3141 if––
xNumOfOvîÊows
 !
pxTimeOut
->
xOvîÊowCou¡
 ) && ( 
xC⁄°TickCou¡
 >pxTimeOut->
xTimeOnE¡îög
 ) )

3148 
xRëu∫
 = 
pdTRUE
;

3150 if–
xEœp£dTime
 < *
pxTicksToWaô
 )

3153 *
pxTicksToWaô
 -
xEœp£dTime
;

3154 
	`vTaskI¡î«lSëTimeOutSèã
–
pxTimeOut
 );

3155 
xRëu∫
 = 
pdFALSE
;

3159 *
pxTicksToWaô
 = 0;

3160 
xRëu∫
 = 
pdTRUE
;

3163 
	`èskEXIT_CRITICAL
();

3165  
xRëu∫
;

3166 
	}
}

3169 
	$vTaskMis£dYõld
( )

3171 
xYõldPídög
 = 
pdTRUE
;

3172 
	}
}

3175 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

3177 
UBa£Ty≥_t
 
	$uxTaskGëTaskNumbî
–
TaskH™dÀ_t
 
xTask
 )

3179 
UBa£Ty≥_t
 
uxRëu∫
;

3180 
TCB_t
 *
pxTCB
;

3182 if–
xTask
 !
NULL
 )

3184 
pxTCB
 = ( 
TCB_t
 * ) 
xTask
;

3185 
uxRëu∫
 = 
pxTCB
->
uxTaskNumbî
;

3189 
uxRëu∫
 = 0U;

3192  
uxRëu∫
;

3193 
	}
}

3198 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

3200 
	$vTaskSëTaskNumbî
–
TaskH™dÀ_t
 
xTask
, c⁄° 
UBa£Ty≥_t
 
uxH™dÀ
 )

3202 
TCB_t
 *
pxTCB
;

3204 if–
xTask
 !
NULL
 )

3206 
pxTCB
 = ( 
TCB_t
 * ) 
xTask
;

3207 
pxTCB
->
uxTaskNumbî
 = 
uxH™dÀ
;

3209 
	}
}

3224 
	$p‹tTASK_FUNCTION
–
¥vIdÀTask
, 
pvP¨amëîs
 )

3227 –Ë
pvP¨amëîs
;

3235 
	`p‹tTASK_CALLS_SECURE_FUNCTIONS
();

3241 
	`¥vCheckTasksWaôögTîmö©i⁄
();

3243 #i‡–
c⁄figUSE_PREEMPTION
 == 0 )

3249 
	`èskYIELD
();

3253 #i‡––
c⁄figUSE_PREEMPTION
 =1 ) && ( 
c⁄figIDLE_SHOULD_YIELD
 == 1 ) )

3264 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
tskIDLE_PRIORITY
 ] ) ) > ( 
UBa£Ty≥_t
 ) 1 )

3266 
	`èskYIELD
();

3270 
	`mtCOVERAGE_TEST_MARKER
();

3275 #i‡–
c⁄figUSE_IDLE_HOOK
 == 1 )

3277 
	`vAµliˇti⁄IdÀHook
( );

3284 
	`vAµliˇti⁄IdÀHook
();

3292 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

3294 
TickTy≥_t
 
xEx≥˘edIdÀTime
;

3301 
xEx≥˘edIdÀTime
 = 
	`¥vGëEx≥˘edIdÀTime
();

3303 if–
xEx≥˘edIdÀTime
 >
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 )

3305 
	`vTaskSu•ídAŒ
();

3310 
	`c⁄figASSERT
–
xNextTaskUnblockTime
 >
xTickCou¡
 );

3311 
xEx≥˘edIdÀTime
 = 
	`¥vGëEx≥˘edIdÀTime
();

3316 
	`c⁄figPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING
–
xEx≥˘edIdÀTime
 );

3318 if–
xEx≥˘edIdÀTime
 >
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 )

3320 
	`åa˚LOW_POWER_IDLE_BEGIN
();

3321 
	`p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 );

3322 
	`åa˚LOW_POWER_IDLE_END
();

3326 
	`mtCOVERAGE_TEST_MARKER
();

3329 –Ë
	`xTaskResumeAŒ
();

3333 
	`mtCOVERAGE_TEST_MARKER
();

3338 
	}
}

3341 #if–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

3343 
eSÀïModeSètus
 
	$eTaskC⁄fúmSÀïModeSètus
( )

3346 c⁄° 
UBa£Ty≥_t
 
uxN⁄Aµliˇti⁄Tasks
 = 1;

3347 
eSÀïModeSètus
 
eRëu∫
 = 
eSènd¨dSÀï
;

3349 if–
	`li°CURRENT_LIST_LENGTH
–&
xPídögRódyLi°
 ) != 0 )

3352 
eRëu∫
 = 
eAb‹tSÀï
;

3354 if–
xYõldPídög
 !
pdFALSE
 )

3357 
eRëu∫
 = 
eAb‹tSÀï
;

3365 if–
	`li°CURRENT_LIST_LENGTH
–&
xSu•ídedTaskLi°
 ) =–
uxCuºítNumbîOfTasks
 - 
uxN⁄Aµliˇti⁄Tasks
 ) )

3367 
eRëu∫
 = 
eNoTasksWaôögTimeout
;

3371 
	`mtCOVERAGE_TEST_MARKER
();

3375  
eRëu∫
;

3376 
	}
}

3381 #i‡–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 != 0 )

3383 
	$vTaskSëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToSë
, 
Ba£Ty≥_t
 
xIndex
, *
pvVÆue
 )

3385 
TCB_t
 *
pxTCB
;

3387 if–
xIndex
 < 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 )

3389 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToSë
 );

3390 
pxTCB
->
pvThªadLoˇlSt‹agePoöãrs
[ 
xIndex
 ] = 
pvVÆue
;

3392 
	}
}

3397 #i‡–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 != 0 )

3399 *
	$pvTaskGëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToQuîy
, 
Ba£Ty≥_t
 
xIndex
 )

3401 *
pvRëu∫
 = 
NULL
;

3402 
TCB_t
 *
pxTCB
;

3404 if–
xIndex
 < 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 )

3406 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToQuîy
 );

3407 
pvRëu∫
 = 
pxTCB
->
pvThªadLoˇlSt‹agePoöãrs
[ 
xIndex
 ];

3411 
pvRëu∫
 = 
NULL
;

3414  
pvRëu∫
;

3415 
	}
}

3420 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

3422 
	$vTaskAŒoˇãMPURegi⁄s
–
TaskH™dÀ_t
 
xTaskToModify
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 )

3424 
TCB_t
 *
pxTCB
;

3428 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToModify
 );

3430 
	`vP‹tSt‹eTaskMPUSëtögs
–&–
pxTCB
->
xMPUSëtögs
 ), 
xRegi⁄s
, 
NULL
, 0 );

3431 
	}
}

3436 
	$¥vInôüli£TaskLi°s
( )

3438 
UBa£Ty≥_t
 
uxPri‹ôy
;

3440  
uxPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 0U; uxPri‹ôy < ( UBa£Ty≥_àË
c⁄figMAX_PRIORITIES
; uxPriority++ )

3442 
	`vLi°Inôüli£
–&–
pxRódyTasksLi°s
[ 
uxPri‹ôy
 ] ) );

3445 
	`vLi°Inôüli£
–&
xDñayedTaskLi°1
 );

3446 
	`vLi°Inôüli£
–&
xDñayedTaskLi°2
 );

3447 
	`vLi°Inôüli£
–&
xPídögRódyLi°
 );

3449 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

3451 
	`vLi°Inôüli£
–&
xTasksWaôögTîmö©i⁄
 );

3455 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

3457 
	`vLi°Inôüli£
–&
xSu•ídedTaskLi°
 );

3463 
pxDñayedTaskLi°
 = &
xDñayedTaskLi°1
;

3464 
pxOvîÊowDñayedTaskLi°
 = &
xDñayedTaskLi°2
;

3465 
	}
}

3468 
	$¥vCheckTasksWaôögTîmö©i⁄
( )

3473 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

3475 
TCB_t
 *
pxTCB
;

3479  
uxDñëedTasksWaôögCÀ™Up
 > ( 
UBa£Ty≥_t
 ) 0U )

3481 
	`èskENTER_CRITICAL
();

3483 
pxTCB
 = ( 
TCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
––&
xTasksWaôögTîmö©i⁄
 ) );

3484 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

3485 --
uxCuºítNumbîOfTasks
;

3486 --
uxDñëedTasksWaôögCÀ™Up
;

3488 
	`èskEXIT_CRITICAL
();

3490 
	`¥vDñëeTCB
–
pxTCB
 );

3494 
	}
}

3497 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

3499 
	$vTaskGëInfo
–
TaskH™dÀ_t
 
xTask
, 
TaskSètus_t
 *
pxTaskSètus
, 
Ba£Ty≥_t
 
xGëFªeSèckS∑˚
, 
eTaskSèã
 
eSèã
 )

3501 
TCB_t
 *
pxTCB
;

3504 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

3506 
pxTaskSètus
->
xH™dÀ
 = ( 
TaskH™dÀ_t
 ) 
pxTCB
;

3507 
pxTaskSètus
->
pcTaskName
 = ( c⁄° * ) &–
pxTCB
->pcTaskName [ 0 ] );

3508 
pxTaskSètus
->
uxCuºítPri‹ôy
 = 
pxTCB
->
uxPri‹ôy
;

3509 
pxTaskSètus
->
pxSèckBa£
 = 
pxTCB
->
pxSèck
;

3510 
pxTaskSètus
->
xTaskNumbî
 = 
pxTCB
->
uxTCBNumbî
;

3512 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

3514 
pxTaskSètus
->
uxBa£Pri‹ôy
 = 
pxTCB
->uxBasePriority;

3518 
pxTaskSètus
->
uxBa£Pri‹ôy
 = 0;

3522 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

3524 
pxTaskSètus
->
ulRunTimeCou¡î
 = 
pxTCB
->ulRunTimeCounter;

3528 
pxTaskSètus
->
ulRunTimeCou¡î
 = 0;

3535 if–
eSèã
 !
eInvÆid
 )

3537 if–
pxTCB
 =
pxCuºítTCB
 )

3539 
pxTaskSètus
->
eCuºítSèã
 = 
eRu¬ög
;

3543 
pxTaskSètus
->
eCuºítSèã
 = 
eSèã
;

3545 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

3550 if–
eSèã
 =
eSu•íded
 )

3552 
	`vTaskSu•ídAŒ
();

3554 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

3556 
pxTaskSètus
->
eCuºítSèã
 = 
eBlocked
;

3559 –Ë
	`xTaskResumeAŒ
();

3567 
pxTaskSètus
->
eCuºítSèã
 = 
	`eTaskGëSèã
–
pxTCB
 );

3572 if–
xGëFªeSèckS∑˚
 !
pdFALSE
 )

3574 #i‡–
p‹tSTACK_GROWTH
 > 0 )

3576 
pxTaskSètus
->
usSèckHighW©îM¨k
 = 
	`¥vTaskCheckFªeSèckS∑˚
––
uöt8_t
 * ) 
pxTCB
->
pxEndOfSèck
 );

3580 
pxTaskSètus
->
usSèckHighW©îM¨k
 = 
	`¥vTaskCheckFªeSèckS∑˚
––
uöt8_t
 * ) 
pxTCB
->
pxSèck
 );

3586 
pxTaskSètus
->
usSèckHighW©îM¨k
 = 0;

3588 
	}
}

3593 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

3595 
UBa£Ty≥_t
 
	$¥vLi°TasksWôhöSögÀLi°
–
TaskSètus_t
 *
pxTaskSètusAºay
, 
Li°_t
 *
pxLi°
, 
eTaskSèã
 
eSèã
 )

3597 
c⁄figLIST_VOLATILE
 
TCB_t
 *
pxNextTCB
, *
pxFú°TCB
;

3598 
UBa£Ty≥_t
 
uxTask
 = 0;

3600 if–
	`li°CURRENT_LIST_LENGTH
–
pxLi°
 ) > ( 
UBa£Ty≥_t
 ) 0 )

3602 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxFú°TCB
, 
pxLi°
 );

3610 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxNextTCB
, 
pxLi°
 );

3611 
	`vTaskGëInfo
––
TaskH™dÀ_t
 ) 
pxNextTCB
, &–
pxTaskSètusAºay
[ 
uxTask
 ] ), 
pdTRUE
, 
eSèã
 );

3612 
uxTask
++;

3613 }  
pxNextTCB
 !
pxFú°TCB
 );

3617 
	`mtCOVERAGE_TEST_MARKER
();

3620  
uxTask
;

3621 
	}
}

3626 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 ) )

3628 
uöt16_t
 
	$¥vTaskCheckFªeSèckS∑˚
–c⁄° 
uöt8_t
 * 
pucSèckByã
 )

3630 
uöt32_t
 
ulCou¡
 = 0U;

3632  *
pucSèckByã
 =–
uöt8_t
 ) 
tskSTACK_FILL_BYTE
 )

3634 
pucSèckByã
 -
p‹tSTACK_GROWTH
;

3635 
ulCou¡
++;

3638 
ulCou¡
 /–
uöt32_t
 ) –
SèckTy≥_t
 );

3640  ( 
uöt16_t
 ) 
ulCou¡
;

3641 
	}
}

3646 #i‡–
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 )

3648 
UBa£Ty≥_t
 
	$uxTaskGëSèckHighW©îM¨k
–
TaskH™dÀ_t
 
xTask
 )

3650 
TCB_t
 *
pxTCB
;

3651 
uöt8_t
 *
pucEndOfSèck
;

3652 
UBa£Ty≥_t
 
uxRëu∫
;

3654 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

3656 #i‡
p‹tSTACK_GROWTH
 < 0

3658 
pucEndOfSèck
 = ( 
uöt8_t
 * ) 
pxTCB
->
pxSèck
;

3662 
pucEndOfSèck
 = ( 
uöt8_t
 * ) 
pxTCB
->
pxEndOfSèck
;

3666 
uxRëu∫
 = ( 
UBa£Ty≥_t
 ) 
	`¥vTaskCheckFªeSèckS∑˚
–
pucEndOfSèck
 );

3668  
uxRëu∫
;

3669 
	}
}

3674 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

3676 
	$¥vDñëeTCB
–
TCB_t
 *
pxTCB
 )

3681 
	`p‹tCLEAN_UP_TCB
–
pxTCB
 );

3685 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

3687 
	`_ª˛aim_ªít
–&–
pxTCB
->
xNewLib_ªít
 ) );

3691 #if––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 =0 ) && ( 
p‹tUSING_MPU_WRAPPERS
 == 0 ) )

3695 
	`vP‹tFªe
–
pxTCB
->
pxSèck
 );

3696 
	`vP‹tFªe
–
pxTCB
 );

3698 #ñif–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

3703 if–
pxTCB
->
ucSètiˇŒyAŒoˇãd
 =
tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB
 )

3707 
	`vP‹tFªe
–
pxTCB
->
pxSèck
 );

3708 
	`vP‹tFªe
–
pxTCB
 );

3710 if–
pxTCB
->
ucSètiˇŒyAŒoˇãd
 =
tskSTATICALLY_ALLOCATED_STACK_ONLY
 )

3714 
	`vP‹tFªe
–
pxTCB
 );

3720 
	`c⁄figASSERT
–
pxTCB
->
ucSètiˇŒyAŒoˇãd
 =
tskSTATICALLY_ALLOCATED_STACK_AND_TCB
 );

3721 
	`mtCOVERAGE_TEST_MARKER
();

3725 
	}
}

3730 
	$¥vRe£tNextTaskUnblockTime
( )

3732 
TCB_t
 *
pxTCB
;

3734 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) !
pdFALSE
 )

3740 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

3748 –
pxTCB
 ) = ( 
TCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedTaskLi°
 );

3749 
xNextTaskUnblockTime
 = 
	`li°GET_LIST_ITEM_VALUE
–&––
pxTCB
 )->
xSèãLi°Iãm
 ) );

3751 
	}
}

3754 #i‡––
INCLUDE_xTaskGëCuºítTaskH™dÀ
 =1 ) || ( 
c⁄figUSE_MUTEXES
 == 1 ) )

3756 
TaskH™dÀ_t
 
	$xTaskGëCuºítTaskH™dÀ
( )

3758 
TaskH™dÀ_t
 
xRëu∫
;

3763 
xRëu∫
 = 
pxCuºítTCB
;

3765  
xRëu∫
;

3766 
	}
}

3771 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

3773 
Ba£Ty≥_t
 
	$xTaskGëScheduÀrSèã
( )

3775 
Ba£Ty≥_t
 
xRëu∫
;

3777 if–
xScheduÀrRu¬ög
 =
pdFALSE
 )

3779 
xRëu∫
 = 
èskSCHEDULER_NOT_STARTED
;

3783 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

3785 
xRëu∫
 = 
èskSCHEDULER_RUNNING
;

3789 
xRëu∫
 = 
èskSCHEDULER_SUSPENDED
;

3793  
xRëu∫
;

3794 
	}
}

3799 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

3801 
Ba£Ty≥_t
 
	$xTaskPri‹ôyInhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 )

3803 
TCB_t
 * c⁄° 
pxMuãxHﬁdîTCB
 = ( TCB_à* ) 
pxMuãxHﬁdî
;

3804 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

3809 if–
pxMuãxHﬁdî
 !
NULL
 )

3814 if–
pxMuãxHﬁdîTCB
->
uxPri‹ôy
 < 
pxCuºítTCB
->uxPriority )

3819 if––
	`li°GET_LIST_ITEM_VALUE
–&–
pxMuãxHﬁdîTCB
->
xEvítLi°Iãm
 ) ) & 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 ) == 0UL )

3821 
	`li°SET_LIST_ITEM_VALUE
–&–
pxMuãxHﬁdîTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
pxCuºítTCB
->
uxPri‹ôy
 );

3825 
	`mtCOVERAGE_TEST_MARKER
();

3830 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
pxMuãxHﬁdîTCB
->
uxPri‹ôy
 ] ), &–pxMuãxHﬁdîTCB->
xSèãLi°Iãm
 ) ) !
pdFALSE
 )

3832 if–
	`uxLi°Remove
–&–
pxMuãxHﬁdîTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

3834 
	`èskRESET_READY_PRIORITY
–
pxMuãxHﬁdîTCB
->
uxPri‹ôy
 );

3838 
	`mtCOVERAGE_TEST_MARKER
();

3842 
pxMuãxHﬁdîTCB
->
uxPri‹ôy
 = 
pxCuºítTCB
->uxPriority;

3843 
	`¥vAddTaskToRódyLi°
–
pxMuãxHﬁdîTCB
 );

3848 
pxMuãxHﬁdîTCB
->
uxPri‹ôy
 = 
pxCuºítTCB
->uxPriority;

3851 
	`åa˚TASK_PRIORITY_INHERIT
–
pxMuãxHﬁdîTCB
, 
pxCuºítTCB
->
uxPri‹ôy
 );

3854 
xRëu∫
 = 
pdTRUE
;

3858 if–
pxMuãxHﬁdîTCB
->
uxBa£Pri‹ôy
 < 
pxCuºítTCB
->
uxPri‹ôy
 )

3867 
xRëu∫
 = 
pdTRUE
;

3871 
	`mtCOVERAGE_TEST_MARKER
();

3877 
	`mtCOVERAGE_TEST_MARKER
();

3880  
xRëu∫
;

3881 
	}
}

3886 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

3888 
Ba£Ty≥_t
 
	$xTaskPri‹ôyDisöhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 )

3890 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
pxMuãxHﬁdî
;

3891 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

3893 if–
pxMuãxHﬁdî
 !
NULL
 )

3899 
	`c⁄figASSERT
–
pxTCB
 =
pxCuºítTCB
 );

3900 
	`c⁄figASSERT
–
pxTCB
->
uxMuãxesHñd
 );

3901 –
pxTCB
->
uxMuãxesHñd
 )--;

3905 if–
pxTCB
->
uxPri‹ôy
 !pxTCB->
uxBa£Pri‹ôy
 )

3908 if–
pxTCB
->
uxMuãxesHñd
 =–
UBa£Ty≥_t
 ) 0 )

3915 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

3917 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

3921 
	`mtCOVERAGE_TEST_MARKER
();

3926 
	`åa˚TASK_PRIORITY_DISINHERIT
–
pxTCB
,ÖxTCB->
uxBa£Pri‹ôy
 );

3927 
pxTCB
->
uxPri‹ôy
 =ÖxTCB->
uxBa£Pri‹ôy
;

3932 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àËpxTCB->
uxPri‹ôy
 );

3933 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

3943 
xRëu∫
 = 
pdTRUE
;

3947 
	`mtCOVERAGE_TEST_MARKER
();

3952 
	`mtCOVERAGE_TEST_MARKER
();

3957 
	`mtCOVERAGE_TEST_MARKER
();

3960  
xRëu∫
;

3961 
	}
}

3966 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

3968 
	$vTaskPri‹ôyDisöhîôA·îTimeout
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
, 
UBa£Ty≥_t
 
uxHighe°Pri‹ôyWaôögTask
 )

3970 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
pxMuãxHﬁdî
;

3971 
UBa£Ty≥_t
 
uxPri‹ôyU£dOnE¡ry
, 
uxPri‹ôyToU£
;

3972 c⁄° 
UBa£Ty≥_t
 
uxO∆yO√MuãxHñd
 = ( UBaseType_t ) 1;

3974 if–
pxMuãxHﬁdî
 !
NULL
 )

3978 
	`c⁄figASSERT
–
pxTCB
->
uxMuãxesHñd
 );

3984 if–
pxTCB
->
uxBa£Pri‹ôy
 < 
uxHighe°Pri‹ôyWaôögTask
 )

3986 
uxPri‹ôyToU£
 = 
uxHighe°Pri‹ôyWaôögTask
;

3990 
uxPri‹ôyToU£
 = 
pxTCB
->
uxBa£Pri‹ôy
;

3994 if–
pxTCB
->
uxPri‹ôy
 !
uxPri‹ôyToU£
 )

4000 if–
pxTCB
->
uxMuãxesHñd
 =
uxO∆yO√MuãxHñd
 )

4005 
	`c⁄figASSERT
–
pxTCB
 !
pxCuºítTCB
 );

4010 
	`åa˚TASK_PRIORITY_DISINHERIT
–
pxTCB
,ÖxTCB->
uxBa£Pri‹ôy
 );

4011 
uxPri‹ôyU£dOnE¡ry
 = 
pxTCB
->
uxPri‹ôy
;

4012 
pxTCB
->
uxPri‹ôy
 = 
uxPri‹ôyToU£
;

4016 if––
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) & 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 ) == 0UL )

4018 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
uxPri‹ôyToU£
 );

4022 
	`mtCOVERAGE_TEST_MARKER
();

4031 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
uxPri‹ôyU£dOnE¡ry
 ] ), &–
pxTCB
->
xSèãLi°Iãm
 ) ) !
pdFALSE
 )

4033 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

4035 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

4039 
	`mtCOVERAGE_TEST_MARKER
();

4042 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

4046 
	`mtCOVERAGE_TEST_MARKER
();

4051 
	`mtCOVERAGE_TEST_MARKER
();

4056 
	`mtCOVERAGE_TEST_MARKER
();

4061 
	`mtCOVERAGE_TEST_MARKER
();

4063 
	}
}

4068 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

4070 
	$vTaskE¡îCrôiˇl
( )

4072 
	`p‹tDISABLE_INTERRUPTS
();

4074 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

4076 –
pxCuºítTCB
->
uxCrôiˇlNe°ög
 )++;

4084 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 == 1 )

4086 
	`p‹tASSERT_IF_IN_ISR
();

4091 
	`mtCOVERAGE_TEST_MARKER
();

4093 
	}
}

4098 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

4100 
	$vTaskExôCrôiˇl
( )

4102 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

4104 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 > 0U )

4106 –
pxCuºítTCB
->
uxCrôiˇlNe°ög
 )--;

4108 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 == 0U )

4110 
	`p‹tENABLE_INTERRUPTS
();

4114 
	`mtCOVERAGE_TEST_MARKER
();

4119 
	`mtCOVERAGE_TEST_MARKER
();

4124 
	`mtCOVERAGE_TEST_MARKER
();

4126 
	}
}

4131 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) )

4133 *
	$¥vWrôeNameToBuf„r
–*
pcBuf„r
, c⁄° *
pcTaskName
 )

4135 
size_t
 
x
;

4138 
	`°r˝y
–
pcBuf„r
, 
pcTaskName
 );

4142  
x
 = 
	`°æí
–
pcBuf„r
 ); x < ( 
size_t
 ) ( 
c⁄figMAX_TASK_NAME_LEN
 - 1 ); x++ )

4144 
pcBuf„r
[ 
x
 ] = ' ';

4148 
pcBuf„r
[ 
x
 ] = 0x00;

4151  &–
pcBuf„r
[ 
x
 ] );

4152 
	}
}

4157 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

4159 
	$vTaskLi°
–* 
pcWrôeBuf„r
 )

4161 
TaskSètus_t
 *
pxTaskSètusAºay
;

4162 vﬁ©ûê
UBa£Ty≥_t
 
uxAºaySize
, 
x
;

4163 
cSètus
;

4191 *
pcWrôeBuf„r
 = 0x00;

4195 
uxAºaySize
 = 
uxCuºítNumbîOfTasks
;

4200 
pxTaskSètusAºay
 = 
	`pvP‹tMÆloc
–
uxCuºítNumbîOfTasks
 * –
TaskSètus_t
 ) );

4202 if–
pxTaskSètusAºay
 !
NULL
 )

4205 
uxAºaySize
 = 
	`uxTaskGëSy°emSèã
–
pxTaskSètusAºay
, uxAºaySize, 
NULL
 );

4208  
x
 = 0; x < 
uxAºaySize
; x++ )

4210  
pxTaskSètusAºay
[ 
x
 ].
eCuºítSèã
 )

4212 
eRu¬ög
: 
cSètus
 = 
tskRUNNING_CHAR
;

4215 
eRódy
: 
cSètus
 = 
tskREADY_CHAR
;

4218 
eBlocked
: 
cSètus
 = 
tskBLOCKED_CHAR
;

4221 
eSu•íded
: 
cSètus
 = 
tskSUSPENDED_CHAR
;

4224 
eDñëed
: 
cSètus
 = 
tskDELETED_CHAR
;

4229 
cSètus
 = 0x00;

4235 
pcWrôeBuf„r
 = 
	`¥vWrôeNameToBuf„r
–pcWrôeBuf„r, 
pxTaskSètusAºay
[ 
x
 ].
pcTaskName
 );

4238 
	`•rötf
–
pcWrôeBuf„r
, "\t%c\t%u\t%u\t%u\r\n", 
cSètus
, ( Ë
pxTaskSètusAºay
[ 
x
 ].
uxCuºítPri‹ôy
, ( ËpxTaskSètusAºay[ x ].
usSèckHighW©îM¨k
, ( ËpxTaskSètusAºay[ x ].
xTaskNumbî
 );

4239 
pcWrôeBuf„r
 +
	`°æí
(ÖcWriteBuffer );

4244 
	`vP‹tFªe
–
pxTaskSètusAºay
 );

4248 
	`mtCOVERAGE_TEST_MARKER
();

4250 
	}
}

4255 #i‡––
c⁄figGENERATE_RUN_TIME_STATS
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

4257 
	$vTaskGëRunTimeSèts
–*
pcWrôeBuf„r
 )

4259 
TaskSètus_t
 *
pxTaskSètusAºay
;

4260 vﬁ©ûê
UBa£Ty≥_t
 
uxAºaySize
, 
x
;

4261 
uöt32_t
 
ulTŸÆTime
, 
ulSètsAsPî˚¡age
;

4263 #if–
c⁄figUSE_TRACE_FACILITY
 != 1 )

4265 #îr‹ 
c⁄figUSE_TRACE_FACILITY
 
mu°
 
Æso
 
be
 
£t
 
to
 1 
ö
 
FªeRTOSC⁄fig
.
h
Åÿ
u£
 
	`vTaskGëRunTimeSèts
().

4295 *
pcWrôeBuf„r
 = 0x00;

4299 
uxAºaySize
 = 
uxCuºítNumbîOfTasks
;

4304 
pxTaskSètusAºay
 = 
	`pvP‹tMÆloc
–
uxCuºítNumbîOfTasks
 * –
TaskSètus_t
 ) );

4306 if–
pxTaskSètusAºay
 !
NULL
 )

4309 
uxAºaySize
 = 
	`uxTaskGëSy°emSèã
–
pxTaskSètusAºay
, uxAºaySize, &
ulTŸÆTime
 );

4312 
ulTŸÆTime
 /= 100UL;

4315 if–
ulTŸÆTime
 > 0 )

4318  
x
 = 0; x < 
uxAºaySize
; x++ )

4323 
ulSètsAsPî˚¡age
 = 
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
 / 
ulTŸÆTime
;

4328 
pcWrôeBuf„r
 = 
	`¥vWrôeNameToBuf„r
–pcWrôeBuf„r, 
pxTaskSètusAºay
[ 
x
 ].
pcTaskName
 );

4330 if–
ulSètsAsPî˚¡age
 > 0UL )

4332 #ifde‡
p‹tLU_PRINTF_SPECIFIER_REQUIRED


4334 
	`•rötf
–
pcWrôeBuf„r
, "\t%lu\t\t%lu%%\r\n", 
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
, 
ulSètsAsPî˚¡age
 );

4340 
	`•rötf
–
pcWrôeBuf„r
, "\t%u\t\t%u%%\r\n", ( Ë
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
, ( Ë
ulSètsAsPî˚¡age
 );

4348 #ifde‡
p‹tLU_PRINTF_SPECIFIER_REQUIRED


4350 
	`•rötf
–
pcWrôeBuf„r
, "\t%lu\t\t<1%%\r\n", 
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
 );

4356 
	`•rötf
–
pcWrôeBuf„r
, "\t%u\t\t<1%%\r\n", ( Ë
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
 );

4361 
pcWrôeBuf„r
 +
	`°æí
(ÖcWriteBuffer );

4366 
	`mtCOVERAGE_TEST_MARKER
();

4371 
	`vP‹tFªe
–
pxTaskSètusAºay
 );

4375 
	`mtCOVERAGE_TEST_MARKER
();

4377 
	}
}

4382 
TickTy≥_t
 
	$uxTaskRe£tEvítIãmVÆue
( )

4384 
TickTy≥_t
 
uxRëu∫
;

4386 
uxRëu∫
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

4390 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xEvítLi°Iãm
 ), ( ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àËpxCuºítTCB->
uxPri‹ôy
 ) );

4392  
uxRëu∫
;

4393 
	}
}

4396 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

4398 *
	$pvTaskIn¸emítMuãxHñdCou¡
( )

4402 if–
pxCuºítTCB
 !
NULL
 )

4404 –
pxCuºítTCB
->
uxMuãxesHñd
 )++;

4407  
pxCuºítTCB
;

4408 
	}
}

4413 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4415 
uöt32_t
 
	$ulTaskNŸifyTake
–
Ba£Ty≥_t
 
xCÀ¨Cou¡OnExô
, 
TickTy≥_t
 
xTicksToWaô
 )

4417 
uöt32_t
 
ulRëu∫
;

4419 
	`èskENTER_CRITICAL
();

4422 if–
pxCuºítTCB
->
ulNŸifõdVÆue
 == 0UL )

4425 
pxCuºítTCB
->
ucNŸifySèã
 = 
èskWAITING_NOTIFICATION
;

4427 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

4429 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
pdTRUE
 );

4430 
	`åa˚TASK_NOTIFY_TAKE_BLOCK
();

4436 
	`p‹tYIELD_WITHIN_API
();

4440 
	`mtCOVERAGE_TEST_MARKER
();

4445 
	`mtCOVERAGE_TEST_MARKER
();

4448 
	`èskEXIT_CRITICAL
();

4450 
	`èskENTER_CRITICAL
();

4452 
	`åa˚TASK_NOTIFY_TAKE
();

4453 
ulRëu∫
 = 
pxCuºítTCB
->
ulNŸifõdVÆue
;

4455 if–
ulRëu∫
 != 0UL )

4457 if–
xCÀ¨Cou¡OnExô
 !
pdFALSE
 )

4459 
pxCuºítTCB
->
ulNŸifõdVÆue
 = 0UL;

4463 
pxCuºítTCB
->
ulNŸifõdVÆue
 = 
ulRëu∫
 - ( 
uöt32_t
 ) 1;

4468 
	`mtCOVERAGE_TEST_MARKER
();

4471 
pxCuºítTCB
->
ucNŸifySèã
 = 
èskNOT_WAITING_NOTIFICATION
;

4473 
	`èskEXIT_CRITICAL
();

4475  
ulRëu∫
;

4476 
	}
}

4481 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4483 
Ba£Ty≥_t
 
	$xTaskNŸifyWaô
–
uöt32_t
 
ulBôsToCÀ¨OnE¡ry
, uöt32_à
ulBôsToCÀ¨OnExô
, uöt32_à*
pulNŸifiˇti⁄VÆue
, 
TickTy≥_t
 
xTicksToWaô
 )

4485 
Ba£Ty≥_t
 
xRëu∫
;

4487 
	`èskENTER_CRITICAL
();

4490 if–
pxCuºítTCB
->
ucNŸifySèã
 !
èskNOTIFICATION_RECEIVED
 )

4495 
pxCuºítTCB
->
ulNŸifõdVÆue
 &~
ulBôsToCÀ¨OnE¡ry
;

4498 
pxCuºítTCB
->
ucNŸifySèã
 = 
èskWAITING_NOTIFICATION
;

4500 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

4502 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
pdTRUE
 );

4503 
	`åa˚TASK_NOTIFY_WAIT_BLOCK
();

4509 
	`p‹tYIELD_WITHIN_API
();

4513 
	`mtCOVERAGE_TEST_MARKER
();

4518 
	`mtCOVERAGE_TEST_MARKER
();

4521 
	`èskEXIT_CRITICAL
();

4523 
	`èskENTER_CRITICAL
();

4525 
	`åa˚TASK_NOTIFY_WAIT
();

4527 if–
pulNŸifiˇti⁄VÆue
 !
NULL
 )

4531 *
pulNŸifiˇti⁄VÆue
 = 
pxCuºítTCB
->
ulNŸifõdVÆue
;

4538 if–
pxCuºítTCB
->
ucNŸifySèã
 !
èskNOTIFICATION_RECEIVED
 )

4541 
xRëu∫
 = 
pdFALSE
;

4547 
pxCuºítTCB
->
ulNŸifõdVÆue
 &~
ulBôsToCÀ¨OnExô
;

4548 
xRëu∫
 = 
pdTRUE
;

4551 
pxCuºítTCB
->
ucNŸifySèã
 = 
èskNOT_WAITING_NOTIFICATION
;

4553 
	`èskEXIT_CRITICAL
();

4555  
xRëu∫
;

4556 
	}
}

4561 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4563 
Ba£Ty≥_t
 
	$xTaskGíîicNŸify
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
 )

4565 
TCB_t
 * 
pxTCB
;

4566 
Ba£Ty≥_t
 
xRëu∫
 = 
pdPASS
;

4567 
uöt8_t
 
ucOrigöÆNŸifySèã
;

4569 
	`c⁄figASSERT
–
xTaskToNŸify
 );

4570 
pxTCB
 = ( 
TCB_t
 * ) 
xTaskToNŸify
;

4572 
	`èskENTER_CRITICAL
();

4574 if–
pulPªviousNŸifiˇti⁄VÆue
 !
NULL
 )

4576 *
pulPªviousNŸifiˇti⁄VÆue
 = 
pxTCB
->
ulNŸifõdVÆue
;

4579 
ucOrigöÆNŸifySèã
 = 
pxTCB
->
ucNŸifySèã
;

4581 
pxTCB
->
ucNŸifySèã
 = 
èskNOTIFICATION_RECEIVED
;

4583  
eA˘i⁄
 )

4585 
eSëBôs
 :

4586 
pxTCB
->
ulNŸifõdVÆue
 |
ulVÆue
;

4589 
eIn¸emít
 :

4590 –
pxTCB
->
ulNŸifõdVÆue
 )++;

4593 
eSëVÆueWôhOvîwrôe
 :

4594 
pxTCB
->
ulNŸifõdVÆue
 = 
ulVÆue
;

4597 
eSëVÆueWôhoutOvîwrôe
 :

4598 if–
ucOrigöÆNŸifySèã
 !
èskNOTIFICATION_RECEIVED
 )

4600 
pxTCB
->
ulNŸifõdVÆue
 = 
ulVÆue
;

4605 
xRëu∫
 = 
pdFAIL
;

4609 
eNoA˘i⁄
:

4615 
	`åa˚TASK_NOTIFY
();

4619 if–
ucOrigöÆNŸifySèã
 =
èskWAITING_NOTIFICATION
 )

4621 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

4622 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

4625 
	`c⁄figASSERT
–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 );

4627 #if–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

4639 
	`¥vRe£tNextTaskUnblockTime
();

4643 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

4647 
	`èskYIELD_IF_USING_PREEMPTION
();

4651 
	`mtCOVERAGE_TEST_MARKER
();

4656 
	`mtCOVERAGE_TEST_MARKER
();

4659 
	`èskEXIT_CRITICAL
();

4661  
xRëu∫
;

4662 
	}
}

4667 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4669 
Ba£Ty≥_t
 
	$xTaskGíîicNŸifyFromISR
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
 )

4671 
TCB_t
 * 
pxTCB
;

4672 
uöt8_t
 
ucOrigöÆNŸifySèã
;

4673 
Ba£Ty≥_t
 
xRëu∫
 = 
pdPASS
;

4674 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

4676 
	`c⁄figASSERT
–
xTaskToNŸify
 );

4694 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

4696 
pxTCB
 = ( 
TCB_t
 * ) 
xTaskToNŸify
;

4698 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

4700 if–
pulPªviousNŸifiˇti⁄VÆue
 !
NULL
 )

4702 *
pulPªviousNŸifiˇti⁄VÆue
 = 
pxTCB
->
ulNŸifõdVÆue
;

4705 
ucOrigöÆNŸifySèã
 = 
pxTCB
->
ucNŸifySèã
;

4706 
pxTCB
->
ucNŸifySèã
 = 
èskNOTIFICATION_RECEIVED
;

4708  
eA˘i⁄
 )

4710 
eSëBôs
 :

4711 
pxTCB
->
ulNŸifõdVÆue
 |
ulVÆue
;

4714 
eIn¸emít
 :

4715 –
pxTCB
->
ulNŸifõdVÆue
 )++;

4718 
eSëVÆueWôhOvîwrôe
 :

4719 
pxTCB
->
ulNŸifõdVÆue
 = 
ulVÆue
;

4722 
eSëVÆueWôhoutOvîwrôe
 :

4723 if–
ucOrigöÆNŸifySèã
 !
èskNOTIFICATION_RECEIVED
 )

4725 
pxTCB
->
ulNŸifõdVÆue
 = 
ulVÆue
;

4730 
xRëu∫
 = 
pdFAIL
;

4734 
eNoA˘i⁄
 :

4740 
	`åa˚TASK_NOTIFY_FROM_ISR
();

4744 if–
ucOrigöÆNŸifySèã
 =
èskWAITING_NOTIFICATION
 )

4747 
	`c⁄figASSERT
–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 );

4749 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

4751 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

4752 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

4758 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxTCB
->
xEvítLi°Iãm
 ) );

4761 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

4765 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

4767 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

4774 
xYõldPídög
 = 
pdTRUE
;

4779 
	`mtCOVERAGE_TEST_MARKER
();

4783 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

4785  
xRëu∫
;

4786 
	}
}

4791 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4793 
	$vTaskNŸifyGiveFromISR
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
 )

4795 
TCB_t
 * 
pxTCB
;

4796 
uöt8_t
 
ucOrigöÆNŸifySèã
;

4797 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

4799 
	`c⁄figASSERT
–
xTaskToNŸify
 );

4817 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

4819 
pxTCB
 = ( 
TCB_t
 * ) 
xTaskToNŸify
;

4821 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

4823 
ucOrigöÆNŸifySèã
 = 
pxTCB
->
ucNŸifySèã
;

4824 
pxTCB
->
ucNŸifySèã
 = 
èskNOTIFICATION_RECEIVED
;

4828 –
pxTCB
->
ulNŸifõdVÆue
 )++;

4830 
	`åa˚TASK_NOTIFY_GIVE_FROM_ISR
();

4834 if–
ucOrigöÆNŸifySèã
 =
èskWAITING_NOTIFICATION
 )

4837 
	`c⁄figASSERT
–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 );

4839 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

4841 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

4842 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

4848 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxTCB
->
xEvítLi°Iãm
 ) );

4851 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

4855 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

4857 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

4864 
xYõldPídög
 = 
pdTRUE
;

4869 
	`mtCOVERAGE_TEST_MARKER
();

4873 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

4874 
	}
}

4880 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4882 
Ba£Ty≥_t
 
	$xTaskNŸifySèãCÀ¨
–
TaskH™dÀ_t
 
xTask
 )

4884 
TCB_t
 *
pxTCB
;

4885 
Ba£Ty≥_t
 
xRëu∫
;

4889 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

4891 
	`èskENTER_CRITICAL
();

4893 if–
pxTCB
->
ucNŸifySèã
 =
èskNOTIFICATION_RECEIVED
 )

4895 
pxTCB
->
ucNŸifySèã
 = 
èskNOT_WAITING_NOTIFICATION
;

4896 
xRëu∫
 = 
pdPASS
;

4900 
xRëu∫
 = 
pdFAIL
;

4903 
	`èskEXIT_CRITICAL
();

4905  
xRëu∫
;

4906 
	}
}

4912 
	$¥vAddCuºítTaskToDñayedLi°
–
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xC™BlockIndeföôñy
 )

4914 
TickTy≥_t
 
xTimeToWake
;

4915 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

4917 #if–
INCLUDE_xTaskAb‹tDñay
 == 1 )

4922 
pxCuºítTCB
->
ucDñayAb‹ãd
 = 
pdFALSE
;

4928 if–
	`uxLi°Remove
–&–
pxCuºítTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

4932 
	`p‹tRESET_READY_PRIORITY
–
pxCuºítTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

4936 
	`mtCOVERAGE_TEST_MARKER
();

4939 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

4941 if––
xTicksToWaô
 =
p‹tMAX_DELAY
 ) && ( 
xC™BlockIndeföôñy
 !
pdFALSE
 ) )

4946 
	`vLi°In£πEnd
–&
xSu•ídedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

4953 
xTimeToWake
 = 
xC⁄°TickCou¡
 + 
xTicksToWaô
;

4956 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xSèãLi°Iãm
 ), 
xTimeToWake
 );

4958 if–
xTimeToWake
 < 
xC⁄°TickCou¡
 )

4962 
	`vLi°In£π
–
pxOvîÊowDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

4968 
	`vLi°In£π
–
pxDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

4973 if–
xTimeToWake
 < 
xNextTaskUnblockTime
 )

4975 
xNextTaskUnblockTime
 = 
xTimeToWake
;

4979 
	`mtCOVERAGE_TEST_MARKER
();

4989 
xTimeToWake
 = 
xC⁄°TickCou¡
 + 
xTicksToWaô
;

4992 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xSèãLi°Iãm
 ), 
xTimeToWake
 );

4994 if–
xTimeToWake
 < 
xC⁄°TickCou¡
 )

4997 
	`vLi°In£π
–
pxOvîÊowDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

5002 
	`vLi°In£π
–
pxDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

5007 if–
xTimeToWake
 < 
xNextTaskUnblockTime
 )

5009 
xNextTaskUnblockTime
 = 
xTimeToWake
;

5013 
	`mtCOVERAGE_TEST_MARKER
();

5018 –Ë
xC™BlockIndeföôñy
;

5021 
	}
}

5027 #ifde‡
FREERTOS_MODULE_TEST


5028 
	~"èsks_ã°_ac˚ss_fun˘i⁄s.h
"

5032 #if–
c⁄figINCLUDE_FREERTOS_TASK_C_ADDITIONS_H
 == 1 )

5034 
	~"‰ìπos_èsks_c_addôi⁄s.h
"

5036 
	$‰ìπos_èsks_c_addôi⁄s_öô
( )

5038 #ifde‡
FREERTOS_TASKS_C_ADDITIONS_INIT


5039 
	`FREERTOS_TASKS_C_ADDITIONS_INIT
();

5041 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\timers.c

29 
	~<°dlib.h
>

34 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

36 
	~"FªeRTOS.h
"

37 
	~"èsk.h
"

38 
	~"queue.h
"

39 
	~"timîs.h
"

41 #i‡–
INCLUDE_xTimîPídFun˘i⁄CÆl
 =1 ) && ( 
c⁄figUSE_TIMERS
 == 0 )

42 #îr‹ 
c⁄figUSE_TIMERS
 
mu°
 
be
 
£t
 
to
 1Åÿ
make
 
the
 
xTimîPídFun˘i⁄CÆl
(Ë
fun˘i⁄
 
avaûabÀ
.

49 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


56 #i‡–
c⁄figUSE_TIMERS
 == 1 )

59 
	#tmrNO_DELAY
 ( 
TickTy≥_t
 ) 0U

	)

63 #i‚de‡
c⁄figTIMER_SERVICE_TASK_NAME


64 
	#c⁄figTIMER_SERVICE_TASK_NAME
 "Tm∏Svc"

	)

68 
	stmrTimîC⁄åﬁ


70 c⁄° *
	mpcTimîName
;

71 
Li°Iãm_t
 
	mxTimîLi°Iãm
;

72 
TickTy≥_t
 
	mxTimîPîiodInTicks
;

73 
UBa£Ty≥_t
 
	muxAutoRñﬂd
;

74 *
	mpvTimîID
;

75 
TimîCÆlbackFun˘i⁄_t
 
	mpxCÆlbackFun˘i⁄
;

76 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

77 
UBa£Ty≥_t
 
	muxTimîNumbî
;

80 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

81 
uöt8_t
 
	mucSètiˇŒyAŒoˇãd
;

83 } 
	txTIMER
;

87 
xTIMER
 
	tTimî_t
;

94 
	stmrTimîP¨amëîs


96 
TickTy≥_t
 
	mxMesßgeVÆue
;

97 
Timî_t
 * 
	mpxTimî
;

98 } 
	tTimîP¨amëî_t
;

101 
	stmrCÆlbackP¨amëîs


103 
PídedFun˘i⁄_t
 
	mpxCÆlbackFun˘i⁄
;

104 *
	mpvP¨amëî1
;

105 
uöt32_t
 
	mulP¨amëî2
;

106 } 
	tCÆlbackP¨amëîs_t
;

110 
	stmrTimîQueueMesßge


112 
Ba£Ty≥_t
 
	mxMesßgeID
;

115 
TimîP¨amëî_t
 
	mxTimîP¨amëîs
;

119 #i‡–
INCLUDE_xTimîPídFun˘i⁄CÆl
 == 1 )

120 
CÆlbackP¨amëîs_t
 
	mxCÆlbackP¨amëîs
;

122 } 
	mu
;

123 } 
	tD´m⁄TaskMesßge_t
;

131 
PRIVILEGED_DATA
 
Li°_t
 
	gxA˘iveTimîLi°1
;

132 
PRIVILEGED_DATA
 
Li°_t
 
	gxA˘iveTimîLi°2
;

133 
PRIVILEGED_DATA
 
Li°_t
 *
	gpxCuºítTimîLi°
;

134 
PRIVILEGED_DATA
 
Li°_t
 *
	gpxOvîÊowTimîLi°
;

137 
PRIVILEGED_DATA
 
QueueH™dÀ_t
 
	gxTimîQueue
 = 
NULL
;

138 
PRIVILEGED_DATA
 
TaskH™dÀ_t
 
	gxTimîTaskH™dÀ
 = 
NULL
;

144 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

150 
vAµliˇti⁄GëTimîTaskMem‹y
–
SèticTask_t
 **
µxTimîTaskTCBBuf„r
, 
SèckTy≥_t
 **
µxTimîTaskSèckBuf„r
, 
uöt32_t
 *
pulTimîTaskSèckSize
 );

158 
	$¥vCheckF‹VÆidLi°AndQueue
–Ë
PRIVILEGED_FUNCTION
;

165 
	$¥vTimîTask
–*
pvP¨amëîs
 ) 
PRIVILEGED_FUNCTION
;

171 
	$¥vPro˚ssRe˚ivedComm™ds
–Ë
PRIVILEGED_FUNCTION
;

177 
Ba£Ty≥_t
 
	$¥vIn£πTimîInA˘iveLi°
–
Timî_t
 * c⁄° 
pxTimî
, c⁄° 
TickTy≥_t
 
xNextExpúyTime
, c⁄° TickTy≥_à
xTimeNow
, c⁄° TickTy≥_à
xComm™dTime
 ) 
PRIVILEGED_FUNCTION
;

183 
	$¥vPro˚ssExpúedTimî
–c⁄° 
TickTy≥_t
 
xNextExpúeTime
, c⁄° TickTy≥_à
xTimeNow
 ) 
PRIVILEGED_FUNCTION
;

189 
	$¥vSwôchTimîLi°s
–Ë
PRIVILEGED_FUNCTION
;

195 
TickTy≥_t
 
	$¥vSam∂eTimeNow
–
Ba£Ty≥_t
 * c⁄° 
pxTimîLi°sWîeSwôched
 ) 
PRIVILEGED_FUNCTION
;

203 
TickTy≥_t
 
	$¥vGëNextExpúeTime
–
Ba£Ty≥_t
 * c⁄° 
pxLi°WasEm±y
 ) 
PRIVILEGED_FUNCTION
;

209 
	$¥vPro˚ssTimîOrBlockTask
–c⁄° 
TickTy≥_t
 
xNextExpúeTime
, 
Ba£Ty≥_t
 
xLi°WasEm±y
 ) 
PRIVILEGED_FUNCTION
;

215 
	$¥vInôüli£NewTimî
–c⁄° * c⁄° 
pcTimîName
,

216 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

217 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

218 * c⁄° 
pvTimîID
,

219 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
,

220 
Timî_t
 *
pxNewTimî
 ) 
PRIVILEGED_FUNCTION
;

223 
Ba£Ty≥_t
 
	$xTimîCª©eTimîTask
( )

225 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFAIL
;

231 
	`¥vCheckF‹VÆidLi°AndQueue
();

233 if–
xTimîQueue
 !
NULL
 )

235 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

237 
SèticTask_t
 *
pxTimîTaskTCBBuf„r
 = 
NULL
;

238 
SèckTy≥_t
 *
pxTimîTaskSèckBuf„r
 = 
NULL
;

239 
uöt32_t
 
ulTimîTaskSèckSize
;

241 
	`vAµliˇti⁄GëTimîTaskMem‹y
–&
pxTimîTaskTCBBuf„r
, &
pxTimîTaskSèckBuf„r
, &
ulTimîTaskSèckSize
 );

242 
xTimîTaskH™dÀ
 = 
	`xTaskCª©eSètic
–
¥vTimîTask
,

243 
c⁄figTIMER_SERVICE_TASK_NAME
,

244 
ulTimîTaskSèckSize
,

245 
NULL
,

246 ––
UBa£Ty≥_t
 ) 
c⁄figTIMER_TASK_PRIORITY
 ) | 
p‹tPRIVILEGE_BIT
,

247 
pxTimîTaskSèckBuf„r
,

248 
pxTimîTaskTCBBuf„r
 );

250 if–
xTimîTaskH™dÀ
 !
NULL
 )

252 
xRëu∫
 = 
pdPASS
;

257 
xRëu∫
 = 
	`xTaskCª©e
–
¥vTimîTask
,

258 
c⁄figTIMER_SERVICE_TASK_NAME
,

259 
c⁄figTIMER_TASK_STACK_DEPTH
,

260 
NULL
,

261 ––
UBa£Ty≥_t
 ) 
c⁄figTIMER_TASK_PRIORITY
 ) | 
p‹tPRIVILEGE_BIT
,

262 &
xTimîTaskH™dÀ
 );

268 
	`mtCOVERAGE_TEST_MARKER
();

271 
	`c⁄figASSERT
–
xRëu∫
 );

272  
xRëu∫
;

273 
	}
}

276 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

278 
TimîH™dÀ_t
 
	$xTimîCª©e
–c⁄° * c⁄° 
pcTimîName
,

279 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

280 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

281 * c⁄° 
pvTimîID
,

282 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
 )

284 
Timî_t
 *
pxNewTimî
;

286 
pxNewTimî
 = ( 
Timî_t
 * ) 
	`pvP‹tMÆloc
( ( Timer_t ) );

288 if–
pxNewTimî
 !
NULL
 )

290 
	`¥vInôüli£NewTimî
–
pcTimîName
, 
xTimîPîiodInTicks
, 
uxAutoRñﬂd
, 
pvTimîID
, 
pxCÆlbackFun˘i⁄
, 
pxNewTimî
 );

292 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

297 
pxNewTimî
->
ucSètiˇŒyAŒoˇãd
 = 
pdFALSE
;

302  
pxNewTimî
;

303 
	}
}

308 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

310 
TimîH™dÀ_t
 
	$xTimîCª©eSètic
–c⁄° * c⁄° 
pcTimîName
,

311 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

312 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

313 * c⁄° 
pvTimîID
,

314 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
,

315 
SèticTimî_t
 *
pxTimîBuf„r
 )

317 
Timî_t
 *
pxNewTimî
;

319 #if–
c⁄figASSERT_DEFINED
 == 1 )

324 vﬁ©ûê
size_t
 
xSize
 = –
SèticTimî_t
 );

325 
	`c⁄figASSERT
–
xSize
 =–
Timî_t
 ) );

330 
	`c⁄figASSERT
–
pxTimîBuf„r
 );

331 
pxNewTimî
 = ( 
Timî_t
 * ) 
pxTimîBuf„r
;

333 if–
pxNewTimî
 !
NULL
 )

335 
	`¥vInôüli£NewTimî
–
pcTimîName
, 
xTimîPîiodInTicks
, 
uxAutoRñﬂd
, 
pvTimîID
, 
pxCÆlbackFun˘i⁄
, 
pxNewTimî
 );

337 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

341 
pxNewTimî
->
ucSètiˇŒyAŒoˇãd
 = 
pdTRUE
;

346  
pxNewTimî
;

347 
	}
}

352 
	$¥vInôüli£NewTimî
–c⁄° * c⁄° 
pcTimîName
,

353 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

354 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

355 * c⁄° 
pvTimîID
,

356 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
,

357 
Timî_t
 *
pxNewTimî
 )

360 
	`c⁄figASSERT
––
xTimîPîiodInTicks
 > 0 ) );

362 if–
pxNewTimî
 !
NULL
 )

366 
	`¥vCheckF‹VÆidLi°AndQueue
();

370 
pxNewTimî
->
pcTimîName
 =ÖcTimerName;

371 
pxNewTimî
->
xTimîPîiodInTicks
 = xTimerPeriodInTicks;

372 
pxNewTimî
->
uxAutoRñﬂd
 = uxAutoReload;

373 
pxNewTimî
->
pvTimîID
 =ÖvTimerID;

374 
pxNewTimî
->
pxCÆlbackFun˘i⁄
 =ÖxCallbackFunction;

375 
	`vLi°Inôüli£Iãm
–&–
pxNewTimî
->
xTimîLi°Iãm
 ) );

376 
	`åa˚TIMER_CREATE
–
pxNewTimî
 );

378 
	}
}

381 
Ba£Ty≥_t
 
	$xTimîGíîicComm™d
–
TimîH™dÀ_t
 
xTimî
, c⁄° 
Ba£Ty≥_t
 
xComm™dID
, c⁄° 
TickTy≥_t
 
xO±i⁄ÆVÆue
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° TickTy≥_à
xTicksToWaô
 )

383 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFAIL
;

384 
D´m⁄TaskMesßge_t
 
xMesßge
;

386 
	`c⁄figASSERT
–
xTimî
 );

390 if–
xTimîQueue
 !
NULL
 )

393 
xMesßge
.
xMesßgeID
 = 
xComm™dID
;

394 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 = 
xO±i⁄ÆVÆue
;

395 
xMesßge
.
u
.
xTimîP¨amëîs
.
pxTimî
 = ( 
Timî_t
 * ) 
xTimî
;

397 if–
xComm™dID
 < 
tmrFIRST_FROM_ISR_COMMAND
 )

399 if–
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_RUNNING
 )

401 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
xTicksToWaô
 );

405 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
tmrNO_DELAY
 );

410 
xRëu∫
 = 
	`xQueueSídToBackFromISR
–
xTimîQueue
, &
xMesßge
, 
pxHighîPri‹ôyTaskWokí
 );

413 
	`åa˚TIMER_COMMAND_SEND
–
xTimî
, 
xComm™dID
, 
xO±i⁄ÆVÆue
, 
xRëu∫
 );

417 
	`mtCOVERAGE_TEST_MARKER
();

420  
xRëu∫
;

421 
	}
}

424 
TaskH™dÀ_t
 
	$xTimîGëTimîD´m⁄TaskH™dÀ
( )

428 
	`c⁄figASSERT
––
xTimîTaskH™dÀ
 !
NULL
 ) );

429  
xTimîTaskH™dÀ
;

430 
	}
}

433 
TickTy≥_t
 
	$xTimîGëPîiod
–
TimîH™dÀ_t
 
xTimî
 )

435 
Timî_t
 *
pxTimî
 = ( Timî_à* ) 
xTimî
;

437 
	`c⁄figASSERT
–
xTimî
 );

438  
pxTimî
->
xTimîPîiodInTicks
;

439 
	}
}

442 
TickTy≥_t
 
	$xTimîGëExpúyTime
–
TimîH™dÀ_t
 
xTimî
 )

444 
Timî_t
 * 
pxTimî
 = ( Timî_à* ) 
xTimî
;

445 
TickTy≥_t
 
xRëu∫
;

447 
	`c⁄figASSERT
–
xTimî
 );

448 
xRëu∫
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

449  
xRëu∫
;

450 
	}
}

453 c⁄° * 
	$pcTimîGëName
–
TimîH™dÀ_t
 
xTimî
 )

455 
Timî_t
 *
pxTimî
 = ( Timî_à* ) 
xTimî
;

457 
	`c⁄figASSERT
–
xTimî
 );

458  
pxTimî
->
pcTimîName
;

459 
	}
}

462 
	$¥vPro˚ssExpúedTimî
–c⁄° 
TickTy≥_t
 
xNextExpúeTime
, c⁄° TickTy≥_à
xTimeNow
 )

464 
Ba£Ty≥_t
 
xResu…
;

465 
Timî_t
 * c⁄° 
pxTimî
 = ( Timî_à* ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

469 –Ë
	`uxLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

470 
	`åa˚TIMER_EXPIRED
–
pxTimî
 );

474 if–
pxTimî
->
uxAutoRñﬂd
 =–
UBa£Ty≥_t
 ) 
pdTRUE
 )

479 if–
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, ( 
xNextExpúeTime
 +ÖxTimî->
xTimîPîiodInTicks
 ), 
xTimeNow
, xNextExpúeTimêË!
pdFALSE
 )

483 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START_DONT_TRACE
, 
xNextExpúeTime
, 
NULL
, 
tmrNO_DELAY
 );

484 
	`c⁄figASSERT
–
xResu…
 );

485 –Ë
xResu…
;

489 
	`mtCOVERAGE_TEST_MARKER
();

494 
	`mtCOVERAGE_TEST_MARKER
();

498 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
TimîH™dÀ_t
 )ÖxTimer );

499 
	}
}

502 
	$¥vTimîTask
–*
pvP¨amëîs
 )

504 
TickTy≥_t
 
xNextExpúeTime
;

505 
Ba£Ty≥_t
 
xLi°WasEm±y
;

508 –Ë
pvP¨amëîs
;

510 #if–
c⁄figUSE_DAEMON_TASK_STARTUP_HOOK
 == 1 )

512 
	`vAµliˇti⁄D´m⁄TaskSèπupHook
( );

518 
	`vAµliˇti⁄D´m⁄TaskSèπupHook
();

526 
xNextExpúeTime
 = 
	`¥vGëNextExpúeTime
–&
xLi°WasEm±y
 );

530 
	`¥vPro˚ssTimîOrBlockTask
–
xNextExpúeTime
, 
xLi°WasEm±y
 );

533 
	`¥vPro˚ssRe˚ivedComm™ds
();

535 
	}
}

538 
	$¥vPro˚ssTimîOrBlockTask
–c⁄° 
TickTy≥_t
 
xNextExpúeTime
, 
Ba£Ty≥_t
 
xLi°WasEm±y
 )

540 
TickTy≥_t
 
xTimeNow
;

541 
Ba£Ty≥_t
 
xTimîLi°sWîeSwôched
;

543 
	`vTaskSu•ídAŒ
();

550 
xTimeNow
 = 
	`¥vSam∂eTimeNow
–&
xTimîLi°sWîeSwôched
 );

551 if–
xTimîLi°sWîeSwôched
 =
pdFALSE
 )

554 if––
xLi°WasEm±y
 =
pdFALSE
 ) && ( 
xNextExpúeTime
 <
xTimeNow
 ) )

556 –Ë
	`xTaskResumeAŒ
();

557 
	`¥vPro˚ssExpúedTimî
–
xNextExpúeTime
, 
xTimeNow
 );

567 if–
xLi°WasEm±y
 !
pdFALSE
 )

571 
xLi°WasEm±y
 = 
	`li°LIST_IS_EMPTY
–
pxOvîÊowTimîLi°
 );

574 
	`vQueueWaôF‹MesßgeRe°ri˘ed
–
xTimîQueue
, ( 
xNextExpúeTime
 - 
xTimeNow
 ), 
xLi°WasEm±y
 );

576 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

582 
	`p‹tYIELD_WITHIN_API
();

586 
	`mtCOVERAGE_TEST_MARKER
();

592 –Ë
	`xTaskResumeAŒ
();

595 
	}
}

598 
TickTy≥_t
 
	$¥vGëNextExpúeTime
–
Ba£Ty≥_t
 * c⁄° 
pxLi°WasEm±y
 )

600 
TickTy≥_t
 
xNextExpúeTime
;

609 *
pxLi°WasEm±y
 = 
	`li°LIST_IS_EMPTY
–
pxCuºítTimîLi°
 );

610 if–*
pxLi°WasEm±y
 =
pdFALSE
 )

612 
xNextExpúeTime
 = 
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

617 
xNextExpúeTime
 = ( 
TickTy≥_t
 ) 0U;

620  
xNextExpúeTime
;

621 
	}
}

624 
TickTy≥_t
 
	$¥vSam∂eTimeNow
–
Ba£Ty≥_t
 * c⁄° 
pxTimîLi°sWîeSwôched
 )

626 
TickTy≥_t
 
xTimeNow
;

627 
PRIVILEGED_DATA
 
TickTy≥_t
 
xLa°Time
 = ( TickType_t ) 0U;

629 
xTimeNow
 = 
	`xTaskGëTickCou¡
();

631 if–
xTimeNow
 < 
xLa°Time
 )

633 
	`¥vSwôchTimîLi°s
();

634 *
pxTimîLi°sWîeSwôched
 = 
pdTRUE
;

638 *
pxTimîLi°sWîeSwôched
 = 
pdFALSE
;

641 
xLa°Time
 = 
xTimeNow
;

643  
xTimeNow
;

644 
	}
}

647 
Ba£Ty≥_t
 
	$¥vIn£πTimîInA˘iveLi°
–
Timî_t
 * c⁄° 
pxTimî
, c⁄° 
TickTy≥_t
 
xNextExpúyTime
, c⁄° TickTy≥_à
xTimeNow
, c⁄° TickTy≥_à
xComm™dTime
 )

649 
Ba£Ty≥_t
 
xPro˚ssTimîNow
 = 
pdFALSE
;

651 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTimî
->
xTimîLi°Iãm
 ), 
xNextExpúyTime
 );

652 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTimî
->
xTimîLi°Iãm
 ),ÖxTimer );

654 if–
xNextExpúyTime
 <
xTimeNow
 )

658 if–––
TickTy≥_t
 ) ( 
xTimeNow
 - 
xComm™dTime
 ) ) >
pxTimî
->
xTimîPîiodInTicks
 )

662 
xPro˚ssTimîNow
 = 
pdTRUE
;

666 
	`vLi°In£π
–
pxOvîÊowTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

671 if––
xTimeNow
 < 
xComm™dTime
 ) && ( 
xNextExpúyTime
 >= xCommandTime ) )

676 
xPro˚ssTimîNow
 = 
pdTRUE
;

680 
	`vLi°In£π
–
pxCuºítTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

684  
xPro˚ssTimîNow
;

685 
	}
}

688 
	$¥vPro˚ssRe˚ivedComm™ds
( )

690 
D´m⁄TaskMesßge_t
 
xMesßge
;

691 
Timî_t
 *
pxTimî
;

692 
Ba£Ty≥_t
 
xTimîLi°sWîeSwôched
, 
xResu…
;

693 
TickTy≥_t
 
xTimeNow
;

695  
	`xQueueRe˚ive
–
xTimîQueue
, &
xMesßge
, 
tmrNO_DELAY
 ) !
pdFAIL
 )

697 #i‡–
INCLUDE_xTimîPídFun˘i⁄CÆl
 == 1 )

701 if–
xMesßge
.
xMesßgeID
 < ( 
Ba£Ty≥_t
 ) 0 )

703 c⁄° 
CÆlbackP¨amëîs_t
 * c⁄° 
pxCÆlback
 = &–
xMesßge
.
u
.
xCÆlbackP¨amëîs
 );

707 
	`c⁄figASSERT
–
pxCÆlback
 );

710 
pxCÆlback
->
	`pxCÆlbackFun˘i⁄
–pxCÆlback->
pvP¨amëî1
,ÖxCÆlback->
ulP¨amëî2
 );

714 
	`mtCOVERAGE_TEST_MARKER
();

721 if–
xMesßge
.
xMesßgeID
 >–
Ba£Ty≥_t
 ) 0 )

725 
pxTimî
 = 
xMesßge
.
u
.
xTimîP¨amëîs
.pxTimer;

727 if–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTimî
->
xTimîLi°Iãm
 ) ) =
pdFALSE
 )

730 –Ë
	`uxLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

734 
	`mtCOVERAGE_TEST_MARKER
();

737 
	`åa˚TIMER_COMMAND_RECEIVED
–
pxTimî
, 
xMesßge
.
xMesßgeID
, xMesßge.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 );

745 
xTimeNow
 = 
	`¥vSam∂eTimeNow
–&
xTimîLi°sWîeSwôched
 );

747  
xMesßge
.
xMesßgeID
 )

749 
tmrCOMMAND_START
 :

750 
tmrCOMMAND_START_FROM_ISR
 :

751 
tmrCOMMAND_RESET
 :

752 
tmrCOMMAND_RESET_FROM_ISR
 :

753 
tmrCOMMAND_START_DONT_TRACE
 :

755 if–
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 +ÖxTimî->
xTimîPîiodInTicks
, 
xTimeNow
, xMesßge.u.xTimîP¨amëîs.xMesßgeVÆuêË!
pdFALSE
 )

759 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
TimîH™dÀ_t
 )ÖxTimer );

760 
	`åa˚TIMER_EXPIRED
–
pxTimî
 );

762 if–
pxTimî
->
uxAutoRñﬂd
 =–
UBa£Ty≥_t
 ) 
pdTRUE
 )

764 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START_DONT_TRACE
, 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 +ÖxTimî->
xTimîPîiodInTicks
, 
NULL
, 
tmrNO_DELAY
 );

765 
	`c⁄figASSERT
–
xResu…
 );

766 –Ë
xResu…
;

770 
	`mtCOVERAGE_TEST_MARKER
();

775 
	`mtCOVERAGE_TEST_MARKER
();

779 
tmrCOMMAND_STOP
 :

780 
tmrCOMMAND_STOP_FROM_ISR
 :

785 
tmrCOMMAND_CHANGE_PERIOD
 :

786 
tmrCOMMAND_CHANGE_PERIOD_FROM_ISR
 :

787 
pxTimî
->
xTimîPîiodInTicks
 = 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
;

788 
	`c⁄figASSERT
––
pxTimî
->
xTimîPîiodInTicks
 > 0 ) );

796 –Ë
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, ( 
xTimeNow
 +ÖxTimî->
xTimîPîiodInTicks
 ), xTimeNow, xTimeNow );

799 
tmrCOMMAND_DELETE
 :

803 #if––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 0 ) )

807 
	`vP‹tFªe
–
pxTimî
 );

809 #ñif––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

814 if–
pxTimî
->
ucSètiˇŒyAŒoˇãd
 =–
uöt8_t
 ) 
pdFALSE
 )

816 
	`vP‹tFªe
–
pxTimî
 );

820 
	`mtCOVERAGE_TEST_MARKER
();

832 
	}
}

835 
	$¥vSwôchTimîLi°s
( )

837 
TickTy≥_t
 
xNextExpúeTime
, 
xRñﬂdTime
;

838 
Li°_t
 *
pxTemp
;

839 
Timî_t
 *
pxTimî
;

840 
Ba£Ty≥_t
 
xResu…
;

846  
	`li°LIST_IS_EMPTY
–
pxCuºítTimîLi°
 ) =
pdFALSE
 )

848 
xNextExpúeTime
 = 
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

851 
pxTimî
 = ( 
Timî_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

852 –Ë
	`uxLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

853 
	`åa˚TIMER_EXPIRED
–
pxTimî
 );

858 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
TimîH™dÀ_t
 )ÖxTimer );

860 if–
pxTimî
->
uxAutoRñﬂd
 =–
UBa£Ty≥_t
 ) 
pdTRUE
 )

868 
xRñﬂdTime
 = ( 
xNextExpúeTime
 + 
pxTimî
->
xTimîPîiodInTicks
 );

869 if–
xRñﬂdTime
 > 
xNextExpúeTime
 )

871 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTimî
->
xTimîLi°Iãm
 ), 
xRñﬂdTime
 );

872 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTimî
->
xTimîLi°Iãm
 ),ÖxTimer );

873 
	`vLi°In£π
–
pxCuºítTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

877 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START_DONT_TRACE
, 
xNextExpúeTime
, 
NULL
, 
tmrNO_DELAY
 );

878 
	`c⁄figASSERT
–
xResu…
 );

879 –Ë
xResu…
;

884 
	`mtCOVERAGE_TEST_MARKER
();

888 
pxTemp
 = 
pxCuºítTimîLi°
;

889 
pxCuºítTimîLi°
 = 
pxOvîÊowTimîLi°
;

890 
pxOvîÊowTimîLi°
 = 
pxTemp
;

891 
	}
}

894 
	$¥vCheckF‹VÆidLi°AndQueue
( )

899 
	`èskENTER_CRITICAL
();

901 if–
xTimîQueue
 =
NULL
 )

903 
	`vLi°Inôüli£
–&
xA˘iveTimîLi°1
 );

904 
	`vLi°Inôüli£
–&
xA˘iveTimîLi°2
 );

905 
pxCuºítTimîLi°
 = &
xA˘iveTimîLi°1
;

906 
pxOvîÊowTimîLi°
 = &
xA˘iveTimîLi°2
;

908 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

912 
SèticQueue_t
 
xSèticTimîQueue
;

913 
uöt8_t
 
ucSèticTimîQueueSt‹age
[ ( 
size_t
 ) 
c⁄figTIMER_QUEUE_LENGTH
 * –
D´m⁄TaskMesßge_t
 ) ];

915 
xTimîQueue
 = 
	`xQueueCª©eSètic
––
UBa£Ty≥_t
 ) 
c⁄figTIMER_QUEUE_LENGTH
, ( UBa£Ty≥_àË–
D´m⁄TaskMesßge_t
 ), &–
ucSèticTimîQueueSt‹age
[ 0 ] ), &
xSèticTimîQueue
 );

919 
xTimîQueue
 = 
	`xQueueCª©e
––
UBa£Ty≥_t
 ) 
c⁄figTIMER_QUEUE_LENGTH
, –
D´m⁄TaskMesßge_t
 ) );

923 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

925 if–
xTimîQueue
 !
NULL
 )

927 
	`vQueueAddToRegi°ry
–
xTimîQueue
, "TmrQ" );

931 
	`mtCOVERAGE_TEST_MARKER
();

938 
	`mtCOVERAGE_TEST_MARKER
();

941 
	`èskEXIT_CRITICAL
();

942 
	}
}

945 
Ba£Ty≥_t
 
	$xTimîIsTimîA˘ive
–
TimîH™dÀ_t
 
xTimî
 )

947 
Ba£Ty≥_t
 
xTimîIsInA˘iveLi°
;

948 
Timî_t
 *
pxTimî
 = ( Timî_à* ) 
xTimî
;

950 
	`c⁄figASSERT
–
xTimî
 );

953 
	`èskENTER_CRITICAL
();

958 
xTimîIsInA˘iveLi°
 = ( 
Ba£Ty≥_t
 ) !–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTimî
->
xTimîLi°Iãm
 ) ) );

960 
	`èskEXIT_CRITICAL
();

962  
xTimîIsInA˘iveLi°
;

963 
	}
}

966 *
	$pvTimîGëTimîID
–c⁄° 
TimîH™dÀ_t
 
xTimî
 )

968 
Timî_t
 * c⁄° 
pxTimî
 = ( Timî_à* ) 
xTimî
;

969 *
pvRëu∫
;

971 
	`c⁄figASSERT
–
xTimî
 );

973 
	`èskENTER_CRITICAL
();

975 
pvRëu∫
 = 
pxTimî
->
pvTimîID
;

977 
	`èskEXIT_CRITICAL
();

979  
pvRëu∫
;

980 
	}
}

983 
	$vTimîSëTimîID
–
TimîH™dÀ_t
 
xTimî
, *
pvNewID
 )

985 
Timî_t
 * c⁄° 
pxTimî
 = ( Timî_à* ) 
xTimî
;

987 
	`c⁄figASSERT
–
xTimî
 );

989 
	`èskENTER_CRITICAL
();

991 
pxTimî
->
pvTimîID
 = 
pvNewID
;

993 
	`èskEXIT_CRITICAL
();

994 
	}
}

997 #if–
INCLUDE_xTimîPídFun˘i⁄CÆl
 == 1 )

999 
Ba£Ty≥_t
 
	$xTimîPídFun˘i⁄CÆlFromISR
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
 )

1001 
D´m⁄TaskMesßge_t
 
xMesßge
;

1002 
Ba£Ty≥_t
 
xRëu∫
;

1006 
xMesßge
.
xMesßgeID
 = 
tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR
;

1007 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
pxCÆlbackFun˘i⁄
 = 
xFun˘i⁄ToPíd
;

1008 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
pvP¨amëî1
 =ÖvParameter1;

1009 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
ulP¨amëî2
 = ulParameter2;

1011 
xRëu∫
 = 
	`xQueueSídFromISR
–
xTimîQueue
, &
xMesßge
, 
pxHighîPri‹ôyTaskWokí
 );

1013 
	`åa˚PEND_FUNC_CALL_FROM_ISR
–
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
xRëu∫
 );

1015  
xRëu∫
;

1016 
	}
}

1021 #if–
INCLUDE_xTimîPídFun˘i⁄CÆl
 == 1 )

1023 
Ba£Ty≥_t
 
	$xTimîPídFun˘i⁄CÆl
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, 
TickTy≥_t
 
xTicksToWaô
 )

1025 
D´m⁄TaskMesßge_t
 
xMesßge
;

1026 
Ba£Ty≥_t
 
xRëu∫
;

1031 
	`c⁄figASSERT
–
xTimîQueue
 );

1035 
xMesßge
.
xMesßgeID
 = 
tmrCOMMAND_EXECUTE_CALLBACK
;

1036 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
pxCÆlbackFun˘i⁄
 = 
xFun˘i⁄ToPíd
;

1037 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
pvP¨amëî1
 =ÖvParameter1;

1038 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
ulP¨amëî2
 = ulParameter2;

1040 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
xTicksToWaô
 );

1042 
	`åa˚PEND_FUNC_CALL
–
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
xRëu∫
 );

1044  
xRëu∫
;

1045 
	}
}

1050 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1052 
UBa£Ty≥_t
 
	$uxTimîGëTimîNumbî
–
TimîH™dÀ_t
 
xTimî
 )

1054  ( ( 
Timî_t
 * ) 
xTimî
 )->
uxTimîNumbî
;

1055 
	}
}

1060 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1062 
	$vTimîSëTimîNumbî
–
TimîH™dÀ_t
 
xTimî
, 
UBa£Ty≥_t
 
uxTimîNumbî
 )

1064 ––
Timî_t
 * ) 
xTimî
 )->
uxTimîNumbî
 = uxTimerNumber;

1065 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\AnalogMeasurementHal\AnalogMeasurementHal.c

1 
	~<°ddef.h
>

3 
	~"f¶_adc.h
"

4 
	~"f¶_˛ock.h
"

5 
	~"f¶_powî.h
"

6 
	~"f¶_dma.h
"

7 
	~"f¶_öputmux.h
"

9 
	~"A«logMósuªmítHÆ.h
"

11 
	#ADC_SAMPLE_RATE
 10000

	)

12 
	#ADC_CHANNEL_0
 0

	)

13 
	#ADC_CHANNEL_1
 2

	)

14 
	#ADC_CHANNEL_2
 4

	)

15 
	#ADC_CHANNEL_3
 5

	)

16 
	#ADC_CHANNEL_4
 9

	)

17 
	#ADC_CHANNEL_5
 10

	)

18 
	#ADC_CHANNEL_6
 11

	)

19 
	#ADC_CHANNEL_7
 5

	)

20 
	#ADC_CHANNEL_8
 9

	)

21 
	#ADC_CHANNEL_9
 7

	)

22 
	#ADC_CHANNEL_10
 3

	)

23 
	#ADC_CHANNEL_11
 0

	)

25 
	#ADC_DMA_CHANNEL
 1U

	)

27 
	#DEMO_ADC_SAMPLE_CHANNEL_NUMBER
 0U

	)

28 
	#DEMO_ADC_IRQ_ID
 
ADC0_SEQA_IRQn


	)

29 
	#DEMO_ADC_IRQ_HANDLER_FUNC
 
ADC0_SEQA_IRQH™dÀr


	)

30 
	#DEMO_DMA_ADC_CHANNEL
 0U

	)

31 
	#DEMO_ADC_BASE
 
ADC0


	)

32 
	#DEMO_ADC_DATA_REG_ADDR
 (
uöt32_t
Ë(&(
ADC0
->
DAT
[
DEMO_ADC_SAMPLE_CHANNEL_NUMBER
]))

	)

34 
	#ADC_CHANNEL
 0

	)

35 
	#DEMO_ADC_IRQ_ID
 
ADC0_SEQA_IRQn


	)

38 
	#ANALOG_INPUT_PIN_0
 9

	)

39 
	#ANALOG_INPUT_PIO_0
 1

	)

40 
	#ANALOG_INPUT_FUN_0
 
IOCON_FUNC3


	)

42 
	#ANALOG_INPUT_PIN_1
 23

	)

43 
	#ANALOG_INPUT_PIO_1
 0

	)

44 
	#ANALOG_INPUT_FUN_1
 
IOCON_FUNC1


	)

46 
	#ANALOG_INPUT_PIN_2
 16

	)

47 
	#ANALOG_INPUT_PIO_2
 0

	)

48 
	#ANALOG_INPUT_FUN_2
 
IOCON_FUNC1


	)

50 
	#ANALOG_INPUT_PIN_3
 15

	)

51 
	#ANALOG_INPUT_PIO_3
 0

	)

52 
	#ANALOG_INPUT_FUN_3
 
IOCON_FUNC2


	)

54 
	#ANALOG_INPUT_PIN_4
 22

	)

55 
	#ANALOG_INPUT_PIO_4
 1

	)

56 
	#ANALOG_INPUT_FUN_4
 
IOCON_FUNC3


	)

58 
	#ANALOG_INPUT_PIN_5
 3

	)

59 
	#ANALOG_INPUT_PIO_5
 1

	)

60 
	#ANALOG_INPUT_FUN_5
 
IOCON_FUNC4


	)

62 
	#ANALOG_INPUT_PIN_6
 14

	)

63 
	#ANALOG_INPUT_PIO_6
 0

	)

64 
	#ANALOG_INPUT_FUN_6
 
IOCON_FUNC2


	)

66 
	#ANALOG_INPUT_PIN_7
 13

	)

67 
	#ANALOG_INPUT_PIO_7
 0

	)

68 
	#ANALOG_INPUT_FUN_7
 
IOCON_FUNC2


	)

70 
	#ANALOG_INPUT_PIN_8
 12

	)

71 
	#ANALOG_INPUT_PIO_8
 0

	)

72 
	#ANALOG_INPUT_FUN_8
 
IOCON_FUNC2


	)

74 
	#ANALOG_INPUT_PIN_9
 11

	)

75 
	#ANALOG_INPUT_PIO_9
 0

	)

76 
	#ANALOG_INPUT_FUN_9
 
IOCON_FUNC2


	)

78 
	#ANALOG_INPUT_PIN_10
 29

	)

79 
	#ANALOG_INPUT_PIO_10
 1

	)

80 
	#ANALOG_INPUT_FUN_10
 
IOCON_FUNC4


	)

82 
	#ANALOG_INPUT_PIN_11
 22

	)

83 
	#ANALOG_INPUT_PIO_11
 0

	)

84 
	#ANALOG_INPUT_FUN_11
 
IOCON_FUNC1


	)

87 c⁄° 
PINMUX_GRP_T
 
	g™ÆogPöMuxögTabÀ
[] = {

88 {
ANALOG_INPUT_PIO_0
, 
ANALOG_INPUT_PIN_0
, (
ANALOG_INPUT_FUN_0
 | 
IOCON_ADMODE_EN
 | 
IOCON_MODE_INACT
)},

89 {
ANALOG_INPUT_PIO_1
, 
ANALOG_INPUT_PIN_1
, (
ANALOG_INPUT_FUN_1
 | 
IOCON_ADMODE_EN
 | 
IOCON_MODE_INACT
)},

90 {
ANALOG_INPUT_PIO_2
, 
ANALOG_INPUT_PIN_2
, (
ANALOG_INPUT_FUN_2
 | 
IOCON_ADMODE_EN
 | 
IOCON_MODE_INACT
)},

91 {
ANALOG_INPUT_PIO_3
, 
ANALOG_INPUT_PIN_3
, (
ANALOG_INPUT_FUN_3
 | 
IOCON_ADMODE_EN
 | 
IOCON_MODE_INACT
)},

93 {
ANALOG_INPUT_PIO_4
, 
ANALOG_INPUT_PIN_4
, (
ANALOG_INPUT_FUN_4
 | 
IOCON_ADMODE_EN
 | 
IOCON_MODE_INACT
)},

94 {
ANALOG_INPUT_PIO_5
, 
ANALOG_INPUT_PIN_5
, (
ANALOG_INPUT_FUN_5
 | 
IOCON_ADMODE_EN
 | 
IOCON_MODE_INACT
)},

95 {
ANALOG_INPUT_PIO_6
, 
ANALOG_INPUT_PIN_6
, (
ANALOG_INPUT_FUN_6
 | 
IOCON_ADMODE_EN
 | 
IOCON_MODE_INACT
)},

96 {
ANALOG_INPUT_PIO_7
, 
ANALOG_INPUT_PIN_7
, (
ANALOG_INPUT_FUN_7
 | 
IOCON_ADMODE_EN
 | 
IOCON_MODE_INACT
)},

98 {
ANALOG_INPUT_PIO_8
, 
ANALOG_INPUT_PIN_8
, (
ANALOG_INPUT_FUN_8
 | 
IOCON_ADMODE_EN
 | 
IOCON_MODE_INACT
)},

99 {
ANALOG_INPUT_PIO_9
, 
ANALOG_INPUT_PIN_9
, (
ANALOG_INPUT_FUN_9
 | 
IOCON_ADMODE_EN
 | 
IOCON_MODE_INACT
)},

100 {
ANALOG_INPUT_PIO_10
, 
ANALOG_INPUT_PIN_10
, (
ANALOG_INPUT_FUN_10
 | 
IOCON_ADMODE_EN
 | 
IOCON_MODE_INACT
)},

101 {
ANALOG_INPUT_PIO_11
, 
ANALOG_INPUT_PIN_11
, (
ANALOG_INPUT_FUN_11
 | 
IOCON_ADMODE_EN
 | 
IOCON_MODE_INACT
)},

104 c⁄° 
uöt32_t
 
	g™ÆogCh™√lM≠
[] = {
ADC_CHANNEL_0
, 
ADC_CHANNEL_1
, 
ADC_CHANNEL_2
,

105 
ADC_CHANNEL_3
, 
ADC_CHANNEL_4
, 
ADC_CHANNEL_5
,

106 
ADC_CHANNEL_6
, 
ADC_CHANNEL_7
, 
ADC_CHANNEL_8
,

107 
ADC_CHANNEL_9
, 
ADC_CHANNEL_10
, 
ADC_CHANNEL_11
};

109 
uöt32_t
 
	g™ÆogMósuªmítBuf„r
[
ANALOG_MEASUREMENT_COUNT
];

110 
A«logMósuªmítRódyCb
 
	g™ÆogMósuªmítRódyCÆlback
 = 
NULL
;

112 
ADC_C⁄figuøti⁄
();

113 
DMA_C⁄figfu©i⁄
();

114 
NVIC_C⁄figuøti⁄
();

116 
dma_h™dÀ_t
 
	ggDmaH™dÀSåu˘
;

117 
uöt32_t
 
	ggDemoAdcC⁄vResu…
[1];

118 vﬁ©ûê
boﬁ
 
	gbDmaTøns„rD⁄e
;

121 
	$™ÆogMósuªmítInô
(
A«logMósuªmítRódyCb
 
™ÆogMósuªmítRódyCb
)

123 
™ÆogMósuªmítRódyCÆlback
 = 
™ÆogMósuªmítRódyCb
;

126 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_VDDA
);

127 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_ADC0
);

128 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_VD2_ANA
);

129 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_VREFP
);

130 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_TS
);

133 
	`CLOCK_AâachClk
(
kFRO12M_to_MAIN_CLK
);

140 
	`CLOCK_E«bÀClock
(
kCLOCK_Adc0
);

142 
	`INPUTMUX_AâachSig«l
(
INPUTMUX
, 
DEMO_DMA_ADC_CHANNEL
, 
kINPUTMUX_Adc0SeqaIrqToDma
);

144 
dma_å™s„r_c⁄fig_t
 
dmaTøns„rC⁄figSåu˘
;

145 
dma_ch™√l_åiggî_t
 
dmaCh™√lTriggîSåu˘
;

148 
	`INPUTMUX_Inô
(
INPUTMUX
);

152 
	`DMA_Inô
(
DMA0
);

153 
	`DMA_E«bÀCh™√l
(
DMA0
, 
DEMO_DMA_ADC_CHANNEL
);

154 
	`DMA_Cª©eH™dÀ
(&
gDmaH™dÀSåu˘
, 
DMA0
, 
DEMO_DMA_ADC_CHANNEL
);

155 
	`DMA_SëCÆlback
(&
gDmaH™dÀSåu˘
, 
DEMO_DMA_CÆlback
, 
NULL
);

161 
dmaCh™√lTriggîSåu˘
.
bur°
 = 
kDMA_EdgeBur°Tøns„r1
;

162 
dmaCh™√lTriggîSåu˘
.
ty≥
 = 
kDMA_RisögEdgeTriggî
;

163 
dmaCh™√lTriggîSåu˘
.
wøp
 = 
kDMA_NoWøp
;

164 
	`DMA_C⁄figuªCh™√lTriggî
(
DMA0
, 
DEMO_DMA_ADC_CHANNEL
, &
dmaCh™√lTriggîSåu˘
);

166 
	`DMA_Pª∑ªTøns„r
(&
dmaTøns„rC⁄figSåu˘
,

167 (*)
DEMO_ADC_DATA_REG_ADDR
,

168 (*)
gDemoAdcC⁄vResu…
,

169 (
uöt32_t
),

170 (
uöt32_t
),

171 
kDMA_Mem‹yToMem‹y
,

172 
NULL


174 
	`DMA_SubmôTøns„r
(&
gDmaH™dÀSåu˘
, &
dmaTøns„rC⁄figSåu˘
);

176 
adc_c⁄fig_t
 
adcC⁄figSåu˘
;

177 
adc_c⁄v_£q_c⁄fig_t
 
adcC⁄vSeqC⁄figSåu˘
;

179 
adcC⁄figSåu˘
.
˛ockMode
 = 
kADC_ClockSynchr⁄ousMode
;

180 
adcC⁄figSåu˘
.
˛ockDividîNumbî
 = 1;

181 
adcC⁄figSåu˘
.
ªsﬁuti⁄
 = 
kADC_Resﬁuti⁄12bô
;

182 
adcC⁄figSåu˘
.
íabÀBy∑ssCÆibøti⁄
 = 
Ál£
;

183 
adcC⁄figSåu˘
.
ßm∂eTimeNumbî
 = 0U;

184 
	`ADC_Inô
(
DEMO_ADC_BASE
, &
adcC⁄figSåu˘
);

186 
	`ADC_DoSñfCÆibøti⁄
(
DEMO_ADC_BASE
);

187 
adcC⁄vSeqC⁄figSåu˘
.
ch™√lMask
 = (1U << 
DEMO_ADC_SAMPLE_CHANNEL_NUMBER
);

188 
adcC⁄vSeqC⁄figSåu˘
.
åiggîMask
 = 0U;

189 
adcC⁄vSeqC⁄figSåu˘
.
åiggîPﬁ¨ôy
 = 
kADC_TriggîPﬁ¨ôyPosôiveEdge
;

190 
adcC⁄vSeqC⁄figSåu˘
.
íabÀSögÀSãp
 = 
Ál£
;

191 
adcC⁄vSeqC⁄figSåu˘
.
íabÀSyncBy∑ss
 = 
Ál£
;

192 
adcC⁄vSeqC⁄figSåu˘
.
öãºu±Mode
 = 
kADC_I¡îru±F‹EachSequí˚
;

193 
	`ADC_SëC⁄vSeqAC⁄fig
(
DEMO_ADC_BASE
, &
adcC⁄vSeqC⁄figSåu˘
);

194 
	`ADC_E«bÀC⁄vSeqA
(
DEMO_ADC_BASE
, 
åue
);

196 
	`ADC_E«bÀI¡îru±s
(
DEMO_ADC_BASE
, 
kADC_C⁄vSeqAI¡îru±E«bÀ
);

198 
	`NVIC_E«bÀIRQ
(
DMA0_IRQn
);

200 
	}
}

202 
	$DEMO_DMA_CÆlback
(
dma_h™dÀ_t
 *
h™dÀ
, *
∑øm
, 
boﬁ
 
å™s„rD⁄e
, 
uöt32_t
 
tcds
)

204 
bDmaTøns„rD⁄e
 = 
åue
;

205 
	}
}

207 
	$ADCA_IRQH™dÀr
()

209 
	`Chù_ADC_CÀ¨Fœgs
(
LPC_ADC
, 
	`Chù_ADC_GëFœgs
(LPC_ADC));

211 
uöt32_t
 
i
;

212 
i
 = 0; i < 
ANALOG_MEASUREMENT_COUNT
; i++)

213 
™ÆogMósuªmítBuf„r
[
i
] = 
	`ADC_DR_RESULT
(
	`Chù_ADC_GëD©aReg
(
LPC_ADC
, 
™ÆogCh™√lM≠
[i]));

215 i‡(
™ÆogMósuªmítRódyCÆlback
)

216 
	`™ÆogMósuªmítRódyCÆlback
();

217 
	}
}

219 
	$™ÆogMósuªmítSèπ
()

221 
	`DMA_SèπTøns„r
(&
gDmaH™dÀSåu˘
);

222 
	`ADC_DoSo·w¨eTriggîC⁄vSeqA
(
DEMO_ADC_BASE
);

223 
	}
}

225 
uöt32_t
 
	$™ÆogMósuªmítGëVÆue
(
A«logMósuªmítTy≥
 
™ÆogMósuªmít
)

227 i‡(
™ÆogMósuªmít
 < 
ANALOG_MEASUREMENT_COUNT
) {

228 
adc_ªsu…_öfo_t
 
gAdcResu…InfoSåu˘
;

229 
	`ADC_GëCh™√lC⁄vîsi⁄Resu…
(
ADC0
, 
ADC_CHANNEL
 , &
gAdcResu…InfoSåu˘
);

230  
gAdcResu…InfoSåu˘
.
ªsu…
;

232  
™ÆogMósuªmítBuf„r
[
™ÆogMósuªmít
];

236 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\AnalogMeasurementHal\AnalogMeasurementHal.h

1 #i‚de‡
__ANALOG_MEASUREMENT_H__


2 
	#__ANALOG_MEASUREMENT_H__


	)

4 
	~<°döt.h
>

5 
	~<°dboﬁ.h
>

7 
	#ADC_MAX_VALUE
 4095

	)

9 
	eA«logMósuªmítTy≥
 {

10 
	mANALOG_THERMISTOR_0
,

11 
	mANALOG_THERMISTOR_1
,

12 
	mANALOG_THERMISTOR_2
,

13 
	mANALOG_THERMISTOR_3
,

14 
	mANALOG_THERMISTOR_4
,

15 
	mANALOG_VOLTAGE_12V
,

16 
	mANALOG_VOLTAGE_5V
,

17 
	mANALOG_VOLTAGE_3V3
,

18 
	mANALOG_MEASUREMENT_COUNT
,

19 } 
	tA«logMósuªmítTy≥
;

21 (*
	tA«logMósuªmítRódyCb
)();

23 
	`™ÆogMósuªmítInô
(
A«logMósuªmítRódyCb
 
™ÆogMósuªmítRódyCb
);

24 
	`™ÆogMósuªmítSèπ
();

25 
uöt32_t
 
	`™ÆogMósuªmítGëVÆue
(
A«logMósuªmítTy≥
 
™ÆogMósuªmít
);

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\FanControllerHal\FanController.c

1 
	~<°ddef.h
>

3 
	~"F™C⁄åﬁÀr.h
"

5 
	~"f¶_˘imî.h
"

6 
	~"f¶_ioc⁄.h
"

7 
	~"f¶_öputmux.h
"

8 
	~"f¶_gpio.h
"

9 
	~"f¶_s˘imî.h
"

11 
	#FAN_PWM_CONTROL_TIMER_FREQUECY
 25000

	)

12 
	#TACHOMETER_TIMER_COUNTER_MAX
 (0xFFFFFFFFu)

	)

15 
	sTachomëîI≈utSèã
 {

16 
uöt32_t
 
	mfú°EdgeTime°amp
;

17 
uöt32_t
 
	m£c⁄dEdgeTime°amp
;

18 
boﬁ
 
	misSec⁄dEdge
;

19 
boﬁ
 
	misMósuªmítD⁄e
;

20 } 
	tTachomëîI≈utSèã
;

22 
F™C⁄åﬁÀrS≥edMósuªdCb
 
	gÁnS≥edMósuªdCb
 = 
NULL
;

23 
uöt32_t
 
	gèchomëîTicksPîHÆfRpm
;

24 
uöt32_t
 
	gÁnC⁄åﬁÀrMaxPwmVÆue
;

26 
TachomëîI≈utSèã
 
	gèchomëîSèãAºay
[
FAN_COUNT
];

28 
	sF™Ch™√l
 {

29 
CTIMER_Ty≥
 *
	mtimîBa£
;

30 
˘imî_m©ch_t
 
	mm©chRegi°î
;

31 
ioc⁄_group_t
 
	mÁnVﬁègePwm
;

32 
ioc⁄_group_t
 
	mÁnS≥edPwm
;

33 } 
	tF™Ch™√l
;

35 
F™Ch™√l
 
	gÁnCh™√l
[] = {

37 .
timîBa£
 = 
CTIMER0
,

38 .
	gm©chRegi°î
 = 
kCTIMER_M©ch_0
,

39 .
	gÁnVﬁègePwm
 = { .
p‹t
 = 2, .
	gpö
 = 8, .
	gmodefunc
 = (
IOCON_FUNC4
 | 
IOCON_DIGITAL_EN
 | 
IOCON_INPFILT_OFF
) }

42 .
	gtimîBa£
 = 
CTIMER0
,

43 .
	gm©chRegi°î
 = 
kCTIMER_M©ch_1
,

44 .
	gÁnVﬁègePwm
 = { .
p‹t
 = 2, .
	gpö
 = 9, .
	gmodefunc
 = (
IOCON_FUNC4
 | 
IOCON_DIGITAL_EN
 | 
IOCON_INPFILT_OFF
) }

47 .
	gtimîBa£
 = 
CTIMER0
,

48 .
	gm©chRegi°î
 = 
kCTIMER_M©ch_2
,

49 .
	gÁnVﬁègePwm
 = { .
p‹t
 = 2, .
	gpö
 = 14, .
	gmodefunc
 = (
IOCON_FUNC4
 | 
IOCON_DIGITAL_EN
 | 
IOCON_INPFILT_OFF
) }

52 .
	gtimîBa£
 = 
CTIMER1
,

53 .
	gm©chRegi°î
 = 
kCTIMER_M©ch_0
,

54 .
	gÁnVﬁègePwm
 = { .
p‹t
 = 4, .
	gpö
 = 23, .
	gmodefunc
 = (
IOCON_FUNC5
 | 
IOCON_DIGITAL_EN
 | 
IOCON_INPFILT_OFF
) }

57 .
	gtimîBa£
 = 
CTIMER1
,

58 .
	gm©chRegi°î
 = 
kCTIMER_M©ch_1
,

59 .
	gÁnVﬁègePwm
 = { .
p‹t
 = 4, .
	gpö
 = 24, .
	gmodefunc
 = (
IOCON_FUNC5
 | 
IOCON_DIGITAL_EN
 | 
IOCON_INPFILT_OFF
) }

62 .
	gtimîBa£
 = 
CTIMER1
,

63 .
	gm©chRegi°î
 = 
kCTIMER_M©ch_2
,

64 .
	gÁnVﬁègePwm
 = { .
p‹t
 = 4, .
	gpö
 = 25, .
	gmodefunc
 = (
IOCON_FUNC5
 | 
IOCON_DIGITAL_EN
 | 
IOCON_INPFILT_OFF
) }

67 .
	gtimîBa£
 = 
CTIMER3
,

68 .
	gm©chRegi°î
 = 
kCTIMER_M©ch_0
,

69 .
	gÁnVﬁègePwm
 = { .
p‹t
 = 1, .
	gpö
 = 5, .
	gmodefunc
 = (
IOCON_FUNC3
 | 
IOCON_DIGITAL_EN
 | 
IOCON_INPFILT_OFF
) }

73 
	$ÁnC⁄åﬁÀrPwmInô
(
F™Ch™√l
 
ch™√l
[], 
uöt32_t
 
cou¡
)

75 
	`CLOCK_E«bÀClock
(
kCLOCK_Ioc⁄
);

77 
uöt32_t
 
i
 = 0; i < 
cou¡
; i++) {

78 
˘imî_c⁄fig_t
 
c⁄fig
;

80 
	`CTIMER_GëDeÁu…C⁄fig
(&
c⁄fig
);

81 
	`CTIMER_Inô
(
ch™√l
[
i
].
timîBa£
, &
c⁄fig
);

83 
˘imî_m©ch_c⁄fig_t
 
m©chC⁄fig
 = {

84 .
íabÀCou¡îRe£t
 = 
åue
,

85 .
íabÀCou¡îSt›
 = 
Ál£
,

86 .
m©chVÆue
 = 96000000UL / 25000,

87 .
outC⁄åﬁ
 = 
kCTIMER_Ouçut_NoA˘i⁄
,

88 .
outPöInôSèã
 = 
Ál£
,

89 .
íabÀI¡îru±
 = 
Ál£
,

92 
	`CTIMER_SëupM©ch
(
ch™√l
[
i
].
timîBa£
, 
kCTIMER_M©ch_3
, &
m©chC⁄fig
);

95 
uöt32_t
 
i
 = 0; i < 
cou¡
; i++) {

96 
	`IOCON_PöMuxSë
(
IOCON
, 
ch™√l
[
i
].
ÁnVﬁègePwm
.
p‹t
, ch™√l[i].ÁnVﬁègePwm.
pö
, ch™√l[i].ÁnVﬁègePwm.
modefunc
);

97 
˘imî_m©ch_c⁄fig_t
 
m©chC⁄fig
 = {

98 .
íabÀCou¡îRe£t
 = 
Ál£
,

99 .
íabÀCou¡îSt›
 = 
Ál£
,

100 .
m©chVÆue
 = 1920,

101 .
outC⁄åﬁ
 = 
kCTIMER_Ouçut_NoA˘i⁄
,

102 .
outPöInôSèã
 = 
åue
,

103 .
íabÀI¡îru±
 = 
Ál£
,

106 
	`CTIMER_SëupM©ch
(
ch™√l
[
i
].
timîBa£
, ch™√l[i].
m©chRegi°î
, &
m©chC⁄fig
);

108 
ch™√l
[
i
].
timîBa£
->
PWMC
 |(1 << ch™√l[i].
m©chRegi°î
);

111 
uöt32_t
 
i
 = 0; i < 
cou¡
; i++) {

112 
	`CTIMER_SèπTimî
(
ch™√l
[
i
].
timîBa£
);

114 
	}
}

116 
	$s˘imîCb
()

118 
	}
}

119 
	$SCT0_IRQH™dÀr
()

121 
ch™√lCou¡î
 = 0;

122 
ch™√lCou¡î
 = 0; ch™√lCou¡î < 
FAN_COUNT
; channelCounter++) {

123 i‡(
SCT0
->
EVFLAG
 & (1 << 
ch™√lCou¡î
)) {

124 
uöt32_t
 
s˘C≠tuªVÆue
 = 
SCT0
->
SCTCAP
[
ch™√lCou¡î
];

125 
SCT0
->
EVFLAG
 = (1 << 
ch™√lCou¡î
);

126 
TachomëîI≈utSèã
 *
èchomëîSèã
 = &
èchomëîSèãAºay
[
ch™√lCou¡î
];

127 i‡(
èchomëîSèã
->
isSec⁄dEdge
) {

128 
SCT0
->
EVEN
 &~(1 << 
ch™√lCou¡î
);

129 
èchomëîSèã
->
£c⁄dEdgeTime°amp
 = 
s˘C≠tuªVÆue
;

130 
èchomëîSèã
->
isSec⁄dEdge
 = 
Ál£
;

133 
uöt32_t
 
Ωm
 = 0;

134 i‡(
èchomëîSèã
->
£c⁄dEdgeTime°amp
 <ÅachomëîSèã->
fú°EdgeTime°amp
) {

135 
Ωm
 = 
TACHOMETER_TIMER_COUNTER_MAX
 - 
èchomëîSèã
->
fú°EdgeTime°amp
 +ÅachomëîSèã->
£c⁄dEdgeTime°amp
 + 1;

137 
Ωm
 = 
èchomëîSèã
->
£c⁄dEdgeTime°amp
 -ÅachomëîSèã->
fú°EdgeTime°amp
;

140 i‡(
ÁnS≥edMósuªdCb
) {

142 
Ωm
 = 
èchomëîTicksPîHÆfRpm
 / (rpm ?Ñpm : 1);

143 
	`ÁnS≥edMósuªdCb
(
ch™√lCou¡î
, 
Ωm
);

145 
èchomëîSèã
->
isMósuªmítD⁄e
 = 
åue
;

147 
èchomëîSèã
->
fú°EdgeTime°amp
 = 
s˘C≠tuªVÆue
;

148 
èchomëîSèã
->
isSec⁄dEdge
 = 
åue
;

152 
	}
}

154 
	$ÁnC⁄åﬁÀrTachomëîInô
()

156 
	`CLOCK_E«bÀClock
(
kCLOCK_Gpio0
);

157 
	`CLOCK_E«bÀClock
(
kCLOCK_Ioc⁄
);

159 
INPUTMUX
->
SCT0_INMUX
[0] = 0;

160 
INPUTMUX
->
SCT0_INMUX
[1] = 1;

161 
INPUTMUX
->
SCT0_INMUX
[2] = 2;

162 
INPUTMUX
->
SCT0_INMUX
[3] = 3;

163 
INPUTMUX
->
SCT0_INMUX
[4] = 4;

164 
INPUTMUX
->
SCT0_INMUX
[5] = 5;

165 
INPUTMUX
->
SCT0_INMUX
[6] = 6;

167 
gpio_pö_c⁄fig_t
 
c⁄fig
 = { 
kGPIO_DigôÆI≈ut
, 0 };

169 
s˘imî_c⁄fig_t
 
s˘imîInfo
;

170 
	`SCTIMER_GëDeÁu…C⁄fig
(&
s˘imîInfo
);

171 
s˘imîInfo
.
íabÀCou¡îUnify
 = 
åue
;

172 
	`SCTIMER_Inô
(
SCT0
, &
s˘imîInfo
);

173 
	#SCT_CONFIG_IN_SYNC_OFS
 9

	)

174 
SCT0
->
CONFIG
 |0b1111111 << 
SCT_CONFIG_IN_SYNC_OFS
;

175 
	`SCTIMER_SëCÆlback
(
SCT0
, 
s˘imîCb
, 0);

176 
	`SCTIMER_SëCÆlback
(
SCT0
, 
s˘imîCb
, 1);

177 
	`SCTIMER_SëCÆlback
(
SCT0
, 
s˘imîCb
, 2);

178 
	`SCTIMER_SëCÆlback
(
SCT0
, 
s˘imîCb
, 3);

179 
	`SCTIMER_SëCÆlback
(
SCT0
, 
s˘imîCb
, 4);

180 
	`SCTIMER_SëCÆlback
(
SCT0
, 
s˘imîCb
, 5);

181 
	`SCTIMER_SëCÆlback
(
SCT0
, 
s˘imîCb
, 6);

183 
	`IOCON_PöMuxSë
(
IOCON
, 4, 7, (
IOCON_FUNC5
 | 
IOCON_DIGITAL_EN
 | 
IOCON_MODE_PULLUP
));

184 
	`IOCON_PöMuxSë
(
IOCON
, 4, 8, (
IOCON_FUNC5
 | 
IOCON_DIGITAL_EN
 | 
IOCON_MODE_PULLUP
));

185 
	`IOCON_PöMuxSë
(
IOCON
, 4, 9, (
IOCON_FUNC5
 | 
IOCON_DIGITAL_EN
 | 
IOCON_MODE_PULLUP
));

186 
	`IOCON_PöMuxSë
(
IOCON
, 4, 10, (
IOCON_FUNC5
 | 
IOCON_DIGITAL_EN
 | 
IOCON_MODE_PULLUP
));

187 
	`IOCON_PöMuxSë
(
IOCON
, 4, 11, (
IOCON_FUNC5
 | 
IOCON_DIGITAL_EN
 | 
IOCON_MODE_PULLUP
));

188 
	`IOCON_PöMuxSë
(
IOCON
, 4, 12, (
IOCON_FUNC5
 | 
IOCON_DIGITAL_EN
 | 
IOCON_MODE_PULLUP
));

189 
	`IOCON_PöMuxSë
(
IOCON
, 4, 13, (
IOCON_FUNC5
 | 
IOCON_DIGITAL_EN
 | 
IOCON_MODE_PULLUP
));

191 
	`GPIO_PöInô
(
GPIO
, 4, 7, &
c⁄fig
);

192 
	`GPIO_PöInô
(
GPIO
, 4, 8, &
c⁄fig
);

193 
	`GPIO_PöInô
(
GPIO
, 4, 9, &
c⁄fig
);

194 
	`GPIO_PöInô
(
GPIO
, 4, 10, &
c⁄fig
);

195 
	`GPIO_PöInô
(
GPIO
, 4, 11, &
c⁄fig
);

196 
	`GPIO_PöInô
(
GPIO
, 4, 12, &
c⁄fig
);

197 
	`GPIO_PöInô
(
GPIO
, 4, 13, &
c⁄fig
);

199 
uöt32_t
 
ˇ±uªRegi°î
 = 0;

200 
uöt32_t
 
evítNumbî
 = 0;

202 
	`SCTIMER_SëupC≠tuªA˘i⁄
(
SCT0
, 
kSCTIMER_Cou¡î_L
, &
ˇ±uªRegi°î
, 0);

203 
	`SCTIMER_Cª©eAndScheduÀEvít
(
SCT0
, 
kSCTIMER_I≈utFÆlEvít
, 0, 0, 
kSCTIMER_Cou¡î_L
, &
evítNumbî
);

205 
	`SCTIMER_SëupC≠tuªA˘i⁄
(
SCT0
, 
kSCTIMER_Cou¡î_L
, &
ˇ±uªRegi°î
, 1);

206 
	`SCTIMER_Cª©eAndScheduÀEvít
(
SCT0
, 
kSCTIMER_I≈utFÆlEvít
, 0, 1, 
kSCTIMER_Cou¡î_L
, &
evítNumbî
);

208 
	`SCTIMER_SëupC≠tuªA˘i⁄
(
SCT0
, 
kSCTIMER_Cou¡î_L
, &
ˇ±uªRegi°î
, 2);

209 
	`SCTIMER_Cª©eAndScheduÀEvít
(
SCT0
, 
kSCTIMER_I≈utFÆlEvít
, 0, 2, 
kSCTIMER_Cou¡î_L
, &
evítNumbî
);

211 
	`SCTIMER_SëupC≠tuªA˘i⁄
(
SCT0
, 
kSCTIMER_Cou¡î_L
, &
ˇ±uªRegi°î
, 3);

212 
	`SCTIMER_Cª©eAndScheduÀEvít
(
SCT0
, 
kSCTIMER_I≈utFÆlEvít
, 0, 3, 
kSCTIMER_Cou¡î_L
, &
evítNumbî
);

214 
	`SCTIMER_SëupC≠tuªA˘i⁄
(
SCT0
, 
kSCTIMER_Cou¡î_L
, &
ˇ±uªRegi°î
, 4);

215 
	`SCTIMER_Cª©eAndScheduÀEvít
(
SCT0
, 
kSCTIMER_I≈utFÆlEvít
, 0, 4, 
kSCTIMER_Cou¡î_L
, &
evítNumbî
);

217 
	`SCTIMER_SëupC≠tuªA˘i⁄
(
SCT0
, 
kSCTIMER_Cou¡î_L
, &
ˇ±uªRegi°î
, 5);

218 
	`SCTIMER_Cª©eAndScheduÀEvít
(
SCT0
, 
kSCTIMER_I≈utFÆlEvít
, 0, 5, 
kSCTIMER_Cou¡î_L
, &
evítNumbî
);

220 
	`SCTIMER_SëupC≠tuªA˘i⁄
(
SCT0
, 
kSCTIMER_Cou¡î_L
, &
ˇ±uªRegi°î
, 6);

221 
	`SCTIMER_Cª©eAndScheduÀEvít
(
SCT0
, 
kSCTIMER_I≈utFÆlEvít
, 0, 6, 
kSCTIMER_Cou¡î_L
, &
evítNumbî
);

223 
	`SCTIMER_SèπTimî
(
SCT0
, 
kSCTIMER_Cou¡î_L
);

225 
	`NVIC_E«bÀIRQ
(
SCT0_IRQn
);

226 
	}
}

228 
	$èchomëîI≈utTimîsInô
()

230 
	`ÁnC⁄åﬁÀrTachomëîInô
();

231 
uöt32_t
 
blockCou¡î
 = 0;

232 
blockCou¡î
 = 0; blockCou¡î < 
FAN_COUNT
; blockCounter++) {

233 
èchomëîSèãAºay
[
blockCou¡î
].
isSec⁄dEdge
 = 
Ál£
;

234 
èchomëîSèãAºay
[
blockCou¡î
].
isMósuªmítD⁄e
 = 
åue
;

235 
èchomëîSèãAºay
[
blockCou¡î
].
fú°EdgeTime°amp
 =ÅachomëîSèãAºay[blockCou¡î].
£c⁄dEdgeTime°amp
 = 0;

238 
	#SECOND_PER_MINUTE
 60u

	)

239 
èchomëîTicksPîHÆfRpm
 = 96000000 * (
SECOND_PER_MINUTE
 >> 1);

240 
	}
}

242 
	$pwmC⁄t‹lTimîsInô
(
uöt32_t
 
pwmFªquícy
)

244 c⁄° 
uöt32_t
 
timîClockS≥ed
 = 96000000;

246 
ÁnC⁄åﬁÀrMaxPwmVÆue
 = 
timîClockS≥ed
 / 
pwmFªquícy
;

248 
	`ÁnC⁄åﬁÀrPwmInô
(
ÁnCh™√l
, (fanChannel) / (fanChannel[0]));

249 
	}
}

251 
	$ÁnC⁄åﬁÀrInô
(
F™C⁄åﬁÀrS≥edMósuªdCb
 
•ìdMósuªdCb
)

253 
ÁnS≥edMósuªdCb
 = 
•ìdMósuªdCb
;

254 #i‡
	`deföed
(
USE_PERIODIC_TIMER
) && (USE_PERIODIC_TIMER == 1)

255 
	`≥riodicSam∂ögTimîInô
(
PERIODIC_SAMPLING_TIMER_FREQUECY
);

257 
	`pwmC⁄t‹lTimîsInô
(
FAN_PWM_CONTROL_TIMER_FREQUECY
);

258 
	`èchomëîI≈utTimîsInô
();

259 
	}
}

261 
	$ÁnC⁄åﬁÀrSëPwm
(
uöt32_t
 
ÁnNumbî
, uöt32_à
ÁnPwm
)

263 i‡(
ÁnNumbî
 >(
ÁnCh™√l
) / (fanChannel[0])) {

267 
ÁnCh™√l
[
ÁnNumbî
].
timîBa£
->
MR
[ÁnCh™√l[ÁnNumbî].
m©chRegi°î
] = 
ÁnC⁄åﬁÀrMaxPwmVÆue
 - 
ÁnPwm
;

268 
	}
}

270 
	$ÁnC⁄åﬁÀrSèπMósuªmít
()

272 
size_t
 
ch™√lCou¡î
 = 0;

273 
ch™√lCou¡î
 = 0; ch™√lCou¡î < 
FAN_COUNT
; channelCounter++) {

274 
TachomëîI≈utSèã
 *
èchomëîSèã
 = &
èchomëîSèãAºay
[
ch™√lCou¡î
];

275 i‡(!(
SCT0
->
EVEN
 & (1 << 
ch™√lCou¡î
)Ë&& 
èchomëîSèã
->
isMósuªmítD⁄e
) {

276 
èchomëîSèã
->
isMósuªmítD⁄e
 = 
Ál£
;

277 
èchomëîSèã
->
isSec⁄dEdge
 = 
Ál£
;

278 
SCT0
->
EVFLAG
 = (1 << 
ch™√lCou¡î
);

279 
SCT0
->
EVEN
 |(1 << 
ch™√lCou¡î
);

282 
	}
}

284 
uöt32_t
 
	$ÁnC⁄åﬁÀrGëMaxPwmVÆue
()

286  
ÁnC⁄åﬁÀrMaxPwmVÆue
;

287 
	}
}

289 
uöt32_t
 
	$ÁnC⁄åﬁÀrGëPwm
(
uöt32_t
 
ÁnNumbî
)

291 i‡(
ÁnNumbî
 >(
ÁnCh™√l
) / (fanChannel[0])) {

295  
ÁnCh™√l
[
ÁnNumbî
].
m©chRegi°î
;

296 
	}
}

298 
uöt32_t
 
	$ÁnC⁄åﬁÀrGëTachCou¡
()

300  
FAN_COUNT
;

301 
	}
}

303 
uöt32_t
 
	$ÁnC⁄åﬁÀrGëPwmCou¡
()

305  
FAN_COUNT
;

306 
	}
}

308 
	$ÁnC⁄åﬁÀrReInôPwm
(
F™C⁄åﬁÀrCh™√lC⁄fig
 
ÁnC⁄åﬁÀrCh™√lC⁄fig
[], 
uöt32_t
 
ch™√lCou¡
)

310 i‡(!
ÁnC⁄åﬁÀrCh™√lC⁄fig
)

313 
uöt32_t
 
ch™√lCou¡î
 = 0;

314 
ch™√lCou¡î
 = 0; ch™√lCou¡î < 
ch™√lCou¡
; channelCounter++) {

315 
ÁnC⁄åﬁÀrCh™√lC⁄fig
[
ch™√lCou¡î
].
ch™√lSèã
) {

316 
FAN_CONTROLLER_CHANNEL_3P
 :

319 
FAN_CONTROLLER_CHANNEL_4P
 :

322 
FAN_CONTROLLER_CHANNEL_NONE
 :

328 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\FanControllerHal\FanController.h

1 #i‚de‡
__FAN_CONTROLLER_H__


2 
	#__FAN_CONTROLLER_H__


	)

4 
	~<°döt.h
>

5 
	~<°dboﬁ.h
>

7 
	#FAN_COUNT
 7

	)

9 
	eF™C⁄åﬁÀrCh™√lSèã
 {

10 
	mFAN_CONTROLLER_CHANNEL_NONE
,

11 
	mFAN_CONTROLLER_CHANNEL_3P
,

12 
	mFAN_CONTROLLER_CHANNEL_4P
,

13 
	mFAN_CONTROLLER_CHANNEL_DETECTION_ERROR
,

14 } 
	tF™C⁄åﬁÀrCh™√lSèã
;

16 
	sF™C⁄åﬁÀrCh™√lC⁄fig
 {

17 
uöt32_t
 
	mch™√lNumbî
;

18 
F™C⁄åﬁÀrCh™√lSèã
 
	mch™√lSèã
;

19 } 
	tF™C⁄åﬁÀrCh™√lC⁄fig
;

21 (*
	tF™C⁄åﬁÀrS≥edMósuªdCb
)(
	tuöt32_t
 
	tÁnNumbî
, uöt32_à
	tΩm
);

23 
	`ÁnC⁄åﬁÀrInô
(
F™C⁄åﬁÀrS≥edMósuªdCb
 
•ìdMósuªdCb
);

25 
	`ÁnC⁄åﬁÀrSèπMósuªmít
();

27 
	`ÁnC⁄åﬁÀrSëPwm
(
uöt32_t
 
ÁnNumbî
, uöt32_à
ÁnPwm
);

28 
uöt32_t
 
	`ÁnC⁄åﬁÀrGëPwm
(uöt32_à
ÁnNumbî
);

30 
uöt32_t
 
	`ÁnC⁄åﬁÀrGëTachCou¡
();

31 
uöt32_t
 
	`ÁnC⁄åﬁÀrGëPwmCou¡
();

32 
uöt32_t
 
	`ÁnC⁄åﬁÀrGëMaxPwmVÆue
();

34 
	`ÁnC⁄åﬁÀrReInôPwm
(
F™C⁄åﬁÀrCh™√lC⁄fig
 
ÁnC⁄åﬁÀrCh™√lC⁄fig
[], 
uöt32_t
 
ch™√lCou¡
);

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalAdc\HalAdc.c

1 
	~"HÆAdc.h
"

3 
	~"HÆGpio.h
"

5 
	~"f¶_adc.h
"

6 
	~"f¶_˛ock.h
"

7 
	~"f¶_powî.h
"

10 
	#ADC_CHANNEL_0
 0

	)

11 
	#ADC_CHANNEL_1
 1

	)

12 
	#ADC_CHANNEL_2
 2

	)

13 
	#ADC_CHANNEL_3
 3

	)

14 
	#ADC_CHANNEL_4
 4

	)

15 
	#ADC_CHANNEL_5
 5

	)

16 
	#ADC_CHANNEL_6
 6

	)

17 
	#ADC_CHANNEL_7
 7

	)

18 
	#ADC_CHANNEL_8
 8

	)

19 
	#ADC_CHANNEL_9
 9

	)

20 
	#ADC_CHANNEL_10
 10

	)

22 
	#DEMO_ADC_IRQ_ID
 
ADC0_SEQA_IRQn


	)

25 
HÆAdcC⁄vîsi⁄D⁄eCÆlback
 
	ghÆAdcC⁄vîsi⁄D⁄eCÆlback
 = 
NULL
;

26 
uöt32_t
 
	gadcCh™√lM≠
[
HAL_ADC_CHANNEL_COUNT
] = {

27 [
HAL_ADC_CHANNEL_THERMISTOR_0
] = 
ADC_CHANNEL_7
,

28 [
HAL_ADC_CHANNEL_THERMISTOR_1
] = 
ADC_CHANNEL_8
,

29 [
HAL_ADC_CHANNEL_12V
] = 
ADC_CHANNEL_10
,

30 [
HAL_ADC_CHANNEL_5V
] = 
ADC_CHANNEL_6
,

31 [
HAL_ADC_CHANNEL_3V3
] = 
ADC_CHANNEL_5
,

34 
	$hÆlAdcClockPowîC⁄figuøti⁄
()

37 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_VDDA
);

38 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_ADC0
);

39 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_VD2_ANA
);

40 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_VREFP
);

41 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_TS
);

42 
	`CLOCK_E«bÀClock
(
kCLOCK_Adc0
);

43 
	}
}

46 
	$hÆAdcC⁄figuøti⁄
()

48 
adc_c⁄fig_t
 
adcC⁄figSåu˘
;

49 
adc_c⁄v_£q_c⁄fig_t
 
adcC⁄vSeqC⁄figSåu˘
;

52 
adcC⁄figSåu˘
.
˛ockMode
 = 
kADC_ClockSynchr⁄ousMode
;

53 
adcC⁄figSåu˘
.
˛ockDividîNumbî
 = 1;

54 
adcC⁄figSåu˘
.
ªsﬁuti⁄
 = 
kADC_Resﬁuti⁄12bô
;

55 
adcC⁄figSåu˘
.
íabÀBy∑ssCÆibøti⁄
 = 
Ál£
;

56 
adcC⁄figSåu˘
.
ßm∂eTimeNumbî
 = 0U;

57 
	`ADC_Inô
(
ADC0
, &
adcC⁄figSåu˘
);

61 
uöt32_t
 
mask
 = 0;

63 
size_t
 
i
 = 0; i < 
HAL_ADC_CHANNEL_COUNT
; i++) {

64 
mask
 |1 << 
adcCh™√lM≠
[
i
];

67 
adcC⁄vSeqC⁄figSåu˘
.
ch™√lMask
 = 
mask
;

68 
adcC⁄vSeqC⁄figSåu˘
.
åiggîMask
 = 0U;

69 
adcC⁄vSeqC⁄figSåu˘
.
åiggîPﬁ¨ôy
 = 
kADC_TriggîPﬁ¨ôyPosôiveEdge
;

70 
adcC⁄vSeqC⁄figSåu˘
.
íabÀSögÀSãp
 = 
Ál£
;

71 
adcC⁄vSeqC⁄figSåu˘
.
íabÀSyncBy∑ss
 = 
Ál£
;

72 
adcC⁄vSeqC⁄figSåu˘
.
öãºu±Mode
 = 
kADC_I¡îru±F‹EachSequí˚
;

73 
	`ADC_SëC⁄vSeqAC⁄fig
(
ADC0
, &
adcC⁄vSeqC⁄figSåu˘
);

74 
	`ADC_E«bÀC⁄vSeqA
(
ADC0
, 
åue
);

75 
	}
}

77 
	$ADC0_SEQA_IRQH™dÀr
()

79 i‡(
kADC_C⁄vSeqAI¡îru±Fœg
 =(kADC_C⁄vSeqAI¡îru±Fœg & 
	`ADC_GëSètusFœgs
(
ADC0
)))

81 
	`ADC_CÀ¨SètusFœgs
(
ADC0
, 
kADC_C⁄vSeqAI¡îru±Fœg
);

83 i‡(
hÆAdcC⁄vîsi⁄D⁄eCÆlback
) {

84 
	`hÆAdcC⁄vîsi⁄D⁄eCÆlback
();

89 #i‡
deföed
 
__CORTEX_M
 && (__CORTEX_M == 4U)

90 
	`__DSB
();

92 
	}
}

94 
	$hÆAdcInô
()

96 
	`hÆGpioPöInô
(
hÆGpio
.
adcTîmi°‹0
);

97 
	`hÆGpioPöInô
(
hÆGpio
.
adcTîmi°‹1
);

98 
	`hÆGpioPöInô
(
hÆGpio
.
adc12v
);

99 
	`hÆGpioPöInô
(
hÆGpio
.
adc5v
);

100 
	`hÆGpioPöInô
(
hÆGpio
.
adc3v3
);

102 
	`hÆlAdcClockPowîC⁄figuøti⁄
();

104 
	`ADC_DoSñfCÆibøti⁄
(
ADC0
);

106 
	`hÆAdcC⁄figuøti⁄
();

108 
	`ADC_E«bÀI¡îru±s
(
ADC0
, 
kADC_C⁄vSeqAI¡îru±E«bÀ
);

109 
	`NVIC_E«bÀIRQ
(
DEMO_ADC_IRQ_ID
);

110 
	}
}

112 
	$hÆAdcSèπC⁄vîsi⁄
(
HÆAdcC⁄vîsi⁄D⁄eCÆlback
 
ˇŒback
)

114 
hÆAdcC⁄vîsi⁄D⁄eCÆlback
 = 
ˇŒback
;

115 
	`ADC_DoSo·w¨eTriggîC⁄vSeqA
(
ADC0
);

116 
	}
}

118 
uöt32_t
 
	$hÆAdcGëC⁄vîsi⁄Resu…
(
HÆAdcCh™√l
 
ch™√l
)

120 i‡(
ch™√l
 >
HAL_ADC_CHANNEL_COUNT
) {

124 
adc_ªsu…_öfo_t
 
gAdcResu…InfoSåu˘
;

125 
	`ADC_GëCh™√lC⁄vîsi⁄Resu…
(
ADC0
, 
adcCh™√lM≠
[
ch™√l
], &
gAdcResu…InfoSåu˘
);

126  
gAdcResu…InfoSåu˘
.
ªsu…
;

127 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalAdc\HalAdc.h

1 #i‚de‡
__HAL_ADC_H__


2 
	#__HAL_ADC_H__


	)

4 
	~<°döt.h
>

5 
	~<°dboﬁ.h
>

7 
	#ADC_MAX_VALUE
 4096

	)

10 
	mHAL_ADC_CHANNEL_THERMISTOR_0
,

11 
	mHAL_ADC_CHANNEL_THERMISTOR_1
,

12 
	mHAL_ADC_CHANNEL_12V
,

13 
	mHAL_ADC_CHANNEL_5V
,

14 
	mHAL_ADC_CHANNEL_3V3
,

15 
	mHAL_ADC_CHANNEL_COUNT


16 } 
	tHÆAdcCh™√l
;

18 (*
	tHÆAdcC⁄vîsi⁄D⁄eCÆlback
)();

20 
	`hÆAdcInô
();

21 
	`hÆAdcSèπC⁄vîsi⁄
(
HÆAdcC⁄vîsi⁄D⁄eCÆlback
 
ˇŒback
);

22 
uöt32_t
 
	`hÆAdcGëC⁄vîsi⁄Resu…
(
HÆAdcCh™√l
 
ch™√l
);

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalCommon\HalCommon.c

1 
	~"HÆComm⁄.h
"

3 
	~"˛ock_c⁄fig.h
"

4 
	~"f¶_ioc⁄.h
"

5 
	~"f¶_gpio.h
"

6 
	~"f¶_öputmux.h
"

8 
	$hÆComm⁄Inô
()

10 
	`BOARD_BoŸClockFROHF96M
();

11 
	`CLOCK_E«bÀClock
(
kCLOCK_Ioc⁄
);

12 
	`INPUTMUX_Inô
(
INPUTMUX
);

13 
	`CLOCK_E«bÀClock
(
kCLOCK_Gpio0
);

14 
	`CLOCK_E«bÀClock
(
kCLOCK_Gpio1
);

15 
	`CLOCK_E«bÀClock
(
kCLOCK_Gpio2
);

16 
	`CLOCK_E«bÀClock
(
kCLOCK_Gpio3
);

17 
	`CLOCK_E«bÀClock
(
kCLOCK_Gpio4
);

18 
	`CLOCK_E«bÀClock
(
kCLOCK_Gpio5
);

20 
	`Sy°emC‹eClockUpd©e
();

21 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalCommon\HalCommon.h

1 #i‚de‡
__HAL_COMMON_H__


2 
	#__HAL_COMMON_H__


	)

4 
hÆComm⁄Inô
();

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalGpio\HalGpio.c

1 
	~"HÆGpio.h
"

3 
	~"f¶_gpio.h
"

4 
	~"f¶_ioc⁄.h
"

6 
	#GPIO_CONFIG_OUT_LOGIC_0
 { .
pöDúe˘i⁄
 = 
kGPIO_DigôÆOuçut
, .
ouçutLogic
 = 0 }

	)

7 
	#GPIO_CONFIG_OUT_LOGIC_1
 { .
pöDúe˘i⁄
 = 
kGPIO_DigôÆOuçut
, .
ouçutLogic
 = 1 }

	)

8 
	#GPIO_CONFIG_INPUT
 { .
pöDúe˘i⁄
 = 
kGPIO_DigôÆI≈ut
, .
ouçutLogic
 = 0 }

	)

10 
	#DIGITAL_WITH_PULLUP
 (
IOCON_MODE_PULLUP
 | 
IOCON_DIGITAL_EN
 | 
IOCON_INPFILT_OFF
)

	)

12 
	sHÆGpioPöSåu˘
 {

13 
ioc⁄_group_t
 
	mioc⁄
;

14 
gpio_pö_c⁄fig_t
 
	mc⁄fig
;

15 } 
	tHÆGpioPöSåu˘
;

17 c⁄° 
HÆGpio
 
	ghÆGpio
 = {

18 .
usbVbus
 = &(
HÆGpioPöSåu˘
) {

19 .
ioc⁄
 = {

20 .
p‹t
 = 1,

21 .
	gpö
 = 16,

22 .
	gmodefunc
 = 
IOCON_FUNC0
 | 
DIGITAL_WITH_PULLUP


24 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


27 .
	g•iFœshMiso
 = &(
HÆGpioPöSåu˘
) {

28 .
ioc⁄
 = {

29 .
p‹t
 = 5,

30 .
	gpö
 = 1,

31 .
	gmodefunc
 = 
IOCON_FUNC0
 | 
DIGITAL_WITH_PULLUP


33 .
	gc⁄fig
 = 
GPIO_CONFIG_INPUT


35 .
	g•iFœshMosi
 = &(
HÆGpioPöSåu˘
) {

36 .
ioc⁄
 = {

37 .
p‹t
 = 5,

38 .
	gpö
 = 0,

39 .
	gmodefunc
 = 
IOCON_FUNC0
 | 
DIGITAL_WITH_PULLUP


41 .
	gc⁄fig
 = 
GPIO_CONFIG_INPUT


43 .
	g•iFœshSck
 = &(
HÆGpioPöSåu˘
) {

44 .
ioc⁄
 = {

45 .
p‹t
 = 4,

46 .
	gpö
 = 31,

47 .
	gmodefunc
 = 
IOCON_FUNC1
 | 
DIGITAL_WITH_PULLUP


49 .
	gc⁄fig
 = 
GPIO_CONFIG_INPUT


51 .
	g•iFœshCs
 = &(
HÆGpioPöSåu˘
) {

52 .
ioc⁄
 = {

53 .
p‹t
 = 5,

54 .
	gpö
 = 2,

55 .
	gmodefunc
 = 
IOCON_FUNC1
 | 
DIGITAL_WITH_PULLUP


57 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


59 .
	g•iFœshWp
 = &(
HÆGpioPöSåu˘
) {

60 .
ioc⁄
 = {

61 .
p‹t
 = 5,

62 .
	gpö
 = 3,

63 .
	gmodefunc
 = 
IOCON_FUNC2
 | 
DIGITAL_WITH_PULLUP


65 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_1


67 .
	g•iFœshHﬁd
 = &(
HÆGpioPöSåu˘
) {

68 .
ioc⁄
 = {

69 .
p‹t
 = 5,

70 .
	gpö
 = 4,

71 .
	gmodefunc
 = 
IOCON_FUNC1
 | 
DIGITAL_WITH_PULLUP


73 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_1


76 .
	gﬁedSdö
 = &(
HÆGpioPöSåu˘
) {

77 .
ioc⁄
 = {

78 .
p‹t
 = 2,

79 .
	gpö
 = 18,

80 .
	gmodefunc
 = 
IOCON_FUNC2
 | 
DIGITAL_WITH_PULLUP


82 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


84 .
	gﬁedSck
 = &(
HÆGpioPöSåu˘
) {

85 .
ioc⁄
 = {

86 .
p‹t
 = 2,

87 .
	gpö
 = 26,

88 .
	gmodefunc
 = 
IOCON_FUNC2
 | 
DIGITAL_WITH_PULLUP


90 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


92 .
	gﬁedCs
 = &(
HÆGpioPöSåu˘
) {

93 .
ioc⁄
 = {

94 .
p‹t
 = 2,

95 .
	gpö
 = 21,

96 .
	gmodefunc
 = 
IOCON_FUNC2
 | 
DIGITAL_WITH_PULLUP


98 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


100 .
	gﬁedDc
 = &(
HÆGpioPöSåu˘
) {

101 .
ioc⁄
 = {

102 .
p‹t
 = 2,

103 .
	gpö
 = 20,

104 .
	gmodefunc
 = 
IOCON_FUNC4
 | 
DIGITAL_WITH_PULLUP


106 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


108 .
	gﬁedR°
 = &(
HÆGpioPöSåu˘
) {

109 .
ioc⁄
 = {

110 .
p‹t
 = 2,

111 .
	gpö
 = 19,

112 .
	gmodefunc
 = 
IOCON_FUNC4
 | 
DIGITAL_WITH_PULLUP


114 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


116 .
	gﬁedSda
 = &(
HÆGpioPöSåu˘
) {

117 .
ioc⁄
 = {

118 .
p‹t
 = 2,

119 .
	gpö
 = 12,

120 .
	gmodefunc
 = 
IOCON_FUNC4
 | 
DIGITAL_WITH_PULLUP


122 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


124 .
	gﬁedS˛
 = &(
HÆGpioPöSåu˘
) {

125 .
ioc⁄
 = {

126 .
p‹t
 = 2,

127 .
	gpö
 = 13,

128 .
	gmodefunc
 = 
IOCON_FUNC4
 | 
DIGITAL_WITH_PULLUP


130 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


133 .
	gÀdSñ0
 = &(
HÆGpioPöSåu˘
) {

134 .
ioc⁄
 = {

135 .
p‹t
 = 1,

136 .
	gpö
 = 4,

137 .
	gmodefunc
 = 
IOCON_FUNC4
 | 
DIGITAL_WITH_PULLUP


139 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


141 .
	gÀdSñ1
 = &(
HÆGpioPöSåu˘
) {

142 .
ioc⁄
 = {

143 .
p‹t
 = 1,

144 .
	gpö
 = 6,

145 .
	gmodefunc
 = 
IOCON_FUNC4
 | 
DIGITAL_WITH_PULLUP


147 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


149 .
	gÀdSñ2
 = &(
HÆGpioPöSåu˘
) {

150 .
ioc⁄
 = {

151 .
p‹t
 = 1,

152 .
	gpö
 = 7,

153 .
	gmodefunc
 = 
IOCON_FUNC4
 | 
DIGITAL_WITH_PULLUP


155 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


158 .
	gÀdPwm0
 = &(
HÆGpioPöSåu˘
) {

159 .
ioc⁄
 = {

160 .
p‹t
 = 4,

161 .
	gpö
 = 30,

162 .
	gmodefunc
 = 
IOCON_FUNC4
 | 
DIGITAL_WITH_PULLUP


164 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


166 .
	gÀdPwm1
 = &(
HÆGpioPöSåu˘
) {

167 .
ioc⁄
 = {

168 .
p‹t
 = 3,

169 .
	gpö
 = 14,

170 .
	gmodefunc
 = 
IOCON_FUNC4
 | 
DIGITAL_WITH_PULLUP


172 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


175 .
	gpwmCh™√l0
 = &(
HÆGpioPöSåu˘
) {

176 .
ioc⁄
 = {

177 .
p‹t
 = 2,

178 .
	gpö
 = 8,

179 .
	gmodefunc
 = 
IOCON_FUNC2
 | 
DIGITAL_WITH_PULLUP


181 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


183 .
	gpwmCh™√l1
 = &(
HÆGpioPöSåu˘
) {

184 .
ioc⁄
 = {

185 .
p‹t
 = 2,

186 .
	gpö
 = 9,

187 .
	gmodefunc
 = 
IOCON_FUNC2
 | 
DIGITAL_WITH_PULLUP


189 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


191 .
	gpwmCh™√l2
 = &(
HÆGpioPöSåu˘
) {

192 .
ioc⁄
 = {

193 .
p‹t
 = 2,

194 .
	gpö
 = 14,

195 .
	gmodefunc
 = 
IOCON_FUNC2
 | 
DIGITAL_WITH_PULLUP


197 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


199 .
	gpwmCh™√l3
 = &(
HÆGpioPöSåu˘
) {

200 .
ioc⁄
 = {

201 .
p‹t
 = 4,

202 .
	gpö
 = 23,

203 .
	gmodefunc
 = 
IOCON_FUNC4
 | 
DIGITAL_WITH_PULLUP


205 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


207 .
	gpwmCh™√l4
 = &(
HÆGpioPöSåu˘
) {

208 .
ioc⁄
 = {

209 .
p‹t
 = 4,

210 .
	gpö
 = 24,

211 .
	gmodefunc
 = 
IOCON_FUNC4
 | 
DIGITAL_WITH_PULLUP


213 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


215 .
	gpwmCh™√l5
 = &(
HÆGpioPöSåu˘
) {

216 .
ioc⁄
 = {

217 .
p‹t
 = 4,

218 .
	gpö
 = 25,

219 .
	gmodefunc
 = 
IOCON_FUNC4
 | 
DIGITAL_WITH_PULLUP


221 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


223 .
	gpwmCh™√l6
 = &(
HÆGpioPöSåu˘
) {

224 .
ioc⁄
 = {

225 .
p‹t
 = 1,

226 .
	gpö
 = 5,

227 .
	gmodefunc
 = 
IOCON_FUNC4
 | 
DIGITAL_WITH_PULLUP


229 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


232 .
	gèchCh™√l0
 = &(
HÆGpioPöSåu˘
) {

233 .
ioc⁄
 = {

234 .
p‹t
 = 4,

235 .
	gpö
 = 7,

236 .
	gmodefunc
 = 
IOCON_FUNC2
 | 
DIGITAL_WITH_PULLUP


238 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


240 .
	gèchCh™√l1
 = &(
HÆGpioPöSåu˘
) {

241 .
ioc⁄
 = {

242 .
p‹t
 = 4,

243 .
	gpö
 = 8,

244 .
	gmodefunc
 = 
IOCON_FUNC2
 | 
DIGITAL_WITH_PULLUP


246 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


248 .
	gèchCh™√l2
 = &(
HÆGpioPöSåu˘
) {

249 .
ioc⁄
 = {

250 .
p‹t
 = 4,

251 .
	gpö
 = 9,

252 .
	gmodefunc
 = 
IOCON_FUNC2
 | 
DIGITAL_WITH_PULLUP


254 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


256 .
	gèchCh™√l3
 = &(
HÆGpioPöSåu˘
) {

257 .
ioc⁄
 = {

258 .
p‹t
 = 4,

259 .
	gpö
 = 10,

260 .
	gmodefunc
 = 
IOCON_FUNC4
 | 
DIGITAL_WITH_PULLUP


262 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


264 .
	gèchCh™√l4
 = &(
HÆGpioPöSåu˘
) {

265 .
ioc⁄
 = {

266 .
p‹t
 = 4,

267 .
	gpö
 = 11,

268 .
	gmodefunc
 = 
IOCON_FUNC4
 | 
DIGITAL_WITH_PULLUP


270 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


272 .
	gèchCh™√l5
 = &(
HÆGpioPöSåu˘
) {

273 .
ioc⁄
 = {

274 .
p‹t
 = 4,

275 .
	gpö
 = 12,

276 .
	gmodefunc
 = 
IOCON_FUNC4
 | 
DIGITAL_WITH_PULLUP


278 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


280 .
	gèchCh™√l6
 = &(
HÆGpioPöSåu˘
) {

281 .
ioc⁄
 = {

282 .
p‹t
 = 4,

283 .
	gpö
 = 13,

284 .
	gmodefunc
 = 
IOCON_FUNC4
 | 
DIGITAL_WITH_PULLUP


286 .
	gc⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


289 .
	gadcTîmi°‹0
 = &(
HÆGpioPöSåu˘
) {

290 .
ioc⁄
 = {

291 .
p‹t
 = 2,

292 .
	gpö
 = 0,

293 .
	gmodefunc
 = 
IOCON_FUNC0
 | 
IOCON_ANALOG_EN


295 .
	gc⁄fig
 = 
GPIO_CONFIG_INPUT


297 .
	gadcTîmi°‹1
 = &(
HÆGpioPöSåu˘
) {

298 .
ioc⁄
 = {

299 .
p‹t
 = 2,

300 .
	gpö
 = 1,

301 .
	gmodefunc
 = 
IOCON_FUNC0
 | 
IOCON_ANALOG_EN


303 .
	gc⁄fig
 = 
GPIO_CONFIG_INPUT


305 .
	gadc12v
 = &(
HÆGpioPöSåu˘
) {

306 .
ioc⁄
 = {

307 .
p‹t
 = 3,

308 .
	gpö
 = 22,

309 .
	gmodefunc
 = 
IOCON_FUNC0
 | 
IOCON_ANALOG_EN


311 .
	gc⁄fig
 = 
GPIO_CONFIG_INPUT


313 .
	gadc5v
 = &(
HÆGpioPöSåu˘
) {

314 .
ioc⁄
 = {

315 .
p‹t
 = 1,

316 .
	gpö
 = 0,

317 .
	gmodefunc
 = 
IOCON_FUNC0
 | 
IOCON_ANALOG_EN


319 .
	gc⁄fig
 = 
GPIO_CONFIG_INPUT


321 .
	gadc3v3
 = &(
HÆGpioPöSåu˘
) {

322 .
ioc⁄
 = {

323 .
p‹t
 = 0,

324 .
	gpö
 = 31,

325 .
	gmodefunc
 = 
IOCON_FUNC0
 | 
IOCON_ANALOG_EN


327 .
	gc⁄fig
 = 
GPIO_CONFIG_INPUT


332 
	$hÆGpioPöInô
(
HÆGpioPö
 
pö
)

334 
	`IOCON_PöMuxSë
(
IOCON
, 
pö
->
ioc⁄
.
p‹t
,Öö->ioc⁄.pö,Öö->ioc⁄.
modefunc
);

335 
	`GPIO_PöInô
(
GPIO
, 
pö
->
ioc⁄
.
p‹t
,Öö->ioc⁄.pö, &pö->
c⁄fig
);

336 
	}
}

338 
	$hÆGpioPöDeöô
(
HÆGpioPö
 
pö
)

340 
HÆGpioPöSåu˘
 
hÆGpioPöSåu˘
 = {

341 .
ioc⁄
 = {

342 .
p‹t
 = 
pö
->
ioc⁄
.port,

343 .
pö
 =Öö->
ioc⁄
.pin,

344 .
modefunc
 = 
IOCON_FUNC0
 | 
IOCON_ANALOG_EN


346 .
c⁄fig
 = 
GPIO_CONFIG_INPUT


348 
	`IOCON_PöMuxSë
(
IOCON
, 
pö
->
ioc⁄
.
p‹t
,Öö->ioc⁄.pö, 
hÆGpioPöSåu˘
.ioc⁄.
modefunc
);

349 
	`GPIO_PöInô
(
GPIO
, 
pö
->
ioc⁄
.
p‹t
,Öö->ioc⁄.pö, &
hÆGpioPöSåu˘
.
c⁄fig
);

350 
	}
}

352 
	$hÆGpioSëPö
(
HÆGpioPö
 
pö
, 
boﬁ
 
vÆue
)

354 
	`GPIO_WrôePöOuçut
(
GPIO
, 
pö
->
ioc⁄
.
p‹t
,Öö->ioc⁄.pö, 
vÆue
);

355 
	}
}

357 
boﬁ
 
	$hÆGpioGëPö
(
HÆGpioPö
 
pö
)

359  
	`GPIO_RódPöI≈ut
(
GPIO
, 
pö
->
ioc⁄
.
p‹t
,Öin->iocon.pin);

360 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalGpio\HalGpio.h

1 #i‚de‡
__HAL_GPIO_H__


2 
	#__HAL_GPIO_H__


	)

4 
	~<°döt.h
>

5 
	~<°dboﬁ.h
>

7 
HÆGpioPöSåu˘
 * 
	tHÆGpioPö
;

9 
	sHÆGpio
 {

10 
HÆGpioPö
 
	musbVbus
;

12 
HÆGpioPö
 
	m•iFœshMiso
;

13 
HÆGpioPö
 
	m•iFœshMosi
;

14 
HÆGpioPö
 
	m•iFœshSck
;

15 
HÆGpioPö
 
	m•iFœshCs
;

16 
HÆGpioPö
 
	m•iFœshWp
;

17 
HÆGpioPö
 
	m•iFœshHﬁd
;

19 
HÆGpioPö
 
	mﬁedSdö
;

20 
HÆGpioPö
 
	mﬁedSck
;

21 
HÆGpioPö
 
	mﬁedCs
;

22 
HÆGpioPö
 
	mﬁedDc
;

23 
HÆGpioPö
 
	mﬁedR°
;

24 
HÆGpioPö
 
	mﬁedSda
;

25 
HÆGpioPö
 
	mﬁedS˛
;

27 
HÆGpioPö
 
	mÀdSñ0
;

28 
HÆGpioPö
 
	mÀdSñ1
;

29 
HÆGpioPö
 
	mÀdSñ2
;

31 
HÆGpioPö
 
	mÀdPwm0
;

32 
HÆGpioPö
 
	mÀdPwm1
;

34 
HÆGpioPö
 
	mpwmCh™√l0
;

35 
HÆGpioPö
 
	mpwmCh™√l1
;

36 
HÆGpioPö
 
	mpwmCh™√l2
;

37 
HÆGpioPö
 
	mpwmCh™√l3
;

38 
HÆGpioPö
 
	mpwmCh™√l4
;

39 
HÆGpioPö
 
	mpwmCh™√l5
;

40 
HÆGpioPö
 
	mpwmCh™√l6
;

42 
HÆGpioPö
 
	mèchCh™√l0
;

43 
HÆGpioPö
 
	mèchCh™√l1
;

44 
HÆGpioPö
 
	mèchCh™√l2
;

45 
HÆGpioPö
 
	mèchCh™√l3
;

46 
HÆGpioPö
 
	mèchCh™√l4
;

47 
HÆGpioPö
 
	mèchCh™√l5
;

48 
HÆGpioPö
 
	mèchCh™√l6
;

50 
HÆGpioPö
 
	madcTîmi°‹0
;

51 
HÆGpioPö
 
	madcTîmi°‹1
;

53 
HÆGpioPö
 
	madc12v
;

54 
HÆGpioPö
 
	madc5v
;

55 
HÆGpioPö
 
	madc3v3
;

57 } 
	tHÆGpio
;

59 c⁄° 
HÆGpio
 
hÆGpio
;

61 
hÆGpioInô
();

62 
hÆGpioPöInô
(
HÆGpioPö
 
pö
);

63 
hÆGpioPöDeöô
(
HÆGpioPö
 
pö
);

64 
hÆGpioSëPö
(
HÆGpioPö
 
pö
, 
boﬁ
 
vÆue
);

65 
boﬁ
 
hÆGpioGëPö
(
HÆGpioPö
 
pö
);

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalI2c\HalI2c.c

1 
	~"HÆI2c.h
"

2 
	~"f¶_i2c.h
"

3 
	~"f¶_i2c_dma.h
"

4 
	~"f¶_ioc⁄.h
"

6 
	#I2C_DMA
 
DMA0


	)

7 
	#HAL_I2C_DMA_CHANNEL_0
 3

	)

8 
	#HAL_I2C_DMA_CHANNEL_1
 5

	)

10 
	#I2C_MASTER_0_BASE
 ((
I2C_Ty≥
 *Ë
I2C1_BASE
)

	)

11 
	#I2C_MASTER_1_BASE
 ((
I2C_Ty≥
 *Ë
I2C2_BASE
)

	)

13 
	#I2C_BAUDRATE
 (100000)

	)

16 
	#HAL_I2C_SDA_0_PORT
 0

	)

17 
	#HAL_I2C_SCL_0_PORT
 0

	)

18 
	#HAL_I2C_SDA_1_PORT
 1

	)

19 
	#HAL_I2C_SCL_1_PORT
 1

	)

21 
	#HAL_I2C_SDA_0_PIN
 13

	)

22 
	#HAL_I2C_SCL_0_PIN
 14

	)

23 
	#HAL_I2C_SDA_1_PIN
 26

	)

24 
	#HAL_I2C_SCL_1_PIN
 27

	)

27 
i2c_ma°î_dma_h™dÀ_t
 
	gma°îDmaH™dÀ
[
I2C_MASTER_COUNT
];

28 
dma_h™dÀ_t
 
	gdmaH™dÀ
[
I2C_MASTER_COUNT
];

29 
i2c_ma°î_å™s„r_t
 
	gma°îX„r
[
I2C_MASTER_COUNT
];

31 
HÆI2cEvítCÆlback
 
	ghÆI2cEvítCÆlback
[
I2C_MASTER_COUNT
];

32 c⁄° 
I2cMa°î
 
	gi2cMa°îUnôs
[
I2C_MASTER_COUNT
] = {
I2C_MASTER_0
, 
I2C_MASTER_1
};

33 c⁄° 
uöt32_t
 
	gi2cMa°îDmaCh™√l
[
I2C_MASTER_COUNT
] = {
HAL_I2C_DMA_CHANNEL_0
, 
HAL_I2C_DMA_CHANNEL_1
};

34 c⁄° 
I2C_Ty≥
 *
	gi2cMa°îBa£
[
I2C_MASTER_COUNT
] = {
I2C_MASTER_0_BASE
, 
I2C_MASTER_1_BASE
};

35 vﬁ©ûê
boﬁ
 
	gisTøns„rCom∂ëed
[
I2C_MASTER_COUNT
] = {
åue
,Årue};

37 
	$hÆI2cDmaCÆlback
(
I2C_Ty≥
 *
ba£
, 
i2c_ma°î_dma_h™dÀ_t
 *
h™dÀ
, 
°©us_t
 
°©us
, *
u£rD©a
)

39 i‡(
u£rD©a
 !
NULL
) {

40 
isTøns„rCom∂ëed
[*((
I2cMa°î
 *Ë
u£rD©a
)] = 
åue
;

41 i‡(
hÆI2cEvítCÆlback
[*((
I2cMa°î
 *Ë
u£rD©a
)] !
NULL
) {

42 
hÆI2cEvítCÆlback
[*((
I2cMa°î
 *Ë
u£rD©a
)](
°©us
 =
kSètus_Suc˚ss
);

45 
	}
}

47 c⁄° 
ioc⁄_group_t
 
	ghÆI2cPöMux
[] = {

48 {
HAL_I2C_SDA_0_PORT
, 
HAL_I2C_SDA_0_PIN
, 
IOCON_FUNC1
 | 
IOCON_MODE_PULLUP
 | 
IOCON_DIGITAL_EN
 | 
IOCON_INPFILT_OFF
},

49 {
HAL_I2C_SCL_0_PORT
, 
HAL_I2C_SCL_0_PIN
, 
IOCON_FUNC1
 | 
IOCON_MODE_PULLUP
 | 
IOCON_DIGITAL_EN
 | 
IOCON_INPFILT_OFF
},

50 {
HAL_I2C_SDA_1_PORT
, 
HAL_I2C_SDA_1_PIN
, 
IOCON_FUNC1
 | 
IOCON_MODE_PULLUP
 | 
IOCON_DIGITAL_EN
 | 
IOCON_INPFILT_OFF
},

51 {
HAL_I2C_SCL_1_PORT
, 
HAL_I2C_SCL_1_PIN
, 
IOCON_FUNC1
 | 
IOCON_MODE_PULLUP
 | 
IOCON_DIGITAL_EN
 | 
IOCON_INPFILT_OFF
},

54 
	$hÆI2cPösInô
()

56 
	`IOCON_SëPöMuxög
(
IOCON
, 
hÆI2cPöMux
, (halI2cPinMux) / (*halI2cPinMux));

57 
	}
}

59 
	$hÆI2cInô
()

61 
i2c_ma°î_c⁄fig_t
 
ma°îC⁄fig
;

64 
	`CLOCK_AâachClk
(
kFRO12M_to_FLEXCOMM2
);

65 
	`CLOCK_AâachClk
(
kFRO12M_to_FLEXCOMM1
);

68 
	`RESET_PîùhîÆRe£t
(
kFC2_RST_SHIFT_RSTn
);

69 
	`RESET_PîùhîÆRe£t
(
kFC1_RST_SHIFT_RSTn
);

71 
	`hÆI2cPösInô
();

72 
	`DMA_Inô
(
I2C_DMA
);

74 
	`I2C_Ma°îGëDeÁu…C⁄fig
(&
ma°îC⁄fig
);

77 
ma°îC⁄fig
.
baudR©e_Bps
 = 
I2C_BAUDRATE
;

78 
ma°îC⁄fig
.
íabÀTimeout
 = 
åue
;

81 
	`I2C_Ma°îInô
((
I2C_Ty≥
 *Ë
i2cMa°îBa£
[
I2C_MASTER_0
], &
ma°îC⁄fig
, 
	`CLOCK_GëFªq
(
kCLOCK_FÀxcomm2
));

82 
	`I2C_Ma°îInô
((
I2C_Ty≥
 *Ë
i2cMa°îBa£
[
I2C_MASTER_1
], &
ma°îC⁄fig
, 
	`CLOCK_GëFªq
(
kCLOCK_FÀxcomm1
));

83 
	}
}

85 
boﬁ
 
	$hÆI2cRódBuff
(
I2cMa°î
 
i2cMa°î
, 
uöt8_t
 
¶aveAddªss
, uöt8_à
ªgAddªss
, uöt8_à
d©aBuf„r
[], 
size_t
 
buf„rLígth
, 
HÆI2cEvítCÆlback
 
hÆI2cEvítCb
)

87 i‡(
isTøns„rCom∂ëed
[
i2cMa°î
] =
Ál£
) {

88  
Ál£
;

91 
hÆI2cEvítCÆlback
[
i2cMa°î
] = 
hÆI2cEvítCb
;

92 
	`mem£t
(&
ma°îDmaH™dÀ
[
i2cMa°î
], 0, (masterDmaHandle[i2cMaster]));

93 
	`mem£t
(&
ma°îX„r
[
i2cMa°î
], 0, (masterXfer[i2cMaster]));

95 
ma°îX„r
[
i2cMa°î
].
¶aveAddªss
 = slaveAddress;

96 
ma°îX„r
[
i2cMa°î
].
dúe˘i⁄
 = 
kI2C_Ród
;

97 
ma°îX„r
[
i2cMa°î
].
subaddªss
 = 
ªgAddªss
;

98 
ma°îX„r
[
i2cMa°î
].
subaddªssSize
 = (
ªgAddªss
);

99 
ma°îX„r
[
i2cMa°î
].
d©a
 = 
d©aBuf„r
;

100 
ma°îX„r
[
i2cMa°î
].
d©aSize
 = 
buf„rLígth
;

101 
ma°îX„r
[
i2cMa°î
].
Êags
 = 
kI2C_Tøns„rDeÁu…Fœg
;

103 
	`DMA_E«bÀCh™√l
(
I2C_DMA
, 
i2cMa°îDmaCh™√l
[
i2cMa°î
]);

104 
	`DMA_Cª©eH™dÀ
(&
dmaH™dÀ
[
i2cMa°î
], 
I2C_DMA
, 
i2cMa°îDmaCh™√l
[i2cMaster]);

106 
isTøns„rCom∂ëed
[
i2cMa°î
] = 
Ál£
;

107 
	`I2C_Ma°îTøns„rCª©eH™dÀDMA
((
I2C_Ty≥
 *Ë
i2cMa°îBa£
[
i2cMa°î
], &
ma°îDmaH™dÀ
[i2cMa°î], 
hÆI2cDmaCÆlback
, (
I2cMa°î
 *Ë&
i2cMa°îUnôs
[i2cMa°î], &
dmaH™dÀ
[i2cMaster]);

108 
°©us_t
 
°©us
 = 
	`I2C_Ma°îTøns„rDMA
((
I2C_Ty≥
 *Ë
i2cMa°îBa£
[
i2cMa°î
], &
ma°îDmaH™dÀ
[i2cMa°î], &
ma°îX„r
[i2cMaster]);

110  
°©us
 =
kSètus_Suc˚ss
;

111 
	}
}

113 
boﬁ
 
	$hÆI2cWrôeBuff
(
I2cMa°î
 
i2cMa°î
, 
uöt8_t
 
¶aveAddªss
, uöt8_à
ªgAddªss
, c⁄° uöt8_à
d©aBuf„r
[], 
size_t
 
buf„rLígth
, 
HÆI2cEvítCÆlback
 
hÆI2cEvítCb
)

115 i‡(
isTøns„rCom∂ëed
[
i2cMa°î
] =
Ál£
) {

116  
Ál£
;

119 
hÆI2cEvítCÆlback
[
i2cMa°î
] = 
hÆI2cEvítCb
;

120 
	`mem£t
(&
ma°îDmaH™dÀ
[
i2cMa°î
], 0, (masterDmaHandle[i2cMaster]));

121 
	`mem£t
(&
ma°îX„r
[
i2cMa°î
], 0, (masterXfer[i2cMaster]));

123 
ma°îX„r
[
i2cMa°î
].
¶aveAddªss
 = slaveAddress;

124 
ma°îX„r
[
i2cMa°î
].
dúe˘i⁄
 = 
kI2C_Wrôe
;

125 
ma°îX„r
[
i2cMa°î
].
subaddªss
 = 
ªgAddªss
;

126 
ma°îX„r
[
i2cMa°î
].
subaddªssSize
 = (
ªgAddªss
);

127 
ma°îX„r
[
i2cMa°î
].
d©a
 = (
uöt8_t
 *Ë
d©aBuf„r
;

128 
ma°îX„r
[
i2cMa°î
].
d©aSize
 = 
buf„rLígth
;

129 
ma°îX„r
[
i2cMa°î
].
Êags
 = 
kI2C_Tøns„rDeÁu…Fœg
;

131 
	`DMA_E«bÀCh™√l
(
I2C_DMA
, 
i2cMa°îDmaCh™√l
[
i2cMa°î
]);

132 
	`DMA_Cª©eH™dÀ
(&
dmaH™dÀ
[
i2cMa°î
], 
I2C_DMA
, 
i2cMa°îDmaCh™√l
[i2cMaster]);

134 
isTøns„rCom∂ëed
[
i2cMa°î
] = 
Ál£
;

135 
	`I2C_Ma°îTøns„rCª©eH™dÀDMA
((
I2C_Ty≥
 *Ë
i2cMa°îBa£
[
i2cMa°î
], &
ma°îDmaH™dÀ
[i2cMa°î], 
hÆI2cDmaCÆlback
, (
I2cMa°î
 *Ë&
i2cMa°îUnôs
[i2cMa°î], &
dmaH™dÀ
[i2cMaster]);

136 
°©us_t
 
°©us
 = 
	`I2C_Ma°îTøns„rDMA
((
I2C_Ty≥
 *Ë
i2cMa°îBa£
[
i2cMa°î
], &
ma°îDmaH™dÀ
[i2cMa°î], &
ma°îX„r
[i2cMaster]);

138  
°©us
 =
kSètus_Suc˚ss
;

139 
	}
}

141 
	$hÆI2cDeöô
()

143 
	`I2C_Ma°îDeöô
((
I2C_Ty≥
 *Ë
i2cMa°îBa£
[
I2C_MASTER_0
]);

144 
	`I2C_Ma°îDeöô
((
I2C_Ty≥
 *Ë
i2cMa°îBa£
[
I2C_MASTER_1
]);

145 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalI2c\HalI2c.h

1 #i‚de‡
__HAL_I2C_H__


2 
	#__HAL_I2C_H__


	)

4 
	~<°döt.h
>

5 
	~<°dboﬁ.h
>

6 
	~<°dlib.h
>

8 (*
	tHÆI2cEvítCÆlback
)(
	tboﬁ
 
	tisTøns„rOk
);

10 
	eI2cMa°î
 {

11 
I2C_MASTER_0
,

12 
I2C_MASTER_1
,

13 
I2C_MASTER_COUNT


14 } 
	tI2cMa°î
;

16 
	`hÆI2cInô
();

18 
boﬁ
 
	`hÆI2cRódBuff
(
I2cMa°î
 I2cMa°î, 
uöt8_t
 
¶aveAddªss
, uöt8_à
ªgAddªss
, uöt8_à
d©aBuf„r
[], 
size_t
 
buf„rLígth
, 
HÆI2cEvítCÆlback
 
hÆI2cEvítCb
);

19 
boﬁ
 
	`hÆI2cWrôeBuff
(
I2cMa°î
 I2cMa°î, 
uöt8_t
 
¶aveAddªss
, uöt8_à
ªgAddªss
, c⁄° uöt8_à
d©aBuf„r
[], 
size_t
 
buf„rLígth
, 
HÆI2cEvítCÆlback
 
hÆI2cEvítCb
);

21 
	`hÆI2cDeöô
();

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalIFlash\HalIFlash.c

1 
	~"°döt.h
"

3 
	~"LPC54608.H
"

5 
	~"f¶_dma.h
"

6 
	~"f¶_•i.h
"

7 
	~"f¶_•i_dma.h
"

15 
	#SPI_FLASH
 
SPI7


	)

16 
	#DMA_SPI_FLASH
 
DMA0


	)

19 
	#DMA_SPIF_FLASH_RX_CHANEL
 14

	)

20 
	#DMA_SPIF_FLASH_TX_CHANEL
 15

	)

22 
dma_h™dÀ_t
 
	gdmaSpiFœshRxH™dÀ
;

23 
dma_h™dÀ_t
 
	gdmaSpiFœshTxH™dÀ
;

25 
dma_des¸ùt‹_t
 
	gdmaSpiFœshRxDes¸ùt‹
;

26 
dma_des¸ùt‹_t
 
	gdmaSpiFœshTxDes¸ùt‹
;

28 
	$öôSPIFœsh
()

30 
	`DMA_Inô
(
DMA0
);

32 
	`DMA_E«bÀCh™√l
(
DMA0
, 
DMA_SPIF_FLASH_RX_CHANEL
);

33 
	`DMA_E«bÀCh™√l
(
DMA0
, 
DMA_SPIF_FLASH_TX_CHANEL
);

35 
	`DMA_SëCh™√lPri‹ôy
(
DMA0
, 
DMA_SPIF_FLASH_RX_CHANEL
, 
kDMA_Ch™√lPri‹ôy2
);

36 
	`DMA_SëCh™√lPri‹ôy
(
DMA0
, 
DMA_SPIF_FLASH_TX_CHANEL
, 
kDMA_Ch™√lPri‹ôy2
);

38 
	}
}

41 
	$£ndComm™d
()

44 
	$ªadD©a
(
uöt32_t
 
addªss
, 
uöt8_t
 *
buf„r
, uöt32_à
d©aSize
)

51 
hÆSpiTøns„rD⁄eCÆlback
 = 
ˇŒback
;

53 
	`DMA_Cª©eH™dÀ
(&
ma°îTxH™dÀ
, 
SPI_DMA
, 
EXAMPLE_SPI_MASTER_TX_CHANNEL
);

54 
	`DMA_Cª©eH™dÀ
(&
ma°îRxH™dÀ
, 
SPI_DMA
, 
EXAMPLE_SPI_MASTER_RX_CHANNEL
);

57 
	`SPI_Ma°îTøns„rCª©eH™dÀDMA
(
EXAMPLE_SPI_MASTER
, &
ma°îH™dÀ
, 
SPI_Ma°îU£rCÆlback
, 
NULL
, &
ma°îTxH™dÀ
, &
ma°îRxH™dÀ
);

60 
ma°îX„r
.
txD©a
 = (
uöt8_t
 *)ÅxData;

61 
ma°îX„r
.
rxD©a
 =ÑxData;

62 
ma°îX„r
.
d©aSize
 = 
å™s„rD©aLígth
;

63 
ma°îX„r
.
c⁄figFœgs
 |
kSPI_FømeAs£π
;

65  (
kSètus_Suc˚ss
 =
	`SPI_Ma°îTøns„rDMA
(
EXAMPLE_SPI_MASTER
, &
ma°îH™dÀ
, &
ma°îX„r
));

66 
	}
}

73 
	$•iFœshTøns„rCom∂ôeCB
()

76 
	}
}

79 
	$öôSPIDMAFœsh
()

82 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalIFlash\HalIFlash.h

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalPwm\HalPwm.c

1 
	~"f¶_s˘imî.h
"

2 
	~"HÆPwm.h
"

5 
	#PWM_MAX_VALUE
 0xFF

	)

6 
	#PWM_FREQ
 10000U

	)

7 
	#PWM_DEFAULT
 50

	)

11 
uöt32_t
 
	mevít
;

12 
s˘imî_out_t
 
	mouçut
;

13 } 
	tHÆPwmCh™√lD©a
;

16 
HÆPwmCh™√lD©a
 
	ghÆPwmCh™√l
[] = {

17 { .
evít
 = 0, .
	gouçut
 = 
kSCTIMER_Out_0
 },

18 { .
	gevít
 = 0, .
	gouçut
 = 
kSCTIMER_Out_1
 },

19 { .
	gevít
 = 0, .
	gouçut
 = 
kSCTIMER_Out_2
 },

20 { .
	gevít
 = 0, .
	gouçut
 = 
kSCTIMER_Out_3
 },

21 { .
	gevít
 = 0, .
	gouçut
 = 
kSCTIMER_Out_4
 },

22 { .
	gevít
 = 0, .
	gouçut
 = 
kSCTIMER_Out_5
 },

23 { .
	gevít
 = 0, .
	gouçut
 = 
kSCTIMER_Out_6
 },

24 { .
	gevít
 = 0, .
	gouçut
 = 
kSCTIMER_Out_7
 },

25 { .
	gevít
 = 0, .
	gouçut
 = 
kSCTIMER_Out_7
 + 1 },

29 
boﬁ
 
	$hÆPwmInô
()

31 
s˘imî_c⁄fig_t
 
s˘imîInfo
;

32 
	`SCTIMER_GëDeÁu…C⁄fig
(&
s˘imîInfo
);

34 
	`SCTIMER_Inô
(
SCT0
, &
s˘imîInfo
);

36 
SCT0
->
CONFIG
 |
SCT_CONFIG_UNIFY_MASK
;

37 
uöt32_t
 
s˘Clock
 = 
	`CLOCK_GëFªq
(
kCLOCK_BusClk
Ë/ (((
SCT0
->
CTRL
 & 
SCT_CTRL_PRE_L_MASK
Ë>> 
SCT_CTRL_PRE_L_SHIFT
) + 1);

38 
uöt32_t
 
≥riod
 = (
s˘Clock
 / 
PWM_FREQ
) - 1;

40 
uöt32_t
 
pul£Pîiod
 = (
≥riod
 * 
PWM_DEFAULT
Ë/ 
PWM_MAX_VALUE
;

42 i‡(
PWM_DEFAULT
 =
PWM_MAX_VALUE
) {

43 
pul£Pîiod
 = 
≥riod
 + 2;

46 
uöt32_t
 
≥riodEvít
 = 0;

47 
	`SCTIMER_Cª©eAndScheduÀEvít
(
SCT0
, 
kSCTIMER_M©chEvítO∆y
, 
≥riod
, 0, 
kSCTIMER_Cou¡î_L
, &
≥riodEvít
);

49 
	`SCTIMER_SëupCou¡îLimôA˘i⁄
(
SCT0
, 
kSCTIMER_Cou¡î_L
, 
≥riodEvít
);

51 
i
 = 0; i < (
hÆPwmCh™√l
) / (halPwmChannel[0]); i++) {

53 
	`SCTIMER_Cª©eAndScheduÀEvít
(
SCT0
, 
kSCTIMER_M©chEvítO∆y
, 
pul£Pîiod
, 0, 
kSCTIMER_Cou¡î_L
, &
hÆPwmCh™√l
[
i
].
evít
);

55 
SCT0
->
OUTPUT
 &~(1U << 
hÆPwmCh™√l
[
i
].
ouçut
);

57 
	`SCTIMER_SëupOuçutSëA˘i⁄
(
SCT0
, 
hÆPwmCh™√l
[
i
].
ouçut
, 
≥riodEvít
);

59 
	`SCTIMER_SëupOuçutCÀ¨A˘i⁄
(
SCT0
, 
hÆPwmCh™√l
[
i
].
ouçut
, hÆPwmCh™√l[i].
evít
);

62 
	`SCTIMER_SèπTimî
(
SCT0
, 
kSCTIMER_Cou¡î_L
);

64  
åue
;

65 
	}
}

67 
boﬁ
 
	$hÆPwmSëDutyCy˛e
(
HÆPwmCh™√l
 
ch™√l
, 
uöt8_t
 
dutyCy˛e
)

70 
uöt32_t
 
≥riodM©chReg
 = 
SCT0
->
EVENT
[0].
CTRL
 & 
SCT_EVENT_CTRL_MATCHSEL_MASK
;

72 
uöt32_t
 
pul£M©chReg
 = 
SCT0
->
EVENT
[
hÆPwmCh™√l
[
ch™√l
].
evít
].
CTRL
 & 
SCT_EVENT_CTRL_MATCHSEL_MASK
;

73 
uöt32_t
 
≥riod
 = 
SCT0
->
SCTMATCH
[
≥riodM©chReg
];

75 
uöt32_t
 
pul£Pîiod
 = (
≥riod
 * 
dutyCy˛e
Ë/ 
PWM_MAX_VALUE
;

77 i‡(
dutyCy˛e
 =
PWM_MAX_VALUE
) {

78 
pul£Pîiod
 = 
≥riod
 + 2;

81 
	`SCTIMER_St›Timî
(
SCT0
, 
kSCTIMER_Cou¡î_L
);

83 
SCT0
->
SCTMATCH
[
pul£M©chReg
] = 
	`SCT_SCTMATCH_MATCHn_L
(
pul£Pîiod
);

84 
SCT0
->
SCTMATCHREL
[
pul£M©chReg
] = 
	`SCT_SCTMATCHREL_RELOADn_L
(
pul£Pîiod
);

86 
	`SCTIMER_SèπTimî
(
SCT0
, 
kSCTIMER_Cou¡î_L
);

88  
åue
;

89 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalPwm\HalPwm.h

1 #i‚de‡
__HAL_PWM_H__


2 
	#__HAL_PWM_H__


	)

4 
	~<°döt.h
>

5 
	~<°dboﬁ.h
>

9 
	mHAL_PWM_CHANNEL_NUM_LOCK_R
,

10 
	mHAL_PWM_CHANNEL_NUM_LOCK_G
,

11 
	mHAL_PWM_CHANNEL_NUM_LOCK_B
,

13 
	mHAL_PWM_CHANNEL_CAPS_LOCK_R
,

14 
	mHAL_PWM_CHANNEL_CAPS_LOCK_G
,

15 
	mHAL_PWM_CHANNEL_CAPS_LOCK_B
,

17 
	mHAL_PWM_CHANNEL_SCROL_LOCK_R
,

18 
	mHAL_PWM_CHANNEL_SCROL_LOCK_G
,

19 
	mHAL_PWM_CHANNEL_SCROL_LOCK_B
,

21 
	mHAL_PWM_CHANNEL_COUNT


22 } 
	tHÆPwmCh™√l
;

25 
boﬁ
 
hÆPwmInô
();

28 
boﬁ
 
hÆPwmSëDutyCy˛e
(
HÆPwmCh™√l
 
ch™√l
, 
uöt8_t
 
dutyCy˛e
);

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalSpi\HalSpi.c

1 
	~"HÆ•i.h
"

3 
	~"f¶_•i_dma.h
"

5 
	#SPI_DMA
 
DMA0


	)

7 
	#EXAMPLE_SPI_MASTER
 
SPI3


	)

8 
	#EXAMPLE_SPI_SSEL
 1

	)

9 
	#EXAMPLE_SPI_MASTER_CLK_FREQ
 
	`CLOCK_GëFªq
(
kCLOCK_FÀxcomm3
)

	)

10 
	#EXAMPLE_MASTER_SPI_SPOL
 
kSPI_SpﬁA˘iveAŒLow


	)

12 
	#EXAMPLE_SPI_MASTER_RX_CHANNEL
 6

	)

13 
	#EXAMPLE_SPI_MASTER_TX_CHANNEL
 7

	)

15 
dma_h™dÀ_t
 
	gma°îTxH™dÀ
;

16 
dma_h™dÀ_t
 
	gma°îRxH™dÀ
;

18 
•i_dma_h™dÀ_t
 
	gma°îH™dÀ
;

20 
•i_å™s„r_t
 
	gma°îX„r
;

22 
HÆSpiTøns„rD⁄eCÆlback
 
	ghÆSpiTøns„rD⁄eCÆlback
 = 
NULL
;

25 
	$SPI_Ma°îU£rCÆlback
(
SPI_Ty≥
 *
ba£
, 
•i_dma_h™dÀ_t
 *
h™dÀ
, 
°©us_t
 
°©us
, *
u£rD©a
)

27 i‡(
hÆSpiTøns„rD⁄eCÆlback
 !
NULL
) {

28 
	`hÆSpiTøns„rD⁄eCÆlback
(
°©us
 =
kSètus_Suc˚ss
);

30 
	}
}

32 
	$hÆSpiInô
()

35 
	`CLOCK_AâachClk
(
kFRO12M_to_FLEXCOMM3
);

37 
uöt32_t
 
§cClock_Hz
;

38 
•i_ma°î_c⁄fig_t
 
ma°îC⁄fig
;

40 
§cClock_Hz
 = 
EXAMPLE_SPI_MASTER_CLK_FREQ
;

42 
	`SPI_Ma°îGëDeÁu…C⁄fig
(&
ma°îC⁄fig
);

43 
ma°îC⁄fig
.
s£lNum
 = (
•i_s£l_t
)
EXAMPLE_SPI_SSEL
;

44 
ma°îC⁄fig
.
s£lPﬁ
 = (
•i_•ﬁ_t
)
EXAMPLE_MASTER_SPI_SPOL
;

45 
	`SPI_Ma°îInô
(
EXAMPLE_SPI_MASTER
, &
ma°îC⁄fig
, 
§cClock_Hz
);

47 
	`DMA_E«bÀCh™√l
(
SPI_DMA
, 
EXAMPLE_SPI_MASTER_TX_CHANNEL
);

48 
	`DMA_E«bÀCh™√l
(
SPI_DMA
, 
EXAMPLE_SPI_MASTER_RX_CHANNEL
);

49 
	`DMA_SëCh™√lPri‹ôy
(
SPI_DMA
, 
EXAMPLE_SPI_MASTER_TX_CHANNEL
, 
kDMA_Ch™√lPri‹ôy3
);

50 
	`DMA_SëCh™√lPri‹ôy
(
SPI_DMA
, 
EXAMPLE_SPI_MASTER_RX_CHANNEL
, 
kDMA_Ch™√lPri‹ôy2
);

51 
	}
}

54 
boﬁ
 
	$hÆSpiTøns„r
(
uöt8_t
 
txD©a
[], uöt8_à
rxD©a
[], 
uöt32_t
 
å™s„rD©aLígth
, 
HÆSpiTøns„rD⁄eCÆlback
 
ˇŒback
)

56 
hÆSpiTøns„rD⁄eCÆlback
 = 
ˇŒback
;

58 
	`DMA_Cª©eH™dÀ
(&
ma°îTxH™dÀ
, 
SPI_DMA
, 
EXAMPLE_SPI_MASTER_TX_CHANNEL
);

59 
	`DMA_Cª©eH™dÀ
(&
ma°îRxH™dÀ
, 
SPI_DMA
, 
EXAMPLE_SPI_MASTER_RX_CHANNEL
);

62 
	`SPI_Ma°îTøns„rCª©eH™dÀDMA
(
EXAMPLE_SPI_MASTER
, &
ma°îH™dÀ
, 
SPI_Ma°îU£rCÆlback
, 
NULL
, &
ma°îTxH™dÀ
, &
ma°îRxH™dÀ
);

65 
ma°îX„r
.
txD©a
 =ÅxData;

66 
ma°îX„r
.
rxD©a
 =ÑxData;

67 
ma°îX„r
.
d©aSize
 = 
å™s„rD©aLígth
;

68 
ma°îX„r
.
c⁄figFœgs
 |
kSPI_FømeAs£π
;

70  (
kSètus_Suc˚ss
 =
	`SPI_Ma°îTøns„rDMA
(
EXAMPLE_SPI_MASTER
, &
ma°îH™dÀ
, &
ma°îX„r
));

71 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalSpi\HalSpi.h

1 #i‚de‡
__HAL_SPI_H__


2 
	#__HAL_SPI_H__


	)

4 
	~<°döt.h
>

5 
	~<°dboﬁ.h
>

8 (*
	tHÆSpiTøns„rD⁄eCÆlback
)(
	tboﬁ
 
	tisOk
);

11 
	`hÆSpiInô
();

12 
boﬁ
 
	`hÆSpiTøns„r
(c⁄° 
uöt8_t
 
txD©a
[], uöt8_à
rxD©a
[], 
uöt32_t
 
å™s„rD©aLígth
, 
HÆSpiTøns„rD⁄eCÆlback
 
ˇŒback
);

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\Lcd\Lcd.c

2 
	~"f¶_gpio.h
"

3 
	~"f¶_ioc⁄.h
"

4 
	~"f¶_•i_dma.h
"

6 
	#SPI_DMA
 
DMA0


	)

8 
	#EXAMPLE_SPI_MASTER
 
SPI3


	)

9 
	#EXAMPLE_SPI_SSEL
 0

	)

10 
	#EXAMPLE_SPI_MASTER_CLK_FREQ
 
	`CLOCK_GëFªq
(
kCLOCK_FÀxcomm3
)

	)

11 
	#EXAMPLE_MASTER_SPI_SPOL
 
kSPI_SpﬁA˘iveAŒLow


	)

13 
	#EXAMPLE_SPI_MASTER_RX_CHANNEL
 6

	)

14 
	#EXAMPLE_SPI_MASTER_TX_CHANNEL
 7

	)

16 
	#GPIO_CONFIG_OUT_LOGIC_0
 { .
pöDúe˘i⁄
 = 
kGPIO_DigôÆOuçut
, .
ouçutLogic
 = 0 }

	)

17 
	#GPIO_CONFIG_OUT_LOGIC_1
 { .
pöDúe˘i⁄
 = 
kGPIO_DigôÆOuçut
, .
ouçutLogic
 = 1 }

	)

18 
	#GPIO_CONFIG_INPUT
 { .
pöDúe˘i⁄
 = 
kGPIO_DigôÆI≈ut
, .
ouçutLogic
 = 0 }

	)

20 
	#DIGITAL_WITH_PULLUP
 (
IOCON_MODE_PULLUP
 | 
IOCON_DIGITAL_EN
 | 
IOCON_INPFILT_OFF
)

	)

23 (*
	tHÆSpiTøns„rD⁄eCÆlback
)(
	tboﬁ
 
	tisOk
);

25 
	sHÆGpioPöSåu˘
 {

26 
ioc⁄_group_t
 
ioc⁄
;

27 
gpio_pö_c⁄fig_t
 
c⁄fig
;

28 } 
	tHÆGpioPöSåu˘
;

30 
dma_h™dÀ_t
 
ma°îTxH™dÀ
;

31 
dma_h™dÀ_t
 
ma°îRxH™dÀ
;

33 
•i_dma_h™dÀ_t
 
ma°îH™dÀ
;

35 
•i_å™s„r_t
 
ma°îX„r
;

37 
HÆSpiTøns„rD⁄eCÆlback
 
hÆSpiTøns„rD⁄eCÆlback
 = 
NULL
;

39 vﬁ©ûê
boﬁ
 
isTxD⁄e
 = 
Ál£
;

41 
HÆGpioPöSåu˘
 * 
	tHÆGpioPö
;

43 
	sHÆGpio
 {

44 
HÆGpioPö
 
•iOÀdDc
;

45 
HÆGpioPö
 
•iOÀdMosi
;

46 
HÆGpioPö
 
•iOÀdSck
;

47 
HÆGpioPö
 
•iOÀdCs
;

48 
HÆGpioPö
 
•iOÀdR°
;

49 } 
	tHÆGpio
;

51 
	`hÆGpioPöInô
(
HÆGpioPö
 
pö
);

52 
	`hÆGpioSëPö
(
HÆGpioPö
 
pö
, 
boﬁ
 
vÆue
);

54 c⁄° 
HÆGpio
 
hÆGpioPö
 = {

55 .
•iOÀdDc
 = &(
HÆGpioPöSåu˘
) {

56 .
ioc⁄
 = {

57 .
p‹t
 = 2,

58 .
pö
 = 20,

59 .
modefunc
 = 
IOCON_FUNC0
 | 
DIGITAL_WITH_PULLUP


61 .
c⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_1


63 .
•iOÀdMosi
 = &(
HÆGpioPöSåu˘
) {

64 .
ioc⁄
 = {

65 .
p‹t
 = 2,

66 .
pö
 = 18,

67 .
modefunc
 = 
IOCON_FUNC2
 | 
DIGITAL_WITH_PULLUP


69 .
c⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


71 .
•iOÀdSck
 = &(
HÆGpioPöSåu˘
) {

72 .
ioc⁄
 = {

73 .
p‹t
 = 2,

74 .
pö
 = 26,

75 .
modefunc
 = 
IOCON_FUNC3
 | 
DIGITAL_WITH_PULLUP


77 .
c⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


79 .
•iOÀdCs
 = &(
HÆGpioPöSåu˘
) {

80 .
ioc⁄
 = {

81 .
p‹t
 = 2,

82 .
pö
 = 21,

83 .
modefunc
 = 
IOCON_FUNC2
 | 
DIGITAL_WITH_PULLUP


85 .
c⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_1


87 .
•iOÀdR°
 = &(
HÆGpioPöSåu˘
) {

88 .
ioc⁄
 = {

89 .
p‹t
 = 2,

90 .
pö
 = 19,

91 .
modefunc
 = 
IOCON_FUNC0
 | 
DIGITAL_WITH_PULLUP


93 .
c⁄fig
 = 
GPIO_CONFIG_OUT_LOGIC_0


95 
	}
};

97 
	$hÆGpioPöInô
(
HÆGpioPö
 
pö
)

99 
	`IOCON_PöMuxSë
(
IOCON
, 
pö
->
ioc⁄
.
p‹t
,Öö->ioc⁄.pö,Öö->ioc⁄.
modefunc
);

100 
	`GPIO_PöInô
(
GPIO
, 
pö
->
ioc⁄
.
p‹t
,Öö->ioc⁄.pö, &pö->
c⁄fig
);

101 
	}
}

103 
	$hÆGpioSëPö
(
HÆGpioPö
 
pö
, 
boﬁ
 
vÆue
)

105 
	`GPIO_WrôePöOuçut
(
GPIO
, 
pö
->
ioc⁄
.
p‹t
,Öö->ioc⁄.pö, 
vÆue
);

106 
	}
}

108 
	$SPI_Ma°îU£rCÆlback
(
SPI_Ty≥
 *
ba£
, 
•i_dma_h™dÀ_t
 *
h™dÀ
, 
°©us_t
 
°©us
, *
u£rD©a
)

110 
isTxD⁄e
 = 
åue
;

111 i‡(
hÆSpiTøns„rD⁄eCÆlback
 !
NULL
) {

112 
	`hÆSpiTøns„rD⁄eCÆlback
(
°©us
 =
kSètus_Suc˚ss
);

114 
	}
}

116 
boﬁ
 
	$hÆSpiTøns„r
(c⁄° 
uöt8_t
 
txD©a
[], uöt8_à
rxD©a
[], 
uöt32_t
 
å™s„rD©aLígth
, 
HÆSpiTøns„rD⁄eCÆlback
 
ˇŒback
)

118 
hÆSpiTøns„rD⁄eCÆlback
 = 
ˇŒback
;

120 
	`DMA_Cª©eH™dÀ
(&
ma°îTxH™dÀ
, 
SPI_DMA
, 
EXAMPLE_SPI_MASTER_TX_CHANNEL
);

121 
	`DMA_Cª©eH™dÀ
(&
ma°îRxH™dÀ
, 
SPI_DMA
, 
EXAMPLE_SPI_MASTER_RX_CHANNEL
);

124 
	`SPI_Ma°îTøns„rCª©eH™dÀDMA
(
EXAMPLE_SPI_MASTER
, &
ma°îH™dÀ
, 
SPI_Ma°îU£rCÆlback
, 
NULL
, &
ma°îTxH™dÀ
, &
ma°îRxH™dÀ
);

127 
ma°îX„r
.
txD©a
 = (
uöt8_t
 *)ÅxData;

128 
ma°îX„r
.
rxD©a
 =ÑxData;

129 
ma°îX„r
.
d©aSize
 = 
å™s„rD©aLígth
;

130 
ma°îX„r
.
c⁄figFœgs
 |
kSPI_FømeAs£π
;

132  (
kSètus_Suc˚ss
 =
	`SPI_Ma°îTøns„rDMA
(
EXAMPLE_SPI_MASTER
, &
ma°îH™dÀ
, &
ma°îX„r
));

133 
	}
}

135 
	$£ndComm™d
(
uöt8_t
 
d©a
)

137 
uöt8_t
 
ª˚iveD©a
;

138 
	`hÆGpioSëPö
(
hÆGpioPö
.
•iOÀdDc
, 
Ál£
);

139 
isTxD⁄e
 = 
Ál£
;

140 
	`hÆSpiTøns„r
(&
d©a
, &
ª˚iveD©a
, (d©a), 
NULL
);

141 
isTxD⁄e
 =
Ál£
) {

144 
	}
}

146 
	$£ndD©a
(
uöt8_t
 
d©a
)

148 
isTxD⁄e
 =
Ál£
) {

152 
uöt8_t
 
ª˚iveD©a
;

153 
	`hÆGpioSëPö
(
hÆGpioPö
.
•iOÀdDc
, 
åue
);

154 
isTxD⁄e
 = 
Ál£
;

155 
	`hÆSpiTøns„r
(&
d©a
, &
ª˚iveD©a
, (d©a), 
NULL
);

156 
	}
}

158 
	$putPi˘uª
(c⁄° 
uöt8_t
 
d©a
[])

160 
	`£ndComm™d
(0x0C);

161 
	`hÆGpioSëPö
(
hÆGpioPö
.
•iOÀdDc
, 
åue
);

162 
uöt32_t
 
a
 = 0;

163 
a
 = 0;á < 32;á++) {

164 
isTxD⁄e
 = 
Ál£
;

165 
	`hÆSpiTøns„r
(
d©a
 + 
a
 * 1024, 
NULL
, 1024, NULL);

166 
isTxD⁄e
 =
Ál£
) {

170 
	}
}

172 
	$lcdInô
()

174 
	`DMA_Inô
(
DMA0
);

175 
	`hÆGpioPöInô
(
hÆGpioPö
.
•iOÀdR°
);

176 
	`hÆGpioPöInô
(
hÆGpioPö
.
•iOÀdCs
);

177 
	`hÆGpioPöInô
(
hÆGpioPö
.
•iOÀdDc
);

178 
	`hÆGpioPöInô
(
hÆGpioPö
.
•iOÀdMosi
);

179 
	`hÆGpioPöInô
(
hÆGpioPö
.
•iOÀdSck
);

181 
	`CLOCK_AâachClk
(
kFRO_HF_to_FLEXCOMM3
);

183 
uöt32_t
 
§cClock_Hz
;

184 
•i_ma°î_c⁄fig_t
 
ma°îC⁄fig
;

186 
§cClock_Hz
 = 
EXAMPLE_SPI_MASTER_CLK_FREQ
;

188 
	`SPI_Ma°îGëDeÁu…C⁄fig
(&
ma°îC⁄fig
);

189 
ma°îC⁄fig
.
s£lNum
 = (
•i_s£l_t
)
EXAMPLE_SPI_SSEL
;

190 
ma°îC⁄fig
.
s£lPﬁ
 = (
•i_•ﬁ_t
)
EXAMPLE_MASTER_SPI_SPOL
;

191 
ma°îC⁄fig
.
baudR©e_Bps
 = 24000000;

192 
	`SPI_Ma°îInô
(
EXAMPLE_SPI_MASTER
, &
ma°îC⁄fig
, 
§cClock_Hz
);

194 
	`DMA_E«bÀCh™√l
(
SPI_DMA
, 
EXAMPLE_SPI_MASTER_TX_CHANNEL
);

195 
	`DMA_E«bÀCh™√l
(
SPI_DMA
, 
EXAMPLE_SPI_MASTER_RX_CHANNEL
);

196 
	`DMA_SëCh™√lPri‹ôy
(
SPI_DMA
, 
EXAMPLE_SPI_MASTER_TX_CHANNEL
, 
kDMA_Ch™√lPri‹ôy3
);

197 
	`DMA_SëCh™√lPri‹ôy
(
SPI_DMA
, 
EXAMPLE_SPI_MASTER_RX_CHANNEL
, 
kDMA_Ch™√lPri‹ôy2
);

198 vﬁ©ûê
uöt32_t
 
dñayC¡r
 = 0;

199 
dñayC¡r
 = 0; delayCntr < 1000000; delayCntr++) {

203 
	`hÆGpioSëPö
(
hÆGpioPö
.
•iOÀdR°
, 
åue
);

205 
dñayC¡r
 = 0; delayCntr < 1000000; delayCntr++) {

209 
	`£ndComm™d
(0x01);

211 
	`£ndComm™d
(0x03);

212 
	`£ndD©a
(0x00);

214 
	`£ndComm™d
(0x04);

215 
	`£ndD©a
(0x04);

217 
	`£ndComm™d
(0x05);

218 
	`£ndD©a
(0x00);

220 
	`£ndComm™d
(0x06);

221 
	`£ndD©a
(0x00);

223 
	`£ndComm™d
(0x07);

224 
	`£ndD©a
(0x00);

225 
	`£ndD©a
(0x00);

226 
	`£ndD©a
(0x07);

227 
	`£ndD©a
(0x0F);

228 
	`£ndD©a
(0x00);

229 
	`£ndD©a
(0x00);

230 
	`£ndD©a
(0x07);

231 
	`£ndD©a
(0x0F);

233 
	`£ndComm™d
(0x08);

234 
	`£ndD©a
(0x01);

236 
	`£ndComm™d
(0x09);

237 
	`£ndD©a
(0x07);

239 
	`£ndComm™d
(0x0A);

240 
	`£ndD©a
(0x00);

241 
	`£ndD©a
(0x00);

242 
	`£ndD©a
(0x07);

243 
	`£ndD©a
(0x0F);

244 
	`£ndD©a
(0x00);

245 
	`£ndD©a
(0x00);

246 
	`£ndD©a
(0x07);

247 
	`£ndD©a
(0x0F);

249 
	`£ndComm™d
(0x0B);

250 
	`£ndD©a
(0x00);

251 
	`£ndD©a
(0x00);

252 
	`£ndD©a
(0x00);

253 
	`£ndD©a
(0x00);

255 
	`£ndComm™d
(0x0E);

256 
	`£ndD©a
(0x03);

257 
	`£ndD©a
(0x0A);

258 
	`£ndD©a
(0x03);

259 
	`£ndD©a
(0x0A);

260 
	`£ndD©a
(0x03);

261 
	`£ndD©a
(0x0A);

263 
	`£ndComm™d
(0x0F);

264 
	`£ndD©a
(0x14);

265 
	`£ndD©a
(0x14);

266 
	`£ndD©a
(0x14);

268 
	`£ndComm™d
(0x1C);

269 
	`£ndD©a
(0x08);

271 
	`£ndComm™d
(0x1D);

272 
	`£ndD©a
(0x0A);

273 
	`£ndD©a
(0x0A);

274 
	`£ndD©a
(0x0A);

276 
	`£ndComm™d
(0x1E);

277 
	`£ndD©a
(0x00);

279 
	`£ndComm™d
(0x1F);

280 
	`£ndD©a
(0x00);

282 
	`£ndComm™d
(0x30);

283 
	`£ndD©a
(0x12);

285 
	`£ndComm™d
(0x02);

286 
	`£ndD©a
(0x01);

288 
	`£ndComm™d
(0x3C);

289 
	`£ndD©a
(0x01);

291 
	`£ndComm™d
(0x3A);

293 c⁄° 
uöt8_t
 
Gøy_SˇÀ_TB1
[64] = {

299 c⁄° 
uöt8_t
 
Gøy_SˇÀ_TB2
[128] = {

309 
uöt32_t
 
˙å
 = 0;

310 
˙å
 = 0; cntr < 64; cntr++) {

311 
	`£ndD©a
(
Gøy_SˇÀ_TB1
[
˙å
]);

314 
˙å
 = 0; cntr < 128; cntr++) {

315 
	`£ndD©a
(
Gøy_SˇÀ_TB2
[
˙å
]);

318 
˙å
 = 0; cntr < 64; cntr++) {

319 
	`£ndD©a
(
Gøy_SˇÀ_TB1
[
˙å
]);

321 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\Lcd\Lcd.h

1 #i‚de‡
__HAL_SPI_H__


2 
	#__HAL_SPI_H__


	)

4 
	~<°döt.h
>

5 
	~<°dboﬁ.h
>

7 
lcdInô
();

8 
putPi˘uª
(c⁄° 
uöt8_t
 
d©a
[]);

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\LedContorllerHal\LedController.c

1 
	~<°ddef.h
>

2 
	~"f¶_ioc⁄.h
"

3 
	~"f¶_dma.h
"

4 
	~"f¶_˘imî.h
"

5 
	~"f¶_öputmux.h
"

7 
	~"LedC⁄åﬁÀr.h
"

10 
	#WS2812B_FREQ
 800000

	)

11 
	#WS2812B_SHORT_LEVEL
 (17 * 2)

	)

12 
	#WS2812B_LONG_LEVEL
 (38 * 2)

	)

14 
	#HD59731B_FREQ
 406000

	)

15 
	#HD59731B_SHORT_LEVEL
 (17 * 4)

	)

16 
	#HD59731B_LONG_LEVEL
 (38 * 4)

	)

18 
	#LED_CONTROLLER_TIMER_UNIT
 
CTIMER3


	)

20 
	#LED_CONTROLLER_TIMER_MATCH_NUMBER
 0

	)

21 
	#LED_CONTROLLER_TIMER_MATCH_LED_0
 1

	)

22 
	#LED_CONTROLLER_TIMER_MATCH_LED_1
 2

	)

24 
	#LED_CONTROLLER_DMA_CHANNEL_LED_0
 0

	)

27 
	#LED_CONTROLLER_PWM_PIN_0
 30

	)

28 
	#LED_CONTROLLER_PWM_PIO_0
 4

	)

29 
	#LED_CONTROLLER_PWM_FUN_0
 
IOCON_FUNC3


	)

32 
	#LED_CONTROLLER_PWM_PIN_1
 14

	)

33 
	#LED_CONTROLLER_PWM_PIO_1
 3

	)

34 
	#LED_CONTROLLER_PWM_FUN_1
 
IOCON_FUNC3


	)

37 
	#BITS_PER_LED
 24

	)

38 
	#MAX_LED_COUNT
 72

	)

39 
	#MAX_BITS_COUNT
 (
MAX_LED_COUNT
 * 
BITS_PER_LED
)

	)

42 
	#DMA_ADDR
 (*)

	)

44 c⁄° 
ioc⁄_group_t
 
	gÀdC⁄åﬁÀrPöMuxögTabÀ
[] = {

45 {
LED_CONTROLLER_PWM_PIO_0
, 
LED_CONTROLLER_PWM_PIN_0
, (
LED_CONTROLLER_PWM_FUN_0
 | 
IOCON_DIGITAL_EN
 | 
IOCON_INPFILT_OFF
)},

46 {
LED_CONTROLLER_PWM_PIO_1
, 
LED_CONTROLLER_PWM_PIN_1
, (
LED_CONTROLLER_PWM_FUN_1
 | 
IOCON_DIGITAL_EN
 | 
IOCON_INPFILT_OFF
)},

49 
LedC⁄åﬁÀrOnD©aSítCb
 
	g⁄D©aSítCÆlback
 = 
NULL
;

50 
dma_h™dÀ_t
 
	ghdma
;

51 
dma_des¸ùt‹_t
 
dmaDesc
 
__©åibuã__
((
Æig√d
((dma_descriptor_t))));

54 
uöt32_t
 
	gÀdDmaBuf„r
[
MAX_BITS_COUNT
 + 1] 
__©åibuã__
((
Æig√d
((uint32_t))));

56 vﬁ©ûê
boﬁ
 
	gÀdC⁄åﬁÀrBusyFœg
 = 
Ál£
;

58 
	$dmaCÆlback
(
_dma_h™dÀ
 *
h™dÀ
, *
u£rD©a
, 
boﬁ
 
å™s„rD⁄e
, 
uöt32_t
 
ötmode
)

60 
LED_CONTROLLER_TIMER_UNIT
->
TCR
 &= ~(1);

61 i‡(
⁄D©aSítCÆlback
) {

62 
	`⁄D©aSítCÆlback
();

64 
ÀdC⁄åﬁÀrBusyFœg
 = 
Ál£
;

65 
	}
}

67 
	$ÀdC⁄åﬁÀrSëLedD©a
(
uöt32_t
 
p‹tNumbî
, 
LedTy≥
 
ÀdTy≥
, c⁄° uöt32_à*
rgbAºay
, uöt32_à
rgbAºayÀngth
)

69 
uöt32_t
 
ÀdBôFªquícy
 = 0;

70 
uöt32_t
 
ÀdBôL⁄gLevñ
 = 0;

71 
uöt32_t
 
ÀdBôSh‹tLevñ
 = 0;

73 
ÀdTy≥
) {

74 
LED_TYPE_WS2812B
:

75 
ÀdBôFªquícy
 = 
WS2812B_FREQ
;

76 
ÀdBôL⁄gLevñ
 = 
WS2812B_LONG_LEVEL
;

77 
ÀdBôSh‹tLevñ
 = 
WS2812B_SHORT_LEVEL
;

80 
LED_TYPE_HD59731B
:

81 
ÀdBôFªquícy
 = 
HD59731B_FREQ
;

82 
ÀdBôL⁄gLevñ
 = 
HD59731B_LONG_LEVEL
;

83 
ÀdBôSh‹tLevñ
 = 
HD59731B_SHORT_LEVEL
;

90 i‡(
rgbAºayÀngth
 > 
MAX_LED_COUNT
) {

94 
ÀdC⁄åﬁÀrBusyFœg
 =
åue
)

97 
ÀdC⁄åﬁÀrBusyFœg
 = 
åue
;

99 c⁄° 
uöt32_t
 
timîClockS≥ed
 = 96000000UL;

101 
size_t
 
ÀdCou¡î
 = 0;ÜedCou¡î < 
rgbAºayÀngth
;ÜedCounter++) {

102 
size_t
 
bôNumbî
 = 0; bôNumbî < 
BITS_PER_LED
; bitNumber++) {

103 
ÀdDmaBuf„r
[
ÀdCou¡î
 * 
BITS_PER_LED
 + 
bôNumbî
] = (
rgbAºay
[ÀdCou¡î] & (1 << (BITS_PER_LED - bôNumbî - 1))Ë? 
ÀdBôL⁄gLevñ
 : 
ÀdBôSh‹tLevñ
;

106 
ÀdDmaBuf„r
[
rgbAºayÀngth
 * 
BITS_PER_LED
] = 0;

108 c⁄° 
˘imî_m©ch_c⁄fig_t
 
≥riodM©chC⁄fig
 = {

109 .
íabÀCou¡îRe£t
 = 
åue
,

110 .
íabÀCou¡îSt›
 = 
Ál£
,

111 .
m©chVÆue
 = 
timîClockS≥ed
 / 
ÀdBôFªquícy
 - 1,

112 .
outC⁄åﬁ
 = 
kCTIMER_Ouçut_NoA˘i⁄
,

113 .
outPöInôSèã
 = 
åue
,

114 .
íabÀI¡îru±
 = 
Ál£
,

117 c⁄° 
˘imî_m©ch_c⁄fig_t
 
dutyCy˛eM©chC⁄fig
 = {

118 .
íabÀCou¡îRe£t
 = 
Ál£
,

119 .
íabÀCou¡îSt›
 = 
Ál£
,

120 .
m©chVÆue
 = 0,

121 .
outC⁄åﬁ
 = 
kCTIMER_Ouçut_NoA˘i⁄
,

122 .
outPöInôSèã
 = 
åue
,

123 .
íabÀI¡îru±
 = 
Ál£
,

126 i‡(
p‹tNumbî
 == 0) {

127 
LED_CONTROLLER_TIMER_UNIT
->
PWMC
 = 1 << 0;

128 
	`CTIMER_SëupM©ch
(
LED_CONTROLLER_TIMER_UNIT
, 0, &
dutyCy˛eM©chC⁄fig
);

129 
	`CTIMER_SëupM©ch
(
LED_CONTROLLER_TIMER_UNIT
, 1, &
≥riodM©chC⁄fig
);

131 
INPUTMUX
->
DMA_ITRIG_INMUX
[
LED_CONTROLLER_DMA_CHANNEL_LED_0
] = 15;

134 
LED_CONTROLLER_TIMER_UNIT
->
PWMC
 = 1 << 
LED_CONTROLLER_TIMER_MATCH_LED_0
;

135 
	`CTIMER_SëupM©ch
(
LED_CONTROLLER_TIMER_UNIT
, 1, &
dutyCy˛eM©chC⁄fig
);

136 
	`CTIMER_SëupM©ch
(
LED_CONTROLLER_TIMER_UNIT
, 0, &
≥riodM©chC⁄fig
);

138 
INPUTMUX
->
DMA_ITRIG_INMUX
[
LED_CONTROLLER_DMA_CHANNEL_LED_0
] = 14;

141 
dma_å™s„r_c⁄fig_t
 
dmaTøns„rCfg
;

142 
	`DMA_Pª∑ªTøns„r
(&
dmaTøns„rCfg
, (
uöt8_t
 *)&
ÀdDmaBuf„r
[0], (*)&
LED_CONTROLLER_TIMER_UNIT
->
MR
[
p‹tNumbî
], 4, (
rgbAºayÀngth
 * 
BITS_PER_LED
 / 2Ë* 4, 
kDMA_Mem‹yToPîùhîÆ
, &
dmaDesc
);

143 
dmaTøns„rCfg
.
isPîùh
 = 
Ál£
;

144 
dmaTøns„rCfg
.
x„rcfg
.
ötA
 = 
Ál£
;

145 
dmaTøns„rCfg
.
x„rcfg
.
ötB
 = 
Ál£
;

146 
	`DMA_SubmôTøns„r
(&
hdma
, &
dmaTøns„rCfg
);

148 
	`DMA_Pª∑ªTøns„r
(&
dmaTøns„rCfg
, (
uöt8_t
 *)&
ÀdDmaBuf„r
[
rgbAºayÀngth
 * 
BITS_PER_LED
 / 2], (*Ë&
LED_CONTROLLER_TIMER_UNIT
->
MR
[
p‹tNumbî
], 4, (rgbAºayÀngth * BITS_PER_LED / 2Ë* 4, 
kDMA_Mem‹yToPîùhîÆ
, 
NULL
);

149 
dmaTøns„rCfg
.
isPîùh
 = 
Ál£
;

150 
dmaTøns„rCfg
.
x„rcfg
.
ötA
 = 
åue
;

151 
dmaTøns„rCfg
.
x„rcfg
.
ötB
 = 
Ál£
;

152 
	`DMA_Cª©eDes¸ùt‹
(&
dmaDesc
, &
dmaTøns„rCfg
.
x„rcfg
, dmaTøns„rCfg.
§cAddr
, dmaTøns„rCfg.
d°Addr
, dmaTøns„rCfg.
√xtDesc
);

154 
	`DMA_SèπTøns„r
(&
hdma
);

156 
LED_CONTROLLER_TIMER_UNIT
->
TC
 = 
timîClockS≥ed
 / 
ÀdBôFªquícy
 - 1;

157 
LED_CONTROLLER_TIMER_UNIT
->
MR
[
p‹tNumbî
] = 
ÀdDmaBuf„r
[0];

158 
LED_CONTROLLER_TIMER_UNIT
->
TCR
 |= 1;

159 
	}
}

161 
	$ÀdC⁄åﬁÀrInô
(
LedC⁄åﬁÀrOnD©aSítCb
 
⁄D©aSítCb
)

163 
⁄D©aSítCÆlback
 = 
⁄D©aSítCb
;

164 c⁄° 
uöt32_t
 
timîClockS≥ed
 = 96000000UL;

166 
	`IOCON_SëPöMuxög
(
IOCON
, 
ÀdC⁄åﬁÀrPöMuxögTabÀ
, ÷edC⁄åﬁÀrPöMuxögTabÀË/ (
ioc⁄_group_t
));

168 
˘imî_c⁄fig_t
 
c⁄fig
;

169 
	`CTIMER_GëDeÁu…C⁄fig
(&
c⁄fig
);

170 
	`CTIMER_Inô
(
LED_CONTROLLER_TIMER_UNIT
, &
c⁄fig
);

171 
˘imî_m©ch_c⁄fig_t
 
m©chC⁄fig
 = {

172 .
íabÀCou¡îRe£t
 = 
åue
,

173 .
íabÀCou¡îSt›
 = 
Ál£
,

174 .
m©chVÆue
 = 
timîClockS≥ed
 / 
WS2812B_FREQ
 - 1,

175 .
outC⁄åﬁ
 = 
kCTIMER_Ouçut_NoA˘i⁄
,

176 .
outPöInôSèã
 = 
Ál£
,

177 .
íabÀI¡îru±
 = 
Ál£
,

180 
˘imî_m©ch_c⁄fig_t
 
m©chC⁄fig1
 = {

181 .
íabÀCou¡îRe£t
 = 
Ál£
,

182 .
íabÀCou¡îSt›
 = 
Ál£
,

183 .
m©chVÆue
 = 0,

184 .
outC⁄åﬁ
 = 
kCTIMER_Ouçut_NoA˘i⁄
,

185 .
outPöInôSèã
 = 
åue
,

186 .
íabÀI¡îru±
 = 
Ál£
,

189 
	`CTIMER_SëupM©ch
(
LED_CONTROLLER_TIMER_UNIT
, 
LED_CONTROLLER_TIMER_MATCH_NUMBER
, &
m©chC⁄fig
);

190 
	`CTIMER_SëupM©ch
(
LED_CONTROLLER_TIMER_UNIT
, 
LED_CONTROLLER_TIMER_MATCH_LED_0
, &
m©chC⁄fig1
);

193 
LED_CONTROLLER_TIMER_UNIT
->
PWMC
 = (1 << 
LED_CONTROLLER_TIMER_MATCH_LED_0
) | (1 << 0);

195 
INPUTMUX
->
DMA_ITRIG_INMUX
[
LED_CONTROLLER_DMA_CHANNEL_LED_0
] = 14;

196 
	`DMA_Inô
(
DMA0
);

197 
	`DMA_E«bÀCh™√l
(
DMA0
, 
LED_CONTROLLER_DMA_CHANNEL_LED_0
);

199 
	`DMA_Cª©eH™dÀ
(&
hdma
, 
DMA0
, 0);

200 
	`DMA_SëCÆlback
(&
hdma
, 
dmaCÆlback
, 
NULL
);

202 
	`DMA_SëCh™√lPri‹ôy
(
DMA0
, 
LED_CONTROLLER_DMA_CHANNEL_LED_0
, 
kDMA_Ch™√lPri‹ôy0
);

203 
	`DMA_E«bÀCh™√lI¡îru±s
(
DMA0
, 
LED_CONTROLLER_DMA_CHANNEL_LED_0
);

204 
dma_ch™√l_åiggî_t
 
dmaCh™√lTriggî
;

205 
dmaCh™√lTriggî
.
bur°
 = 
kDMA_EdgeBur°Tøns„r1
;

206 
dmaCh™√lTriggî
.
ty≥
 = 
kDMA_RisögEdgeTriggî
;

207 
dmaCh™√lTriggî
.
wøp
 = 
kDMA_NoWøp
;

208 
	`DMA_C⁄figuªCh™√lTriggî
(
DMA0
, 
LED_CONTROLLER_DMA_CHANNEL_LED_0
, &
dmaCh™√lTriggî
);

210 
	`NVIC_E«bÀIRQ
(
DMA0_IRQn
);

211 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\LedContorllerHal\LedController.h

1 #i‚de‡
__LED_CONTROLLER_H__


2 
	#__LED_CONTROLLER_H__


	)

4 
	~<°döt.h
>

5 
	~<°dboﬁ.h
>

7 
	#LED_DRIVER_CHANNEL_COUNT
 144

	)

10 
	mLED_TYPE_WS2812B
,

11 
	mLED_TYPE_HD59731B


12 } 
	tLedTy≥
;

14 (*
	gLedC⁄åﬁÀrOnD©aSítCb
)();

16 
ÀdC⁄åﬁÀrInô
(
LedC⁄åﬁÀrOnD©aSítCb
 
⁄D©aSítCb
);

17 
ÀdC⁄åﬁÀrSëLedD©a
(
uöt32_t
 
p‹tNumbî
, 
LedTy≥
 
ÀdTy≥
, c⁄° uöt32_à*
rgbAºay
, uöt32_à
rgbAºayÀngth
);

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\PmBusHal\PmBusHal.c

1 
	~"PmBusHÆ.h
"

3 
	~"chù.h
"

4 
	~<°rög.h
>

6 
	#PM_BUS_I2C_HW_UNIT
 
I2C0


	)

7 
	#PM_BUS_I2C_PERIPH_RESET
 
RESET_I2C0


	)

10 
	#PM_BUS_I2C_SDA_PIO_NUM
 0

	)

11 
	#PM_BUS_I2C_SDA_PIN_NUM
 5

	)

13 
	#PM_BUS_I2C_SCL_PIO_NUM
 0

	)

14 
	#PM_BUS_I2C_SCL_PIN_NUM
 4

	)

17 
	#I2C_SPEED_400KHZ
 (400000)

	)

18 
	#I2C_SPEED_1MHZ
 (1000000)

	)

19 
	#I2C_SPEED_100KHZ
 (100000)

	)

21 
	#I2C0_BITRATE
 
I2C_SPEED_100KHZ


	)

23 
	#I2C_RD_CMD_BIT
 (0x01)

	)

25 
	#I2C_FASTPLUS_BIT
 (0)

	)

27 #i‡(
I2C_BITRATE
 > 
SPEED_400KHZ
)

29 #unde‡
I2C_FASTPLUS_BIT


30 
	#I2C_FASTPLUS_BIT
 
IOCON_FASTI2C_EN


	)

34 
	#I2C_MASTER_HANDLE_MEM
 0x20

	)

35 
uöt32_t
 
	gi2c0Ma°îH™dÀMEM
[
I2C_MASTER_HANDLE_MEM
];

36 
I2C_HANDLE_T
 *
	gi2c0H™dÀMa°î
;

38 
I2C_PARAM_T
 
	g∑øm
;

39 
I2C_RESULT_T
 
	gªsu…
;

41 
boﬁ
 
	gå™s„rCom∂ëe
 = 
Ál£
;

43 
	$i2cO≥øti⁄Com∂ëeCb
(
uöt32_t
 
îr‹Code
, uöt32_à
n
)

45 i‡(
îr‹Code
 !
LPC_OK
) {

46 
å™s„rCom∂ëe
 = 
åue
;

47 } i‡(
ªsu…
.
n_byãs_£¡
 =
∑øm
.
num_byãs_£nd
 &&Ñesu….
n_byãs_ªcd
 =∑øm.
num_byãs_ªc
) {

48 
å™s„rCom∂ëe
 = 
åue
;

50 
	}
}

52 
boﬁ
 
	$i2cIsBusOk
()

54 
boﬁ
 
s˛
 = 
	`Chù_GPIO_GëPöSèã
(
LPC_GPIO
, 
PM_BUS_I2C_SCL_PIO_NUM
, 
PM_BUS_I2C_SCL_PIN_NUM
);

55 
boﬁ
 
sda
 = 
	`Chù_GPIO_GëPöSèã
(
LPC_GPIO
, 
PM_BUS_I2C_SDA_PIO_NUM
, 
PM_BUS_I2C_SDA_PIN_NUM
);

57 i‡(
s˛
 =
Ál£
 || 
sda
 == false) {

58 vﬁ©ûê
i
 = 0;

60  (
s˛
 && 
sda
);

61 
	}
}

63 
boﬁ
 
	$i2cRódBuf„r
(
uöt8_t
 
buff
[], 
uöt32_t
 
byãsToRód
)

65 
å™s„rCom∂ëe
 = 
Ál£
;

72 
∑øm
.
num_byãs_£nd
 = 0;

73 
∑øm
.
num_byãs_ªc
 = 
byãsToRód
;

74 
∑øm
.
buf„r_±r_ªc
 = 
buff
;

75 
∑øm
.
°›_Êag
 = 1;

76 
∑øm
.
func_±
 = 
i2cO≥øti⁄Com∂ëeCb
;

78 
ªsu…
.
n_byãs_ªcd
 = 0;

79 
ªsu…
.
n_byãs_£¡
 = 0;

82 
LPC_I2CD_API
->
	`i2c_ma°î_ª˚ive_öå
(
i2c0H™dÀMa°î
, &
∑øm
, &
ªsu…
);

83  
åue
;

84 
	}
}

86 
boﬁ
 
	$i2cWrôeBuf„r
(c⁄° 
uöt8_t
 
buff
[], 
uöt32_t
 
buf„rSize
)

88 
å™s„rCom∂ëe
 = 
Ál£
;

95 
∑øm
.
num_byãs_£nd
 = 
buf„rSize
;

96 
∑øm
.
buf„r_±r_£nd
 = (
uöt8_t
 *Ë
buff
;

97 
∑øm
.
num_byãs_ªc
 = 0;

98 
∑øm
.
°›_Êag
 = 1;

99 
∑øm
.
func_±
 = 
i2cO≥øti⁄Com∂ëeCb
;

101 
ªsu…
.
n_byãs_ªcd
 = 0;

102 
ªsu…
.
n_byãs_£¡
 = 0;

105 
uöt32_t
 
ªs
 = 
LPC_I2CD_API
->
	`i2c_ma°î_å™smô_öå
(
i2c0H™dÀMa°î
, &
∑øm
, &
ªsu…
);

106  
åue
;

107 
	}
}

109 
	$pmBusInô
()

112 
	`Chù_SYSCTL_PîùhRe£t
(
PM_BUS_I2C_PERIPH_RESET
);

113 
	`Chù_IOCON_PöMuxSë
(
LPC_IOCON
, 
PM_BUS_I2C_SCL_PIO_NUM
, 
PM_BUS_I2C_SCL_PIN_NUM
, (
IOCON_FUNC1
 | 
I2C_FASTPLUS_BIT
Ë| 
IOCON_DIGMODE_EN
);

114 
	`Chù_IOCON_PöMuxSë
(
LPC_IOCON
, 
PM_BUS_I2C_SDA_PIO_NUM
, 
PM_BUS_I2C_SDA_PIN_NUM
, (
IOCON_FUNC1
 | 
I2C_FASTPLUS_BIT
Ë| 
IOCON_DIGMODE_EN
);

116 
	`Chù_I2C_Inô
(
PM_BUS_I2C_HW_UNIT
);

118 i‡(
LPC_I2CD_API
->
	`i2c_gë_mem_size
(Ë> (
i2c0Ma°îH™dÀMEM
)) {

123 
i2c0H™dÀMa°î
 = 
LPC_I2CD_API
->
	`i2c_£tup
(
LPC_I2C0_BASE
, 
i2c0Ma°îH™dÀMEM
);

125 i‡(
i2c0H™dÀMa°î
 =
NULL
) {

130 i‡(
LPC_I2CD_API
->
	`i2c_£t_bôøã
(
i2c0H™dÀMa°î
, 
	`Chù_Clock_GëSy°emClockR©e
(), 
I2C0_BITRATE
Ë!
LPC_OK
)

133 
	`NVIC_E«bÀIRQ
(
I2C0_IRQn
);

134 
	}
}

136 
	$I2C0_IRQH™dÀr
()

139 
LPC_I2CD_API
->
	`i2c_i§_h™dÀr
(
i2c0H™dÀMa°î
);

140 
	}
}

142 
boﬁ
 
	$pmBusWrôe
(
uöt8_t
 
addr
, uöt8_à
cmdD©a
[], uöt8_à
cmdD©aLígth
, uöt8_à
d©a
[], uöt8_à
d©aLígth
)

144 i‡(
	`i2cIsBusOk
(Ë=
Ál£
) {

145  
Ál£
;

148 
uöt8_t
 
wrôeD©a
[65];

149 
wrôeD©a
[0] = 
addr
 << 1;

151 
	`mem˝y
(&
wrôeD©a
[1], 
cmdD©a
, 
cmdD©aLígth
);

153 
	`i2cWrôeBuf„r
(
wrôeD©a
, 
cmdD©aLígth
 + 1);

155 
å™s„rCom∂ëe
 =
Ál£
)

158 i‡(
d©aLígth
) {

159 
	`mem˝y
(&
wrôeD©a
[1], 
d©a
, 
d©aLígth
);

161 
	`i2cWrôeBuf„r
(
wrôeD©a
, 
d©aLígth
 + 1);

163 
å™s„rCom∂ëe
 =
Ál£
)

166  
åue
;

167 
	}
}

169 
boﬁ
 
	$pmBusRód
(
uöt8_t
 
addr
, uöt8_à
cmdD©a
[], uöt8_à
cmdD©aLígth
, uöt8_à
d©a
[], uöt8_à
d©aLígth
)

171 i‡(
	`i2cIsBusOk
(Ë=
Ál£
) {

172  
Ál£
;

175 
uöt8_t
 
wrôeD©a
[65];

177 
wrôeD©a
[0] = 
addr
 << 1;

178 
	`mem˝y
(&
wrôeD©a
[1], 
cmdD©a
, 
cmdD©aLígth
);

180 
	`i2cWrôeBuf„r
(
wrôeD©a
, 
cmdD©aLígth
 + 1);

182 
å™s„rCom∂ëe
 =
Ál£
)

185 
d©a
[0] = (
addr
 << 1Ë| 
I2C_RD_CMD_BIT
;

187 
	`i2cRódBuf„r
(
d©a
, 
d©aLígth
);

189 
å™s„rCom∂ëe
 =
Ál£
)

192  
åue
;

193 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\PmBusHal\PmBusHal.h

1 #i‚de‡
__PM_BUS_HAL_H__


2 
	#__PM_BUS_HAL_H__


	)

4 
	~<°döt.h
>

5 
	~<°dboﬁ.h
>

7 (*
	tPmBusTøn„rCom∂ëeCb
)(
	tboﬁ
 
	tisSuc˚ssful
);

9 
	`pmBusInô
();

13 
boﬁ
 
	`pmBusWrôe
(
uöt8_t
 
addr
, uöt8_à
cmdD©a
[], uöt8_à
cmdD©aLígth
, uöt8_à
d©a
[], uöt8_à
d©aLígth
);

14 
boﬁ
 
	`pmBusRód
(
uöt8_t
 
addr
, uöt8_à
cmdD©a
[], uöt8_à
cmdD©aLígth
, uöt8_à
d©a
[], uöt8_à
d©aLígth
);

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\LinkerScript\LinkerScript.ld

2 
	gMEMORY


4 
FLASH
 (
rx
Ë: 
ORIGIN
 = 0x00000000, 
	gLENGTH
 = 512
K


5 
RAM
 (
rwx
Ë: 
ORIGIN
 = 0x20000000, 
	gLENGTH
 = 160
K


6 
USB
 (
rw
Ë: 
ORIGIN
 = 0x40100000, 
	gLENGTH
 = 8
K


42 
	$ENTRY
(
Re£t_H™dÀr
)

44 
SECTIONS


46 .
ãxt
 :

48 
	`KEEP
(*(.
ve˘‹s
))

49 
__Ve˘‹s_End
 = .;

50 
__Ve˘‹s_Size
 = 
__Ve˘‹s_End
 - 
__Ve˘‹s
;

51 
__íd__
 = .;

53 *(.
ãxt
*)

55 
	`KEEP
(*(.
öô
))

56 
	`KEEP
(*(.
föi
))

59 *
¸tbegö
.
	`o
(.
˘‹s
)

60 *
¸tbegö
?.
	`o
(.
˘‹s
)

61 *(
	`EXCLUDE_FILE
(*
¸ãnd
?.
o
 *¸ãnd.oË.
˘‹s
)

62 *(
	`SORT
(.
˘‹s
.*))

63 *(.
˘‹s
)

66 *
¸tbegö
.
	`o
(.
dt‹s
)

67 *
¸tbegö
?.
	`o
(.
dt‹s
)

68 *(
	`EXCLUDE_FILE
(*
¸ãnd
?.
o
 *¸ãnd.oË.
dt‹s
)

69 *(
	`SORT
(.
dt‹s
.*))

70 *(.
dt‹s
)

72 *(.
rod©a
*)

74 
	`KEEP
(*(.
eh_‰ame
*))

75 } > 
FLASH


77 .
ARM
.
exèb
 :

79 *(.
ARM
.
exèb
* .
gnu
.
lök⁄˚
.
¨mexèb
.*)

80 } > 
FLASH


82 
__exidx_°¨t
 = .;

83 .
ARM
.
exidx
 :

85 *(.
ARM
.
exidx
* .
gnu
.
lök⁄˚
.
¨mexidx
.*)

86 } > 
FLASH


87 
__exidx_íd
 = .;

123 
__ëext
 = .;

125 .
d©a
 : 
	`AT
 (
__ëext
)

127 
__d©a_°¨t__
 = .;

128 *(
øm_ve˘‹s
)

129 *(
vèbÀ
)

130 *(.
d©a
*)

132 . = 
	`ALIGN
(4);

134 
	`PROVIDE_HIDDEN
 (
__¥eöô_¨øy_°¨t
 = .);

135 
	`KEEP
(*(.
¥eöô_¨øy
))

136 
	`PROVIDE_HIDDEN
 (
__¥eöô_¨øy_íd
 = .);

138 . = 
	`ALIGN
(4);

140 
	`PROVIDE_HIDDEN
 (
__öô_¨øy_°¨t
 = .);

141 
	`KEEP
(*(
	`SORT
(.
öô_¨øy
.*)))

142 
	`KEEP
(*(.
öô_¨øy
))

143 
	`PROVIDE_HIDDEN
 (
__öô_¨øy_íd
 = .);

146 . = 
	`ALIGN
(4);

148 
	`PROVIDE_HIDDEN
 (
__föi_¨øy_°¨t
 = .);

149 
	`KEEP
(*(
	`SORT
(.
föi_¨øy
.*)))

150 
	`KEEP
(*(.
föi_¨øy
))

151 
	`PROVIDE_HIDDEN
 (
__föi_¨øy_íd
 = .);

153 
	`KEEP
(*(.
j¸
*))

154 . = 
	`ALIGN
(4);

156 
__d©a_íd__
 = .;

158 } > 
RAM


160 .
bss
 :

162 . = 
	`ALIGN
(4);

163 
__bss_°¨t__
 = .;

164 *(.
bss
*)

165 *(
COMMON
)

166 . = 
	`ALIGN
(4);

167 
__bss_íd__
 = .;

168 } > 
RAM


170 .
	`hóp
 (
COPY
):

172 
__HópBa£
 = .;

173 
__íd__
 = .;

174 
íd
 = 
__íd__
;

175 
	`KEEP
(*(.
hóp
*))

176 
__HópLimô
 = .;

177 } > 
RAM


182 .
	`°ack_dummy
 (
COPY
):

184 
	`KEEP
(*(.
°ack
*))

185 } > 
RAM


189 
__SèckT›
 = 
	`ORIGIN
(
RAM
Ë+ 
	`LENGTH
(RAM);

190 
__SèckLimô
 = 
__SèckT›
 - 
	`SIZEOF
(.
°ack_dummy
);

191 
	`PROVIDE
(
__°ack
 = 
__SèckT›
);

194 
	`ASSERT
(
__SèckLimô
 >
__HópLimô
, "region RAM overflowed with stack")

196 .
usb
 :

198 *(
m_usb_bdt
*)

199 *(
m_usb_globÆ
*)

200 } > 
USB


202 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\AnalogMeasurementSystem\AnalogMeasurementSystem.c

1 
	~"A«logMósuªmítSy°em.h
"

2 
	~"HÆAdc.h
"

3 
	~<m©h.h
>

5 
	#MAX_TEMP_COUNT
 6

	)

6 
	#ANALOG_WINDOW_SIZE
 16

	)

7 
	#ANALOG_WINDOW_SIZEMASK
 0x0000000F

	)

8 
	#ANALOG_WINDOW_SHIFT_MULT
 4

	)

10 
	#VOLTAGE_DIVIDER_3V3_A
 11

	)

11 
	#VOLTAGE_DIVIDER_3V3_B
 10

	)

13 
	#VOLTAGE_DIVIDER_5V_A
 11

	)

14 
	#VOLTAGE_DIVIDER_5V_B
 10

	)

16 
	#VOLTAGE_DIVIDER_12V_A
 11

	)

17 
	#VOLTAGE_DIVIDER_12V_B
 10

	)

19 
uöt32_t
 
	gexã∫ÆTem≥øtuª
[
MAX_TEMP_COUNT
];

20 
uöt32_t
 
	göã∫ÆMósuªmíts
[
HAL_ADC_CHANNEL_COUNT
];

22 
öt32_t
 
	g™ÆogD©aWödow
[
HAL_ADC_CHANNEL_COUNT
][
ANALOG_WINDOW_SIZE
];

23 
uöt32_t
 
	g™ÆogD©aWödowHód
;

25 
	$⁄A«logMósuªmítRódy
()

27 
uöt32_t
 
i
 = 0;

29 
i
 = 0; i < 
HAL_ADC_CHANNEL_COUNT
; i++) {

30 
öt32_t
 
mu
 = 0;

31 
uöt32_t
 
j
 = 0;

33 
j
 = 0; j < 
ANALOG_WINDOW_SIZE
; j++) {

34 
mu
 +
™ÆogD©aWödow
[
i
][
j
];

36 
mu
 >>
ANALOG_WINDOW_SHIFT_MULT
;

37 
öã∫ÆMósuªmíts
[
i
] = 
mu
;

38 
öã∫ÆMósuªmíts
[
i
] = internalMeasurements[i] < 0 ? 0 : internalMeasurements[i];

39 
™ÆogD©aWödow
[
i
][
™ÆogD©aWödowHód
] = 
	`hÆAdcGëC⁄vîsi⁄Resu…
((
HÆAdcCh™√l
) i);

41 
™ÆogD©aWödowHód
 = (™ÆogD©aWödowHód + 1Ë& 
ANALOG_WINDOW_SIZEMASK
;

42 
	}
}

44 
	$ãm≥øtuªSëExã∫Æ
(
uöt32_t
 
ÁnNumbî
, uöt32_à
ãm≥øtuª
)

46 
exã∫ÆTem≥øtuª
[
ÁnNumbî
] = 
ãm≥øtuª
;

47 
	}
}

49 
uöt32_t
 
	$ãm≥øtuªGëExã∫Æ
(
uöt32_t
 
ÁnNumbî
)

51  
exã∫ÆTem≥øtuª
[
ÁnNumbî
];

52 
	}
}

54 
uöt32_t
 
	$ãm≥øtuªGëI¡î«l
(
uöt32_t
 
ãm≥øtuªIndex
)

56  
öã∫ÆMósuªmíts
[
ãm≥øtuªIndex
];

57 
	}
}

59 
uöt32_t
 
	$powîGëVﬁège
(
uöt32_t
 
vﬁègeIndex
)

61 
uöt32_t
 
vﬁège
 = 
öã∫ÆMósuªmíts
[(uöt32_tË
HAL_ADC_CHANNEL_THERMISTOR_1
 + 
vﬁègeIndex
 + 1];

62 i‡(
vﬁègeIndex
 == 0) {

63 
vﬁège
 = voltage * 3300 * 20 / 4096 / 5;

66 i‡(
vﬁègeIndex
 == 1) {

67 
vﬁège
 = voltage * 3300 * 25 / 4096 / 15;

70 i‡(
vﬁègeIndex
 == 2) {

71 
vﬁège
 = voltage * 3300 * 165 / 4096 / 150;

74  
vﬁège
;

75 
	}
}

77 
	$™ÆogMósuªmítSy°emInô
()

79 
	`hÆAdcInô
();

80 
	}
}

82 
	$™ÆogMósuªmítSy°emSèπC⁄vîsi⁄
()

84 
	`hÆAdcSèπC⁄vîsi⁄
(
⁄A«logMósuªmítRódy
);

85 
	}
}

87 
öt32_t
 
	$™ÆogMósuªmítTem≥øtuªFromAdcVÆue
(
uöt32_t
 
ªsT
)

89 
	#Thîmi°‹_K2C
 (273.15f)

	)

90 
	#Thîmi°‹_SCALE
 (100.0f)

	)

92 
	#Thîmi°‹_THA
 (0.0006728238f)

	)

93 
	#Thîmi°‹_THB
 (0.0002910997f)

	)

94 
	#Thîmi°‹_THC
 (8.412704E-11f)

	)

95 
	#RESISTOR_DIVIDER_VALUE
 10000

	)

98 
uöt32_t
 
thîmi°‹VÆue
;

99 i‡(
ªsT
)

100 
thîmi°‹VÆue
 = (
RESISTOR_DIVIDER_VALUE
 * (
ADC_MAX_VALUE
 - 
ªsT
)) /ÑesT;

102 
thîmi°‹VÆue
 = 
RESISTOR_DIVIDER_VALUE
;

105 
öt32_t
 
ãmpTR
;

106 
°Eqn
;

107 
logrT
;

109 
logrT
 = 
	`logf
(
thîmi°‹VÆue
);

110 
°Eqn
 = 
Thîmi°‹_THA
 + 
Thîmi°‹_THB
 * 
logrT
 + 
Thîmi°‹_THC
 *ÜogrT *ÜogrT *ÜogrT;

111 
ãmpTR
 = ((1.0‡/ 
°Eqn
Ë- 
Thîmi°‹_K2C
Ë* 
Thîmi°‹_SCALE
 + 0.5f;

113  
ãmpTR
;

114 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\AnalogMeasurementSystem\AnalogMeasurementSystem.h

1 #i‚de‡
__ANALOG_MEASUREMENT_SYTEM_H__


2 
	#__ANALOG_MEASUREMENT_SYTEM_H__


	)

4 
	~<°döt.h
>

6 
ãm≥øtuªSëExã∫Æ
(
uöt32_t
 
ÁnNumbî
, uöt32_à
ãm≥øtuª
);

7 
uöt32_t
 
ãm≥øtuªGëExã∫Æ
(uöt32_à
ÁnNumbî
);

8 
uöt32_t
 
ãm≥øtuªGëI¡î«l
(uöt32_à
ãm≥øtuªIndex
);

9 
uöt32_t
 
powîGëVﬁège
(uöt32_à
vﬁègeIndex
);

10 
™ÆogMósuªmítSy°emInô
();

11 
™ÆogMósuªmítSy°emSèπC⁄vîsi⁄
();

12 
öt32_t
 
™ÆogMósuªmítTem≥øtuªFromAdcVÆue
(
uöt32_t
 
ªsT
);

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\FanSystem\FanSystem.c

1 
	~"F™Sy°em.h
"

2 
	~"PidC⁄åﬁÀr.h
"

4 
	~<°ddef.h
>

6 
	#FAN_PID_KP
 (
öt32_t
Ë1

	)

7 
	#FAN_PID_KI
 (
öt32_t
Ë20

	)

8 
	#FAN_PID_KD
 (
öt32_t
Ë0

	)

9 
	#FAN_PID_P_SATURATION
 (
öt32_t
Ë1920L * 2L

	)

10 
	#FAN_PID_N_SATURATION
 (
öt32_t
Ë-1L

	)

11 
	#FAN_PID_DAMPING
 (3)

	)

13 
	#FAN_MEASUREMENT_VALID_TIME_MS
 250

	)

14 
	#FAN_MEASUREMENT_WINDOW_SIZE
 16

	)

15 
	#FAN_MEASUREMENT_WINDOW_SIZEMASK
 0x0000000F

	)

16 
	#FAN_MEASUREMENT_WINDOW_SHIFT_MULT
 4

	)

18 
	#TIMESTAMP_MAX
 0xFFFFFFFF

	)

20 
	sF™S≥edMósuªmít
 {

21 
uöt32_t
 
	mœ°Rpm
;

22 
uöt32_t
 
	mΩm
;

23 
uöt32_t
 
	mtimeSèmp
;

24 
boﬁ
 
	mwasRód
;

25 
boﬁ
 
	misVÆid
;

27 
öt32_t
 
	md©aWödow
[
FAN_MEASUREMENT_WINDOW_SIZE
];

28 
uöt32_t
 
	md©aWödowHód
;

29 } 
	tF™S≥edMósuªmít
;

31 
	#MAX_FAN_COUNT
 
FAN_COUNT


	)

33 
	sF™P¨amëîsRegi°ry
 {

34 
F™Sy°emMode
 
	mÁnSy°emMode
[
MAX_FAN_COUNT
];

35 
F™S≥edTempCurve
 
	mÁnS≥edTempCurve
[
MAX_FAN_COUNT
];

36 
uöt32_t
 
	mãm≥øtuªIndex
[
MAX_FAN_COUNT
];

37 
uöt32_t
 
	mÁnRpmT¨gëVÆue
[
MAX_FAN_COUNT
];

38 
uöt32_t
 
	mÁnPwmT¨gëVÆue
[
MAX_FAN_COUNT
];

39 } 
	tF™P¨amëîsRegi°ry
;

41 
F™C⁄åﬁÀrCh™√lC⁄fig
 
	gÁnCh™√lC⁄figRegi°ry
[
MAX_FAN_COUNT
];

43 
F™Sy°emGëTem≥øtuª
 
	gÁnGëTem≥øtuªCb
 = 
NULL
;

44 
F™Sy°emMósuªmítEvít
 
	gÁnSy°emMósuªmítEvítCb
 = 
NULL
;

45 
F™Sy°emGëTime°amp
 
	gÁnSy°emGëTime°ampCb
 = 
NULL
;

47 
F™S≥edMósuªmít
 
	gÁnS≥edMósuªmíts
[
MAX_FAN_COUNT
];

48 
uöt32_t
 
	gÁnRpmA˘uÆVÆue
[
MAX_FAN_COUNT
];

50 
F™P¨amëîsRegi°ry
 
	gÁnSy°emP¨amëîs
;

51 
PidC⁄åﬁÀr
 
	gpidC⁄åﬁÀrs
[
MAX_FAN_COUNT
];

52 
uöt32_t
 
	gmaxPwmVÆue
;

54 
boﬁ
 
	gisF™Dëe˘i⁄TaskRu¬ög
 = 
Ál£
;

56 
uöt32_t
 
	$sqπI
(
uöt32_t
 
vÆue
)

58 
uöt32_t
 
ªmödî
 = 0, 
roŸ
 = 0, 
bôPaúC¡r
 = 16;

60 
bôPaúC¡r
-- > 0) {

61 
roŸ
 <<= 1;

62 
ªmödî
 = (ªmödî << 2Ë+ (
vÆue
 >> 30);

63 
vÆue
 <<= 2;

65 i‡(
roŸ
 < 
ªmödî
)

67 
ªmödî
 -++
roŸ
;

68 
roŸ
++;

72  (
roŸ
 >> 1);

73 
	}
}

75 
	$ÁnSy°emOnMósuªmítD⁄e
(
uöt32_t
 
ÁnNumbî
, uöt32_à
Ωm
)

77 i‡(
ÁnSy°emGëTime°ampCb
)

78 
ÁnS≥edMósuªmíts
[
ÁnNumbî
].
timeSèmp
 = 
	`ÁnSy°emGëTime°ampCb
();

79 
ÁnS≥edMósuªmíts
[
ÁnNumbî
].
œ°Rpm
 = 
Ωm
;

80 
ÁnS≥edMósuªmíts
[
ÁnNumbî
].
wasRód
 = 
Ál£
;

82 i‡(
ÁnSy°emMósuªmítEvítCb
)

83 
	`ÁnSy°emMósuªmítEvítCb
();

84 
	}
}

86 
	$ÁnSy°emInô
(
F™Sy°emGëTem≥øtuª
 
ÁnGëTem≥øtuªCÆlback
, 
F™Sy°emGëTime°amp
 
ÁnSy°emGëTime°ampCÆlback
, 
F™Sy°emMósuªmítEvít
 
ÁnSy°emMósuªmítEvítCÆlback
)

88 
size_t
 
ÁnCou¡î
;

90 
ÁnSy°emGëTime°ampCb
 = 
ÁnSy°emGëTime°ampCÆlback
;

91 
ÁnGëTem≥øtuªCb
 = 
ÁnGëTem≥øtuªCÆlback
;

92 
ÁnSy°emMósuªmítEvítCb
 = 
ÁnSy°emMósuªmítEvítCÆlback
;

93 
	`ÁnC⁄åﬁÀrInô
(
ÁnSy°emOnMósuªmítD⁄e
);

94 
maxPwmVÆue
 = 
	`ÁnC⁄åﬁÀrGëMaxPwmVÆue
();

95 
ÁnCou¡î
 = 0; f™Cou¡î < 
MAX_FAN_COUNT
; fanCounter++) {

96 
	`pidC⁄åﬁÀrInô
(&
pidC⁄åﬁÀrs
[
ÁnCou¡î
], 
FAN_PID_KP
, 
FAN_PID_KI
, 
FAN_PID_KD
, 
FAN_PID_P_SATURATION
, 
FAN_PID_N_SATURATION
, 
FAN_PID_DAMPING
);

98 
	}
}

100 
	$ÁnSy°emSëRpm
(
uöt32_t
 
ÁnNumbî
, 
öt32_t
 
îr‹
)

102 
öt32_t
 
pidOuçut
 = 
	`pidC⁄åﬁÀrUpd©e
(&
pidC⁄åﬁÀrs
[
ÁnNumbî
], 
îr‹
);

104 i‡(
pidOuçut
 < 0) {

105 
pidOuçut
 = 0;

108 i‡(
pidOuçut
 > 
maxPwmVÆue
) {

109 
pidOuçut
 = 
maxPwmVÆue
;

112 
	`ÁnC⁄åﬁÀrSëPwm
(
ÁnNumbî
, 
pidOuçut
);

113 
	}
}

115 
	$ÁnSy°emUpd©eCuºítRpm
(
uöt32_t
 
ÁnNumbî
)

117 
uöt32_t
 
œ°MósuªmítTime
 = 0;

119 
uöt32_t
 
i
, 
Ωm
 = 
ÁnS≥edMósuªmíts
[
ÁnNumbî
].
œ°Rpm
;

120 
uöt32_t
 
hód
 = 
ÁnS≥edMósuªmíts
[
ÁnNumbî
].
d©aWödowHód
;

122 
öt32_t
 
mu
 = 0;

123 
i
 = 0; i < 
FAN_MEASUREMENT_WINDOW_SIZE
; i++) {

124 
mu
 +
ÁnS≥edMósuªmíts
[
ÁnNumbî
].
d©aWödow
[
i
];

126 
mu
 >>
FAN_MEASUREMENT_WINDOW_SHIFT_MULT
;

128 
öt32_t
 
sd
 = 0;

129 
i
 = 0; i < 
FAN_MEASUREMENT_WINDOW_SIZE
; i++) {

130 
sd
 +(
mu
 - 
ÁnS≥edMósuªmíts
[
ÁnNumbî
].
d©aWödow
[
i
]) * (mu - fanSpeedMeasurements[fanNumber].dataWindow[i]);

132 
sd
 = 
	`sqπI
(sd >> 
FAN_MEASUREMENT_WINDOW_SHIFT_MULT
);

134 
ÁnS≥edMósuªmíts
[
ÁnNumbî
].
d©aWödow
[
hód
] = 
Ωm
;

135 
ÁnS≥edMósuªmíts
[
ÁnNumbî
].
d©aWödowHód
 = (
hód
 + 1Ë& 
FAN_MEASUREMENT_WINDOW_SIZEMASK
;

136 
ÁnS≥edMósuªmíts
[
ÁnNumbî
].
Ωm
 =Ñpm;

138 i‡((
Ωm
 < (
mu
 + ((
sd
 << 1) + sd))) && (rpm > (mu - ((sd << 1) + sd)))) {

139 
ÁnS≥edMósuªmíts
[
ÁnNumbî
].
isVÆid
 = 
åue
;

141 
ÁnS≥edMósuªmíts
[
ÁnNumbî
].
isVÆid
 = 
Ál£
;

145 i‡(
ÁnSy°emGëTime°ampCb
) {

146 
œ°MósuªmítTime
 = 
	`ÁnSy°emGëTime°ampCb
();

149 i‡(
œ°MósuªmítTime
 < 
ÁnS≥edMósuªmíts
[
ÁnNumbî
].
timeSèmp
) {

150 
œ°MósuªmítTime
 = 
TIMESTAMP_MAX
 - 
ÁnS≥edMósuªmíts
[
ÁnNumbî
].
timeSèmp
 +ÜastMeasurementTime + 1;

152 
œ°MósuªmítTime
 =Üa°MósuªmítTimê- 
ÁnS≥edMósuªmíts
[
ÁnNumbî
].
timeSèmp
;

155 i‡(
œ°MósuªmítTime
 > 
FAN_MEASUREMENT_VALID_TIME_MS
) {

156 
ÁnS≥edMósuªmíts
[
ÁnNumbî
].
Ωm
 = 0;

159 
ÁnRpmA˘uÆVÆue
[
ÁnNumbî
] = 
ÁnS≥edMósuªmíts
[ÁnNumbî].
Ωm
;

161 
ÁnS≥edMósuªmíts
[
ÁnNumbî
].
wasRód
 = 
åue
;

162 
	}
}

164 
öt32_t
 
	$ÁnSy°emGëRpmEº‹ByTem≥øtuª
(
uöt32_t
 
ÁnNumbî
)

166 
uöt32_t
 
ãm≥øtuª
;

167 
size_t
 
poötCou¡î
;

169 i‡(
ÁnGëTem≥øtuªCb
) {

170 
ãm≥øtuª
 = 
	`ÁnGëTem≥øtuªCb
(
ÁnSy°emP¨amëîs
.
ãm≥øtuªIndex
[
ÁnNumbî
], fanNumber);

173 i‡(!
ÁnSy°emP¨amëîs
.
ÁnS≥edTempCurve
[
ÁnNumbî
].
curvePoötCou¡
) {

177 i‡(
ãm≥øtuª
 <
ÁnSy°emP¨amëîs
.
ÁnS≥edTempCurve
[
ÁnNumbî
].
curvePoöts
[0].temperature) {

178  ((
öt32_t
Ë
ÁnSy°emP¨amëîs
.
ÁnS≥edTempCurve
[
ÁnNumbî
].
curvePoöts
[0].
Ωm
Ë- ((öt32_tË
ÁnRpmA˘uÆVÆue
[fanNumber]);

181 i‡(
ãm≥øtuª
 >
ÁnSy°emP¨amëîs
.
ÁnS≥edTempCurve
[
ÁnNumbî
].
curvePoöts
[ÁnSy°emP¨amëîs.ÁnS≥edTempCurve[ÁnNumbî].
curvePoötCou¡
 - 1].temperature) {

182  ((
öt32_t
Ë
ÁnSy°emP¨amëîs
.
ÁnS≥edTempCurve
[
ÁnNumbî
].
curvePoöts
[ÁnSy°emP¨amëîs.ÁnS≥edTempCurve[ÁnNumbî].
curvePoötCou¡
 - 1].
Ωm
Ë- ((öt32_tË
ÁnRpmA˘uÆVÆue
[fanNumber]);

185 
poötCou¡î
 = 0;ÖoötCou¡î < 
ÁnSy°emP¨amëîs
.
ÁnS≥edTempCurve
[
ÁnNumbî
].
curvePoötCou¡
 - 1;ÖointCounter++) {

186 i‡((
ãm≥øtuª
 >
ÁnSy°emP¨amëîs
.
ÁnS≥edTempCurve
[
ÁnNumbî
].
curvePoöts
[
poötCou¡î
].temperature) &&

187 (
ãm≥øtuª
 <
ÁnSy°emP¨amëîs
.
ÁnS≥edTempCurve
[
ÁnNumbî
].
curvePoöts
[
poötCou¡î
 + 1].temperature)) {

192 
F™S≥edTempCurvePoöt
 *
À·Poöt
 = &
ÁnSy°emP¨amëîs
.
ÁnS≥edTempCurve
[
ÁnNumbî
].
curvePoöts
[
poötCou¡î
];

193 
F™S≥edTempCurvePoöt
 *
rightPoöt
 = &
ÁnSy°emP¨amëîs
.
ÁnS≥edTempCurve
[
ÁnNumbî
].
curvePoöts
[
poötCou¡î
 + 1];

194 
öt32_t
 
ΩmVÆue
 = 
À·Poöt
->
Ωm
 * (
rightPoöt
->
ãm≥øtuª
 -Åemperature) / (rightPoint->temperature -ÜeftPoint->temperature) +

195 
rightPoöt
->
Ωm
 * (
ãm≥øtuª
 - 
À·Poöt
->temperature) / (rightPoint->temperature -ÜeftPoint->temperature);

196  
ΩmVÆue
 -((
öt32_t
Ë
ÁnRpmA˘uÆVÆue
[
ÁnNumbî
]);

197 
	}
}

199 
	eF™Dëe˘i⁄Sèã
 {

200 
	mFAN_DETECTION_STATE_FULL_POWER
,

201 
	mFAN_DETECTION_STATE_WAIT_FULL_POWER
,

202 
	mFAN_DETECTION_STATE_GET_FULL_POWER_RPM
,

203 
	mFAN_DETECTION_STATE_50_PERCENT_POWER
,

204 
	mFAN_DETECTION_STATE_WAIT_50_PERCENT_POWER
,

205 
	mFAN_DETECTION_STATE_GET_50_PERCENT_POWER_RPM
,

206 
	mFAN_DETECTION_STATE_READY


207 } 
	tF™Dëe˘i⁄Sèã
;

209 
F™Dëe˘i⁄Sèã
 
	gÁnDëe˘i⁄Sèã
;

211 
	$ÁnSy°emF™Dëe˘i⁄Task
()

213 
	#FAN_DETECTION_DELAY_COUNT
 200

	)

214 
	#FAN_DETECTION_SPEED_POSITIVE_THRESHOLD
 200

	)

215 
	#FAN_DETECTION_SPEED_NEGATIVE_THRESHOLD
 -100

	)

216 
uöt32_t
 
dñayCou¡î
 = 0;

217 
öt32_t
 
ÁnS≥edMóu§emíts
[
MAX_FAN_COUNT
];

218 
öt32_t
 
ÁnS≥edDñè
[
MAX_FAN_COUNT
];

219 
uöt32_t
 
ÁnCou¡î
 = 0;

220 
ÁnDëe˘i⁄Sèã
) {

221 
FAN_DETECTION_STATE_FULL_POWER
 :

222 
ÁnCou¡î
 = 0; f™Cou¡î < 
MAX_FAN_COUNT
; fanCounter++) {

223 
	`ÁnC⁄åﬁÀrSëPwm
(
ÁnCou¡î
, 
maxPwmVÆue
);

225 
dñayCou¡î
 = 0;

226 
ÁnDëe˘i⁄Sèã
 = 
FAN_DETECTION_STATE_WAIT_FULL_POWER
;

230 
FAN_DETECTION_STATE_WAIT_FULL_POWER
 :

231 
FAN_DETECTION_STATE_WAIT_50_PERCENT_POWER
 :

232 i‡(
dñayCou¡î
++ >
FAN_DETECTION_DELAY_COUNT
) {

233 
dñayCou¡î
 = 0;

234 i‡(
ÁnDëe˘i⁄Sèã
 =
FAN_DETECTION_STATE_WAIT_FULL_POWER
) {

235 
ÁnDëe˘i⁄Sèã
 = 
FAN_DETECTION_STATE_GET_FULL_POWER_RPM
;

237 
ÁnDëe˘i⁄Sèã
 = 
FAN_DETECTION_STATE_GET_50_PERCENT_POWER_RPM
;

243 
FAN_DETECTION_STATE_GET_FULL_POWER_RPM
 :

244 
ÁnCou¡î
 = 0; f™Cou¡î < 
MAX_FAN_COUNT
; fanCounter++) {

245 
ÁnS≥edMóu§emíts
[
ÁnCou¡î
] = 
ÁnRpmA˘uÆVÆue
[fanCounter];

247 
ÁnDëe˘i⁄Sèã
 = 
FAN_DETECTION_STATE_50_PERCENT_POWER
;

250 
FAN_DETECTION_STATE_50_PERCENT_POWER
 :

251 
ÁnCou¡î
 = 0; f™Cou¡î < 
MAX_FAN_COUNT
; fanCounter++) {

252 
	`ÁnC⁄åﬁÀrSëPwm
(
ÁnCou¡î
, 
maxPwmVÆue
 >> 1);

254 
dñayCou¡î
 = 0;

255 
ÁnDëe˘i⁄Sèã
 = 
FAN_DETECTION_STATE_WAIT_50_PERCENT_POWER
;

259 
FAN_DETECTION_STATE_GET_50_PERCENT_POWER_RPM
 :

260 
ÁnCou¡î
 = 0; f™Cou¡î < 
MAX_FAN_COUNT
; fanCounter++) {

261 
ÁnS≥edDñè
[
ÁnCou¡î
] = 
ÁnS≥edMóu§emíts
[ÁnCou¡î] - 
ÁnRpmA˘uÆVÆue
[fanCounter];

263 
ÁnDëe˘i⁄Sèã
 = 
FAN_DETECTION_STATE_READY
;

266 
FAN_DETECTION_STATE_READY
 :

267 
ÁnCou¡î
 = 0; f™Cou¡î < 
MAX_FAN_COUNT
; fanCounter++) {

268 i‡(
ÁnS≥edDñè
[
ÁnCou¡î
] < 
FAN_DETECTION_SPEED_NEGATIVE_THRESHOLD
) {

269 
ÁnCh™√lC⁄figRegi°ry
[
ÁnCou¡î
].
ch™√lNumbî
 = fanCounter;

270 
ÁnCh™√lC⁄figRegi°ry
[
ÁnCou¡î
].
ch™√lSèã
 = 
FAN_CONTROLLER_CHANNEL_DETECTION_ERROR
;

271 } i‡(
ÁnS≥edDñè
[
ÁnCou¡î
] > 
FAN_DETECTION_SPEED_POSITIVE_THRESHOLD
) {

272 
ÁnCh™√lC⁄figRegi°ry
[
ÁnCou¡î
].
ch™√lSèã
 = 
FAN_CONTROLLER_CHANNEL_4P
;

273 } i‡(
ÁnS≥edMóu§emíts
[
ÁnCou¡î
] != 0) {

274 
ÁnCh™√lC⁄figRegi°ry
[
ÁnCou¡î
].
ch™√lSèã
 = 
FAN_CONTROLLER_CHANNEL_3P
;

276 
ÁnCh™√lC⁄figRegi°ry
[
ÁnCou¡î
].
ch™√lSèã
 = 
FAN_CONTROLLER_CHANNEL_NONE
;

280 
	`ÁnC⁄åﬁÀrReInôPwm
(
ÁnCh™√lC⁄figRegi°ry
, 
MAX_FAN_COUNT
);

281 
isF™Dëe˘i⁄TaskRu¬ög
 = 
Ál£
;

285 
ÁnDëe˘i⁄Sèã
 = 
FAN_DETECTION_STATE_FULL_POWER
;

288 
	}
}

290 
	$ÁnSy°emTaskRun
()

292 
size_t
 
ÁnCou¡î
;

294 i‡(
isF™Dëe˘i⁄TaskRu¬ög
) {

295 
ÁnCou¡î
 = 0; f™Cou¡î < 
MAX_FAN_COUNT
; fanCounter++)

296 
	`ÁnSy°emUpd©eCuºítRpm
(
ÁnCou¡î
);

298 
	`ÁnSy°emF™Dëe˘i⁄Task
();

300 
ÁnCou¡î
 = 0; f™Cou¡î < 
MAX_FAN_COUNT
; fanCounter++) {

301 
	`ÁnSy°emUpd©eCuºítRpm
(
ÁnCou¡î
);

303 
ÁnSy°emP¨amëîs
.
ÁnSy°emMode
[
ÁnCou¡î
]) {

304 
FAN_SYSTEM_MODE_PWM
 :

305 
	`ÁnC⁄åﬁÀrSëPwm
(
ÁnCou¡î
, 
ÁnSy°emP¨amëîs
.
ÁnPwmT¨gëVÆue
[fanCounter]);

308 
FAN_SYSTEM_MODE_RPM
 :

309 i‡(
ÁnS≥edMósuªmíts
[
ÁnCou¡î
].
isVÆid
)

310 
	`ÁnSy°emSëRpm
(
ÁnCou¡î
, ((
öt32_t
Ë
ÁnSy°emP¨amëîs
.
ÁnRpmT¨gëVÆue
[ÁnCou¡î]Ë- ((öt32_tË
ÁnRpmA˘uÆVÆue
[fanCounter]));

313 
FAN_SYSTEM_MODE_CURVE
 :

314 i‡(
ÁnS≥edMósuªmíts
[
ÁnCou¡î
].
isVÆid
)

315 
	`ÁnSy°emSëRpm
(
ÁnCou¡î
, 
	`ÁnSy°emGëRpmEº‹ByTem≥øtuª
(fanCounter));

318 
FAN_SYSTEM_MODE_NONE
 :

325 
	`ÁnC⁄åﬁÀrSèπMósuªmít
();

326 
	}
}

328 
	$ÁnSy°emSëMode
(
uöt32_t
 
ÁnNumbî
, 
F™Sy°emMode
 
mode
)

330 i‡(
ÁnNumbî
 < 
MAX_FAN_COUNT
) {

331 
ÁnSy°emP¨amëîs
.
ÁnSy°emMode
[
ÁnNumbî
] = 
mode
;

333 
	}
}

335 
F™Sy°emMode
 
	$ÁnSy°emGëMode
(
uöt32_t
 
ÁnNumbî
)

337 i‡(
ÁnNumbî
 < 
MAX_FAN_COUNT
) {

338  
ÁnSy°emP¨amëîs
.
ÁnSy°emMode
[
ÁnNumbî
];

340  
FAN_SYSTEM_MODE_NONE
;

342 
	}
}

344 
	$ÁnSy°emSëT¨gëRpm
(
uöt32_t
 
ÁnNumbî
, uöt32_à
ÁnRpm
)

346 i‡(
ÁnNumbî
 < 
MAX_FAN_COUNT
) {

347 
ÁnSy°emP¨amëîs
.
ÁnRpmT¨gëVÆue
[
ÁnNumbî
] = 
ÁnRpm
;

349 
	}
}

351 
uöt32_t
 
	$ÁnSy°emGëT¨gëRpm
(
uöt32_t
 
ÁnNumbî
)

353 i‡(
ÁnNumbî
 < 
MAX_FAN_COUNT
) {

354  
ÁnSy°emP¨amëîs
.
ÁnRpmT¨gëVÆue
[
ÁnNumbî
];

358 
	}
}

360 
uöt32_t
 
	$ÁnSy°emGëCuºítRpm
(
uöt32_t
 
ÁnNumbî
)

362 i‡(
ÁnNumbî
 < 
MAX_FAN_COUNT
) {

363  
ÁnRpmA˘uÆVÆue
[
ÁnNumbî
];

367 
	}
}

369 
	$ÁnSy°emSëPwm
(
uöt32_t
 
ÁnNumbî
, uöt32_à
ÁnPwm
)

371 i‡(
ÁnNumbî
 < 
MAX_FAN_COUNT
) {

372 
ÁnSy°emP¨amëîs
.
ÁnPwmT¨gëVÆue
[
ÁnNumbî
] = 
ÁnPwm
;

374 
	}
}

376 
uöt32_t
 
	$ÁnSy°emGëPwm
(
uöt32_t
 
ÁnNumbî
)

378 i‡(
ÁnNumbî
 < 
MAX_FAN_COUNT
) {

379  
ÁnSy°emP¨amëîs
.
ÁnPwmT¨gëVÆue
[
ÁnNumbî
];

383 
	}
}

385 
	$ÁnSy°emSëCurve
(
uöt32_t
 
ÁnNumbî
, c⁄° 
F™S≥edTempCurve
 *
ÁnS≥edTempCurve
)

387 i‡((
ÁnNumbî
 < 
MAX_FAN_COUNT
Ë&& 
ÁnS≥edTempCurve
) {

388 
ÁnSy°emP¨amëîs
.
ÁnS≥edTempCurve
[
ÁnNumbî
] = *fanSpeedTempCurve;

390 
	}
}

392 
	$ÁnSy°emSëCurveTem≥øtuªIndex
(
uöt32_t
 
ÁnNumbî
, uöt32_à
ãm≥øtuªIndex
)

394 i‡((
ÁnNumbî
 < 
MAX_FAN_COUNT
)) {

395 
ÁnSy°emP¨amëîs
.
ãm≥øtuªIndex
[
ÁnNumbî
] =ÅemperatureIndex;

397 
	}
}

399 
	$ÁnSy°emGëCurve
(
uöt32_t
 
ÁnNumbî
, 
F™S≥edTempCurve
 *
ÁnS≥edTempCurve
)

401 i‡((
ÁnNumbî
 < 
MAX_FAN_COUNT
Ë&& 
ÁnS≥edTempCurve
) {

402 *
ÁnS≥edTempCurve
 = 
ÁnSy°emP¨amëîs
.ÁnS≥edTempCurve[
ÁnNumbî
];

404 
	}
}

406 
uöt32_t
 
	$ÁnSy°emGëMónRpm
(
uöt32_t
 
ÁnNumbî
)

408 i‡(!
	`ÁnSy°emGëCuºítRpm
(
ÁnNumbî
))

411 
uöt32_t
 
i
 = 0;

412 
uöt32_t
 
ΩmVÆue
 = 0;

413 
i
 = 0; i < 
FAN_MEASUREMENT_WINDOW_SIZE
; i++) {

414 
ΩmVÆue
 +
ÁnS≥edMósuªmíts
[
ÁnNumbî
].
d©aWödow
[
i
];

417  
ΩmVÆue
 >> 
FAN_MEASUREMENT_WINDOW_SHIFT_MULT
;

418 
	}
}

420 
F™C⁄åﬁÀrCh™√lC⁄fig
 * 
	$ÁnSy°emGëCh™√lC⁄fig
(
uöt32_t
 *
ch™√lCou¡
)

422 i‡(
ÁnDëe˘i⁄Sèã
 =
FAN_DETECTION_STATE_READY
) {

423 i‡(
ch™√lCou¡
) {

424 *
ch™√lCou¡
 = 
MAX_FAN_COUNT
;

426  
ÁnCh™√lC⁄figRegi°ry
;

429 i‡(
ch™√lCou¡
) {

430 *
ch™√lCou¡
 = 0;

433  
NULL
;

434 
	}
}

436 
	$ÁnSy°emSèπF™Dëe˘i⁄
()

438 
isF™Dëe˘i⁄TaskRu¬ög
 = 
åue
;

439 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\FanSystem\FanSystem.h

1 #i‚de‡
__FAN_SYSTEM_H__


2 
	#__FAN_SYSTEM_H__


	)

4 
	~<°döt.h
>

5 
	~<°dboﬁ.h
>

7 
	~"F™C⁄åﬁÀr.h
"

9 
	sF™S≥edTempCurvePoöt
 {

10 
uöt32_t
 
	mΩm
;

11 
uöt32_t
 
	mãm≥øtuª
;

12 } 
	tF™S≥edTempCurvePoöt
;

14 
	sF™S≥edTempCurve
 {

15 
	#MAX_CURVE_POINT_COUNT
 6

	)

16 
F™S≥edTempCurvePoöt
 
	mcurvePoöts
[
MAX_CURVE_POINT_COUNT
];

17 
uöt32_t
 
	mcurvePoötCou¡
;

18 } 
	tF™S≥edTempCurve
;

20 
	eF™Sy°emMode
 {

21 
	mFAN_SYSTEM_MODE_NONE
,

22 
	mFAN_SYSTEM_MODE_PWM
,

23 
	mFAN_SYSTEM_MODE_RPM
,

24 
	mFAN_SYSTEM_MODE_CURVE
,

25 } 
	tF™Sy°emMode
;

28 
	$uöt32_t
 (*
	tF™Sy°emGëTem≥øtuª
)(
	tuöt32_t
 
	tãm≥øtuªIndex
, uöt32_à
	tÁnIndex
);

29 (*
	tF™Sy°emMósuªmítEvít
)();

30 
	$uöt32_t
 (*
	tF™Sy°emGëTime°amp
)();

33 
	`ÁnSy°emInô
(
F™Sy°emGëTem≥øtuª
 
ÁnGëTem≥øtuªCÆlback
, 
F™Sy°emGëTime°amp
 
ÁnSy°emGëTime°ampCÆlback
, 
F™Sy°emMósuªmítEvít
 
ÁnSy°emMósuªmítEvítCÆlback
);

34 
	`ÁnSy°emTaskRun
();

36 
	`ÁnSy°emSëMode
(
uöt32_t
 
ÁnNumbî
, 
F™Sy°emMode
 
mode
);

37 
F™Sy°emMode
 
	`ÁnSy°emGëMode
(
uöt32_t
 
ÁnNumbî
);

39 
	`ÁnSy°emSëT¨gëRpm
(
uöt32_t
 
ÁnNumbî
, uöt32_à
ÁnRpm
);

40 
uöt32_t
 
	`ÁnSy°emGëT¨gëRpm
(uöt32_à
ÁnNumbî
);

41 
uöt32_t
 
	`ÁnSy°emGëCuºítRpm
(uöt32_à
ÁnNumbî
);

42 
uöt32_t
 
	`ÁnSy°emGëMónRpm
(uöt32_à
ÁnNumbî
);

44 
	`ÁnSy°emSëPwm
(
uöt32_t
 
ÁnNumbî
, uöt32_à
ÁnRpm
);

45 
uöt32_t
 
	`ÁnSy°emGëPwm
(uöt32_à
ÁnNumbî
);

47 
	`ÁnSy°emSëCurve
(
uöt32_t
 
ÁnNumbî
, c⁄° 
F™S≥edTempCurve
 *
ÁnS≥edTempCurve
);

48 
	`ÁnSy°emSëCurveTem≥øtuªIndex
(
uöt32_t
 
ÁnNumbî
, uöt32_à
ãm≥øtuªIndex
);

49 
	`ÁnSy°emGëCurve
(
uöt32_t
 
ÁnNumbî
, 
F™S≥edTempCurve
 *
ÁnS≥edTempCurve
);

50 
F™C⁄åﬁÀrCh™√lC⁄fig
 * 
	`ÁnSy°emGëCh™√lC⁄fig
(
uöt32_t
 *
ch™√lCou¡
);

51 
	`ÁnSy°emSèπF™Dëe˘i⁄
();

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\LightingSystem\led.c

1 
	~"Àd.h
"

2 
	~<°rög.h
>

3 
	~"LedC⁄åﬁÀr.h
"

7 #ifde‡
JOTUN


8 
	#LED_STRIP_1_MAX_LED_COUNT
 94

	)

10 
	#LED_STRIP_1_MAX_LED_COUNT
 72

	)

13 
	#LED_STRIP_2_MAX_LED_COUNT
 72

	)

15 
	#LED_BRIGHTNESS_MAX
 100

	)

17 
	#BARBUDA_DEFAULT_TEMPERATURE
 (
uöt16_t
Ë(4000)

	)

19 
uöt32_t
 
	$timîGëTime
()

22 
	}
}

26 
LedSåùMode
 
	mmode
;

27 
uöt8_t
 
	mbrighäess
;

28 
uöt8_t
 
	mÀdsCou¡
;

29 
LedTy≥
 
	mÀdTy≥
;

30 
uöt8_t
 
	mgroupCou¡
;

31 
LedGroup
 
	mgroup
[
LED_GROUP_MAX_COUNT
];

32 } 
	tLedSåù
;

36 
uöt32_t
 
	mwhìlPosôi⁄
;

37 } 
	møöbowWaveSëtögs
;

39 
uöt8_t
 
	mposôi⁄
;

40 } 
	mcﬁ‹Shi·Sëtögs
;

42 
uöt32_t
 
	mwhìlPosôi⁄
;

43 } 
	møöbowSëtögs
;

45 
uöt16_t
 
	mtime
;

46 
uöt8_t
 
	mcﬁ‹Index
;

47 } 
	m°robög
;

49 
uöt16_t
 
	mtime
;

50 } 
	mm¨quì
;

52 
Cﬁ‹
 
	mbackgroundCﬁ‹
;

53 
uöt16_t
 
	mtime
;

54 } 
	m£quítül
;

56 
uöt16_t
 
	mtime1
;

57 
uöt16_t
 
	mtime2
;

58 } 
	mvis‹
;

60 
uöt16_t
 
	mtime
;

61 } 
	mcﬁ‹Pul£
;

63 
uöt16_t
 
	mtime
;

64 
uöt8_t
 
	mcﬁ‹Index
;

65 } 
	mcﬁ‹Wave
;

67 
uöt16_t
 
	m¥eviousTem≥øtuª
;

68 
uöt16_t
 
	mãm≥øtuª
;

69 
uöt32_t
 
	mtimeSèmp
;

70 } 
	mãm≥øtuªCﬁ‹
;

71 } 
	tLedGroupSèã
;

73 
LedGroupSèã
 
	gÀdGroupSèã
[
LED_STRIP_COUNT
][
LED_GROUP_MAX_COUNT
];

74 
LedSåù
 
	gÀdSåù
[
LED_STRIP_COUNT
];

75 
Cﬁ‹
 
	g°rùAºay
[
LED_STRIP_COUNT
][
LED_STRIP_1_MAX_LED_COUNT
];

76 
boﬁ
 
	g∂ayEf„˘
 = 
Ál£
;

79 
Cﬁ‹
 
	$whìl
(
uöt8_t
 
whìlPos
)

81 
Cﬁ‹
 
cﬁ‹
 = {0, 0, 0};

82 
whìlPos
 = 
UINT8_MAX
 - wheelPos;

84 i‡(
whìlPos
 < 85)

86 
cﬁ‹
.
r
 = 
UINT8_MAX
 - 
whìlPos
 * 3;

87 
cﬁ‹
.
b
 = 
whìlPos
 * 3;

89 i‡(
whìlPos
 < 170)

91 
whìlPos
 -= 85;

92 
cﬁ‹
.
g
 = 
whìlPos
 * 3;

93 
cﬁ‹
.
b
 = 
UINT8_MAX
 - 
whìlPos
 * 3;

97 
whìlPos
 -= 170;

98 
cﬁ‹
.
r
 = 
whìlPos
 * 3;

99 
cﬁ‹
.
g
 = 
UINT8_MAX
 - 
whìlPos
 * 3;

101  
cﬁ‹
;

102 
	}
}

104 
Cﬁ‹
 
	$lightI¡ísôy
(
Cﬁ‹
 
cﬁ‹
, 
uöt16_t
 
öãnsôy
)

106 
cﬁ‹
.
r
 = ((
uöt16_t
Ëcﬁ‹.∏* 
öãnsôy
) / 100;

107 
cﬁ‹
.
g
 = ((
uöt16_t
Ëcﬁ‹.g * 
öãnsôy
) / 100;

108 
cﬁ‹
.
b
 = ((
uöt16_t
Ëcﬁ‹.b * 
öãnsôy
) / 100 ;

110  
cﬁ‹
;

111 
	}
}

113 
Cﬁ‹
 
	$bÀndCﬁ‹
(
Cﬁ‹
 
cﬁ‹1
, Cﬁ‹ 
cﬁ‹2
, 
uöt8_t
 
c€f
)

115 
Cﬁ‹
 
cﬁ‹
;

116 
cﬁ‹
.
r
 = (
cﬁ‹1
.∏* (
uöt16_t
)
c€f
 + 
cﬁ‹2
.r * (0xff - (uint16_t)coef)) >> 8;

117 
cﬁ‹
.
g
 = (
cﬁ‹1
.g * (
uöt16_t
)
c€f
 + 
cﬁ‹2
.g * (0xff - (uint16_t)coef)) >> 8;

118 
cﬁ‹
.
b
 = (
cﬁ‹1
.b * (
uöt16_t
)
c€f
 + 
cﬁ‹2
.b * (0xff - (uint16_t)coef)) >> 8;

119  
cﬁ‹
;

120 
	}
}

122 
uöt32_t
 
	$øndI
()

124 
uöt32_t
 
y
 = 0xA55AA55A;

125 
y
 ^= (y >> 13);

126 
y
 ^= (y >> 17);

127 
y
 ^= (y << 5);

128  
y
;

129 
	}
}

131 
	$ÀdGíî©eR™domCﬁ‹
(
Cﬁ‹
 *
cﬁ‹
)

133 
uöt32_t
 
hPªvious
 = 0;

134 
uöt32_t
 
h
 = ((
hPªvious
 + 
	`øndI
() + 30) % (360 - 60)) % 360;

135 
uöt32_t
 
s
 = 
UINT8_MAX
;

136 
uöt32_t
 
v
 = 
UINT8_MAX
;

137 
uöt8_t
 
r
, 
f
, 
q
, 
t
;

139 
hPªvious
 = 
h
;

140 
r
 = 
h
 / (
UINT8_MAX
 / 6);

141 
f
 = (
h
 - (
r
 * (
UINT8_MAX
 / 6))) * 6;

142 
q
 = (
v
 * (
UINT8_MAX
 - ((
s
 * 
f
) >> 8))) >> 8;

143 
t
 = (
v
 * (
UINT8_MAX
 - ((
s
 * (UINT8_MAX - 
f
)) >> 8))) >> 8;

145 
r
) {

146 0: 
cﬁ‹
->
r
 = 
v
; cﬁ‹->
g
 = 
t
; cﬁ‹->
b
 = 0; ;

147 1: 
cﬁ‹
->
r
 = 
q
; cﬁ‹->
g
 = 
v
; cﬁ‹->
b
 = 0; ;

148 2: 
cﬁ‹
->
r
 = 0; cﬁ‹->
g
 = 
v
; cﬁ‹->
b
 = 
t
; ;

149 3: 
cﬁ‹
->
r
 = 0; cﬁ‹->
g
 = 
q
; cﬁ‹->
b
 = 
v
; ;

150 4: 
cﬁ‹
->
r
 = 
t
; cﬁ‹->
g
 = 0; cﬁ‹->
b
 = 
v
; ;

151 : 
cﬁ‹
->
r
 = 
v
; cﬁ‹->
g
 = 0; cﬁ‹->
b
 = 
q
; ;

153 
	}
}

155 
	$øöbowWave
(
LedSåùIndex
 
°rùIndex
, 
uöt8_t
 
groupIndex
)

157 
LedGroup
 *
group
 = &
ÀdSåù
[
°rùIndex
].group[
groupIndex
];

158 
RaöbowWave
 *
ef„˘
 = &
group
->ef„˘.
øöbowWave
;

159 
uöt32_t
 *
whìlPosôi⁄
 = &
ÀdGroupSèã
[
°rùIndex
][
groupIndex
].
øöbowWaveSëtögs
.wheelPosition;

160 
uöt8_t
 
ödex
;

162 
ödex
 = 
group
->
°¨tIndex
; index < group->
°›Index
; ++index) {

163 
uöt8_t
 
√wIndex
 = (!
ef„˘
->
f‹w¨dDúe˘i⁄
Ë? 
ödex
 : ((
group
->
°›Index
 - 1) - index);

164 
uöt8_t
 
whìlPos
 = 
√wIndex
 * 256 / (
group
->
°›Index
 - group->
°¨tIndex
 );

165 
Cﬁ‹
 
cﬁ‹
;

167 
cﬁ‹
 = 
	`whìl
(
whìlPos
 + *
whìlPosôi⁄
);

168 
cﬁ‹
 = 
	`lightI¡ísôy
(cﬁ‹, 
ÀdSåù
[
°rùIndex
].
brighäess
);

169 
°rùAºay
[
°rùIndex
][
ödex
] = 
cﬁ‹
;

172 
ef„˘
->
•ìd
) {

173 
EFFECT_SPEED_FAST
: *
whìlPosôi⁄
 = *wheelPosition + 4; ;

174 
EFFECT_SPEED_MIDDLE
: *
whìlPosôi⁄
 = *wheelPosition + 2; ;

175 
EFFECT_SPEED_SLOW
: *
whìlPosôi⁄
 = *wheelPosition + 1; ;

178 
	}
}

180 
	$cﬁ‹Shi·
(
LedSåùIndex
 
°rùIndex
, 
uöt8_t
 
groupIndex
)

182 
LedGroup
 *
group
 = &
ÀdSåù
[
°rùIndex
].group[
groupIndex
];

183 
Cﬁ‹Shi·
 *
ef„˘
 = &
group
->ef„˘.
cﬁ‹Shi·
;

184 
uöt8_t
 
ef„˘Sãp
 = 0;

185 
Cﬁ‹
 
cﬁ‹
;

186 
uöt8_t
 
ödex
;

188 
cﬁ‹
 = 
	`bÀndCﬁ‹
(
ef„˘
->cﬁ‹[0],Éf„˘->cﬁ‹[1], 
ÀdGroupSèã
[
°rùIndex
][
groupIndex
].
cﬁ‹Shi·Sëtögs
.
posôi⁄
);

189 
cﬁ‹
 = 
	`lightI¡ísôy
(cﬁ‹, 
ÀdSåù
[
°rùIndex
].
brighäess
);

191 
ödex
 = 
group
->
°¨tIndex
; index < group->
°›Index
; ++index) {

192 
°rùAºay
[
°rùIndex
][
ödex
] = 
cﬁ‹
;

195 
ef„˘
->
•ìd
) {

196 
EFFECT_SPEED_FAST
: 
ef„˘Sãp
 = 8; ;

197 
EFFECT_SPEED_MIDDLE
: 
ef„˘Sãp
 = 4; ;

198 
EFFECT_SPEED_SLOW
: 
ef„˘Sãp
 = 1; ;

202 i‡(
ÀdGroupSèã
[
°rùIndex
][
groupIndex
].
cﬁ‹Shi·Sëtögs
.
posôi⁄
 > 0xf‡- 
ef„˘Sãp
) {

203 i‡(
ef„˘
->
øndomCﬁ‹
) {

204 
ef„˘
->
cﬁ‹
[1] =Éffect->color[0];

205 
	`ÀdGíî©eR™domCﬁ‹
(&
ef„˘
->
cﬁ‹
[0]);

207 
Cﬁ‹
 
cﬁ‹Temp
;

208 
cﬁ‹Temp
 = 
ef„˘
->
cﬁ‹
[0];

209 
ef„˘
->
cﬁ‹
[0] =Éffect->color[1];

210 
ef„˘
->
cﬁ‹
[1] = 
cﬁ‹Temp
;

214 
ÀdGroupSèã
[
°rùIndex
][
groupIndex
].
cﬁ‹Shi·Sëtögs
.
posôi⁄
 +
ef„˘Sãp
;

215 
	}
}

217 
	$øöbow
(
LedSåùIndex
 
°rùIndex
, 
uöt8_t
 
groupIndex
)

219 
LedGroup
 *
group
 = &
ÀdSåù
[
°rùIndex
].group[
groupIndex
];

220 
Raöbow
 *
ef„˘
 = &
group
->ef„˘.
øöbow
;

221 
uöt32_t
 *
whìlPosôi⁄
 = &
ÀdGroupSèã
[
°rùIndex
][
groupIndex
].
øöbowSëtögs
.wheelPosition;

222 
uöt8_t
 
ödex
;

223 
Cﬁ‹
 
cﬁ‹
;

225 
cﬁ‹
 = 
	`whìl
(*
whìlPosôi⁄
);

226 
cﬁ‹
 = 
	`lightI¡ísôy
(cﬁ‹, 
ÀdSåù
[
°rùIndex
].
brighäess
);

228 
ödex
 = 
group
->
°¨tIndex
; index < group->
°›Index
; ++index) {

229 
°rùAºay
[
°rùIndex
][
ödex
] = 
cﬁ‹
;

232 
ef„˘
->
•ìd
) {

233 
EFFECT_SPEED_FAST
: *
whìlPosôi⁄
 = *wheelPosition + 4; ;

234 
EFFECT_SPEED_MIDDLE
: *
whìlPosôi⁄
 = *wheelPosition + 2; ;

235 
EFFECT_SPEED_SLOW
: *
whìlPosôi⁄
 = *wheelPosition + 1; ;

238 
	}
}

240 
	$cﬁ‹Sètic
(
LedSåùIndex
 
°rùIndex
, 
uöt8_t
 
groupIndex
)

242 
LedGroup
 *
group
 = &
ÀdSåù
[
°rùIndex
].group[
groupIndex
];

243 
SèticEf„˘
 *
ef„˘
 = &
group
->ef„˘.
°©icEf„˘
;

244 
uöt8_t
 
ödex
;

245 
Cﬁ‹
 
cﬁ‹
;

247 
cﬁ‹
 = 
	`lightI¡ísôy
(
ef„˘
->cﬁ‹, 
ÀdSåù
[
°rùIndex
].
brighäess
);

249 
ödex
 = 
group
->
°¨tIndex
; index < group->
°›Index
; ++index) {

250 
°rùAºay
[
°rùIndex
][
ödex
] = 
cﬁ‹
;

252 
	}
}

254 
	$°robög
(
LedSåùIndex
 
°rùIndex
, 
uöt8_t
 
groupIndex
)

256 
LedGroup
 *
group
 = &
ÀdSåù
[
°rùIndex
].group[
groupIndex
];

257 
Såobög
 *
ef„˘
 = &
group
->ef„˘.
°robög
;

258 
uöt8_t
 
ef„˘Pîiod
 = 0;

259 
Cﬁ‹
 
cﬁ‹
 = {0, 0, 0};

260 
uöt8_t
 
ödex
;

261 
uöt16_t
 *
time
 = &
ÀdGroupSèã
[
°rùIndex
][
groupIndex
].
°robög
.time;

262 
uöt8_t
 *
cﬁ‹Index
 = &
ÀdGroupSèã
[
°rùIndex
][
groupIndex
].
°robög
.colorIndex;

264 
ef„˘
->
•ìd
) {

265 
EFFECT_SPEED_FAST
: 
ef„˘Pîiod
 = 12; ;

266 
EFFECT_SPEED_MIDDLE
: 
ef„˘Pîiod
 = 24; ;

267 
EFFECT_SPEED_SLOW
: 
ef„˘Pîiod
 = 39; ;

271 i‡(*
time
 < 
ef„˘Pîiod
) {

272 
cﬁ‹
 = 
	`lightI¡ísôy
(
ef„˘
->cﬁ‹[*
cﬁ‹Index
], 
ÀdSåù
[
°rùIndex
].
brighäess
);

273 } i‡(*
time
 >(
ef„˘Pîiod
 << 1)) {

274 *
time
 = 0;

275 *
cﬁ‹Index
 = (*colorIndex) ? 0 : 1;

277 i‡(
ef„˘
->
øndomCﬁ‹
) {

278 
	`ÀdGíî©eR™domCﬁ‹
(&
ef„˘
->
cﬁ‹
[0]);

279 
	`ÀdGíî©eR™domCﬁ‹
(&
ef„˘
->
cﬁ‹
[1]);

282 *
time
 = *time +1;

284 
ödex
 = 
group
->
°¨tIndex
; index < group->
°›Index
; ++index) {

285 
°rùAºay
[
°rùIndex
][
ödex
] = 
cﬁ‹
;

287 
	}
}

289 
	$m¨quì
(
LedSåùIndex
 
°rùIndex
, 
uöt8_t
 
groupIndex
)

291 
LedGroup
 *
group
 = &
ÀdSåù
[
°rùIndex
].group[
groupIndex
];

292 
M¨quì
 *
ef„˘
 = &
group
->ef„˘.
m¨quì
;

293 
uöt8_t
 
ödex
;

294 
Cﬁ‹
 
cﬁ‹
;

295 
Cﬁ‹
 
cﬁ‹Em±y
 = {0, 0, 0};

296 
uöt8_t
 
•ìd
 = 3;

297 
uöt16_t
 *
time
 = &
ÀdGroupSèã
[
°rùIndex
][
groupIndex
].
m¨quì
.time;

299 
ef„˘
->
•ìd
) {

300 
EFFECT_SPEED_FAST
: 
•ìd
 = 3; ;

301 
EFFECT_SPEED_MIDDLE
: 
•ìd
 = 6; ;

302 
EFFECT_SPEED_SLOW
: 
•ìd
 = 12; ;

306 
cﬁ‹
 = 
	`lightI¡ísôy
(
ef„˘
->cﬁ‹, 
ÀdSåù
[
°rùIndex
].
brighäess
);

308 
ödex
 = 
group
->
°¨tIndex
; index < group->
°›Index
; ++index) {

309 
°rùAºay
[
°rùIndex
][
ödex
] = 
cﬁ‹Em±y
;

312 i‡(*
time
 / 
•ìd
 == 0) {

313 
ödex
 = 
group
->
°¨tIndex
; index < group->
°›Index
; index += 3) {

314 
°rùAºay
[
°rùIndex
][
ödex
] = 
cﬁ‹
;

317 
ödex
 = 
group
->
°¨tIndex
+1; index < group->
°›Index
; index += 3) {

318 
°rùAºay
[
°rùIndex
][
ödex
] = 
cﬁ‹
;

320 } i‡(*
time
 / 
•ìd
 == 1) {

321 
ödex
 = 
group
->
°¨tIndex
; index < group->
°›Index
; index += 3) {

322 
°rùAºay
[
°rùIndex
][
ödex
] = 
cﬁ‹
;

325 
ödex
 = 
group
->
°¨tIndex
+2; index < group->
°›Index
; index += 3) {

326 
°rùAºay
[
°rùIndex
][
ödex
] = 
cﬁ‹
;

328 } i‡(*
time
 / 
•ìd
 == 2) {

329 
ödex
 = 
group
->
°¨tIndex
+1; index < group->
°›Index
; index += 3) {

330 
°rùAºay
[
°rùIndex
][
ödex
] = 
cﬁ‹
;

333 
ödex
 = 
group
->
°¨tIndex
+2; index < group->
°›Index
; index += 3) {

334 
°rùAºay
[
°rùIndex
][
ödex
] = 
cﬁ‹
;

338 *
time
 = *time + 1;

340 i‡(*
time
 / 
•ìd
 == 3) {

341 *
time
 = 0;

343 
	}
}

345 
	$£quítül
(
LedSåùIndex
 
°rùIndex
, 
uöt8_t
 
groupIndex
)

347 
LedGroup
 *
group
 = &
ÀdSåù
[
°rùIndex
].group[
groupIndex
];

348 
Sequítül
 *
ef„˘
 = &
group
->ef„˘.
£quítül
;

349 
Cﬁ‹
 
backgroundCﬁ‹
;

350 
Cﬁ‹
 
cﬁ‹
;

351 
uöt8_t
 
i
;

352 
uöt16_t
 *
time
 = &
ÀdGroupSèã
[
°rùIndex
][
groupIndex
].
£quítül
.time;

354 
cﬁ‹
 = 
	`lightI¡ísôy
(
ef„˘
->cﬁ‹, 
ÀdSåù
[
°rùIndex
].
brighäess
);

355 
backgroundCﬁ‹
 = 
	`lightI¡ísôy
(
ÀdGroupSèã
[
°rùIndex
][
groupIndex
].
£quítül
.backgroundCﬁ‹, 
ÀdSåù
[°rùIndex].
brighäess
);

357 
i
 = 
group
->
°¨tIndex
; i < group->
°›Index
; i++) {

358 
uöt16_t
 
ödex
 = (uöt16_t)(
i
 - 
group
->
°¨tIndex
) << 8;

359 
uöt8_t
 
ÀdIndex
 = (
ef„˘
->
f‹w¨dDúe˘i⁄
Ë? 
i
 : (
group
->
°›Index
 - i - 1 + group->
°¨tIndex
);

361 i‡(
ödex
 >*
time
) {

362 
°rùAºay
[
°rùIndex
][
ÀdIndex
] = 
backgroundCﬁ‹
;

363 } i‡(
ödex
 + 0xf‡<*
time
) {

364 
°rùAºay
[
°rùIndex
][
ÀdIndex
] = 
cﬁ‹
;

366 
°rùAºay
[
°rùIndex
][
ÀdIndex
] = 
	`bÀndCﬁ‹
(
cﬁ‹
, 
backgroundCﬁ‹
, *
time
 - 
ödex
);

370 i‡(
ÀdSåù
[
°rùIndex
].
ÀdTy≥
 =
LED_TYPE_HD59731B
) {

372 
ef„˘
->
•ìd
) {

373 
EFFECT_SPEED_FAST
: *
time
 = *time + 43; ;

374 
EFFECT_SPEED_MIDDLE
: *
time
 = *time + 21; ;

375 
EFFECT_SPEED_SLOW
: *
time
 = *time + 13; ;

379 
ef„˘
->
•ìd
) {

380 
EFFECT_SPEED_FAST
: *
time
 = *time + 512; ;

381 
EFFECT_SPEED_MIDDLE
: *
time
 = *time + 256; ;

382 
EFFECT_SPEED_SLOW
: *
time
 = *time + 128; ;

387 i‡(*
time
 > ((
uöt16_t
)(
group
->
°›Index
 - group->
°¨tIndex
) << 8)) {

388 *
time
 = 0;

390 i‡(
ef„˘
->
øndomCﬁ‹
) {

392 
ÀdGroupSèã
[
°rùIndex
][
groupIndex
].
£quítül
.
backgroundCﬁ‹
 = 
ef„˘
->
cﬁ‹
;

394 
	`ÀdGíî©eR™domCﬁ‹
(&
ef„˘
->
cﬁ‹
);

397 
	}
}

399 
Cﬁ‹
 
	$vis‹GëCﬁ‹
(
Cﬁ‹
 
cﬁ‹1
, Cﬁ‹ 
cﬁ‹2
, 
uöt16_t
 
pos
)

401 i‡(
pos
 <= 255) {

402 
Cﬁ‹
 
cﬁ‹Bœck
 = {0, 0, 0};

403  
	`bÀndCﬁ‹
(
cﬁ‹1
, 
cﬁ‹Bœck
, 
pos
);

406 i‡(
pos
 >= 768) {

407 
Cﬁ‹
 
cﬁ‹Bœck
 = {0, 0, 0};

408  
	`bÀndCﬁ‹
(
cﬁ‹Bœck
, 
cﬁ‹2
, 
pos
 - 768);

411  
	`bÀndCﬁ‹
(
cﬁ‹2
, 
cﬁ‹1
, (
pos
 - 255) >> 1);

412 
	}
}

414 
	$vis‹
(
LedSåùIndex
 
°rùIndex
, 
uöt8_t
 
groupIndex
)

416 
LedGroup
 *
group
 = &
ÀdSåù
[
°rùIndex
].group[
groupIndex
];

417 
Vis‹
 *
ef„˘
 = &
group
->ef„˘.
vis‹
;

418 
Cﬁ‹
 
fú°Cﬁ‹
;

419 
Cﬁ‹
 
œ°Cﬁ‹
;

420 
uöt8_t
 
ödex
;

421 
uöt8_t
 
•ìd
;

422 
uöt16_t
 *
time1
 = &
ÀdGroupSèã
[
°rùIndex
][
groupIndex
].
vis‹
.time1;

423 
uöt16_t
 *
time2
 = &
ÀdGroupSèã
[
°rùIndex
][
groupIndex
].
vis‹
.time2;

425 
ef„˘
->
•ìd
) {

426 
EFFECT_SPEED_FAST
: 
•ìd
 = 192; ;

427 
EFFECT_SPEED_MIDDLE
: 
•ìd
 = 96; ;

428 
EFFECT_SPEED_SLOW
: 
•ìd
 = 64; ;

432 i‡(*
time1
 =0 && *
time2
 =0 && 
ef„˘
->
øndomCﬁ‹
) {

433 
	`ÀdGíî©eR™domCﬁ‹
(&
ef„˘
->
cﬁ‹
[0]);

434 
	`ÀdGíî©eR™domCﬁ‹
(&
ef„˘
->
cﬁ‹
[1]);

437 
fú°Cﬁ‹
 = 
	`lightI¡ísôy
(
ef„˘
->
cﬁ‹
[1], 
ÀdSåù
[
°rùIndex
].
brighäess
);

438 
œ°Cﬁ‹
 = 
	`lightI¡ísôy
(
ef„˘
->
cﬁ‹
[0], 
ÀdSåù
[
°rùIndex
].
brighäess
);

440 
ödex
 = 0; index < 
group
->
°›Index
 - group->
°¨tIndex
; index++) {

441 
uöt16_t
 
t
 = ((uöt16_t)
ödex
 << 8Ë- *
time1
 + 1024;

443 i‡(
t
 < 1024) {

444 
Cﬁ‹
 
cﬁ‹ToSë
;

445 
cﬁ‹ToSë
 = *
time2
 ? 
	`vis‹GëCﬁ‹
(
œ°Cﬁ‹
, 
fú°Cﬁ‹
, 
t
) : visorGetColor(firstColor,ÜastColor,Å);

446 
°rùAºay
[
°rùIndex
][
group
->
°¨tIndex
 + 
ödex
] = 
cﬁ‹ToSë
;

448 
Cﬁ‹
 
cﬁ‹Em±y
 = {0, 0, 0};

449 
°rùAºay
[
°rùIndex
][
group
->
°¨tIndex
 + 
ödex
] = 
cﬁ‹Em±y
;

453 i‡(*
time2
 == 0) {

454 *
time1
 = *time1 + 
•ìd
;

456 i‡(*
time1
 >((
uöt16_t
)(
group
->
°›Index
 - group->
°¨tIndex
) << 8) + 768) {

457 *
time2
 = 1;

460 *
time1
 = *time1 - 
•ìd
;

461 i‡(*
time1
 == 0) {

462 *
time2
 = 0;

465 
	}
}

467 
	$cﬁ‹Pul£
(
LedSåùIndex
 
°rùIndex
, 
uöt8_t
 
groupIndex
)

469 
LedGroup
 *
group
 = &
ÀdSåù
[
°rùIndex
].group[
groupIndex
];

470 
Cﬁ‹Pul£
 *
ef„˘
 = &
group
->ef„˘.
cﬁ‹Pul£
;

471 
uöt16_t
 *
time
 = &
ÀdGroupSèã
[
°rùIndex
][
groupIndex
].
cﬁ‹Pul£
.time;

472 
Cﬁ‹
 
cﬁ‹
 = {0, 0, 0};

473 
Cﬁ‹
 
cﬁ‹Bœck
 = {0, 0, 0};

474 
uöt8_t
 
•ìd
;

475 
uöt8_t
 
ödex
;

477 
ef„˘
->
•ìd
) {

478 
EFFECT_SPEED_FAST
: 
•ìd
 = 8; ;

479 
EFFECT_SPEED_MIDDLE
: 
•ìd
 = 4; ;

480 
EFFECT_SPEED_SLOW
: 
•ìd
 = 1; ;

484 *
time
 = *timê+ 
•ìd
;

486 i‡(*
time
 <= 0xff) {

487 
cﬁ‹
 = 
	`bÀndCﬁ‹
(
ef„˘
->cﬁ‹[0], 
cﬁ‹Bœck
, *
time
);

488 } i‡(*
time
 <2*(
uöt16_t
)0xff) {

489 
cﬁ‹
 = 
	`bÀndCﬁ‹
(
ef„˘
->cﬁ‹[0], 
cﬁ‹Bœck
, 2*(
uöt16_t
)0xf‡- *
time
);

490 } i‡(*
time
 <3*(
uöt16_t
)0xff) {

492 } i‡(*
time
 <4*(
uöt16_t
)0xff) {

493 
cﬁ‹
 = 
	`bÀndCﬁ‹
(
ef„˘
->cﬁ‹[1], 
cﬁ‹Bœck
, *
time
 - 3*(
uöt16_t
)0xff );

494 } i‡(*
time
 <5*(
uöt16_t
)0xff) {

495 
cﬁ‹
 = 
	`bÀndCﬁ‹
(
ef„˘
->cﬁ‹[1], 
cﬁ‹Bœck
, 5*(
uöt16_t
)0xf‡- *
time
);

496 } i‡((*
time
 <6*(
uöt16_t
)0xff)) {

499 *
time
 = 0;

501 i‡(
ef„˘
->
øndomCﬁ‹
) {

502 
	`ÀdGíî©eR™domCﬁ‹
(&
ef„˘
->
cﬁ‹
[0]);

503 
	`ÀdGíî©eR™domCﬁ‹
(&
ef„˘
->
cﬁ‹
[1]);

507 
cﬁ‹
 = 
	`lightI¡ísôy
(cﬁ‹, 
ÀdSåù
[
°rùIndex
].
brighäess
);

509 
ödex
 = 
group
->
°¨tIndex
; index < group->
°›Index
; ++index) {

510 
°rùAºay
[
°rùIndex
][
ödex
] = 
cﬁ‹
;

512 
	}
}

514 
Cﬁ‹
 
	$cﬁ‹WaveGëCﬁ‹
(
Cﬁ‹
 
cﬁ‹
, 
uöt16_t
 
pos
)

516 i‡(
pos
 <= 255) {

517 
Cﬁ‹
 
cﬁ‹Bœck
 = {0, 0, 0};

518  
	`bÀndCﬁ‹
(
cﬁ‹
, 
cﬁ‹Bœck
, 
pos
);

521 i‡(
pos
 >= 2048- 256) {

522 
Cﬁ‹
 
cﬁ‹Bœck
 = {0, 0, 0};

523  
	`bÀndCﬁ‹
(
cﬁ‹Bœck
, 
cﬁ‹
, 
pos
 - 2048+ 256);

526  
cﬁ‹
;

527 
	}
}

529 
	$cﬁ‹Wave
(
LedSåùIndex
 
°rùIndex
, 
uöt8_t
 
groupIndex
)

531 
LedGroup
 *
group
 = &
ÀdSåù
[
°rùIndex
].group[
groupIndex
];

532 
Cﬁ‹Wave
 *
ef„˘
 = &
group
->ef„˘.
cﬁ‹Wave
;

533 
Cﬁ‹
 
fú°Cﬁ‹
;

534 
uöt8_t
 
ödex
;

535 
uöt8_t
 
•ìd
;

536 
uöt16_t
 *
time
 = &
ÀdGroupSèã
[
°rùIndex
][
groupIndex
].
cﬁ‹Wave
.time;

537 
uöt8_t
 *
cﬁ‹Index
 = &
ÀdGroupSèã
[
°rùIndex
][
groupIndex
].
cﬁ‹Wave
.colorIndex;

539 
ef„˘
->
•ìd
) {

540 
EFFECT_SPEED_FAST
: 
•ìd
 = 192; ;

541 
EFFECT_SPEED_MIDDLE
: 
•ìd
 = 96; ;

542 
EFFECT_SPEED_SLOW
: 
•ìd
 = 48; ;

546 i‡(*
time
 =0 && 
ef„˘
->
øndomCﬁ‹
) {

547 
	`ÀdGíî©eR™domCﬁ‹
(&
ef„˘
->
cﬁ‹
[0]);

548 
	`ÀdGíî©eR™domCﬁ‹
(&
ef„˘
->
cﬁ‹
[1]);

551 
fú°Cﬁ‹
 = 
	`lightI¡ísôy
(
ef„˘
->
cﬁ‹
[*
cﬁ‹Index
], 
ÀdSåù
[
°rùIndex
].
brighäess
);

553 
ödex
 = 0; index < 
group
->
°›Index
 - group->
°¨tIndex
; index++) {

554 
uöt16_t
 
t
 = ((uöt16_t)
ödex
 << 8Ë- *
time
 + 2048;

556 i‡(
t
 < 2048 ) {

557 
Cﬁ‹
 
cﬁ‹ToSë
;

558 
cﬁ‹ToSë
 = 
	`cﬁ‹WaveGëCﬁ‹
(
fú°Cﬁ‹
, 
t
);

559 i‡(
ef„˘
->
f‹w¨dDúe˘i⁄
) {

560 
°rùAºay
[
°rùIndex
][
group
->
°¨tIndex
 + 
ödex
] = 
cﬁ‹ToSë
;

562 
°rùAºay
[
°rùIndex
][
group
->
°›Index
 - 1 - 
ödex
] = 
cﬁ‹ToSë
;

565 
Cﬁ‹
 
cﬁ‹Em±y
 = {0, 0, 0};

566 i‡(
ef„˘
->
f‹w¨dDúe˘i⁄
) {

567 
°rùAºay
[
°rùIndex
][
group
->
°¨tIndex
 + 
ödex
] = 
cﬁ‹Em±y
;

569 
°rùAºay
[
°rùIndex
][
group
->
°›Index
 - 1 - 
ödex
] = 
cﬁ‹Em±y
;

574 *
time
 = *timê+ 
•ìd
;

576 i‡(*
time
 >((
uöt16_t
)(
group
->
°›Index
 - group->
°¨tIndex
) << 8) + 2048 - 256) {

577 *
time
 = 0;

578 *
cﬁ‹Index
 = *colorIndex ? 0 : 1;

580 
	}
}

583 
	$ãm≥øtuªEf„˘
(
LedSåùIndex
 
°rùIndex
, 
uöt8_t
 
groupIndex
)

585 
LedGroup
 *
group
 = &
ÀdSåù
[
°rùIndex
].group[
groupIndex
];

586 
Tem≥øtuªEf„˘
 *
ef„˘
 = &
group
->ef„˘.
ãm≥øtuªEf„˘
;

587 
Cﬁ‹
 
cﬁ‹
 = {0, 0, 0};

588 
uöt16_t
 
ãmp
;

589 
uöt8_t
 
ÀdPosôi⁄
;

591 
	#EXTERNAL_TEMPERATURE_INDEX
 0xFF

	)

592 i‡(
ef„˘
->
ãm≥øtuªIndex
 =
EXTERNAL_TEMPERATURE_INDEX
) {

593 #unde‡
EXTERNAL_TEMPERATURE_INDEX


595 i‡(
	`timîGëTime
(Ë- 
ÀdGroupSèã
[
°rùIndex
][
groupIndex
].
ãm≥øtuªCﬁ‹
.
timeSèmp
 > 5000) {

596 
ÀdGroupSèã
[
°rùIndex
][
groupIndex
].
ãm≥øtuªCﬁ‹
.
¥eviousTem≥øtuª
 = 
BARBUDA_DEFAULT_TEMPERATURE
;

597 
ÀdGroupSèã
[
°rùIndex
][
groupIndex
].
ãm≥øtuªCﬁ‹
.
ãm≥øtuª
 = 
BARBUDA_DEFAULT_TEMPERATURE
;

598 
ãmp
 = 
BARBUDA_DEFAULT_TEMPERATURE
;

600 
uöt16_t
 *
¥eviousTem≥øtuª
 = &
ÀdGroupSèã
[
°rùIndex
][
groupIndex
].
ãm≥øtuªCﬁ‹
.previousTemperature;

601 
uöt16_t
 
ãm≥øtuª
 = 
ÀdGroupSèã
[
°rùIndex
][
groupIndex
].
ãm≥øtuªCﬁ‹
.temperature;

603 i‡(*
¥eviousTem≥øtuª
 == 0) {

604 *
¥eviousTem≥øtuª
 = 
ãm≥øtuª
;

607 
ãmp
 = *
¥eviousTem≥øtuª
*0.95 + 
ãm≥øtuª
*0.05;

608 *
¥eviousTem≥øtuª
 = 
ãmp
;

614 i‡(0 <
ãmp
 &&Åem∞< 
ef„˘
->
ãm≥øtuª
[0]) {

615 
cﬁ‹
 = 
ef„˘
->color[0];

616 } i‡(
ef„˘
->
ãm≥øtuª
[0] <
ãmp
 &&Åemp <Éffect->temperature[1]) {

617 
cﬁ‹
.
r
 = (
ef„˘
->cﬁ‹[0].∏* ((
uöt32_t
Îf„˘->
ãm≥øtuª
[1] - 
ãmp
) +Éffect->color[1].r * ((uint32_t)temp -Éffect->temperature[0])) / (effect->temperature[1] -Éffect->temperature[0]);

618 
cﬁ‹
.
g
 = (
ef„˘
->cﬁ‹[0].g * ((
uöt32_t
Îf„˘->
ãm≥øtuª
[1] - 
ãmp
) +Éffect->color[1].g * ((uint32_t)temp -Éffect->temperature[0])) / (effect->temperature[1] -Éffect->temperature[0]);

619 
cﬁ‹
.
b
 = (
ef„˘
->cﬁ‹[0].b * ((
uöt32_t
Îf„˘->
ãm≥øtuª
[1] - 
ãmp
) +Éffect->color[1].b * ((uint32_t)temp -Éffect->temperature[0])) / (effect->temperature[1] -Éffect->temperature[0]);

620 } i‡(
ef„˘
->
ãm≥øtuª
[1] <
ãmp
 &&Åemp <Éffect->temperature[2]) {

621 
cﬁ‹
.
r
 = (
ef„˘
->cﬁ‹[1].∏* ((
uöt32_t
Îf„˘->
ãm≥øtuª
[2] - 
ãmp
) +Éffect->color[2].r * ((uint32_t)temp -Éffect->temperature[1])) / (effect->temperature[2] -Éffect->temperature[1]);

622 
cﬁ‹
.
g
 = (
ef„˘
->cﬁ‹[1].g * ((
uöt32_t
Îf„˘->
ãm≥øtuª
[2] - 
ãmp
) +Éffect->color[2].g * ((uint32_t)temp -Éffect->temperature[1])) / (effect->temperature[2] -Éffect->temperature[1]);

623 
cﬁ‹
.
b
 = (
ef„˘
->cﬁ‹[1].b * ((
uöt32_t
Îf„˘->
ãm≥øtuª
[2] - 
ãmp
) +Éffect->color[2].b * ((uint32_t)temp -Éffect->temperature[1])) / (effect->temperature[2] -Éffect->temperature[1]);

624 } i‡(
ãmp
 >
ef„˘
->
ãm≥øtuª
[2]) {

625 
cﬁ‹
 = 
ef„˘
->color[2];

628 
cﬁ‹
 = 
	`lightI¡ísôy
(cﬁ‹, 
ÀdSåù
[
°rùIndex
].
brighäess
);

630 
ÀdPosôi⁄
 = 
group
->
°¨tIndex
;ÜedPosôi⁄ < group->
°›Index
; ++ledPosition) {

631 
°rùAºay
[
°rùIndex
][
ÀdPosôi⁄
] = 
cﬁ‹
;

633 
	}
}

638 
Eº‹
 
	$ÀdSëLedTy≥
(
LedSåùIndex
 
°rùIndex
, 
LedTy≥
 
ÀdTy≥
)

640 i‡(
°rùIndex
 !
LED_STRIP_1
 && såùIndex !
LED_STRIP_2
) {

641  
RES_INVALID_PORT_INDEX
;

644 i‡(
ÀdTy≥
 !
LED_TYPE_WS2812B
 &&ÜedTy≥ !
LED_TYPE_HD59731B
) {

645  
RES_INVALID_ARGUMENT
;

648 #ifde‡
JOTUN


649 i‡(
°rùIndex
 =
LED_STRIP_1
 && 
ÀdTy≥
 !
LED_TYPE_WS2812B
) {

651  
RES_INVALID_ARGUMENT
;

655 
ÀdSåù
[
°rùIndex
].
ÀdTy≥
 =ÜedType;

656  
RES_OK
;

657 
	}
}

659 
Eº‹
 
	$ÀdSëLedCou¡
(
LedSåùIndex
 
°rùIndex
, 
uöt8_t
 
cou¡
)

661 i‡(
°rùIndex
 !
LED_STRIP_1
 && såùIndex !
LED_STRIP_2
) {

662  
RES_INVALID_PORT_INDEX
;

665 i‡(
°rùIndex
 =
LED_STRIP_1
 && 
cou¡
 > 
LED_STRIP_1_MAX_LED_COUNT
) {

666  
RES_INVALID_ARGUMENT
;

669 i‡(
°rùIndex
 =
LED_STRIP_2
 && 
cou¡
 > 
LED_STRIP_2_MAX_LED_COUNT
) {

670  
RES_INVALID_ARGUMENT
;

673 
ÀdSåù
[
°rùIndex
].
ÀdsCou¡
 = 
cou¡
;

674  
RES_OK
;

675 
	}
}

677 
Eº‹
 
	$ÀdSëLedBrighäess
(
LedSåùIndex
 
°rùIndex
, 
uöt8_t
 
brighäess
)

679 i‡(
°rùIndex
 !
LED_STRIP_1
 && såùIndex !
LED_STRIP_2
) {

680  
RES_INVALID_PORT_INDEX
;

683 i‡(
brighäess
 > 
LED_BRIGHTNESS_MAX
) {

684  
RES_INVALID_ARGUMENT
;

687 
ÀdSåù
[
°rùIndex
].
brighäess
 = brightness;

688  
RES_OK
;

689 
	}
}

691 
Eº‹
 
	$ÀdSåùSëGroupExã∫ÆTem≥øtuª
(
LedSåùIndex
 
°rùIndex
, 
uöt8_t
 
groupNumbî
, 
uöt16_t
 
ãm≥øtuª
)

693 i‡(
°rùIndex
 !
LED_STRIP_1
 && såùIndex !
LED_STRIP_2
) {

694  
RES_INVALID_PORT_INDEX
;

697 i‡((
groupNumbî
 >
LED_GROUP_MAX_COUNT
) ||

698 (
groupNumbî
 >
ÀdSåù
[
°rùIndex
].
groupCou¡
) ||

699 (
ÀdSåù
[
°rùIndex
].
group
[
groupNumbî
].
ef„˘Ty≥
 !
EFFECT_TEMPERATURE
))

701  
RES_INVALID_ARGUMENT
;

704 
ÀdGroupSèã
[
°rùIndex
][
groupNumbî
].
ãm≥øtuªCﬁ‹
.
ãm≥øtuª
 =Åemperature;

705 
ÀdGroupSèã
[
°rùIndex
][
groupNumbî
].
ãm≥øtuªCﬁ‹
.
timeSèmp
 = 
	`timîGëTime
();

706  
RES_OK
;

707 
	}
}

709 
Eº‹
 
	$ÀdSåùCÀ¨
(
LedSåùIndex
 
°rùIndex
)

711 i‡(
°rùIndex
 !
LED_STRIP_1
 && såùIndex !
LED_STRIP_2
) {

712  
RES_INVALID_PORT_INDEX
;

715 
ÀdSåù
[
°rùIndex
].
groupCou¡
 = 0;

716 
∂ayEf„˘
 = 
Ál£
;

717  
RES_OK
;

718 
	}
}

720 
Eº‹
 
	$ÀdSëSåùMode
(
LedSåùIndex
 
°rùIndex
, 
LedSåùMode
 
mode
)

722 i‡(
°rùIndex
 !
LED_STRIP_1
 && såùIndex !
LED_STRIP_2
) {

723  
RES_INVALID_PORT_INDEX
;

726 i‡(
mode
 !
LED_STRIP_MODE_OFF
 && modê!
LED_STRIP_MODE_PRESET
 && modê!
LED_STRIP_MODE_DIRECT
) {

727  
RES_INVALID_ARGUMENT
;

730 
ÀdSåù
[
°rùIndex
].
mode
 = mode;

731  
RES_OK
;

732 
	}
}

734 
	$ÀdSëEf„˘InôülSèã
(
LedGroupSèã
 *
°©e
, 
Ef„˘
 
ef„˘Ty≥
)

736 
ef„˘Ty≥
) {

737 
EFFECT_RAINBOW_WAVE
:

738 
°©e
->
øöbowWaveSëtögs
.
whìlPosôi⁄
 = 0;

741 
EFFECT_COLOR_SHIFT
:

742 
°©e
->
cﬁ‹Shi·Sëtögs
.
posôi⁄
 = 0;

745 
EFFECT_COLOR_PULSE
:

746 
°©e
->
cﬁ‹Pul£
.
time
 = 0;

749 
EFFECT_COLOR_WAVE
:

750 
°©e
->
cﬁ‹Wave
.
cﬁ‹Index
 = 0;

751 
°©e
->
cﬁ‹Wave
.
time
 = 0;

754 
EFFECT_STATIC
:

757 
EFFECT_TEMPERATURE
:

758 
°©e
->
ãm≥øtuªCﬁ‹
.
ãm≥øtuª
 = 
BARBUDA_DEFAULT_TEMPERATURE
;

759 
°©e
->
ãm≥øtuªCﬁ‹
.
¥eviousTem≥øtuª
 = 
BARBUDA_DEFAULT_TEMPERATURE
;

760 
°©e
->
ãm≥øtuªCﬁ‹
.
timeSèmp
 = 
	`timîGëTime
();

763 
EFFECT_VISOR
:

764 
°©e
->
vis‹
.
time1
 = 0;

765 
°©e
->
vis‹
.
time2
 = 0;

768 
EFFECT_MARQUEE
:

769 
°©e
->
m¨quì
.
time
 = 0;

772 
EFFECT_STROBING
:

773 
°©e
->
°robög
.
time
 = 0;

774 
°©e
->
°robög
.
cﬁ‹Index
 = 0;

777 
EFFECT_SEQUENTIAL
:

778 
°©e
->
£quítül
.
time
 = 0;

779 
	`mem£t
(&
°©e
->
£quítül
.
backgroundCﬁ‹
, 0, (state->sequential.backgroundColor));

782 
EFFECT_RAINBOW
:

783 
°©e
->
øöbowSëtögs
.
whìlPosôi⁄
 = 0;

786 
	}
}

788 
Eº‹
 
	$ÀdSåùAµídGroup
(
LedSåùIndex
 
°rùIndex
, 
LedGroup
 *
ÀdGroup
)

790 
LedSåù
 *
°rù
;

792 i‡(
°rùIndex
 !
LED_STRIP_1
 && såùIndex !
LED_STRIP_2
) {

793  
RES_INVALID_PORT_INDEX
;

796 
°rù
 = &
ÀdSåù
[
°rùIndex
];

798 i‡((
°rùIndex
 >
LED_STRIP_COUNT
Ë|| (
°rù
->
groupCou¡
 >
LED_GROUP_MAX_COUNT
)) {

799  
RES_INVALID_ARGUMENT
;

802 
°rù
->
group
[°rù->
groupCou¡
] = *
ÀdGroup
;

804 
	`ÀdSëEf„˘InôülSèã
(&
ÀdGroupSèã
[
°rùIndex
][
°rù
->
groupCou¡
], 
ÀdGroup
->
ef„˘Ty≥
);

805 
°rù
->
groupCou¡
++;

806  
RES_OK
;

807 
	}
}

809 
	$ÀdAŒSåùAºayCÀ¨
()

811 
	`mem£t
(
°rùAºay
[
LED_STRIP_1
], 0, (stripArray[LED_STRIP_1]));

812 
	`mem£t
(
°rùAºay
[
LED_STRIP_2
], 0, (stripArray[LED_STRIP_2]));

813 
	}
}

815 
	$ÀdSëAŒEf„˘sInôülSèã
()

817 
LedSåùIndex
 
°rùIndex
;

818 
uöt8_t
 
groupIndex
;

820 
°rùIndex
 = 0; såùIndex < 
LED_STRIP_COUNT
; ++stripIndex) {

821 
groupIndex
 = 0; groupIndex < 
ÀdSåù
[
°rùIndex
].
groupCou¡
; ++groupIndex) {

822 
	`ÀdSëEf„˘InôülSèã
(&
ÀdGroupSèã
[
°rùIndex
][
groupIndex
], 
ÀdSåù
[°rùIndex].
group
[groupIndex].
ef„˘Ty≥
);

825 
	}
}

827 
	$ÀdInô
()

829 
LedGroup
 
ÀdGroup
;

830 
uöt8_t
 
i
;

831 
uöt8_t
 
off£t
 = 0;

833 
	`ÀdC⁄åﬁÀrInô
(
NULL
);

835 
i
 = 0; i < 
LED_STRIP_COUNT
; ++i) {

836 
ÀdSåù
[
i
].
mode
 = 
LED_STRIP_MODE_PRESET
;

837 
ÀdSåù
[
i
].
brighäess
 = 100;

838 
ÀdSåù
[
i
].
ÀdsCou¡
 = (ò=
LED_STRIP_1
Ë? 
LED_STRIP_1_MAX_LED_COUNT
 : 
LED_STRIP_2_MAX_LED_COUNT
;

839 
ÀdSåù
[
i
].
ÀdTy≥
 = 
LED_TYPE_WS2812B
;

840 
ÀdSåù
[
i
].
groupCou¡
 = 0;

843 
	`mem£t
(&
ÀdGroup
, 0, (ledGroup));

917 
ÀdGroup
.
ef„˘Ty≥
 = 
EFFECT_COLOR_WAVE
;

918 
ÀdGroup
.
ef„˘
.
cﬁ‹Wave
.
•ìd
 = 
EFFECT_SPEED_FAST
;

919 
ÀdGroup
.
ef„˘
.
cﬁ‹Wave
.
øndomCﬁ‹
 = 1;

920 
ÀdGroup
.
ef„˘
.
cﬁ‹Wave
.
f‹w¨dDúe˘i⁄
 = 1;

922 
Cﬁ‹
 
cﬁ‹
[2] = {{0, 0xff, 0}, {0, 0, 0xff}};

923 
ÀdGroup
.
ef„˘
.
cﬁ‹Wave
.
cﬁ‹
[0] = color[0];

924 
ÀdGroup
.
ef„˘
.
cﬁ‹Wave
.
cﬁ‹
[1] = color[1];

927 #ifde‡
JOTUN


928 
ÀdGroup
.
°¨tIndex
 = 0;

929 
ÀdGroup
.
°›Index
 = 4;

930 
	`ÀdSåùAµídGroup
(
LED_STRIP_1
, &
ÀdGroup
);

932 
ÀdGroup
.
°¨tIndex
 = 4;

933 
ÀdGroup
.
°›Index
 = 22;

934 
	`ÀdSåùAµídGroup
(
LED_STRIP_1
, &
ÀdGroup
);

936 
off£t
 = 22;

939 
i
 = 0; i < 6; ++i) {

940 
ÀdGroup
.
°¨tIndex
 = 
i
 * 12 + 
off£t
;

941 
ÀdGroup
.
°›Index
 = (
i
 + 1Ë* 12 + 
off£t
;

942 
	`ÀdSåùAµídGroup
(
LED_STRIP_1
, &
ÀdGroup
);

945 
i
 = 0; i < 6; ++i) {

946 
ÀdGroup
.
°¨tIndex
 = 
i
 * 12;

947 
ÀdGroup
.
°›Index
 = (
i
 + 1) * 12;

948 
	`ÀdSåùAµídGroup
(
LED_STRIP_2
, &
ÀdGroup
);

951 
∂ayEf„˘
 = 
åue
;

952 
	}
}

954 
uöt8_t
 *
	$ÀdGëC⁄figuøti⁄Loˇti⁄
(
uöt16_t
 *
Àngth
)

956 *
Àngth
 = (
ÀdSåù
);

957  (
uöt8_t
 *)
ÀdSåù
;

958 
	}
}

960 
	$ÀdPro˚ssGroupEf„˘
(
LedSåùIndex
 
°rùIndex
, 
uöt8_t
 
groupIndex
)

962 
LedGroup
 *
group
 = &
ÀdSåù
[
°rùIndex
].group[
groupIndex
];

964 
group
->
ef„˘Ty≥
) {

965 
EFFECT_RAINBOW_WAVE
: 
	`øöbowWave
(
°rùIndex
, 
groupIndex
); ;

966 
EFFECT_COLOR_SHIFT
: 
	`cﬁ‹Shi·
(
°rùIndex
, 
groupIndex
); ;

967 
EFFECT_COLOR_PULSE
: 
	`cﬁ‹Pul£
(
°rùIndex
, 
groupIndex
); ;

968 
EFFECT_COLOR_WAVE
: 
	`cﬁ‹Wave
(
°rùIndex
, 
groupIndex
); ;

969 
EFFECT_STATIC
: 
	`cﬁ‹Sètic
(
°rùIndex
, 
groupIndex
); ;

970 
EFFECT_TEMPERATURE
: 
	`ãm≥øtuªEf„˘
(
°rùIndex
, 
groupIndex
); ;

971 
EFFECT_VISOR
: 
	`vis‹
(
°rùIndex
, 
groupIndex
); ;

972 
EFFECT_MARQUEE
: 
	`m¨quì
(
°rùIndex
, 
groupIndex
); ;

973 
EFFECT_STROBING
: 
	`°robög
(
°rùIndex
, 
groupIndex
); ;

974 
EFFECT_SEQUENTIAL
: 
	`£quítül
(
°rùIndex
, 
groupIndex
); ;

975 
EFFECT_RAINBOW
: 
	`øöbow
(
°rùIndex
, 
groupIndex
); ;

978 
	}
}

980 
	$ÀdE«bÀPœyEf„˘
()

982 
∂ayEf„˘
 = 
åue
;

983 
	}
}

985 
	$ÀdPœyEf„˘s
()

987 
LedSåùIndex
 
°rùIndex
;

989 
	`ÀdAŒSåùAºayCÀ¨
();

991 i‡(
∂ayEf„˘
 =
åue
) {

992 
°rùIndex
 = 0; såùIndex < 
LED_STRIP_COUNT
; ++stripIndex) {

993 i‡(
ÀdSåù
[
°rùIndex
].
mode
 =
LED_STRIP_MODE_PRESET
) {

994 
uöt8_t
 
groupIndex
;

996 
groupIndex
 = 0; groupIndex < 
ÀdSåù
[
°rùIndex
].
groupCou¡
; ++groupIndex) {

997 
	`ÀdPro˚ssGroupEf„˘
(
°rùIndex
, 
groupIndex
);

999 } i‡(
ÀdSåù
[
°rùIndex
].
mode
 =
LED_STRIP_MODE_DIRECT
) {

1001 } i‡(
ÀdSåù
[
°rùIndex
].
mode
 =
LED_STRIP_MODE_OFF
) {

1007 
	`ÀdC⁄åﬁÀrSëLedD©a
(
LED_STRIP_1
, 
ÀdSåù
[LED_STRIP_1].
ÀdTy≥
, (c⁄° 
uöt32_t
 *Ë&
°rùAºay
[LED_STRIP_1], 
LED_STRIP_1_MAX_LED_COUNT
);

1008 
	`ÀdC⁄åﬁÀrSëLedD©a
(
LED_STRIP_2
, 
ÀdSåù
[LED_STRIP_2].
ÀdTy≥
, (c⁄° 
uöt32_t
 *Ë&
°rùAºay
[LED_STRIP_2], 
LED_STRIP_2_MAX_LED_COUNT
);

1009 
	}
}

1011 
	$ÀdAŒSåùCÀ¨
()

1013 
	`ÀdAŒSåùAºayCÀ¨
();

1014 
	`ÀdC⁄åﬁÀrSëLedD©a
(
LED_STRIP_1
, 
ÀdSåù
[LED_STRIP_1].
ÀdTy≥
, (c⁄° 
uöt32_t
 *Ë&
°rùAºay
[LED_STRIP_1], 
LED_STRIP_1_MAX_LED_COUNT
);

1015 
	`ÀdC⁄åﬁÀrSëLedD©a
(
LED_STRIP_2
, 
ÀdSåù
[LED_STRIP_2].
ÀdTy≥
, (c⁄° 
uöt32_t
 *Ë&
°rùAºay
[LED_STRIP_2], 
LED_STRIP_2_MAX_LED_COUNT
);

1016 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\LightingSystem\led.h

1 #i‚de‡
LED_H


2 
	#LED_H


	)

4 
	~<°döt.h
>

5 
	~<°dboﬁ.h
>

6 
	~"LedC⁄åﬁÀr.h
"

8 
	#LED_GROUP_MAX_COUNT
 8

	)

11 
uöt8_t
 
	mb
;

12 
uöt8_t
 
	mr
;

13 
uöt8_t
 
	mg
;

14 
uöt8_t
 
	m∑ddög
;

15 } 
	tCﬁ‹
;

18 
	mEFFECT_RAINBOW_WAVE
 = 0,

19 
	mEFFECT_COLOR_SHIFT
 = 1,

20 
	mEFFECT_COLOR_PULSE
 = 2,

21 
	mEFFECT_COLOR_WAVE
 = 3,

22 
	mEFFECT_STATIC
 = 4,

23 
	mEFFECT_TEMPERATURE
 = 5,

24 
	mEFFECT_VISOR
 = 6,

25 
	mEFFECT_MARQUEE
 = 7,

26 
	mEFFECT_STROBING
 = 8,

27 
	mEFFECT_SEQUENTIAL
 = 9,

28 
	mEFFECT_RAINBOW
 = 10

29 } 
	tEf„˘
;

32 
	mEFFECT_SPEED_FAST
 = 0,

33 
	mEFFECT_SPEED_MIDDLE
 = 1,

34 
	mEFFECT_SPEED_SLOW
 = 2

35 } 
	tEf„˘S≥ed
;

38 
	mLED_STRIP_1
,

39 
	mLED_STRIP_2
,

40 
	mLED_STRIP_COUNT


41 } 
	tLedSåùIndex
;

44 
	mLED_STRIP_MODE_OFF
 = 0,

45 
	mLED_STRIP_MODE_PRESET
 = 1,

46 
	mLED_STRIP_MODE_DIRECT
 = 2

47 } 
	tLedSåùMode
;

50 
Ef„˘S≥ed
 
	m•ìd
;

51 
boﬁ
 
	mf‹w¨dDúe˘i⁄
;

52 } 
	tRaöbowWave
;

55 
Ef„˘S≥ed
 
	m•ìd
;

56 
boﬁ
 
	møndomCﬁ‹
;

57 
Cﬁ‹
 
	mcﬁ‹
[2];

58 } 
	tCﬁ‹Shi·
;

61 
Ef„˘S≥ed
 
	m•ìd
;

62 } 
	tRaöbow
;

65 
Cﬁ‹
 
	mcﬁ‹
;

66 } 
	tSèticEf„˘
;

69 
boﬁ
 
	møndomCﬁ‹
;

70 
Ef„˘S≥ed
 
	m•ìd
;

71 
Cﬁ‹
 
	mcﬁ‹
[2];

72 } 
	tSåobög
;

75 
Ef„˘S≥ed
 
	m•ìd
;

76 
Cﬁ‹
 
	mcﬁ‹
;

77 } 
	tM¨quì
;

80 
Ef„˘S≥ed
 
	m•ìd
;

81 
boﬁ
 
	møndomCﬁ‹
;

82 
boﬁ
 
	mf‹w¨dDúe˘i⁄
;

83 
Cﬁ‹
 
	mcﬁ‹
;

84 } 
	tSequítül
;

87 
boﬁ
 
	møndomCﬁ‹
;

88 
Ef„˘S≥ed
 
	m•ìd
;

89 
Cﬁ‹
 
	mcﬁ‹
[2];

90 } 
	tVis‹
;

93 
Ef„˘S≥ed
 
	m•ìd
;

94 
boﬁ
 
	møndomCﬁ‹
;

95 
Cﬁ‹
 
	mcﬁ‹
[2];

96 } 
	tCﬁ‹Pul£
;

99 
Ef„˘S≥ed
 
	m•ìd
;

100 
boﬁ
 
	møndomCﬁ‹
;

101 
boﬁ
 
	mf‹w¨dDúe˘i⁄
;

102 
Cﬁ‹
 
	mcﬁ‹
[2];

103 } 
	tCﬁ‹Wave
;

106 
Cﬁ‹
 
	mcﬁ‹
[3];

107 
uöt16_t
 
	mãm≥øtuª
[3];

108 
uöt8_t
 
	mãm≥øtuªIndex
;

109 } 
	tTem≥øtuªEf„˘
;

112 
Ef„˘
 
	mef„˘Ty≥
;

113 
uöt8_t
 
	m°¨tIndex
;

114 
uöt8_t
 
	m°›Index
;

116 
RaöbowWave
 
	møöbowWave
;

117 
Cﬁ‹Shi·
 
	mcﬁ‹Shi·
;

118 
Cﬁ‹Pul£
 
	mcﬁ‹Pul£
;

119 
Cﬁ‹Wave
 
	mcﬁ‹Wave
;

120 
SèticEf„˘
 
	m°©icEf„˘
;

121 
Tem≥øtuªEf„˘
 
	mãm≥øtuªEf„˘
;

122 
Sequítül
 
	m£quítül
;

123 
M¨quì
 
	mm¨quì
;

124 
Raöbow
 
	møöbow
;

125 
Såobög
 
	m°robög
;

126 
Vis‹
 
	mvis‹
;

127 } 
	mef„˘
;

128 } 
	tLedGroup
;

131 
	mRES_OK
 = 0x00,

132 
	mRES_INVALID_COMMAND
 = 0x01,

133 
	mRES_INVALID_PORT_INDEX
 = 0x10,

134 
	mRES_SENSOR_ABSENT
 = 0x11,

135 
	mRES_INVALID_ARGUMENT
 = 0x12,

136 } 
	tEº‹
;

139 
ÀdInô
();

140 
ÀdE«bÀPœyEf„˘
();

141 
ÀdPœyEf„˘s
();

142 
ÀdSëAŒEf„˘sInôülSèã
();

143 
uöt8_t
 *
ÀdGëC⁄figuøti⁄Loˇti⁄
(
uöt16_t
 *
Àngth
);

144 
ÀdAŒSåùCÀ¨
();

147 
ÀdGíî©eR™domCﬁ‹
(
Cﬁ‹
 *
cﬁ‹
);

149 
Eº‹
 
ÀdSëLedTy≥
(
LedSåùIndex
 
°rùIndex
, 
LedTy≥
 
ÀdTy≥
);

150 
Eº‹
 
ÀdSëLedCou¡
(
LedSåùIndex
 
°rùIndex
, 
uöt8_t
 
cou¡
);

151 
Eº‹
 
ÀdSëLedBrighäess
(
LedSåùIndex
 
°rùIndex
, 
uöt8_t
 
brighäess
);

152 
Eº‹
 
ÀdSåùSëGroupExã∫ÆTem≥øtuª
(
LedSåùIndex
 
°rùIndex
, 
uöt8_t
 
groupNumbî
, 
uöt16_t
 
ãm≥øtuª
);

153 
Eº‹
 
ÀdSåùCÀ¨
(
LedSåùIndex
 
°rùIndex
);

154 
Eº‹
 
ÀdSëSåùMode
(
LedSåùIndex
 
°rùIndex
, 
LedSåùMode
 
mode
);

155 
Eº‹
 
ÀdSåùAµídGroup
(
LedSåùIndex
 
°rùIndex
, 
LedGroup
 *
ÀdGroup
);

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\PidController\PidController.c

1 
	~"PidC⁄åﬁÀr.h
"

3 
	$pidC⁄åﬁÀrInô
(
PidC⁄åﬁÀr
 *
pidC⁄åﬁÀr
, 
öt32_t
 
kP
, i¡32_à
kI
, i¡32_à
kD
, i¡32_à
posôiveS©uøti⁄VÆue
, i¡32_à
√g©iveS©uøti⁄VÆue
, i¡32_à
dampögVÆue
)

5 i‡(!
pidC⁄åﬁÀr
)

8 
	`pidC⁄åﬁÀrRe£t
(
pidC⁄åﬁÀr
);

10 
pidC⁄åﬁÀr
->
kP
 = kP;

11 
pidC⁄åﬁÀr
->
kI
 = kI;

12 
pidC⁄åﬁÀr
->
kD
 = kD;

13 
pidC⁄åﬁÀr
->
posôiveS©uøti⁄VÆue
 =ÖositiveSaturationValue;

14 
pidC⁄åﬁÀr
->
√g©iveS©uøti⁄VÆue
 =ÇegativeSaturationValue;

15 
pidC⁄åﬁÀr
->
posôiveI¡egølCœmpögVÆue
 = 
posôiveS©uøti⁄VÆue
 * 
kI
 / 
kP
;

16 
pidC⁄åﬁÀr
->
√g©iveI¡egølCœmpögVÆue
 = 
√g©iveS©uøti⁄VÆue
 * 
kI
 / 
kP
;

17 
pidC⁄åﬁÀr
->
dampögVÆue
 = dampingValue;

18 
	}
}

20 
öt32_t
 
	$pidC⁄åﬁÀrCœmpI¡egølVÆue
(
PidC⁄åﬁÀr
 *
pidC⁄åﬁÀr
, 
öt32_t
 
vÆue
)

22 i‡((
vÆue
 * 
pidC⁄åﬁÀr
->
kP
 /ÖidC⁄åﬁÀr->
kI
Ë>ÖidC⁄åﬁÀr->
posôiveS©uøti⁄VÆue
)

23 
vÆue
 = 
pidC⁄åﬁÀr
->
posôiveI¡egølCœmpögVÆue
;

25 i‡((
vÆue
 * 
pidC⁄åﬁÀr
->
kP
 /ÖidC⁄åﬁÀr->
kI
Ë<ÖidC⁄åﬁÀr->
√g©iveS©uøti⁄VÆue
)

26 
vÆue
 = 
pidC⁄åﬁÀr
->
√g©iveI¡egølCœmpögVÆue
;

28  
vÆue
;

29 
	}
}

31 
öt32_t
 
	$pidC⁄åﬁÀrUpd©e
(
PidC⁄åﬁÀr
 *
pidC⁄åﬁÀr
, 
öt32_t
 
îr‹
)

33 
öt32_t
 
cI
;

34 
öt32_t
 
cD
;

36 i‡(!
pidC⁄åﬁÀr
)

39 
îr‹
 /
pidC⁄åﬁÀr
->
dampögVÆue
;

41 
pidC⁄åﬁÀr
->
îr‹I¡egølVÆue
 =ÖidC⁄åﬁÀr->îr‹I¡egølVÆuê+ ((
îr‹
 +ÖidC⁄åﬁÀr->
œ°Eº‹
) >> 1);

42 
pidC⁄åﬁÀr
->
îr‹I¡egølVÆue
 = 
	`pidC⁄åﬁÀrCœmpI¡egølVÆue
(pidController,ÖidController->errorIntegralValue);

43 
cI
 = 
pidC⁄åﬁÀr
->
kI
 ?ÖidC⁄åﬁÀr->
îr‹I¡egølVÆue
 /ÖidController->kI : 0;

44 
cD
 = (
îr‹
 - 
pidC⁄åﬁÀr
->
œ°Eº‹
Ë*ÖidC⁄åﬁÀr->
kD
;

46 
pidC⁄åﬁÀr
->
œ°Eº‹
 = 
îr‹
;

48  (
îr‹
 + 
cI
 + 
cD
Ë* 
pidC⁄åﬁÀr
->
kP
;

49 
	}
}

51 
	$pidC⁄åﬁÀrRe£t
(
PidC⁄åﬁÀr
 *
pidC⁄åﬁÀr
)

53 i‡(!
pidC⁄åﬁÀr
)

56 
pidC⁄åﬁÀr
->
îr‹I¡egølVÆue
 = 0;

57 
pidC⁄åﬁÀr
->
œ°Eº‹
 = 0;

58 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\PidController\PidController.h

1 #i‚de‡
__PID_CONTROLLER_H__


2 
	#__PID_CONTROLLER_H__


	)

4 
	~<°döt.h
>

6 
	sPidC⁄åﬁÀr
 {

7 
öt32_t
 
	mkP
;

8 
öt32_t
 
	mkI
;

9 
öt32_t
 
	mkD
;

10 
öt32_t
 
	mîr‹I¡egølVÆue
;

11 
öt32_t
 
	mœ°Eº‹
;

12 
öt32_t
 
	mposôiveS©uøti⁄VÆue
;

13 
öt32_t
 
	m√g©iveS©uøti⁄VÆue
;

14 
öt32_t
 
	mposôiveI¡egølCœmpögVÆue
;

15 
öt32_t
 
	m√g©iveI¡egølCœmpögVÆue
;

16 
öt32_t
 
	mdampögVÆue
;

17 } 
	tPidC⁄åﬁÀr
;

19 
pidC⁄åﬁÀrInô
(
PidC⁄åﬁÀr
 *
pidC⁄åﬁÀr
, 
öt32_t
 
kP
, i¡32_à
kI
, i¡32_à
kD
, i¡32_à
posôiveS©uøti⁄VÆue
, i¡32_à
√g©iveS©uøti⁄VÆue
, i¡32_à
dampögVÆue
);

20 
öt32_t
 
pidC⁄åﬁÀrUpd©e
(
PidC⁄åﬁÀr
 *
pidC⁄åﬁÀr
, i¡32_à
îr‹
);

21 
pidC⁄åﬁÀrRe£t
(
PidC⁄åﬁÀr
 *
pidC⁄åﬁÀr
);

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\SpiFlash\SpiFlash.c

1 
	~"SpiFœsh.h
"

3 
	~<°rög.h
>

5 
	~"hÆSpi.h
"

6 
	~"hÆGpio.h
"

8 vﬁ©ûê
boﬁ
 
	g•iFœshBusy
 = 
Ál£
;

11 
	$•iFœshTøns„rCÆlback
(
boﬁ
 
isOk
)

13 
•iFœshBusy
 = 
Ál£
;

14 
	}
}

16 
	$•iFœshInô
()

18 
	`hÆGpioPöInô
(
hÆGpio
.
•iFœshCs
);

19 
	`hÆGpioPöInô
(
hÆGpio
.
•iFœshMiso
);

20 
	`hÆGpioPöInô
(
hÆGpio
.
•iFœshMosi
);

21 
	`hÆGpioPöInô
(
hÆGpio
.
•iFœshSck
);

22 
	}
}

24 
boﬁ
 
	$•iFœshIsDëe˘ed
()

26 
uöt8_t
 
txD©a
[] = { 0x5A,

30 
uöt8_t
 
rxD©a
[(
txD©a
)];

31 
•iFœshBusy
 = 
åue
;

32 
	`hÆSpiTøns„r
(
txD©a
, 
rxD©a
, —xD©a), 
•iFœshTøns„rCÆlback
);

34 
•iFœshBusy
 =
åue
) {

38 
sfdpId
[] = "SFDP";

40 i‡(!
	`memcmp
(&
rxD©a
[5], 
sfdpId
, 
	`°æí
(sfdpId))) {

41  
åue
;

44  
Ál£
;

45 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\SpiFlash\SpiFlash.h

1 #i‚de‡
__SPI_FLASH_H__


2 
	#__SPI_FLASH_H__


	)

4 
	~<°döt.h
>

5 
	~<°dboﬁ.h
>

7 
•iFœshInô
();

8 
boﬁ
 
•iFœshIsDëe˘ed
();

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbDevice\UsbHidDevice.c

35 
	~"UsbHidDevi˚.h
"

36 
	~"usb_devi˚_c⁄fig.h
"

37 
	~"usb.h
"

38 
	~"usb_devi˚.h
"

40 
	~"usb_devi˚_˛ass.h
"

41 
	~"usb_devi˚_hid.h
"

43 
	~"usb_devi˚_ch9.h
"

44 
	~"usb_devi˚_des¸ùt‹.h
"

46 
	~"f¶_devi˚_ªgi°îs.h
"

47 
	~"˛ock_c⁄fig.h
"

49 
	~<°dio.h
>

50 
	~<°dlib.h
>

51 #i‡(
deföed
(
FSL_FEATURE_SOC_SYSMPU_COUNT
) && (FSL_FEATURE_SOC_SYSMPU_COUNT > 0U))

52 
	~"f¶_sysmpu.h
"

55 
	~<°dboﬁ.h
>

56 
	~"f¶_powî.h
"

57 
	~"f¶_comm⁄.h
"

58 
	~"f¶_ioc⁄.h
"

63 #i‡
deföed
(
USB_DEVICE_CONFIG_EHCI
) && (USB_DEVICE_CONFIG_EHCI > 0U)

64 
	#CONTROLLER_ID
 
kUSB_C⁄åﬁÀrEhci0


	)

66 #i‡
deföed
(
USB_DEVICE_CONFIG_KHCI
) && (USB_DEVICE_CONFIG_KHCI > 0U)

67 
	#CONTROLLER_ID
 
kUSB_C⁄åﬁÀrKhci0


	)

69 #i‡
deföed
(
USB_DEVICE_CONFIG_LPCIP3511FS
) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U)

70 
	#CONTROLLER_ID
 
kUSB_C⁄åﬁÀrLpcIp3511Fs0


	)

72 #i‡
deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U)

73 
	#CONTROLLER_ID
 
kUSB_C⁄åﬁÀrLpcIp3511Hs0


	)

76 
	#USB_DEVICE_INTERRUPT_PRIORITY
 (3U)

	)

78 
	s_usb_hid_gíîic_°ru˘


80 
usb_devi˚_h™dÀ
 
	mdevi˚H™dÀ
;

81 
˛ass_h™dÀ_t
 
	mhidH™dÀ
;

82 
uöt8_t
 *
	möRï‹tbuf„r
;

83 
uöt8_t
 *
	moutRï‹tbuf„r
;

84 
uöt8_t
 
	midÀR©e
;

85 
uöt8_t
 
	m•ìd
;

86 
uöt8_t
 
	m©èch
;

87 
uöt8_t
 
	mcuºítC⁄figuøti⁄
;

88 
uöt8_t
 
	mcuºítI¡îÁ˚A…î«ãSëtög
[
USB_HID_GENERIC_INTERFACE_COUNT
];

89 } 
	tusb_hid_gíîic_°ru˘_t
;

94 
BOARD_InôH¨dw¨e
();

95 
USB_Devi˚ClockInô
();

96 
USB_Devi˚I§E«bÀ
();

97 #i‡
USB_DEVICE_CONFIG_USE_TASK


98 
USB_Devi˚TaskFn
(*
devi˚H™dÀ
);

101 
usb_°©us_t
 
USB_Devi˚HidGíîicCÆlback
(
˛ass_h™dÀ_t
 
h™dÀ
, 
uöt32_t
 
evít
, *
∑øm
);

102 
usb_°©us_t
 
USB_Devi˚CÆlback
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
uöt32_t
 
evít
, *
∑øm
);

103 
USB_Devi˚Aµliˇti⁄Inô
();

109 
	$USB_DMA_NONINIT_DATA_ALIGN
(
USB_DATA_ALIGN_SIZE
Ë
uöt32_t
 
s_öRï‹tBuf„r
[
USB_HID_GENERIC_IN_BUFFER_LENGTH
 >> 2];

110 
	$USB_DMA_NONINIT_DATA_ALIGN
(
USB_DATA_ALIGN_SIZE
Ë
uöt32_t
 
s_outRï‹tBuf„r
[
USB_HID_GENERIC_OUT_BUFFER_LENGTH
 >> 2];

112 
usb_hid_gíîic_°ru˘_t
 
g_UsbDevi˚HidGíîic
;

114 (*
ªp‹tSítCÆlback
)();

115 (*
ªp‹tRe˚ivedCÆlback
)(c⁄° 
uöt8_t
 
ªp‹tD©a
[], 
size_t
 
ªp‹tSize
);

117 
usb_devi˚_˛ass_°ru˘_t
 
g_UsbDevi˚HidGíîicC⁄fig
;

120 
usb_devi˚_˛ass_c⁄fig_°ru˘_t
 
g_UsbDevi˚HidC⁄fig
[1] = {{

121 
USB_Devi˚HidGíîicCÆlback
,

122 (
˛ass_h™dÀ_t
)
NULL
,

123 &
g_UsbDevi˚HidGíîicC⁄fig
,

126 }
	}
};

129 
usb_devi˚_˛ass_c⁄fig_li°_°ru˘_t
 
	gg_UsbDevi˚HidC⁄figLi°
 = {

130 
g_UsbDevi˚HidC⁄fig
,

131 
USB_Devi˚CÆlback
,

138 
	$usbDevi˚InôVbusPö
()

141 
	`IOCON_PöMuxSë
(
IOCON
, 0U, 22U, 
IOCON_FUNC7
 | 
IOCON_DIGITAL_EN
 | 
IOCON_INPFILT_OFF
);

142 
	}
}

144 #i‡(
deföed
(
USB_DEVICE_CONFIG_LPCIP3511FS
) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U))

145 
	$USB0_IRQH™dÀr
()

147 
	`USB_Devi˚LpcIp3511I§Fun˘i⁄
(
g_UsbDevi˚HidGíîic
.
devi˚H™dÀ
);

148 
	}
}

150 #i‡(
deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))

151 
	$USB1_IRQH™dÀr
()

153 
	`USB_Devi˚LpcIp3511I§Fun˘i⁄
(
g_UsbDevi˚HidGíîic
.
devi˚H™dÀ
);

154 
	}
}

156 
	$USB_Devi˚ClockInô
()

158 #i‡
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511FS
) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U)

160 
	`CLOCK_E«bÀUsbfs0Devi˚Clock
(
kCLOCK_UsbSrcFro
, 
	`CLOCK_GëFroHfFªq
());

161 #i‡
	`deföed
(
FSL_FEATURE_USB_USB_RAM
) && (FSL_FEATURE_USB_USB_RAM)

162 
i
 = 0; i < 
FSL_FEATURE_USB_USB_RAM
; i++)

164 ((
uöt8_t
 *)
FSL_FEATURE_USB_USB_RAM_BASE_ADDRESS
)[
i
] = 0x00U;

169 #i‡
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U)

171 
	`CLOCK_E«bÀUsbhs0Devi˚Clock
(
kCLOCK_UsbSrcUsbPŒ
, 0U);

172 #i‡
	`deföed
(
FSL_FEATURE_USBHSD_USB_RAM
) && (FSL_FEATURE_USBHSD_USB_RAM)

173 
i
 = 0; i < 
FSL_FEATURE_USBHSD_USB_RAM
; i++)

175 ((
uöt8_t
 *)
FSL_FEATURE_USBHSD_USB_RAM_BASE_ADDRESS
)[
i
] = 0x00U;

179 
	}
}

180 
	$USB_Devi˚I§E«bÀ
()

182 
uöt8_t
 
úqNumbî
;

183 #i‡
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511FS
) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U)

184 
uöt8_t
 
usbDevi˚IP3511Irq
[] = 
USB_IRQS
;

185 
úqNumbî
 = 
usbDevi˚IP3511Irq
[
CONTROLLER_ID
 - 
kUSB_C⁄åﬁÀrLpcIp3511Fs0
];

187 #i‡
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U)

188 
uöt8_t
 
usbDevi˚IP3511Irq
[] = 
USBHSD_IRQS
;

189 
úqNumbî
 = 
usbDevi˚IP3511Irq
[
CONTROLLER_ID
 - 
kUSB_C⁄åﬁÀrLpcIp3511Hs0
];

192 #i‡
	`deföed
(
__GIC_PRIO_BITS
)

193 
	`GIC_SëPri‹ôy
((
IRQn_Ty≥
)
úqNumbî
, 
USB_DEVICE_INTERRUPT_PRIORITY
);

195 
	`NVIC_SëPri‹ôy
((
IRQn_Ty≥
)
úqNumbî
, 
USB_DEVICE_INTERRUPT_PRIORITY
);

197 
	`E«bÀIRQ
((
IRQn_Ty≥
)
úqNumbî
);

198 
	}
}

199 #i‡
USB_DEVICE_CONFIG_USE_TASK


200 
	$USB_Devi˚TaskFn
(*
devi˚H™dÀ
)

202 #i‡
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511FS
) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U)

203 
	`USB_Devi˚LpcIp3511TaskFun˘i⁄
(
devi˚H™dÀ
);

205 #i‡
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U)

206 
	`USB_Devi˚LpcIp3511TaskFun˘i⁄
(
devi˚H™dÀ
);

208 
	}
}

212 
usb_°©us_t
 
	$USB_Devi˚HidGíîicCÆlback
(
˛ass_h™dÀ_t
 
h™dÀ
, 
uöt32_t
 
evít
, *
∑øm
)

214 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

215 
usb_devi˚_hid_ªp‹t_°ru˘_t
 *
ªp‹t
 = (usb_devi˚_hid_ªp‹t_°ru˘_à*Ë
∑øm
;

217 
evít
) {

218 
kUSB_Devi˚HidEvítSídRe•⁄£
:

219 i‡(
ªp‹tSítCÆlback
 !
NULL
) {

220 
	`ªp‹tSítCÆlback
();

224 
kUSB_Devi˚HidEvítRecvRe•⁄£
:

225 i‡(
ªp‹tRe˚ivedCÆlback
 =
NULL
) {

226 
	`USB_Devi˚HidRecv
(
g_UsbDevi˚HidGíîic
.
hidH™dÀ
, 
USB_HID_GENERIC_ENDPOINT_OUT
, g_UsbDevi˚HidGíîic.
outRï‹tbuf„r
, 
USB_HID_GENERIC_OUT_BUFFER_LENGTH
);

228 
	`ªp‹tRe˚ivedCÆlback
(
g_UsbDevi˚HidGíîic
.
outRï‹tbuf„r
, 
USB_HID_GENERIC_OUT_BUFFER_LENGTH
);

229 
	`USB_Devi˚HidRecv
(
g_UsbDevi˚HidGíîic
.
hidH™dÀ
, 
USB_HID_GENERIC_ENDPOINT_OUT
, g_UsbDevi˚HidGíîic.
outRï‹tbuf„r
, 
USB_HID_GENERIC_OUT_BUFFER_LENGTH
);

231 
îr‹
 = 
kSètus_USB_Suc˚ss
;

234 
kUSB_Devi˚HidEvítGëRï‹t
:

235 
ªp‹t
->
ªp‹tLígth
 = 
USB_HID_GENERIC_IN_BUFFER_LENGTH
;

236 
ªp‹t
->
ªp‹tBuf„r
 = 
g_UsbDevi˚HidGíîic
.
öRï‹tbuf„r
;

237 
îr‹
 = 
kSètus_USB_Suc˚ss
;

240 
kUSB_Devi˚HidEvítSëRï‹t
:

241 i‡(
ªp‹tRe˚ivedCÆlback
) {

242 
	`ªp‹tRe˚ivedCÆlback
(
ªp‹t
->
ªp‹tBuf„r
,Ñï‹t->
ªp‹tLígth
);

244 
îr‹
 = 
kSètus_USB_Suc˚ss
;

247 
kUSB_Devi˚HidEvítReque°Rï‹tBuf„r
:

248 
îr‹
 = 
kSètus_USB_InvÆidReque°
;

251 
kUSB_Devi˚HidEvítGëIdÀ
:

252 
kUSB_Devi˚HidEvítGëPrŸocﬁ
:

253 
kUSB_Devi˚HidEvítSëIdÀ
:

254 
kUSB_Devi˚HidEvítSëPrŸocﬁ
:

261  
îr‹
;

262 
	}
}

265 
usb_°©us_t
 
	$USB_Devi˚CÆlback
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
uöt32_t
 
evít
, *
∑øm
)

267 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Suc˚ss
;

268 
uöt8_t
 *
ãmp8
 = (uöt8_à*)
∑øm
;

269 
uöt16_t
 *
ãmp16
 = (uöt16_à*)
∑øm
;

271 
evít
)

273 
kUSB_Devi˚EvítBusRe£t
:

276 
g_UsbDevi˚HidGíîic
.
©èch
 = 0U;

277 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_EHCI
) && (USB_DEVICE_CONFIG_EHCI > 0U)) || \

278 (
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))

280 i‡(
kSètus_USB_Suc˚ss
 =
	`USB_Devi˚CœssGëS≥ed
(
CONTROLLER_ID
, &
g_UsbDevi˚HidGíîic
.
•ìd
))

282 
	`USB_Devi˚SëS≥ed
(
h™dÀ
, 
g_UsbDevi˚HidGíîic
.
•ìd
);

287 
kUSB_Devi˚EvítSëC⁄figuøti⁄
:

288 i‡(
∑øm
)

291 
g_UsbDevi˚HidGíîic
.
©èch
 = 1U;

292 
g_UsbDevi˚HidGíîic
.
cuºítC⁄figuøti⁄
 = *
ãmp8
;

293 i‡(
USB_HID_GENERIC_CONFIGURE_INDEX
 =(*
ãmp8
))

295 
îr‹
 = 
	`USB_Devi˚HidRecv
(

296 
g_UsbDevi˚HidGíîic
.
hidH™dÀ
, 
USB_HID_GENERIC_ENDPOINT_OUT
,

297 
g_UsbDevi˚HidGíîic
.
outRï‹tbuf„r
,

298 
USB_HID_GENERIC_OUT_BUFFER_LENGTH
);

302 
kUSB_Devi˚EvítSëI¡îÁ˚
:

303 i‡(
g_UsbDevi˚HidGíîic
.
©èch
)

306 
uöt8_t
 
öãrÁ˚
 = (uöt8_t)((*
ãmp16
 & 0xFF00U) >> 0x08U);

307 
uöt8_t
 
Æã∫©eSëtög
 = (uöt8_t)(*
ãmp16
 & 0x00FFU);

308 i‡(
öãrÁ˚
 < 
USB_HID_GENERIC_INTERFACE_COUNT
)

310 
g_UsbDevi˚HidGíîic
.
cuºítI¡îÁ˚A…î«ãSëtög
[
öãrÁ˚
] = 
Æã∫©eSëtög
;

311 i‡(
Æã∫©eSëtög
 == 0U)

313 
îr‹
 = 
	`USB_Devi˚HidRecv
(

314 
g_UsbDevi˚HidGíîic
.
hidH™dÀ
, 
USB_HID_GENERIC_ENDPOINT_OUT
,

315 
g_UsbDevi˚HidGíîic
.
outRï‹tbuf„r
,

316 
USB_HID_GENERIC_OUT_BUFFER_LENGTH
);

321 
kUSB_Devi˚EvítGëC⁄figuøti⁄
:

322 i‡(
∑øm
)

325 *
ãmp8
 = 
g_UsbDevi˚HidGíîic
.
cuºítC⁄figuøti⁄
;

326 
îr‹
 = 
kSètus_USB_Suc˚ss
;

329 
kUSB_Devi˚EvítGëI¡îÁ˚
:

330 i‡(
∑øm
)

333 
uöt8_t
 
öãrÁ˚
 = (uöt8_t)((*
ãmp16
 & 0xFF00U) >> 0x08U);

334 i‡(
öãrÁ˚
 < 
USB_HID_GENERIC_INTERFACE_COUNT
)

336 *
ãmp16
 = (*ãmp16 & 0xFF00UË| 
g_UsbDevi˚HidGíîic
.
cuºítI¡îÁ˚A…î«ãSëtög
[
öãrÁ˚
];

337 
îr‹
 = 
kSètus_USB_Suc˚ss
;

341 
îr‹
 = 
kSètus_USB_InvÆidReque°
;

345 
kUSB_Devi˚EvítGëDevi˚Des¸ùt‹
:

346 i‡(
∑øm
)

349 
îr‹
 = 
	`USB_Devi˚GëDevi˚Des¸ùt‹
(
h™dÀ
, (
usb_devi˚_gë_devi˚_des¸ùt‹_°ru˘_t
 *)
∑øm
);

352 
kUSB_Devi˚EvítGëC⁄figuøti⁄Des¸ùt‹
:

353 i‡(
∑øm
)

356 
îr‹
 = 
	`USB_Devi˚GëC⁄figuøti⁄Des¸ùt‹
(
h™dÀ
,

357 (
usb_devi˚_gë_c⁄figuøti⁄_des¸ùt‹_°ru˘_t
 *)
∑øm
);

360 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_CV_TEST
) && (USB_DEVICE_CONFIG_CV_TEST > 0U))

361 
kUSB_Devi˚EvítGëDevi˚QuÆifõrDes¸ùt‹
:

362 i‡(
∑øm
)

365 
îr‹
 = 
	`USB_Devi˚GëDevi˚QuÆifõrDes¸ùt‹
(

366 
h™dÀ
, (
usb_devi˚_gë_devi˚_quÆifõr_des¸ùt‹_°ru˘_t
 *)
∑øm
);

370 
kUSB_Devi˚EvítGëSåögDes¸ùt‹
:

371 i‡(
∑øm
)

374 
îr‹
 = 
	`USB_Devi˚GëSåögDes¸ùt‹
(
h™dÀ
, (
usb_devi˚_gë_°rög_des¸ùt‹_°ru˘_t
 *)
∑øm
);

377 
kUSB_Devi˚EvítGëHidDes¸ùt‹
:

378 i‡(
∑øm
)

381 
îr‹
 = 
	`USB_Devi˚GëHidDes¸ùt‹
(
h™dÀ
, (
usb_devi˚_gë_hid_des¸ùt‹_°ru˘_t
 *)
∑øm
);

384 
kUSB_Devi˚EvítGëHidRï‹tDes¸ùt‹
:

385 i‡(
∑øm
)

388 
îr‹
 =

389 
	`USB_Devi˚GëHidRï‹tDes¸ùt‹
(
h™dÀ
, (
usb_devi˚_gë_hid_ªp‹t_des¸ùt‹_°ru˘_t
 *)
∑øm
);

392 
kUSB_Devi˚EvítGëHidPhysiˇlDes¸ùt‹
:

393 i‡(
∑øm
)

396 
îr‹
 = 
	`USB_Devi˚GëHidPhysiˇlDes¸ùt‹
(
h™dÀ
,

397 (
usb_devi˚_gë_hid_physiˇl_des¸ùt‹_°ru˘_t
 *)
∑øm
);

404  
îr‹
;

405 
	}
}

407 
	$USB_Devi˚Aµliˇti⁄Inô
()

409 
	`USB_Devi˚ClockInô
();

410 #i‡(
	`deföed
(
FSL_FEATURE_SOC_SYSMPU_COUNT
) && (FSL_FEATURE_SOC_SYSMPU_COUNT > 0U))

411 
	`SYSMPU_E«bÀ
(
SYSMPU
, 0);

415 
g_UsbDevi˚HidGíîic
.
•ìd
 = 
USB_SPEED_HIGH
;

416 
g_UsbDevi˚HidGíîic
.
©èch
 = 0U;

417 
g_UsbDevi˚HidGíîic
.
hidH™dÀ
 = (
˛ass_h™dÀ_t
)
NULL
;

418 
g_UsbDevi˚HidGíîic
.
devi˚H™dÀ
 = 
NULL
;

419 
g_UsbDevi˚HidGíîic
.
öRï‹tbuf„r
 = (
uöt8_t
 *Ë
s_öRï‹tBuf„r
;

420 
g_UsbDevi˚HidGíîic
.
outRï‹tbuf„r
 = (
uöt8_t
 *Ë
s_outRï‹tBuf„r
;

423 i‡(
kSètus_USB_Suc˚ss
 !=

424 
	`USB_Devi˚CœssInô
(
CONTROLLER_ID
, &
g_UsbDevi˚HidC⁄figLi°
, &
g_UsbDevi˚HidGíîic
.
devi˚H™dÀ
))

433 
g_UsbDevi˚HidGíîic
.
hidH™dÀ
 = 
g_UsbDevi˚HidC⁄figLi°
.
c⁄fig
->
˛assH™dÀ
;

436 
	`USB_Devi˚I§E«bÀ
();

439 
	`USB_Devi˚Run
(
g_UsbDevi˚HidGíîic
.
devi˚H™dÀ
);

440 
	}
}

442 
usbHidDevi˚SëCÆlbacks
((*
ªp‹tSítCb
)(), (*
ªp‹tRe˚ivedCb
)(c⁄° 
uöt8_t
 
ªp‹tD©a
[], 
size_t
 
ªp‹tSize
))

444 
ªp‹tSítCÆlback
 = 
ªp‹tSítCb
;

445 
ªp‹tRe˚ivedCÆlback
 = 
ªp‹tRe˚ivedCb
;

446 
	}
}

448 
boﬁ
 
	$usbHidDevi˚SídRï‹t
(c⁄° 
uöt8_t
 
ªp‹tD©a
[
USB_HID_GENERIC_IN_BUFFER_LENGTH
])

450 i‡(
g_UsbDevi˚HidGíîic
.
©èch
) {

451 
	`mem˝y
(
g_UsbDevi˚HidGíîic
.
öRï‹tbuf„r
, 
ªp‹tD©a
, 
USB_HID_GENERIC_IN_BUFFER_LENGTH
);

452 
usb_°©us_t
 
ªsu…
 = 
	`USB_Devi˚HidSíd
(
g_UsbDevi˚HidGíîic
.
hidH™dÀ
, 
USB_HID_GENERIC_ENDPOINT_IN
, g_UsbDevi˚HidGíîic.
öRï‹tbuf„r
, 
USB_HID_GENERIC_IN_BUFFER_LENGTH
);

453  
ªsu…
 =
kSètus_USB_Suc˚ss
;

455  
Ál£
;

456 
	}
}

458 
	$usbHidDevi˚TaskFun˘i⁄
(*
pvP¨amëîs
)

460 
	`usbDevi˚InôVbusPö
();

461 #i‡(
deföed
 
USB_DEVICE_CONFIG_LPCIP3511HS
) && (USB_DEVICE_CONFIG_LPCIP3511HS)

462 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_USB1_PHY
);

464 
	`CLOCK_E«bÀClock
(
kCLOCK_Usbh1
);

465 *((
uöt32_t
 *)(
USBHSH_BASE
 + 0x50)Ë|
USBHSH_PORTMODE_DEV_ENABLE_MASK
;

467 
	`CLOCK_DißbÀClock
(
kCLOCK_Usbh1
);

469 #i‡(
deföed
 
USB_DEVICE_CONFIG_LPCIP3511FS
) && (USB_DEVICE_CONFIG_LPCIP3511FS)

470 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_USB0_PHY
);

471 
	`CLOCK_SëClkDiv
(
kCLOCK_DivUsb0Clk
, 1, 
Ál£
);

472 
	`CLOCK_AâachClk
(
kFRO_HF_to_USB0_CLK
);

474 
	`CLOCK_E«bÀClock
(
kCLOCK_Usbh¶0
);

475 *((
uöt32_t
 *)(
USBFSH_BASE
 + 0x5C)Ë|
USBFSH_PORTMODE_DEV_ENABLE_MASK
;

477 
	`CLOCK_DißbÀClock
(
kCLOCK_Usbh¶0
);

480 
	`USB_Devi˚Aµliˇti⁄Inô
();

484 #i‡
USB_DEVICE_CONFIG_USE_TASK


485 
	`USB_Devi˚TaskFn
(
g_UsbDevi˚HidGíîic
.
devi˚H™dÀ
);

488 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbDevice\UsbHidDevice.h

1 #i‚de‡
__USB_HID_DEVICE_H__


2 
	#__USB_HID_DEVICE_H__


	)

4 
	~"°döt.h
"

5 
	~"°dboﬁ.h
"

6 
	~"°ddef.h
"

8 
usbHidDevi˚SëCÆlbacks
((*
ªp‹tSítCb
)(), (*
ªp‹tRe˚ivedCb
)(c⁄° 
uöt8_t
 
ªp‹tD©a
[], 
size_t
 
ªp‹tSize
));

9 
	`usbHidDevi˚TaskFun˘i⁄
(*
pvP¨amëîs
);

10 
boﬁ
 
	`usbHidDevi˚SídRï‹t
(c⁄° 
uöt8_t
 
ªp‹tD©a
[]);

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbDevice\usb_device_ch9.c

35 
	~"usb_devi˚_c⁄fig.h
"

36 
	~"usb.h
"

38 
	~"usb_devi˚.h
"

39 
	~"usb_devi˚_dci.h
"

40 
	~"usb_devi˚_˛ass.h
"

41 
	~"usb_devi˚_ch9.h
"

42 #i‡((
deföed
(
USB_DEVICE_CONFIG_NUM
)) && (USB_DEVICE_CONFIG_NUM > 0U))

59 
	$usb_°©us_t
 (*
	tusb_°™d¨d_ªque°_ˇŒback_t
)(
	tusb_devi˚_comm⁄_˛ass_°ru˘_t
 *
	t˛assH™dÀ
,

60 
	tusb_£tup_°ru˘_t
 *
	t£tup
,

61 
	tuöt8_t
 **
	tbuf„r
,

62 
	tuöt32_t
 *
	tÀngth
);

68 
usb_°©us_t
 
	`USB_Devi˚Ch9GëSètus
(
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
,

69 
usb_£tup_°ru˘_t
 *
£tup
,

70 
uöt8_t
 **
buf„r
,

71 
uöt32_t
 *
Àngth
);

72 
usb_°©us_t
 
	`USB_Devi˚Ch9SëCÀ¨Fótuª
(
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
,

73 
usb_£tup_°ru˘_t
 *
£tup
,

74 
uöt8_t
 **
buf„r
,

75 
uöt32_t
 *
Àngth
);

77 
usb_°©us_t
 
	`USB_Devi˚Ch9SëAddªss
(
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
,

78 
usb_£tup_°ru˘_t
 *
£tup
,

79 
uöt8_t
 **
buf„r
,

80 
uöt32_t
 *
Àngth
);

81 
usb_°©us_t
 
	`USB_Devi˚Ch9GëDes¸ùt‹
(
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
,

82 
usb_£tup_°ru˘_t
 *
£tup
,

83 
uöt8_t
 **
buf„r
,

84 
uöt32_t
 *
Àngth
);

85 
usb_°©us_t
 
	`USB_Devi˚Ch9GëC⁄figuøti⁄
(
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
,

86 
usb_£tup_°ru˘_t
 *
£tup
,

87 
uöt8_t
 **
buf„r
,

88 
uöt32_t
 *
Àngth
);

89 
usb_°©us_t
 
	`USB_Devi˚Ch9SëC⁄figuøti⁄
(
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
,

90 
usb_£tup_°ru˘_t
 *
£tup
,

91 
uöt8_t
 **
buf„r
,

92 
uöt32_t
 *
Àngth
);

93 
usb_°©us_t
 
	`USB_Devi˚Ch9GëI¡îÁ˚
(
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
,

94 
usb_£tup_°ru˘_t
 *
£tup
,

95 
uöt8_t
 **
buf„r
,

96 
uöt32_t
 *
Àngth
);

97 
usb_°©us_t
 
	`USB_Devi˚Ch9SëI¡îÁ˚
(
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
,

98 
usb_£tup_°ru˘_t
 *
£tup
,

99 
uöt8_t
 **
buf„r
,

100 
uöt32_t
 *
Àngth
);

101 
usb_°©us_t
 
	`USB_Devi˚Ch9SynchFøme
(
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
,

102 
usb_£tup_°ru˘_t
 *
£tup
,

103 
uöt8_t
 **
buf„r
,

104 
uöt32_t
 *
Àngth
);

111 c⁄° 
usb_°™d¨d_ªque°_ˇŒback_t
 
s_UsbDevi˚Sènd¨dReque°
[] = {

112 
USB_Devi˚Ch9GëSètus
,

113 
USB_Devi˚Ch9SëCÀ¨Fótuª
,

114 (
usb_°™d¨d_ªque°_ˇŒback_t
)
NULL
,

115 
USB_Devi˚Ch9SëCÀ¨Fótuª
,

116 (
usb_°™d¨d_ªque°_ˇŒback_t
)
NULL
,

117 
USB_Devi˚Ch9SëAddªss
,

118 
USB_Devi˚Ch9GëDes¸ùt‹
,

119 (
usb_°™d¨d_ªque°_ˇŒback_t
)
NULL
,

120 
USB_Devi˚Ch9GëC⁄figuøti⁄
,

121 
USB_Devi˚Ch9SëC⁄figuøti⁄
,

122 
USB_Devi˚Ch9GëI¡îÁ˚
,

123 
USB_Devi˚Ch9SëI¡îÁ˚
,

124 
USB_Devi˚Ch9SynchFøme
,

125 
	}
};

145 
usb_°©us_t
 
	$USB_Devi˚Ch9GëSètus
(
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
,

146 
usb_£tup_°ru˘_t
 *
£tup
,

147 
uöt8_t
 **
buf„r
,

148 
uöt32_t
 *
Àngth
)

150 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_InvÆidReque°
;

151 
uöt8_t
 
°©e
;

153 
	`USB_Devi˚GëSètus
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚SètusDevi˚Sèã
, &
°©e
);

155 i‡((
kUSB_Devi˚SèãAddªss
 !
°©e
Ë&& (
kUSB_Devi˚SèãC⁄figuªd
 != state))

157  
îr‹
;

160 i‡((
£tup
->
bmReque°Ty≥
 & 
USB_REQUEST_TYPE_RECIPIENT_MASK
Ë=
USB_REQUEST_TYPE_RECIPIENT_DEVICE
)

162 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_OTG
) && (USB_DEVICE_CONFIG_OTG))

163 i‡(
£tup
->
wIndex
 =
USB_REQUEST_STANDARD_GET_STATUS_OTG_STATUS_SELECTOR
)

165 
îr‹
 =

166 
	`USB_Devi˚GëSètus
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚SètusOtg
, &˛assH™dÀ->
°™d¨dTønsˇti⁄Buf„r
);

167 
˛assH™dÀ
->
°™d¨dTønsˇti⁄Buf„r
 = 
	`USB_SHORT_TO_LITTLE_ENDIAN
(classHandle->standardTranscationBuffer);

169 *
Àngth
 = 1;

174 
îr‹
 = 
	`USB_Devi˚GëSètus
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚SètusDevi˚
,

175 &
˛assH™dÀ
->
°™d¨dTønsˇti⁄Buf„r
);

176 
˛assH™dÀ
->
°™d¨dTønsˇti⁄Buf„r
 =

177 
˛assH™dÀ
->
°™d¨dTønsˇti⁄Buf„r
 & 
USB_GET_STATUS_DEVICE_MASK
;

178 
˛assH™dÀ
->
°™d¨dTønsˇti⁄Buf„r
 = 
	`USB_SHORT_TO_LITTLE_ENDIAN
(classHandle->standardTranscationBuffer);

180 *
Àngth
 = 
USB_DEVICE_STATUS_SIZE
;

181 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_OTG
) && (USB_DEVICE_CONFIG_OTG))

185 i‡((
£tup
->
bmReque°Ty≥
 & 
USB_REQUEST_TYPE_RECIPIENT_MASK
Ë=
USB_REQUEST_TYPE_RECIPIENT_INTERFACE
)

188 
îr‹
 = 
kSètus_USB_Suc˚ss
;

189 
˛assH™dÀ
->
°™d¨dTønsˇti⁄Buf„r
 = 0U;

191 *
Àngth
 = 
USB_INTERFACE_STATUS_SIZE
;

193 i‡((
£tup
->
bmReque°Ty≥
 & 
USB_REQUEST_TYPE_RECIPIENT_MASK
Ë=
USB_REQUEST_TYPE_RECIPIENT_ENDPOINT
)

196 
usb_devi˚_ídpoöt_°©us_°ru˘_t
 
ídpoötSètus
;

197 
ídpoötSètus
.
ídpoötAddªss
 = (
uöt8_t
)
£tup
->
wIndex
;

198 
ídpoötSètus
.ídpoötSètu†
kUSB_Devi˚EndpoötSèãIdÀ
;

199 
îr‹
 = 
	`USB_Devi˚GëSètus
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚SètusEndpoöt
, &
ídpoötSètus
);

200 
˛assH™dÀ
->
°™d¨dTønsˇti⁄Buf„r
 = 
ídpoötSètus
.ídpoötSètu†& 
USB_GET_STATUS_ENDPOINT_MASK
;

201 
˛assH™dÀ
->
°™d¨dTønsˇti⁄Buf„r
 = 
	`USB_SHORT_TO_LITTLE_ENDIAN
(classHandle->standardTranscationBuffer);

203 *
Àngth
 = 
USB_ENDPOINT_STATUS_SIZE
;

208 *
buf„r
 = (
uöt8_t
 *)&
˛assH™dÀ
->
°™d¨dTønsˇti⁄Buf„r
;

210  
îr‹
;

211 
	}
}

227 
usb_°©us_t
 
	$USB_Devi˚Ch9SëCÀ¨Fótuª
(
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
,

228 
usb_£tup_°ru˘_t
 *
£tup
,

229 
uöt8_t
 **
buf„r
,

230 
uöt32_t
 *
Àngth
)

232 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_InvÆidReque°
;

233 
uöt8_t
 
°©e
;

234 
uöt8_t
 
isSë
 = 0U;

236 
	`USB_Devi˚GëSètus
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚SètusDevi˚Sèã
, &
°©e
);

238 i‡((
kUSB_Devi˚SèãAddªss
 !
°©e
Ë&& (
kUSB_Devi˚SèãC⁄figuªd
 != state))

240  
îr‹
;

244 i‡(
USB_REQUEST_STANDARD_SET_FEATURE
 =
£tup
->
bReque°
)

246 
isSë
 = 1U;

249 i‡((
£tup
->
bmReque°Ty≥
 & 
USB_REQUEST_TYPE_RECIPIENT_MASK
Ë=
USB_REQUEST_TYPE_RECIPIENT_DEVICE
)

252 i‡(
USB_REQUEST_STANDARD_FEATURE_SELECTOR_DEVICE_REMOTE_WAKEUP
 =
£tup
->
wVÆue
)

254 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_REMOTE_WAKEUP
)) && (USB_DEVICE_CONFIG_REMOTE_WAKEUP > 0U))

255 
	`USB_Devi˚SëSètus
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚SètusRemŸeWakeup
, &
isSë
);

258 
îr‹
 = 
	`USB_Devi˚CœssCÆlback
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚EvítSëRemŸeWakeup
, &
isSë
);

260 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_EHCI
) && (USB_DEVICE_CONFIG_EHCI > 0U)) || \

261 (
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))) && \

262 (
	`deföed
(
USB_DEVICE_CONFIG_USB20_TEST_MODE
) && (USB_DEVICE_CONFIG_USB20_TEST_MODE > 0U))

263 i‡(
USB_REQUEST_STANDARD_FEATURE_SELECTOR_DEVICE_TEST_MODE
 =
£tup
->
wVÆue
)

265 
°©e
 = 
kUSB_Devi˚SèãTe°Mode
;

266 
îr‹
 = 
	`USB_Devi˚SëSètus
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚SètusDevi˚Sèã
, &
°©e
);

269 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_OTG
) && (USB_DEVICE_CONFIG_OTG))

270 i‡(
USB_REQUEST_STANDARD_FEATURE_SELECTOR_B_HNP_ENABLE
 =
£tup
->
wVÆue
)

272 
îr‹
 = 
	`USB_Devi˚CœssCÆlback
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚EvítSëBHNPE«bÀ
, &
isSë
);

279 i‡((
£tup
->
bmReque°Ty≥
 & 
USB_REQUEST_TYPE_RECIPIENT_MASK
Ë=
USB_REQUEST_TYPE_RECIPIENT_ENDPOINT
)

282 i‡(
USB_REQUEST_STANDARD_FEATURE_SELECTOR_ENDPOINT_HALT
 =
£tup
->
wVÆue
)

284 i‡(
USB_CONTROL_ENDPOINT
 =(
£tup
->
wIndex
 & 
USB_ENDPOINT_NUMBER_MASK
))

287 i‡(
isSë
)

289 
	`USB_Devi˚SèŒEndpoöt
(
˛assH™dÀ
->
h™dÀ
, (
uöt8_t
)
£tup
->
wIndex
);

293 
	`USB_Devi˚Un°ÆlEndpoöt
(
˛assH™dÀ
->
h™dÀ
, (
uöt8_t
)
£tup
->
wIndex
);

298 i‡(
isSë
)

300 
îr‹
 = 
	`USB_Devi˚CœssEvít
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚CœssEvítSëEndpoötHÆt
, &
£tup
->
wIndex
);

304 
îr‹
 =

305 
	`USB_Devi˚CœssEvít
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚CœssEvítCÀ¨EndpoötHÆt
, &
£tup
->
wIndex
);

316  
îr‹
;

317 
	}
}

332 
usb_°©us_t
 
	$USB_Devi˚Ch9SëAddªss
(
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
,

333 
usb_£tup_°ru˘_t
 *
£tup
,

334 
uöt8_t
 **
buf„r
,

335 
uöt32_t
 *
Àngth
)

337 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_InvÆidReque°
;

338 
uöt8_t
 
°©e
;

340 
	`USB_Devi˚GëSètus
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚SètusDevi˚Sèã
, &
°©e
);

342 i‡((
kUSB_Devi˚SèãAddªssög
 !
°©e
Ë&& (
kUSB_Devi˚SèãAddªss
 != state) &&

343 (
kUSB_Devi˚SèãDeÁu…
 !
°©e
Ë&& (
kUSB_Devi˚SèãC⁄figuªd
 != state))

345  
îr‹
;

348 i‡(
kUSB_Devi˚SèãAddªssög
 !
°©e
)

352 
°©e
 = 
£tup
->
wVÆue
 & 0xFFU;

353 
îr‹
 = 
	`USB_Devi˚SëSètus
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚SètusAddªss
, &
°©e
);

359 
îr‹
 = 
	`USB_Devi˚SëSètus
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚SètusAddªss
, 
NULL
);

361 i‡(
kSètus_USB_Suc˚ss
 =
îr‹
)

363 
°©e
 = 
kUSB_Devi˚SèãAddªss
;

364 
îr‹
 = 
	`USB_Devi˚SëSètus
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚SètusDevi˚Sèã
, &
°©e
);

368  
îr‹
;

369 
	}
}

385 
usb_°©us_t
 
	$USB_Devi˚Ch9GëDes¸ùt‹
(
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
,

386 
usb_£tup_°ru˘_t
 *
£tup
,

387 
uöt8_t
 **
buf„r
,

388 
uöt32_t
 *
Àngth
)

390 
usb_devi˚_gë_des¸ùt‹_comm⁄_uni⁄_t
 
comm⁄Des¸ùt‹
;

391 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_InvÆidReque°
;

392 
uöt8_t
 
°©e
;

393 
uöt8_t
 
des¸ùt‹Ty≥
 = (uöt8_t)((
£tup
->
wVÆue
 & 0xFF00U) >> 8U);

394 
uöt8_t
 
des¸ùt‹Index
 = (uöt8_t)((
£tup
->
wVÆue
 & 0x00FFU));

396 
	`USB_Devi˚GëSètus
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚SètusDevi˚Sèã
, &
°©e
);

398 i‡((
kUSB_Devi˚SèãAddªss
 !
°©e
Ë&& (
kUSB_Devi˚SèãC⁄figuªd
 != state) &&

399 (
kUSB_Devi˚SèãDeÁu…
 !
°©e
))

401  
îr‹
;

403 
comm⁄Des¸ùt‹
.comm⁄Des¸ùt‹.
Àngth
 = 
£tup
->
wLígth
;

404 i‡(
USB_DESCRIPTOR_TYPE_DEVICE
 =
des¸ùt‹Ty≥
)

407 
îr‹
 = 
	`USB_Devi˚CœssCÆlback
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚EvítGëDevi˚Des¸ùt‹
,

408 &
comm⁄Des¸ùt‹
.
devi˚Des¸ùt‹
);

410 i‡(
USB_DESCRIPTOR_TYPE_CONFIGURE
 =
des¸ùt‹Ty≥
)

413 
comm⁄Des¸ùt‹
.
c⁄figuøti⁄Des¸ùt‹
.
c⁄figuøti⁄
 = 
des¸ùt‹Index
;

414 
îr‹
 = 
	`USB_Devi˚CœssCÆlback
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚EvítGëC⁄figuøti⁄Des¸ùt‹
,

415 &
comm⁄Des¸ùt‹
.
c⁄figuøti⁄Des¸ùt‹
);

417 i‡(
USB_DESCRIPTOR_TYPE_STRING
 =
des¸ùt‹Ty≥
)

420 
comm⁄Des¸ùt‹
.
°rögDes¸ùt‹
.
°rögIndex
 = 
des¸ùt‹Index
;

421 
comm⁄Des¸ùt‹
.
°rögDes¸ùt‹
.
œnguageId
 = 
£tup
->
wIndex
;

422 
îr‹
 = 
	`USB_Devi˚CœssCÆlback
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚EvítGëSåögDes¸ùt‹
,

423 &
comm⁄Des¸ùt‹
.
°rögDes¸ùt‹
);

425 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_HID
) && (USB_DEVICE_CONFIG_HID > 0U))

426 i‡(
USB_DESCRIPTOR_TYPE_HID
 =
des¸ùt‹Ty≥
)

429 
comm⁄Des¸ùt‹
.
hidDes¸ùt‹
.
öãrÁ˚Numbî
 = 
£tup
->
wIndex
;

430 
îr‹
 = 
	`USB_Devi˚CœssCÆlback
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚EvítGëHidDes¸ùt‹
,

431 &
comm⁄Des¸ùt‹
.
hidDes¸ùt‹
);

433 i‡(
USB_DESCRIPTOR_TYPE_HID_REPORT
 =
des¸ùt‹Ty≥
)

436 
comm⁄Des¸ùt‹
.
hidRï‹tDes¸ùt‹
.
öãrÁ˚Numbî
 = 
£tup
->
wIndex
;

437 
îr‹
 = 
	`USB_Devi˚CœssCÆlback
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚EvítGëHidRï‹tDes¸ùt‹
,

438 &
comm⁄Des¸ùt‹
.
hidRï‹tDes¸ùt‹
);

440 i‡(
USB_DESCRIPTOR_TYPE_HID_PHYSICAL
 =
des¸ùt‹Ty≥
)

443 
comm⁄Des¸ùt‹
.
hidPhysiˇlDes¸ùt‹
.
ödex
 = 
des¸ùt‹Index
;

444 
comm⁄Des¸ùt‹
.
hidPhysiˇlDes¸ùt‹
.
öãrÁ˚Numbî
 = 
£tup
->
wIndex
;

445 
îr‹
 = 
	`USB_Devi˚CœssCÆlback
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚EvítGëHidPhysiˇlDes¸ùt‹
,

446 &
comm⁄Des¸ùt‹
.
hidPhysiˇlDes¸ùt‹
);

449 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_CV_TEST
) && (USB_DEVICE_CONFIG_CV_TEST > 0U))

450 i‡(
USB_DESCRIPTOR_TYPE_DEVICE_QUALITIER
 =
des¸ùt‹Ty≥
)

453 
îr‹
 = 
	`USB_Devi˚CœssCÆlback
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚EvítGëDevi˚QuÆifõrDes¸ùt‹
,

454 &
comm⁄Des¸ùt‹
.
devi˚Des¸ùt‹
);

457 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_LPM_L1
) && (USB_DEVICE_CONFIG_LPM_L1 > 0U))

458 i‡(
USB_DESCRIPTOR_TYPE_BOS
 =
des¸ùt‹Ty≥
)

461 
comm⁄Des¸ùt‹
.
c⁄figuøti⁄Des¸ùt‹
.
c⁄figuøti⁄
 = 
des¸ùt‹Index
;

462 
îr‹
 = 
	`USB_Devi˚CœssCÆlback
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚EvítGëBOSDes¸ùt‹
,

463 &
comm⁄Des¸ùt‹
.
c⁄figuøti⁄Des¸ùt‹
);

469 *
buf„r
 = 
comm⁄Des¸ùt‹
.commonDescriptor.buffer;

470 *
Àngth
 = 
comm⁄Des¸ùt‹
.commonDescriptor.length;

471  
îr‹
;

472 
	}
}

488 
usb_°©us_t
 
	$USB_Devi˚Ch9GëC⁄figuøti⁄
(
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
,

489 
usb_£tup_°ru˘_t
 *
£tup
,

490 
uöt8_t
 **
buf„r
,

491 
uöt32_t
 *
Àngth
)

493 
uöt8_t
 
°©e
;

495 
	`USB_Devi˚GëSètus
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚SètusDevi˚Sèã
, &
°©e
);

497 i‡((
kUSB_Devi˚SèãAddªss
 !
°©e
Ë&& ((
kUSB_Devi˚SèãC⁄figuªd
 != state)))

499  
kSètus_USB_InvÆidReque°
;

502 *
Àngth
 = 
USB_CONFIGURE_SIZE
;

503 *
buf„r
 = (
uöt8_t
 *)&
˛assH™dÀ
->
°™d¨dTønsˇti⁄Buf„r
;

504  
	`USB_Devi˚CœssCÆlback
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚EvítGëC⁄figuøti⁄
,

505 &
˛assH™dÀ
->
°™d¨dTønsˇti⁄Buf„r
);

506 
	}
}

522 
usb_°©us_t
 
	$USB_Devi˚Ch9SëC⁄figuøti⁄
(
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
,

523 
usb_£tup_°ru˘_t
 *
£tup
,

524 
uöt8_t
 **
buf„r
,

525 
uöt32_t
 *
Àngth
)

527 
uöt8_t
 
°©e
;

529 
	`USB_Devi˚GëSètus
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚SètusDevi˚Sèã
, &
°©e
);

531 i‡((
kUSB_Devi˚SèãAddªss
 !
°©e
Ë&& (
kUSB_Devi˚SèãC⁄figuªd
 != state))

533  
kSètus_USB_InvÆidReque°
;

537 
°©e
 = 
kUSB_Devi˚SèãC⁄figuªd
;

538 
	`USB_Devi˚SëSètus
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚SètusDevi˚Sèã
, &
°©e
);

539 i‡(!
£tup
->
wVÆue
)

542 
°©e
 = 
kUSB_Devi˚SèãAddªss
;

543 
	`USB_Devi˚SëSètus
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚SètusDevi˚Sèã
, &
°©e
);

547 
	`USB_Devi˚CœssEvít
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚CœssEvítSëC⁄figuøti⁄
, &
£tup
->
wVÆue
);

549  
	`USB_Devi˚CœssCÆlback
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚EvítSëC⁄figuøti⁄
, &
£tup
->
wVÆue
);

550 
	}
}

566 
usb_°©us_t
 
	$USB_Devi˚Ch9GëI¡îÁ˚
(
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
,

567 
usb_£tup_°ru˘_t
 *
£tup
,

568 
uöt8_t
 **
buf„r
,

569 
uöt32_t
 *
Àngth
)

571 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_InvÆidReque°
;

572 
uöt8_t
 
°©e
;

574 
	`USB_Devi˚GëSètus
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚SètusDevi˚Sèã
, &
°©e
);

576 i‡(
°©e
 !
kUSB_Devi˚SèãC⁄figuªd
)

578  
îr‹
;

580 *
Àngth
 = 
USB_INTERFACE_SIZE
;

581 *
buf„r
 = (
uöt8_t
 *)&
˛assH™dÀ
->
°™d¨dTønsˇti⁄Buf„r
;

582 
˛assH™dÀ
->
°™d¨dTønsˇti⁄Buf„r
 = (
uöt16_t
)(((
uöt32_t
)
£tup
->
wIndex
 & 0xFFU) << 8U);

585 
îr‹
 = 
	`USB_Devi˚CœssCÆlback
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚EvítGëI¡îÁ˚
,

586 &
˛assH™dÀ
->
°™d¨dTønsˇti⁄Buf„r
);

587 
˛assH™dÀ
->
°™d¨dTønsˇti⁄Buf„r
 = 
	`USB_SHORT_TO_LITTLE_ENDIAN
(classHandle->standardTranscationBuffer);

588  
îr‹
;

589 
	}
}

605 
usb_°©us_t
 
	$USB_Devi˚Ch9SëI¡îÁ˚
(
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
,

606 
usb_£tup_°ru˘_t
 *
£tup
,

607 
uöt8_t
 **
buf„r
,

608 
uöt32_t
 *
Àngth
)

610 
uöt8_t
 
°©e
;

612 
	`USB_Devi˚GëSètus
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚SètusDevi˚Sèã
, &
°©e
);

614 i‡(
°©e
 !
kUSB_Devi˚SèãC⁄figuªd
)

616  
kSètus_USB_InvÆidReque°
;

618 
˛assH™dÀ
->
°™d¨dTønsˇti⁄Buf„r
 = ((
£tup
->
wIndex
 & 0xFFUË<< 8UË| (£tup->
wVÆue
 & 0xFFU);

621 
	`USB_Devi˚CœssEvít
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚CœssEvítSëI¡îÁ˚
,

622 &
˛assH™dÀ
->
°™d¨dTønsˇti⁄Buf„r
);

625  
	`USB_Devi˚CœssCÆlback
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚EvítSëI¡îÁ˚
,

626 &
˛assH™dÀ
->
°™d¨dTønsˇti⁄Buf„r
);

627 
	}
}

643 
usb_°©us_t
 
	$USB_Devi˚Ch9SynchFøme
(
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
,

644 
usb_£tup_°ru˘_t
 *
£tup
,

645 
uöt8_t
 **
buf„r
,

646 
uöt32_t
 *
Àngth
)

648 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_InvÆidReque°
;

649 
uöt8_t
 
°©e
;

651 
	`USB_Devi˚GëSètus
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚SètusDevi˚Sèã
, &
°©e
);

653 i‡(
°©e
 !
kUSB_Devi˚SèãC⁄figuªd
)

655  
îr‹
;

658 
˛assH™dÀ
->
°™d¨dTønsˇti⁄Buf„r
 = 
	`USB_SHORT_FROM_LITTLE_ENDIAN
(
£tup
->
wIndex
);

660 
îr‹
 =

661 
	`USB_Devi˚GëSètus
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚SètusSynchFøme
, &˛assH™dÀ->
°™d¨dTønsˇti⁄Buf„r
);

662 *
buf„r
 = (
uöt8_t
 *)&
˛assH™dÀ
->
°™d¨dTønsˇti⁄Buf„r
;

663 *
Àngth
 = (
˛assH™dÀ
->
°™d¨dTønsˇti⁄Buf„r
);

665  
îr‹
;

666 
	}
}

694 
usb_°©us_t
 
	$USB_Devi˚C⁄åﬁCÆlbackFìdback
(
usb_devi˚_h™dÀ
 
h™dÀ
,

695 
usb_£tup_°ru˘_t
 *
£tup
,

696 
usb_°©us_t
 
îr‹
,

697 
usb_devi˚_c⁄åﬁ_ªad_wrôe_£quí˚_t
 
°age
,

698 
uöt8_t
 **
buf„r
,

699 
uöt32_t
 *
Àngth
)

701 
usb_°©us_t
 
îr‹Code
 = 
kSètus_USB_Eº‹
;

702 
uöt8_t
 
dúe˘i⁄
 = 
USB_IN
;

704 i‡(
kSètus_USB_InvÆidReque°
 =
îr‹
)

707 i‡((!((
£tup
->
bmReque°Ty≥
 & 
USB_REQUEST_TYPE_TYPE_MASK
Ë=
USB_REQUEST_TYPE_TYPE_STANDARD
)) &&

708 ((
£tup
->
bmReque°Ty≥
 & 
USB_REQUEST_TYPE_DIR_MASK
Ë=
USB_REQUEST_TYPE_DIR_OUT
Ë&& (£tup->
wLígth
) &&

709 (
kUSB_Devi˚C⁄åﬁPùeSëupSège
 =
°age
))

711 
dúe˘i⁄
 = 
USB_OUT
;

713 
îr‹Code
 = 
	`USB_Devi˚SèŒEndpoöt
(

714 
h™dÀ
,

715 (
USB_CONTROL_ENDPOINT
Ë| (
uöt8_t
)((
uöt32_t
)
dúe˘i⁄
 << 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT
));

719 i‡(*
Àngth
 > 
£tup
->
wLígth
)

721 *
Àngth
 = 
£tup
->
wLígth
;

723 
îr‹Code
 = 
	`USB_Devi˚SídReque°
(
h™dÀ
, (
USB_CONTROL_ENDPOINT
), *
buf„r
, *
Àngth
);

725 i‡((
kSètus_USB_Suc˚ss
 =
îr‹Code
) &&

726 (
USB_REQUEST_TYPE_DIR_IN
 =(
£tup
->
bmReque°Ty≥
 & 
USB_REQUEST_TYPE_DIR_MASK
)))

728 
îr‹Code
 = 
	`USB_Devi˚RecvReque°
(
h™dÀ
, (
USB_CONTROL_ENDPOINT
), (
uöt8_t
 *)
NULL
, 0U);

731  
îr‹Code
;

732 
	}
}

748 
usb_°©us_t
 
	$USB_Devi˚C⁄åﬁCÆlback
(
usb_devi˚_h™dÀ
 
h™dÀ
,

749 
usb_devi˚_ídpoöt_ˇŒback_mesßge_°ru˘_t
 *
mesßge
,

750 *
ˇŒbackP¨am
)

752 
usb_£tup_°ru˘_t
 *
devi˚Sëup
;

753 
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
;

754 
uöt8_t
 *
buf„r
 = (uöt8_à*)
NULL
;

755 
uöt32_t
 
Àngth
 = 0U;

756 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_InvÆidReque°
;

757 
uöt8_t
 
°©e
;

759 i‡((0xFFFFFFFFU =
mesßge
->
Àngth
Ë|| (
NULL
 =
ˇŒbackP¨am
))

761  
îr‹
;

764 
˛assH™dÀ
 = (
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *)
ˇŒbackP¨am
;

765 
devi˚Sëup
 = (
usb_£tup_°ru˘_t
 *)&
˛assH™dÀ
->
£tupBuf„r
[0];

766 
	`USB_Devi˚GëSètus
(
h™dÀ
, 
kUSB_Devi˚SètusDevi˚Sèã
, &
°©e
);

768 i‡(
mesßge
->
isSëup
)

770 i‡((
USB_SETUP_PACKET_SIZE
 !
mesßge
->
Àngth
Ë|| (
NULL
 =mesßge->
buf„r
))

782  
îr‹
;

785 
usb_£tup_°ru˘_t
 *
£tup
 = (usb_£tup_°ru˘_à*)(
mesßge
->
buf„r
);

788 
devi˚Sëup
->
wVÆue
 = 
	`USB_SHORT_FROM_LITTLE_ENDIAN
(
£tup
->wValue);

789 
devi˚Sëup
->
wIndex
 = 
	`USB_SHORT_FROM_LITTLE_ENDIAN
(
£tup
->wIndex);

790 
devi˚Sëup
->
wLígth
 = 
	`USB_SHORT_FROM_LITTLE_ENDIAN
(
£tup
->wLength);

791 
devi˚Sëup
->
bReque°
 = 
£tup
->bRequest;

792 
devi˚Sëup
->
bmReque°Ty≥
 = 
£tup
->bmRequestType;

794 i‡((
devi˚Sëup
->
bmReque°Ty≥
 & 
USB_REQUEST_TYPE_TYPE_MASK
Ë=
USB_REQUEST_TYPE_TYPE_STANDARD
)

797 i‡(
s_UsbDevi˚Sènd¨dReque°
[
devi˚Sëup
->
bReque°
] !(
usb_°™d¨d_ªque°_ˇŒback_t
)
NULL
)

799 
îr‹
 = 
s_UsbDevi˚Sènd¨dReque°
[
devi˚Sëup
->
bReque°
](
˛assH™dÀ
, devi˚Sëup, &
buf„r
, &
Àngth
);

804 i‡((
devi˚Sëup
->
wLígth
) &&

805 ((
devi˚Sëup
->
bmReque°Ty≥
 & 
USB_REQUEST_TYPE_DIR_MASK
Ë=
USB_REQUEST_TYPE_DIR_OUT
))

808 i‡((
devi˚Sëup
->
wLígth
) &&

809 ((
devi˚Sëup
->
bmReque°Ty≥
 & 
USB_REQUEST_TYPE_TYPE_CLASS
) == USB_REQUEST_TYPE_TYPE_CLASS))

812 
usb_devi˚_c⁄åﬁ_ªque°_°ru˘_t
 
c⁄åﬁReque°
;

813 
c⁄åﬁReque°
.
buf„r
 = (
uöt8_t
 *)
NULL
;

814 
c⁄åﬁReque°
.
isSëup
 = 1U;

815 
c⁄åﬁReque°
.
£tup
 = 
devi˚Sëup
;

816 
c⁄åﬁReque°
.
Àngth
 = 
devi˚Sëup
->
wLígth
;

817 
îr‹
 = 
	`USB_Devi˚CœssEvít
(
h™dÀ
, 
kUSB_Devi˚CœssEvítCœssReque°
, &
c⁄åﬁReque°
);

818 
Àngth
 = 
c⁄åﬁReque°
.length;

819 
buf„r
 = 
c⁄åﬁReque°
.buffer;

821 i‡((
devi˚Sëup
->
wLígth
) &&

822 ((
devi˚Sëup
->
bmReque°Ty≥
 & 
USB_REQUEST_TYPE_TYPE_VENDOR
) == USB_REQUEST_TYPE_TYPE_VENDOR))

825 
usb_devi˚_c⁄åﬁ_ªque°_°ru˘_t
 
c⁄åﬁReque°
;

826 
c⁄åﬁReque°
.
buf„r
 = (
uöt8_t
 *)
NULL
;

827 
c⁄åﬁReque°
.
isSëup
 = 1U;

828 
c⁄åﬁReque°
.
£tup
 = 
devi˚Sëup
;

829 
c⁄åﬁReque°
.
Àngth
 = 
devi˚Sëup
->
wLígth
;

830 
îr‹
 = 
	`USB_Devi˚CœssCÆlback
(
h™dÀ
, 
kUSB_Devi˚EvítVíd‹Reque°
, &
c⁄åﬁReque°
);

831 
Àngth
 = 
c⁄åﬁReque°
.length;

832 
buf„r
 = 
c⁄åﬁReque°
.buffer;

837 i‡(
kSètus_USB_Suc˚ss
 =
îr‹
)

840 
îr‹
 = 
	`USB_Devi˚RecvReque°
(
h™dÀ
, 
USB_CONTROL_ENDPOINT
, 
buf„r
, 
devi˚Sëup
->
wLígth
);

841  
îr‹
;

847 i‡(((
devi˚Sëup
->
bmReque°Ty≥
 & 
USB_REQUEST_TYPE_TYPE_CLASS
) == USB_REQUEST_TYPE_TYPE_CLASS))

850 
usb_devi˚_c⁄åﬁ_ªque°_°ru˘_t
 
c⁄åﬁReque°
;

851 
c⁄åﬁReque°
.
buf„r
 = (
uöt8_t
 *)
NULL
;

852 
c⁄åﬁReque°
.
isSëup
 = 1U;

853 
c⁄åﬁReque°
.
£tup
 = 
devi˚Sëup
;

854 
c⁄åﬁReque°
.
Àngth
 = 
devi˚Sëup
->
wLígth
;

855 
îr‹
 = 
	`USB_Devi˚CœssEvít
(
h™dÀ
, 
kUSB_Devi˚CœssEvítCœssReque°
, &
c⁄åﬁReque°
);

856 
Àngth
 = 
c⁄åﬁReque°
.length;

857 
buf„r
 = 
c⁄åﬁReque°
.buffer;

859 i‡(((
devi˚Sëup
->
bmReque°Ty≥
 & 
USB_REQUEST_TYPE_TYPE_VENDOR
) == USB_REQUEST_TYPE_TYPE_VENDOR))

862 
usb_devi˚_c⁄åﬁ_ªque°_°ru˘_t
 
c⁄åﬁReque°
;

863 
c⁄åﬁReque°
.
buf„r
 = (
uöt8_t
 *)
NULL
;

864 
c⁄åﬁReque°
.
isSëup
 = 1U;

865 
c⁄åﬁReque°
.
£tup
 = 
devi˚Sëup
;

866 
c⁄åﬁReque°
.
Àngth
 = 
devi˚Sëup
->
wLígth
;

867 
îr‹
 = 
	`USB_Devi˚CœssCÆlback
(
h™dÀ
, 
kUSB_Devi˚EvítVíd‹Reque°
, &
c⁄åﬁReque°
);

868 
Àngth
 = 
c⁄åﬁReque°
.length;

869 
buf„r
 = 
c⁄åﬁReque°
.buffer;

877 
îr‹
 = 
	`USB_Devi˚C⁄åﬁCÆlbackFìdback
(
h™dÀ
, 
devi˚Sëup
,Éº‹, 
kUSB_Devi˚C⁄åﬁPùeSëupSège
, &
buf„r
,

878 &
Àngth
);

880 i‡(
kUSB_Devi˚SèãAddªssög
 =
°©e
)

883 
îr‹
 = 
s_UsbDevi˚Sènd¨dReque°
[
devi˚Sëup
->
bReque°
](
˛assH™dÀ
, devi˚Sëup, &
buf„r
, &
Àngth
);

885 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_EHCI
) && (USB_DEVICE_CONFIG_EHCI > 0U)) || \

886 (
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))) && \

887 (
	`deföed
(
USB_DEVICE_CONFIG_USB20_TEST_MODE
) && (USB_DEVICE_CONFIG_USB20_TEST_MODE > 0U))

888 i‡(
kUSB_Devi˚SèãTe°Mode
 =
°©e
)

890 
uöt8_t
 
p‹tTe°C⁄åﬁ
 = (uöt8_t)(
devi˚Sëup
->
wIndex
 >> 8);

892 
îr‹
 = 
	`USB_Devi˚SëSètus
(
h™dÀ
, 
kUSB_Devi˚SètusTe°Mode
, &
p‹tTe°C⁄åﬁ
);

895 i‡((
mesßge
->
Àngth
Ë&& (
devi˚Sëup
->
wLígth
) &&

896 ((
devi˚Sëup
->
bmReque°Ty≥
 & 
USB_REQUEST_TYPE_DIR_MASK
Ë=
USB_REQUEST_TYPE_DIR_OUT
))

898 i‡(((
devi˚Sëup
->
bmReque°Ty≥
 & 
USB_REQUEST_TYPE_TYPE_CLASS
) == USB_REQUEST_TYPE_TYPE_CLASS))

901 
usb_devi˚_c⁄åﬁ_ªque°_°ru˘_t
 
c⁄åﬁReque°
;

902 
c⁄åﬁReque°
.
buf„r
 = 
mesßge
->buffer;

903 
c⁄åﬁReque°
.
isSëup
 = 0U;

904 
c⁄åﬁReque°
.
£tup
 = 
devi˚Sëup
;

905 
c⁄åﬁReque°
.
Àngth
 = 
mesßge
->length;

906 
îr‹
 = 
	`USB_Devi˚CœssEvít
(
h™dÀ
, 
kUSB_Devi˚CœssEvítCœssReque°
, &
c⁄åﬁReque°
);

908 i‡(((
devi˚Sëup
->
bmReque°Ty≥
 & 
USB_REQUEST_TYPE_TYPE_VENDOR
) == USB_REQUEST_TYPE_TYPE_VENDOR))

911 
usb_devi˚_c⁄åﬁ_ªque°_°ru˘_t
 
c⁄åﬁReque°
;

912 
c⁄åﬁReque°
.
buf„r
 = 
mesßge
->buffer;

913 
c⁄åﬁReque°
.
isSëup
 = 0U;

914 
c⁄åﬁReque°
.
£tup
 = 
devi˚Sëup
;

915 
c⁄åﬁReque°
.
Àngth
 = 
mesßge
->length;

916 
îr‹
 = 
	`USB_Devi˚CœssCÆlback
(
h™dÀ
, 
kUSB_Devi˚EvítVíd‹Reque°
, &
c⁄åﬁReque°
);

922 
îr‹
 = 
	`USB_Devi˚C⁄åﬁCÆlbackFìdback
(
h™dÀ
, 
devi˚Sëup
,Éº‹, 
kUSB_Devi˚C⁄åﬁPùeD©aSège
, &
buf„r
,

923 &
Àngth
);

928  
îr‹
;

929 
	}
}

941 
usb_°©us_t
 
	$USB_Devi˚C⁄åﬁPùeInô
(
usb_devi˚_h™dÀ
 
h™dÀ
, *
∑øm
)

943 
usb_devi˚_ídpoöt_öô_°ru˘_t
 
ïInôSåu˘
;

944 
usb_devi˚_ídpoöt_ˇŒback_°ru˘_t
 
ïCÆlback
;

945 
usb_°©us_t
 
îr‹
;

947 
ïCÆlback
.
ˇŒbackFn
 = 
USB_Devi˚C⁄åﬁCÆlback
;

948 
ïCÆlback
.
ˇŒbackP¨am
 = 
∑øm
;

950 
ïInôSåu˘
.
z…
 = 1U;

951 
ïInôSåu˘
.
å™s„rTy≥
 = 
USB_ENDPOINT_CONTROL
;

952 
ïInôSåu˘
.
ídpoötAddªss
 = 
USB_CONTROL_ENDPOINT
 | (
USB_IN
 << 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT
);

953 
ïInôSåu˘
.
maxPackëSize
 = 
USB_CONTROL_MAX_PACKET_SIZE
;

955 
îr‹
 = 
	`USB_Devi˚InôEndpoöt
(
h™dÀ
, &
ïInôSåu˘
, &
ïCÆlback
);

957 i‡(
kSètus_USB_Suc˚ss
 !
îr‹
)

959  
îr‹
;

961 
ïInôSåu˘
.
ídpoötAddªss
 = 
USB_CONTROL_ENDPOINT
 | (
USB_OUT
 << 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT
);

963 
îr‹
 = 
	`USB_Devi˚InôEndpoöt
(
h™dÀ
, &
ïInôSåu˘
, &
ïCÆlback
);

965 i‡(
kSètus_USB_Suc˚ss
 !
îr‹
)

967 
	`USB_Devi˚DeöôEndpoöt
(
h™dÀ
,

968 
USB_CONTROL_ENDPOINT
 | (
USB_IN
 << 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT
));

969  
îr‹
;

972  
kSètus_USB_Suc˚ss
;

973 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbDevice\usb_device_ch9.h

35 #i‚de‡
__USB_DEVICE_CH9_H__


36 
	#__USB_DEVICE_CH9_H__


	)

46 
	#USB_DEVICE_STATUS_SIZE
 (0x02U)

	)

49 
	#USB_INTERFACE_STATUS_SIZE
 (0x02U)

	)

52 
	#USB_ENDPOINT_STATUS_SIZE
 (0x02U)

	)

55 
	#USB_CONFIGURE_SIZE
 (0X01U)

	)

59 
	#USB_INTERFACE_SIZE
 (0X01U)

	)

62 
	#USB_GET_STATUS_DEVICE_MASK
 (0x03U)

	)

65 
	#USB_GET_STATUS_INTERFACE_MASK
 (0x03U)

	)

68 
	#USB_GET_STATUS_ENDPOINT_MASK
 (0x03U)

	)

71 
	e_usb_devi˚_c⁄åﬁ_ªad_wrôe_£quí˚


73 
	mkUSB_Devi˚C⁄åﬁPùeSëupSège
 = 0U,

74 
	mkUSB_Devi˚C⁄åﬁPùeD©aSège
,

75 
	mkUSB_Devi˚C⁄åﬁPùeSètusSège
,

76 } 
	tusb_devi˚_c⁄åﬁ_ªad_wrôe_£quí˚_t
;

78 #i‡
deföed
(
__˝lu•lus
)

97 
usb_°©us_t
 
USB_Devi˚C⁄åﬁPùeInô
(
usb_devi˚_h™dÀ
 
h™dÀ
, *
∑øm
);

99 #i‡
deföed
(
__˝lu•lus
)

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbDevice\usb_device_class.c

35 
	~"usb_devi˚_c⁄fig.h
"

36 
	~"usb.h
"

38 
	~"usb_devi˚.h
"

39 
	~"usb_devi˚_ch9.h
"

40 
	~"usb_devi˚_˛ass.h
"

42 #i‡((
deföed
(
USB_DEVICE_CONFIG_NUM
)) && (USB_DEVICE_CONFIG_NUM > 0U))

44 #i‡((
deföed
(
USB_DEVICE_CONFIG_HID
)) && (USB_DEVICE_CONFIG_HID > 0U))

45 
	~"usb_devi˚_hid.h
"

48 #i‡((
deföed
(
USB_DEVICE_CONFIG_CDC_ACM
)) && (USB_DEVICE_CONFIG_CDC_ACM > 0U))

49 
	~"usb_devi˚_cdc_acm.h
"

52 #i‡((
deföed
(
USB_DEVICE_CONFIG_MSC
)) && (USB_DEVICE_CONFIG_MSC > 0U))

53 
	~"usb_devi˚_msc.h
"

56 #i‡((
deföed
(
USB_DEVICE_CONFIG_AUDIO
)) && (USB_DEVICE_CONFIG_AUDIO > 0U))

57 
	~"usb_devi˚_audio.h
"

60 #i‡((
deföed
(
USB_DEVICE_CONFIG_PHDC
)) && (USB_DEVICE_CONFIG_PHDC > 0U))

61 
	~"usb_devi˚_phdc.h
"

64 #i‡((
deföed
(
USB_DEVICE_CONFIG_VIDEO
)) && (USB_DEVICE_CONFIG_VIDEO > 0U))

65 
	~"usb_devi˚_video.h
"

68 #i‡((
deföed
(
USB_DEVICE_CONFIG_PRINTER
)) && (USB_DEVICE_CONFIG_PRINTER > 0U))

69 
	~"usb_devi˚_¥öãr.h
"

72 #i‡((
deföed
(
USB_DEVICE_CONFIG_DFU
)) && (USB_DEVICE_CONFIG_DFU > 0U))

73 
	~"usb_devi˚_dfu_c⁄fig.h
"

74 
	~"usb_devi˚_dfu.h
"

77 #i‡((
deföed
(
USB_DEVICE_CONFIG_CCID
)) && (USB_DEVICE_CONFIG_CCID > 0U))

78 
	~"usb_devi˚_ccid.h
"

88 
usb_°©us_t
 
USB_Devi˚CœssAŒoˇãH™dÀ
(
uöt8_t
 
c⁄åﬁÀrId
, 
usb_devi˚_comm⁄_˛ass_°ru˘_t
 **
h™dÀ
);

89 
usb_°©us_t
 
USB_Devi˚CœssFªeH™dÀ
(
uöt8_t
 
c⁄åﬁÀrId
);

90 
usb_°©us_t
 
USB_Devi˚CœssGëH™dÀByC⁄åﬁÀrId
(
uöt8_t
 
c⁄åﬁÀrId
,

91 
usb_devi˚_comm⁄_˛ass_°ru˘_t
 **
h™dÀ
);

92 
usb_°©us_t
 
USB_Devi˚CœssGëH™dÀByDevi˚H™dÀ
(
usb_devi˚_h™dÀ
 
devi˚H™dÀ
,

93 
usb_devi˚_comm⁄_˛ass_°ru˘_t
 **
h™dÀ
);

100 c⁄° 
usb_devi˚_˛ass_m≠_t
 
	gs_UsbDevi˚CœssI¡îÁ˚M≠
[] = {

101 #i‡((
deföed
(
USB_DEVICE_CONFIG_HID
)) && (USB_DEVICE_CONFIG_HID > 0U))

102 {
USB_Devi˚HidInô
, 
USB_Devi˚HidDeöô
, 
USB_Devi˚HidEvít
, 
kUSB_Devi˚CœssTy≥Hid
},

105 #i‡((
deföed
(
USB_DEVICE_CONFIG_CDC_ACM
)) && (USB_DEVICE_CONFIG_CDC_ACM > 0U))

106 {
USB_Devi˚CdcAcmInô
, 
USB_Devi˚CdcAcmDeöô
, 
USB_Devi˚CdcAcmEvít
, 
kUSB_Devi˚CœssTy≥Cdc
},

109 #i‡((
deföed
(
USB_DEVICE_CONFIG_MSC
)) && (USB_DEVICE_CONFIG_MSC > 0U))

110 {
USB_Devi˚MscInô
, 
USB_Devi˚MscDeöô
, 
USB_Devi˚MscEvít
, 
kUSB_Devi˚CœssTy≥Msc
},

113 #i‡((
deföed
 
USB_DEVICE_CONFIG_AUDIO
) && (USB_DEVICE_CONFIG_AUDIO > 0U))

114 {
USB_Devi˚AudioInô
, 
USB_Devi˚AudioDeöô
, 
USB_Devi˚AudioEvít
, 
kUSB_Devi˚CœssTy≥Audio
},

117 #i‡((
deföed
 
USB_DEVICE_CONFIG_PHDC
) && (USB_DEVICE_CONFIG_PHDC > 0U))

118 {
USB_Devi˚PhdcInô
, 
USB_Devi˚PhdcDeöô
, 
USB_Devi˚PhdcEvít
, 
kUSB_Devi˚CœssTy≥Phdc
},

121 #i‡((
deföed
 
USB_DEVICE_CONFIG_VIDEO
) && (USB_DEVICE_CONFIG_VIDEO > 0U))

122 {
USB_Devi˚VideoInô
, 
USB_Devi˚VideoDeöô
, 
USB_Devi˚VideoEvít
, 
kUSB_Devi˚CœssTy≥Video
},

125 #i‡((
deföed
 
USB_DEVICE_CONFIG_PRINTER
) && (USB_DEVICE_CONFIG_PRINTER > 0U))

126 {
USB_Devi˚PröãrInô
, 
USB_Devi˚PröãrDeöô
, 
USB_Devi˚PröãrEvít
, 
kUSB_Devi˚CœssTy≥Pröãr
},

129 #i‡((
deföed
 
USB_DEVICE_CONFIG_DFU
) && (USB_DEVICE_CONFIG_DFU > 0U))

130 {
usb_devi˚_dfu_öô
, 
usb_devi˚_dfu_deöô
, 
usb_devi˚_dfu_evít
, 
kUSB_Devi˚CœssTy≥Dfu
},

133 #i‡((
deföed
 
USB_DEVICE_CONFIG_CCID
) && (USB_DEVICE_CONFIG_CCID > 0U))

134 {
USB_Devi˚CcidInô
, 
USB_Devi˚CcidDeöô
, 
USB_Devi˚CcidEvít
, 
kUSB_Devi˚CœssTy≥Ccid
},

137 {(
usb_devi˚_˛ass_öô_ˇŒ_t
)
NULL
, (
usb_devi˚_˛ass_deöô_ˇŒ_t
)NULL, (
usb_devi˚_˛ass_evít_ˇŒback_t
)NULL,

138 (
usb_devi˚_˛ass_ty≥_t
)0},

141 
USB_GLOBAL
 
	$USB_RAM_ADDRESS_ALIGNMENT
(
USB_DATA_ALIGN_SIZE
Ë
usb_devi˚_comm⁄_˛ass_°ru˘_t


142 
s_UsbDevi˚Comm⁄CœssSåu˘
[
USB_DEVICE_CONFIG_NUM
];

143 
USB_GLOBAL
 
	$USB_RAM_ADDRESS_ALIGNMENT
(
USB_DATA_ALIGN_SIZE
Ë
uöt8_t


144 
s_UsbDevi˚SëupBuf„r
[
USB_DEVICE_CONFIG_NUM
][
	`USB_DATA_ALIGN_SIZE_MULTIPLE
(
USB_SETUP_PACKET_SIZE
)];

163 
usb_°©us_t
 
	$USB_Devi˚CœssAŒoˇãH™dÀ
(
uöt8_t
 
c⁄åﬁÀrId
, 
usb_devi˚_comm⁄_˛ass_°ru˘_t
 **
h™dÀ
)

165 
öt32_t
 
cou¡
;

166 
	`USB_OSA_SR_ALLOC
();

168 
	`USB_OSA_ENTER_CRITICAL
();

170 
cou¡
 = 0U; cou¡ < 
USB_DEVICE_CONFIG_NUM
; count++)

172 i‡((
NULL
 !
s_UsbDevi˚Comm⁄CœssSåu˘
[
cou¡
].
h™dÀ
) &&

173 (
c⁄åﬁÀrId
 =
s_UsbDevi˚Comm⁄CœssSåu˘
[
cou¡
].controllerId))

175 
	`USB_OSA_EXIT_CRITICAL
();

176  
kSètus_USB_Eº‹
;

180 
cou¡
 = 0U; cou¡ < 
USB_DEVICE_CONFIG_NUM
; count++)

182 i‡(
NULL
 =
s_UsbDevi˚Comm⁄CœssSåu˘
[
cou¡
].
h™dÀ
)

184 
s_UsbDevi˚Comm⁄CœssSåu˘
[
cou¡
].
c⁄åﬁÀrId
 = controllerId;

185 
s_UsbDevi˚Comm⁄CœssSåu˘
[
cou¡
].
£tupBuf„r
 = 
s_UsbDevi˚SëupBuf„r
[count];

186 *
h™dÀ
 = &
s_UsbDevi˚Comm⁄CœssSåu˘
[
cou¡
];

187 
	`USB_OSA_EXIT_CRITICAL
();

188  
kSètus_USB_Suc˚ss
;

192 
	`USB_OSA_EXIT_CRITICAL
();

193  
kSètus_USB_Busy
;

194 
	}
}

206 
usb_°©us_t
 
	$USB_Devi˚CœssFªeH™dÀ
(
uöt8_t
 
c⁄åﬁÀrId
)

208 
öt32_t
 
cou¡
 = 0U;

209 
	`USB_OSA_SR_ALLOC
();

211 
	`USB_OSA_ENTER_CRITICAL
();

212 ; 
cou¡
 < 
USB_DEVICE_CONFIG_NUM
; count++)

214 i‡((
NULL
 !
s_UsbDevi˚Comm⁄CœssSåu˘
[
cou¡
].
h™dÀ
) &&

215 (
c⁄åﬁÀrId
 =
s_UsbDevi˚Comm⁄CœssSåu˘
[
cou¡
].controllerId))

217 
s_UsbDevi˚Comm⁄CœssSåu˘
[
cou¡
].
h™dÀ
 = 
NULL
;

218 
s_UsbDevi˚Comm⁄CœssSåu˘
[
cou¡
].
c⁄figLi°
 = (
usb_devi˚_˛ass_c⁄fig_li°_°ru˘_t
 *)
NULL
;

219 
s_UsbDevi˚Comm⁄CœssSåu˘
[
cou¡
].
c⁄åﬁÀrId
 = 0U;

220 
	`USB_OSA_EXIT_CRITICAL
();

221  
kSètus_USB_Suc˚ss
;

224 
	`USB_OSA_EXIT_CRITICAL
();

226  
kSètus_USB_InvÆidP¨amëî
;

227 
	}
}

241 
usb_°©us_t
 
	$USB_Devi˚CœssGëH™dÀByC⁄åﬁÀrId
(
uöt8_t
 
c⁄åﬁÀrId
,

242 
usb_devi˚_comm⁄_˛ass_°ru˘_t
 **
h™dÀ
)

244 
öt32_t
 
cou¡
 = 0U;

245 
	`USB_OSA_SR_ALLOC
();

247 
	`USB_OSA_ENTER_CRITICAL
();

248 ; 
cou¡
 < 
USB_DEVICE_CONFIG_NUM
; count++)

250 i‡((
NULL
 !
s_UsbDevi˚Comm⁄CœssSåu˘
[
cou¡
].
h™dÀ
) &&

251 (
c⁄åﬁÀrId
 =
s_UsbDevi˚Comm⁄CœssSåu˘
[
cou¡
].controllerId))

253 *
h™dÀ
 = &
s_UsbDevi˚Comm⁄CœssSåu˘
[
cou¡
];

254 
	`USB_OSA_EXIT_CRITICAL
();

255  
kSètus_USB_Suc˚ss
;

258 
	`USB_OSA_EXIT_CRITICAL
();

259  
kSètus_USB_InvÆidP¨amëî
;

260 
	}
}

274 
usb_°©us_t
 
	$USB_Devi˚CœssGëH™dÀByDevi˚H™dÀ
(
usb_devi˚_h™dÀ
 
devi˚H™dÀ
,

275 
usb_devi˚_comm⁄_˛ass_°ru˘_t
 **
h™dÀ
)

277 
öt32_t
 
cou¡
 = 0U;

278 
	`USB_OSA_SR_ALLOC
();

280 
	`USB_OSA_ENTER_CRITICAL
();

281 ; 
cou¡
 < 
USB_DEVICE_CONFIG_NUM
; count++)

283 i‡(
devi˚H™dÀ
 =
s_UsbDevi˚Comm⁄CœssSåu˘
[
cou¡
].
h™dÀ
)

285 *
h™dÀ
 = &
s_UsbDevi˚Comm⁄CœssSåu˘
[
cou¡
];

286 
	`USB_OSA_EXIT_CRITICAL
();

287  
kSètus_USB_Suc˚ss
;

290 
	`USB_OSA_EXIT_CRITICAL
();

291  
kSètus_USB_InvÆidP¨amëî
;

292 
	}
}

305 
usb_°©us_t
 
	$USB_Devi˚CœssGëDevi˚H™dÀ
(
uöt8_t
 
c⁄åﬁÀrId
, 
usb_devi˚_h™dÀ
 *
h™dÀ
)

307 
öt32_t
 
cou¡
 = 0U;

308 
	`USB_OSA_SR_ALLOC
();

310 
	`USB_OSA_ENTER_CRITICAL
();

311 ; 
cou¡
 < 
USB_DEVICE_CONFIG_NUM
; count++)

313 i‡((
NULL
 !
s_UsbDevi˚Comm⁄CœssSåu˘
[
cou¡
].
h™dÀ
) &&

314 (
c⁄åﬁÀrId
 =
s_UsbDevi˚Comm⁄CœssSåu˘
[
cou¡
].controllerId))

316 *
h™dÀ
 = 
s_UsbDevi˚Comm⁄CœssSåu˘
[
cou¡
].handle;

317 
	`USB_OSA_EXIT_CRITICAL
();

318  
kSètus_USB_Suc˚ss
;

321 
	`USB_OSA_EXIT_CRITICAL
();

322  
kSètus_USB_InvÆidP¨amëî
;

323 
	}
}

339 
usb_°©us_t
 
	$USB_Devi˚CœssEvít
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
usb_devi˚_˛ass_evít_t
 
evít
, *
∑øm
)

341 
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
;

342 
uöt8_t
 
m≠Index
;

343 
uöt8_t
 
˛assIndex
;

344 
usb_°©us_t
 
îr‹Rëu∫
 = 
kSètus_USB_Eº‹
;

345 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

347 i‡(
NULL
 =
∑øm
)

349  
kSètus_USB_InvÆidP¨amëî
;

353 
îr‹Rëu∫
 = 
	`USB_Devi˚CœssGëH™dÀByDevi˚H™dÀ
(
h™dÀ
, &
˛assH™dÀ
);

354 i‡(
kSètus_USB_Suc˚ss
 !
îr‹Rëu∫
)

356  
kSètus_USB_InvÆidP¨amëî
;

359 
˛assIndex
 = 0U; cœssIndex < 
˛assH™dÀ
->
c⁄figLi°
->
cou¡
; classIndex++)

361 
m≠Index
 = 0U; m≠Index < ((
s_UsbDevi˚CœssI¡îÁ˚M≠
Ë/ (
usb_devi˚_˛ass_m≠_t
));

362 
m≠Index
++)

364 i‡(
s_UsbDevi˚CœssI¡îÁ˚M≠
[
m≠Index
].
ty≥
 ==

365 
˛assH™dÀ
->
c⁄figLi°
->
c⁄fig
[
˛assIndex
].
˛assInfom©i⁄
->
ty≥
)

368 
îr‹Rëu∫
 = 
s_UsbDevi˚CœssI¡îÁ˚M≠
[
m≠Index
].
	`˛assEvítCÆlback
(

369 (*)
˛assH™dÀ
->
c⁄figLi°
->
c⁄fig
[
˛assIndex
].˛assH™dÀ, 
evít
, 
∑øm
);

372 i‡(
kSètus_USB_InvÆidReque°
 =
îr‹Rëu∫
)

374  
kSètus_USB_InvÆidReque°
;

377 i‡(
kSètus_USB_Suc˚ss
 =
îr‹Rëu∫
)

379 
îr‹
 = 
kSètus_USB_Suc˚ss
;

386  
îr‹
;

387 
	}
}

400 
usb_°©us_t
 
	$USB_Devi˚CœssCÆlback
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
uöt32_t
 
evít
, *
∑øm
)

402 
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
;

403 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

406 
îr‹
 = 
	`USB_Devi˚CœssGëH™dÀByDevi˚H™dÀ
(
h™dÀ
, &
˛assH™dÀ
);

407 i‡(
kSètus_USB_Suc˚ss
 !
îr‹
)

409  
îr‹
;

412 i‡(
kUSB_Devi˚EvítBusRe£t
 =
evít
)

415 
	`USB_Devi˚C⁄åﬁPùeInô
(
h™dÀ
, 
˛assH™dÀ
);

418 
	`USB_Devi˚CœssEvít
(
h™dÀ
, 
kUSB_Devi˚CœssEvítDevi˚Re£t
, 
˛assH™dÀ
);

422 
îr‹
 = 
˛assH™dÀ
->
c⁄figLi°
->
	`devi˚CÆlback
(
h™dÀ
, 
evít
, 
∑øm
);

423  
îr‹
;

424 
	}
}

443 
usb_°©us_t
 
	$USB_Devi˚CœssInô
(

444 
uöt8_t
 
c⁄åﬁÀrId
,

445 
usb_devi˚_˛ass_c⁄fig_li°_°ru˘_t
 *
c⁄figLi°
,

446 
usb_devi˚_h™dÀ
 *
h™dÀ


449 
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
;

450 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

451 
uöt8_t
 
m≠Index
;

452 
uöt8_t
 
˛assIndex
;

454 i‡((
NULL
 =
h™dÀ
Ë|| (NULL =
c⁄figLi°
Ë|| ((
usb_devi˚_ˇŒback_t
)NULL =c⁄figLi°->
devi˚CÆlback
))

456  
kSètus_USB_InvÆidP¨amëî
;

460 
îr‹
 = 
	`USB_Devi˚CœssAŒoˇãH™dÀ
(
c⁄åﬁÀrId
, &
˛assH™dÀ
);

461 i‡(
kSètus_USB_Suc˚ss
 !
îr‹
)

463  
îr‹
;

466 
˛assH™dÀ
->
c⁄figLi°
 = configList;

469 
îr‹
 = 
	`USB_Devi˚Inô
(
c⁄åﬁÀrId
, 
USB_Devi˚CœssCÆlback
, &
˛assH™dÀ
->
h™dÀ
);

471 i‡(
kSètus_USB_Suc˚ss
 !
îr‹
)

473 
	`USB_Devi˚Deöô
(
˛assH™dÀ
->
h™dÀ
);

474 
	`USB_Devi˚CœssFªeH™dÀ
(
c⁄åﬁÀrId
);

475  
îr‹
;

479 
˛assIndex
 = 0U; cœssIndex < 
˛assH™dÀ
->
c⁄figLi°
->
cou¡
; classIndex++)

481 
m≠Index
 = 0U; m≠Index < ((
s_UsbDevi˚CœssI¡îÁ˚M≠
Ë/ (
usb_devi˚_˛ass_m≠_t
));

482 
m≠Index
++)

484 i‡(
˛assH™dÀ
->
c⁄figLi°
->
c⁄fig
[
˛assIndex
].
˛assInfom©i⁄
->
ty≥
 ==

485 
s_UsbDevi˚CœssI¡îÁ˚M≠
[
m≠Index
].
ty≥
)

487 ()
s_UsbDevi˚CœssI¡îÁ˚M≠
[
m≠Index
].
	`˛assInô
(

488 
c⁄åﬁÀrId
, &
˛assH™dÀ
->
c⁄figLi°
->
c⁄fig
[
˛assIndex
],

489 &
˛assH™dÀ
->
c⁄figLi°
->
c⁄fig
[
˛assIndex
].classHandle);

494 *
h™dÀ
 = 
˛assH™dÀ
->handle;

495  
îr‹
;

496 
	}
}

507 
usb_°©us_t
 
	$USB_Devi˚CœssDeöô
(
uöt8_t
 
c⁄åﬁÀrId


510 
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
;

511 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

512 
uöt8_t
 
m≠Index
;

513 
uöt8_t
 
˛assIndex
;

516 
îr‹
 = 
	`USB_Devi˚CœssGëH™dÀByC⁄åﬁÀrId
(
c⁄åﬁÀrId
, &
˛assH™dÀ
);

518 i‡(
kSètus_USB_Suc˚ss
 !
îr‹
)

520  
îr‹
;

524 
˛assIndex
 = 0U; cœssIndex < 
˛assH™dÀ
->
c⁄figLi°
->
cou¡
; classIndex++)

526 
m≠Index
 = 0U; m≠Index < ((
s_UsbDevi˚CœssI¡îÁ˚M≠
Ë/ (
usb_devi˚_˛ass_m≠_t
));

527 
m≠Index
++)

529 i‡(
˛assH™dÀ
->
c⁄figLi°
->
c⁄fig
[
˛assIndex
].
˛assInfom©i⁄
->
ty≥
 ==

530 
s_UsbDevi˚CœssI¡îÁ˚M≠
[
m≠Index
].
ty≥
)

532 ()
s_UsbDevi˚CœssI¡îÁ˚M≠
[
m≠Index
].
	`˛assDeöô
(

533 
˛assH™dÀ
->
c⁄figLi°
->
c⁄fig
[
˛assIndex
].classHandle);

539 
îr‹
 = 
	`USB_Devi˚Deöô
(
˛assH™dÀ
->
h™dÀ
);

540 i‡(
kSètus_USB_Suc˚ss
 =
îr‹
)

543 ()
	`USB_Devi˚CœssFªeH™dÀ
(
c⁄åﬁÀrId
);

545  
îr‹
;

546 
	}
}

558 
usb_°©us_t
 
	$USB_Devi˚CœssGëS≥ed
(
uöt8_t
 
c⁄åﬁÀrId
,

559 
uöt8_t
 *
•ìd


562 
usb_devi˚_comm⁄_˛ass_°ru˘_t
 *
˛assH™dÀ
;

563 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

566 
îr‹
 = 
	`USB_Devi˚CœssGëH™dÀByC⁄åﬁÀrId
(
c⁄åﬁÀrId
, &
˛assH™dÀ
);

568 i‡(
kSètus_USB_Suc˚ss
 !
îr‹
)

570  
îr‹
;

574 
îr‹
 = 
	`USB_Devi˚GëSètus
(
˛assH™dÀ
->
h™dÀ
, 
kUSB_Devi˚SètusS≥ed
, 
•ìd
);

576  
îr‹
;

577 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbDevice\usb_device_class.h

35 #i‚de‡
__USB_DEVICE_CLASS_H__


36 
	#__USB_DEVICE_CLASS_H__


	)

48 
	#˛ass_h™dÀ_t
 
uöt32_t


	)

51 
	e_usb_usb_devi˚_˛ass_ty≥


53 
	mkUSB_Devi˚CœssTy≥Hid
 = 1U,

54 
	mkUSB_Devi˚CœssTy≥Cdc
,

55 
	mkUSB_Devi˚CœssTy≥Msc
,

56 
	mkUSB_Devi˚CœssTy≥Audio
,

57 
	mkUSB_Devi˚CœssTy≥Phdc
,

58 
	mkUSB_Devi˚CœssTy≥Video
,

59 
	mkUSB_Devi˚CœssTy≥Pröãr
,

60 
	mkUSB_Devi˚CœssTy≥Dfu
,

61 
	mkUSB_Devi˚CœssTy≥Ccid
,

62 } 
	tusb_devi˚_˛ass_ty≥_t
;

65 
	e_usb_devi˚_˛ass_evít


67 
	mkUSB_Devi˚CœssEvítCœssReque°
 = 1U,

68 
	mkUSB_Devi˚CœssEvítDevi˚Re£t
,

69 
	mkUSB_Devi˚CœssEvítSëC⁄figuøti⁄
,

70 
	mkUSB_Devi˚CœssEvítSëI¡îÁ˚
,

71 
	mkUSB_Devi˚CœssEvítSëEndpoötHÆt
,

72 
	mkUSB_Devi˚CœssEvítCÀ¨EndpoötHÆt
,

73 } 
	tusb_devi˚_˛ass_evít_t
;

81 
	s_usb_devi˚_ídpoöt_°ru˘


83 
uöt8_t
 
	mídpoötAddªss
;

84 
uöt8_t
 
	må™s„rTy≥
;

85 
uöt16_t
 
	mmaxPackëSize
;

86 } 
	tusb_devi˚_ídpoöt_°ru˘_t
;

94 
	s_usb_devi˚_ídpoöt_li°


96 
uöt8_t
 
	mcou¡
;

97 
usb_devi˚_ídpoöt_°ru˘_t
 *
	mídpoöt
;

98 } 
	tusb_devi˚_ídpoöt_li°_t
;

106 
	s_usb_devi˚_öãrÁ˚_°ru˘


108 
uöt8_t
 
	mÆã∫©eSëtög
;

109 
usb_devi˚_ídpoöt_li°_t
 
	mídpoötLi°
;

110 *
	m˛assS≥cific
;

111 } 
	tusb_devi˚_öãrÁ˚_°ru˘_t
;

119 
	s_usb_devi˚_öãrÁ˚s_°ru˘


121 
uöt8_t
 
	m˛assCode
;

122 
uöt8_t
 
	msub˛assCode
;

123 
uöt8_t
 
	m¥ŸocﬁCode
;

124 
uöt8_t
 
	möãrÁ˚Numbî
;

125 
usb_devi˚_öãrÁ˚_°ru˘_t
 *
	möãrÁ˚
;

126 
uöt8_t
 
	mcou¡
;

127 } 
	tusb_devi˚_öãrÁ˚s_°ru˘_t
;

135 
	s_usb_devi˚_öãrÁ˚_li°


137 
uöt8_t
 
	mcou¡
;

138 
usb_devi˚_öãrÁ˚s_°ru˘_t
 *
	möãrÁ˚s
;

139 } 
	tusb_devi˚_öãrÁ˚_li°_t
;

147 
	s_usb_devi˚_˛ass_°ru˘


149 
usb_devi˚_öãrÁ˚_li°_t
 *
	möãrÁ˚Li°
;

150 
usb_devi˚_˛ass_ty≥_t
 
	mty≥
;

151 
uöt8_t
 
	mc⁄figuøti⁄s
;

152 } 
	tusb_devi˚_˛ass_°ru˘_t
;

155 
	$usb_°©us_t
 (*
	tusb_devi˚_˛ass_ˇŒback_t
)(
	t˛ass_h™dÀ_t
 
	t˛assH™dÀ
,

156 
	tuöt32_t
 
	tˇŒbackEvít
,

157 *
	tevítP¨am
);

165 
	s_usb_devi˚_˛ass_c⁄fig_°ru˘


167 
usb_devi˚_˛ass_ˇŒback_t
 
˛assCÆlback
;

169 
˛ass_h™dÀ_t
 
˛assH™dÀ
;

170 
usb_devi˚_˛ass_°ru˘_t
 *
˛assInfom©i⁄
;

171 } 
	tusb_devi˚_˛ass_c⁄fig_°ru˘_t
;

179 
	s_usb_devi˚_˛ass_c⁄fig_li°_°ru˘


181 
usb_devi˚_˛ass_c⁄fig_°ru˘_t
 *
c⁄fig
;

182 
usb_devi˚_ˇŒback_t
 
devi˚CÆlback
;

183 
uöt8_t
 
cou¡
;

184 } 
	tusb_devi˚_˛ass_c⁄fig_li°_°ru˘_t
;

214 
	s_usb_devi˚_c⁄åﬁ_ªque°_°ru˘


216 
usb_£tup_°ru˘_t
 *
£tup
;

217 
uöt8_t
 *
buf„r
;

218 
uöt32_t
 
Àngth
;

219 
uöt8_t
 
isSëup
;

220 } 
	tusb_devi˚_c⁄åﬁ_ªque°_°ru˘_t
;

223 
	s_usb_devi˚_gë_des¸ùt‹_comm⁄_°ru˘


225 
uöt8_t
 *
buf„r
;

226 
uöt32_t
 
Àngth
;

227 } 
	tusb_devi˚_gë_des¸ùt‹_comm⁄_°ru˘_t
;

230 
	s_usb_devi˚_gë_devi˚_des¸ùt‹_°ru˘


232 
uöt8_t
 *
buf„r
;

233 
uöt32_t
 
Àngth
;

234 } 
	tusb_devi˚_gë_devi˚_des¸ùt‹_°ru˘_t
;

237 
	s_usb_devi˚_gë_devi˚_quÆifõr_des¸ùt‹_°ru˘


239 
uöt8_t
 *
buf„r
;

240 
uöt32_t
 
Àngth
;

241 } 
	tusb_devi˚_gë_devi˚_quÆifõr_des¸ùt‹_°ru˘_t
;

244 
	s_usb_devi˚_gë_c⁄figuøti⁄_des¸ùt‹_°ru˘


246 
uöt8_t
 *
buf„r
;

247 
uöt32_t
 
Àngth
;

248 
uöt8_t
 
c⁄figuøti⁄
;

249 } 
	tusb_devi˚_gë_c⁄figuøti⁄_des¸ùt‹_°ru˘_t
;

252 
	s_usb_devi˚_gë_bos_des¸ùt‹_°ru˘


254 
uöt8_t
 *
buf„r
;

255 
uöt32_t
 
Àngth
;

256 } 
	tusb_devi˚_gë_bos_des¸ùt‹_°ru˘_t
;

259 
	s_usb_devi˚_gë_°rög_des¸ùt‹_°ru˘


261 
uöt8_t
 *
buf„r
;

262 
uöt32_t
 
Àngth
;

263 
uöt16_t
 
œnguageId
;

264 
uöt8_t
 
°rögIndex
;

265 } 
	tusb_devi˚_gë_°rög_des¸ùt‹_°ru˘_t
;

268 
	s_usb_devi˚_gë_hid_des¸ùt‹_°ru˘


270 
uöt8_t
 *
buf„r
;

271 
uöt32_t
 
Àngth
;

272 
uöt8_t
 
öãrÁ˚Numbî
;

273 } 
	tusb_devi˚_gë_hid_des¸ùt‹_°ru˘_t
;

276 
	s_usb_devi˚_gë_hid_ªp‹t_des¸ùt‹_°ru˘


278 
uöt8_t
 *
buf„r
;

279 
uöt32_t
 
Àngth
;

280 
uöt8_t
 
öãrÁ˚Numbî
;

281 } 
	tusb_devi˚_gë_hid_ªp‹t_des¸ùt‹_°ru˘_t
;

284 
	s_usb_devi˚_gë_hid_physiˇl_des¸ùt‹_°ru˘


286 
uöt8_t
 *
buf„r
;

287 
uöt32_t
 
Àngth
;

288 
uöt8_t
 
ödex
;

289 
uöt8_t
 
öãrÁ˚Numbî
;

290 } 
	tusb_devi˚_gë_hid_physiˇl_des¸ùt‹_°ru˘_t
;

293 
	u_usb_devi˚_gë_des¸ùt‹_comm⁄_uni⁄


295 
usb_devi˚_gë_des¸ùt‹_comm⁄_°ru˘_t
 
comm⁄Des¸ùt‹
;

296 
usb_devi˚_gë_devi˚_des¸ùt‹_°ru˘_t
 
devi˚Des¸ùt‹
;

297 
usb_devi˚_gë_devi˚_quÆifõr_des¸ùt‹_°ru˘_t


298 
devi˚QuÆifõrDes¸ùt‹
;

299 
usb_devi˚_gë_c⁄figuøti⁄_des¸ùt‹_°ru˘_t


300 
c⁄figuøti⁄Des¸ùt‹
;

301 
usb_devi˚_gë_°rög_des¸ùt‹_°ru˘_t
 
°rögDes¸ùt‹
;

302 
usb_devi˚_gë_hid_des¸ùt‹_°ru˘_t
 
hidDes¸ùt‹
;

303 
usb_devi˚_gë_hid_ªp‹t_des¸ùt‹_°ru˘_t


304 
hidRï‹tDes¸ùt‹
;

305 
usb_devi˚_gë_hid_physiˇl_des¸ùt‹_°ru˘_t


306 
hidPhysiˇlDes¸ùt‹
;

307 } 
	tusb_devi˚_gë_des¸ùt‹_comm⁄_uni⁄_t
;

310 
	$usb_°©us_t
 (*
	tusb_devi˚_˛ass_öô_ˇŒ_t
)(
	tuöt8_t
 
	tc⁄åﬁÀrId
,

311 
	tusb_devi˚_˛ass_c⁄fig_°ru˘_t
 *
	t˛assC⁄fig
,

312 
	t˛ass_h™dÀ_t
 *
	t˛assH™dÀ
);

314 
	$usb_°©us_t
 (*
	tusb_devi˚_˛ass_deöô_ˇŒ_t
)(
	t˛ass_h™dÀ_t
 
	th™dÀ
);

316 
	$usb_°©us_t
 (*
	tusb_devi˚_˛ass_evít_ˇŒback_t
)(*
	t˛assH™dÀ
, 
	tuöt32_t
 
	tevít
, *
	t∑øm
);

319 
	s_usb_devi˚_˛ass_m≠


321 
usb_devi˚_˛ass_öô_ˇŒ_t
 
˛assInô
;

322 
usb_devi˚_˛ass_deöô_ˇŒ_t
 
˛assDeöô
;

323 
usb_devi˚_˛ass_evít_ˇŒback_t
 
˛assEvítCÆlback
;

324 
usb_devi˚_˛ass_ty≥_t
 
ty≥
;

325 } 
	tusb_devi˚_˛ass_m≠_t
;

328 
	s_usb_devi˚_comm⁄_˛ass_°ru˘


330 
usb_devi˚_h™dÀ
 
h™dÀ
;

331 
usb_devi˚_˛ass_c⁄fig_li°_°ru˘_t
 *
c⁄figLi°
;

332 
uöt8_t
 *
£tupBuf„r
;

333 
uöt16_t
 
°™d¨dTønsˇti⁄Buf„r
;

341 
uöt8_t
 
c⁄åﬁÀrId
;

342 } 
	tusb_devi˚_comm⁄_˛ass_°ru˘_t
;

348 #i‡
	`deföed
(
__˝lu•lus
)

371 
usb_°©us_t
 
	`USB_Devi˚CœssInô
(
uöt8_t
 
c⁄åﬁÀrId
,

372 
usb_devi˚_˛ass_c⁄fig_li°_°ru˘_t
 *
c⁄figLi°
,

373 
usb_devi˚_h™dÀ
 *
h™dÀ
);

384 
usb_°©us_t
 
	`USB_Devi˚CœssDeöô
(
uöt8_t
 
c⁄åﬁÀrId
);

396 
usb_°©us_t
 
	`USB_Devi˚CœssGëS≥ed
(
uöt8_t
 
c⁄åﬁÀrId
, uöt8_à*
•ìd
);

412 
usb_°©us_t
 
	`USB_Devi˚CœssEvít
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
usb_devi˚_˛ass_evít_t
 
evít
, *
∑øm
);

425 
usb_°©us_t
 
	`USB_Devi˚CœssCÆlback
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
uöt32_t
 
evít
, *
∑øm
);

438 
usb_°©us_t
 
	`USB_Devi˚CœssGëDevi˚H™dÀ
(
uöt8_t
 
c⁄åﬁÀrId
, 
usb_devi˚_h™dÀ
 *
h™dÀ
);

440 #i‡
	`deföed
(
__˝lu•lus
)

441 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbDevice\usb_device_config.h

35 #i‚de‡
_USB_DEVICE_CONFIG_H_


36 
	#_USB_DEVICE_CONFIG_H_


	)

52 
	#USB_DEVICE_CONFIG_KHCI
 (0U)

	)

55 
	#USB_DEVICE_CONFIG_EHCI
 (0U)

	)

58 
	#USB_DEVICE_CONFIG_LPCIP3511FS
 (0U)

	)

61 
	#USB_DEVICE_CONFIG_LPCIP3511HS
 (1U)

	)

64 
	#USB_DEVICE_CONFIG_NUM
 \

65 (
USB_DEVICE_CONFIG_KHCI
 + 
USB_DEVICE_CONFIG_EHCI
 + 
USB_DEVICE_CONFIG_LPCIP3511FS
 + 
USB_DEVICE_CONFIG_LPCIP3511HS
)

	)

75 
	#USB_DEVICE_CONFIG_HID
 (1U)

	)

78 
	#USB_DEVICE_CONFIG_CDC_ACM
 (0U)

	)

81 
	#USB_DEVICE_CONFIG_MSC
 (0U)

	)

84 
	#USB_DEVICE_CONFIG_AUDIO
 (0U)

	)

87 
	#USB_DEVICE_CONFIG_PHDC
 (0U)

	)

90 
	#USB_DEVICE_CONFIG_VIDEO
 (0U)

	)

93 
	#USB_DEVICE_CONFIG_CCID
 (0U)

	)

96 
	#USB_DEVICE_CONFIG_PRINTER
 (0U)

	)

99 
	#USB_DEVICE_CONFIG_DFU
 (0U)

	)

104 
	#USB_DEVICE_CONFIG_SELF_POWER
 (1U)

	)

107 
	#USB_DEVICE_CONFIG_ENDPOINTS
 (4U)

	)

110 
	#USB_DEVICE_CONFIG_USE_TASK
 (1U)

	)

113 
	#USB_DEVICE_CONFIG_MAX_MESSAGES
 (8U)

	)

116 
	#USB_DEVICE_CONFIG_USB20_TEST_MODE
 (0U)

	)

119 
	#USB_DEVICE_CONFIG_CV_TEST
 (0U)

	)

123 
	#USB_DEVICE_CONFIG_COMPLIANCE_TEST
 (0U)

	)

125 #i‡((
deföed
(
USB_DEVICE_CONFIG_COMPLIANCE_TEST
)) && (USB_DEVICE_CONFIG_COMPLIANCE_TEST > 0U))

128 #unde‡
USB_DEVICE_CONFIG_USB20_TEST_MODE


130 #unde‡
USB_DEVICE_CONFIG_CV_TEST


133 
	#USB_DEVICE_CONFIG_USB20_TEST_MODE
 (1U)

	)

136 
	#USB_DEVICE_CONFIG_CV_TEST
 (1U)

	)

140 #i‡((
deföed
(
USB_DEVICE_CONFIG_KHCI
)) && (USB_DEVICE_CONFIG_KHCI > 0U))

143 
	#USB_DEVICE_CONFIG_KHCI_DMA_ALIGN_BUFFER_LENGTH
 (64U)

	)

146 #i‡((
deföed
(
USB_DEVICE_CONFIG_EHCI
)) && (USB_DEVICE_CONFIG_EHCI > 0U))

148 
	#USB_DEVICE_CONFIG_EHCI_MAX_DTD
 (16U)

	)

151 
	#USB_DEVICE_CONFIG_EHCI_ID_PIN_DETECT
 (0U)

	)

155 
	#USB_DEVICE_CONFIG_KEEP_ALIVE_MODE
 (0U)

	)

158 
	#USB_DEVICE_CONFIG_BUFFER_PROPERTY_CACHEABLE
 (0U)

	)

161 
	#USB_DEVICE_CONFIG_LOW_POWER_MODE
 (0U)

	)

163 #i‡((
deföed
(
USB_DEVICE_CONFIG_LOW_POWER_MODE
)) && (USB_DEVICE_CONFIG_LOW_POWER_MODE > 0U))

165 
	#USB_DEVICE_CONFIG_REMOTE_WAKEUP
 (0U)

	)

168 
	#USB_DEVICE_CONFIG_LPM_L1
 (0U)

	)

171 
	#USB_DEVICE_CONFIG_REMOTE_WAKEUP
 (0U)

	)

175 
	#USB_DEVICE_CONFIG_DETACH_ENABLE
 (0U)

	)

178 
	#USB_DEVICE_CONFIG_ERROR_HANDLING
 (0U)

	)

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbDevice\usb_device_descriptor.c

35 
	~"usb_devi˚_c⁄fig.h
"

36 
	~"usb.h
"

37 
	~"usb_devi˚.h
"

39 
	~"usb_devi˚_˛ass.h
"

40 
	~"usb_devi˚_hid.h
"

42 
	~"usb_devi˚_des¸ùt‹.h
"

57 
usb_devi˚_ídpoöt_°ru˘_t
 
	gg_UsbDevi˚HidGíîicEndpoöts
[
USB_HID_GENERIC_ENDPOINT_COUNT
] = {

60 
USB_HID_GENERIC_ENDPOINT_IN
 | (
USB_IN
 << 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT
),

61 
USB_ENDPOINT_INTERRUPT
, 
HS_HID_GENERIC_INTERRUPT_IN_PACKET_SIZE
,

65 
USB_HID_GENERIC_ENDPOINT_OUT
 | (
USB_OUT
 << 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT
),

66 
USB_ENDPOINT_INTERRUPT
, 
HS_HID_GENERIC_INTERRUPT_OUT_PACKET_SIZE
,

70 
usb_devi˚_öãrÁ˚_°ru˘_t
 
	gg_UsbDevi˚HidGíîicI¡îÁ˚
[] = {{

73 
USB_HID_GENERIC_ENDPOINT_COUNT
,

74 
g_UsbDevi˚HidGíîicEndpoöts
,

76 
NULL
,

79 
usb_devi˚_öãrÁ˚s_°ru˘_t
 
	gg_UsbDevi˚HidGíîicI¡îÁ˚s
[
USB_HID_GENERIC_INTERFACE_COUNT
] = {

81 
USB_HID_GENERIC_CLASS
,

82 
USB_HID_GENERIC_SUBCLASS
,

83 
USB_HID_GENERIC_PROTOCOL
,

84 
USB_HID_GENERIC_INTERFACE_INDEX
,

85 
g_UsbDevi˚HidGíîicI¡îÁ˚
,

86 (
g_UsbDevi˚HidGíîicI¡îÁ˚
Ë/ (
usb_devi˚_öãrÁ˚s_°ru˘_t
),

90 
usb_devi˚_öãrÁ˚_li°_t
 
	gg_UsbDevi˚HidGíîicI¡îÁ˚Li°
[
USB_DEVICE_CONFIGURATION_COUNT
] = {

92 
USB_HID_GENERIC_INTERFACE_COUNT
,

93 
g_UsbDevi˚HidGíîicI¡îÁ˚s
,

97 
usb_devi˚_˛ass_°ru˘_t
 
	gg_UsbDevi˚HidGíîicC⁄fig
 = {

98 
g_UsbDevi˚HidGíîicI¡îÁ˚Li°
,

99 
kUSB_Devi˚CœssTy≥Hid
,

100 
USB_DEVICE_CONFIGURATION_COUNT
,

103 
	$USB_DMA_INIT_DATA_ALIGN
(
USB_DATA_ALIGN_SIZE
)

104 
uöt8_t
 
g_UsbDevi˚HidGíîicRï‹tDes¸ùt‹
[] = {

121 0x96U, 
	`USB_SHORT_GET_LOW
(
HS_HID_GENERIC_INTERRUPT_OUT_PACKET_SIZE
),

122 
	`USB_SHORT_GET_HIGH
(
HS_HID_GENERIC_INTERRUPT_OUT_PACKET_SIZE
),

125 
	}
};

127 
	$USB_DMA_INIT_DATA_ALIGN
(
USB_DATA_ALIGN_SIZE
)

128 
uöt8_t
 
g_UsbDevi˚Des¸ùt‹
[] = {

129 
USB_DESCRIPTOR_LENGTH_DEVICE
,

130 
USB_DESCRIPTOR_TYPE_DEVICE
,

131 
	`USB_SHORT_GET_LOW
(
USB_DEVICE_SPECIFIC_BCD_VERSION
),

132 
	`USB_SHORT_GET_HIGH
(
USB_DEVICE_SPECIFIC_BCD_VERSION
),

134 
USB_DEVICE_CLASS
,

135 
USB_DEVICE_SUBCLASS
,

136 
USB_DEVICE_PROTOCOL
,

137 
USB_CONTROL_MAX_PACKET_SIZE
,

141 
	`USB_SHORT_GET_LOW
(
USB_DEVICE_DEMO_BCD_VERSION
),

142 
	`USB_SHORT_GET_HIGH
(
USB_DEVICE_DEMO_BCD_VERSION
),

147 
USB_DEVICE_CONFIGURATION_COUNT
,

148 
	}
};

150 
	$USB_DMA_INIT_DATA_ALIGN
(
USB_DATA_ALIGN_SIZE
)

151 
uöt8_t
 
g_UsbDevi˚C⁄figuøti⁄Des¸ùt‹
[] = {

152 
USB_DESCRIPTOR_LENGTH_CONFIGURE
,

153 
USB_DESCRIPTOR_TYPE_CONFIGURE
,

154 
	`USB_SHORT_GET_LOW
(
USB_DESCRIPTOR_LENGTH_CONFIGURE
 + 
USB_DESCRIPTOR_LENGTH_INTERFACE
 + 
USB_DESCRIPTOR_LENGTH_HID
 +

155 
USB_DESCRIPTOR_LENGTH_ENDPOINT
 + USB_DESCRIPTOR_LENGTH_ENDPOINT),

156 
	`USB_SHORT_GET_HIGH
(
USB_DESCRIPTOR_LENGTH_CONFIGURE
 + 
USB_DESCRIPTOR_LENGTH_INTERFACE
 + 
USB_DESCRIPTOR_LENGTH_HID
 +

157 
USB_DESCRIPTOR_LENGTH_ENDPOINT
 +

158 
USB_DESCRIPTOR_LENGTH_ENDPOINT
),

159 
USB_HID_GENERIC_INTERFACE_COUNT
,

160 
USB_HID_GENERIC_CONFIGURE_INDEX
,

163 (
USB_DESCRIPTOR_CONFIGURE_ATTRIBUTE_D7_MASK
) |

164 (
USB_DEVICE_CONFIG_SELF_POWER
 << 
USB_DESCRIPTOR_CONFIGURE_ATTRIBUTE_SELF_POWERED_SHIFT
) |

165 (
USB_DEVICE_CONFIG_REMOTE_WAKEUP
 << 
USB_DESCRIPTOR_CONFIGURE_ATTRIBUTE_REMOTE_WAKEUP_SHIFT
),

172 
USB_DEVICE_MAX_POWER
,

178 
USB_DESCRIPTOR_LENGTH_INTERFACE
,

179 
USB_DESCRIPTOR_TYPE_INTERFACE
,

180 
USB_HID_GENERIC_INTERFACE_INDEX
,

183 
USB_HID_GENERIC_ENDPOINT_COUNT
,

185 
USB_HID_GENERIC_CLASS
,

186 
USB_HID_GENERIC_SUBCLASS
,

187 
USB_HID_GENERIC_PROTOCOL
,

190 
USB_DESCRIPTOR_LENGTH_HID
,

192 
USB_DESCRIPTOR_TYPE_HID
,

200 
USB_DESCRIPTOR_TYPE_HID_REPORT
,

201 
	`USB_SHORT_GET_LOW
(
USB_DESCRIPTOR_LENGTH_HID_GENERIC_REPORT
),

202 
	`USB_SHORT_GET_HIGH
(
USB_DESCRIPTOR_LENGTH_HID_GENERIC_REPORT
),

205 
USB_DESCRIPTOR_LENGTH_ENDPOINT
,

206 
USB_DESCRIPTOR_TYPE_ENDPOINT
,

207 
USB_HID_GENERIC_ENDPOINT_IN
 | (
USB_IN
 << 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT
),

210 
USB_ENDPOINT_INTERRUPT
,

211 
	`USB_SHORT_GET_LOW
(
FS_HID_GENERIC_INTERRUPT_IN_PACKET_SIZE
),

212 
	`USB_SHORT_GET_HIGH
(
FS_HID_GENERIC_INTERRUPT_IN_PACKET_SIZE
),

216 
HS_HID_GENERIC_INTERRUPT_IN_INTERVAL
,

218 
USB_DESCRIPTOR_LENGTH_ENDPOINT
,

219 
USB_DESCRIPTOR_TYPE_ENDPOINT
,

220 
USB_HID_GENERIC_ENDPOINT_OUT
 | (
USB_OUT
 << 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT
),

223 
USB_ENDPOINT_INTERRUPT
,

224 
	`USB_SHORT_GET_LOW
(
HS_HID_GENERIC_INTERRUPT_OUT_PACKET_SIZE
),

225 
	`USB_SHORT_GET_HIGH
(
HS_HID_GENERIC_INTERRUPT_OUT_PACKET_SIZE
),

229 
HS_HID_GENERIC_INTERRUPT_OUT_INTERVAL
,

230 
	}
};

232 #i‡(
deföed
(
USB_DEVICE_CONFIG_CV_TEST
) && (USB_DEVICE_CONFIG_CV_TEST > 0U))

233 
	$USB_DMA_INIT_DATA_ALIGN
(
USB_DATA_ALIGN_SIZE
)

234 
uöt8_t
 
g_UsbDevi˚QuÆifõrDes¸ùt‹
[] = {

235 
USB_DESCRIPTOR_LENGTH_DEVICE_QUALITIER
,

236 
USB_DESCRIPTOR_TYPE_DEVICE_QUALITIER
,

237 
	`USB_SHORT_GET_LOW
(
USB_DEVICE_SPECIFIC_BCD_VERSION
),

238 
	`USB_SHORT_GET_HIGH
(
USB_DEVICE_SPECIFIC_BCD_VERSION
),

240 
USB_DEVICE_CLASS
,

241 
USB_DEVICE_SUBCLASS
,

242 
USB_DEVICE_PROTOCOL
,

243 
USB_CONTROL_MAX_PACKET_SIZE
,

247 
	}
};

249 
	$USB_DMA_INIT_DATA_ALIGN
(
USB_DATA_ALIGN_SIZE
)

250 
uöt8_t
 
g_UsbDevi˚Såög0
[] = {

251 2U + 2U, 
USB_DESCRIPTOR_TYPE_STRING
, 0x09U, 0x04U,

252 
	}
};

254 
	$USB_DMA_INIT_DATA_ALIGN
(
USB_DATA_ALIGN_SIZE
)

255 
uöt8_t
 
g_UsbDevi˚Såög1
[] = {

256 2U + 2U * 7U, 
USB_DESCRIPTOR_TYPE_STRING
,

264 
	}
};

266 
	$USB_DMA_INIT_DATA_ALIGN
(
USB_DATA_ALIGN_SIZE
)

267 
uöt8_t
 
g_UsbDevi˚Såög2
[] = {

268 2U + 2U * 13U, 
USB_DESCRIPTOR_TYPE_STRING
,

282 
	}
};

284 
uöt8_t
 
	gg_UsbDevi˚Såög3
[] = {

285 2U + 2U * 3U, 
USB_DESCRIPTOR_TYPE_STRING
,

291 
uöt8_t
 
	gg_UsbDevi˚Såög4
[] = {

292 2U + 2U * 3U, 
USB_DESCRIPTOR_TYPE_STRING
,

298 
uöt32_t
 
	gg_UsbDevi˚SåögDes¸ùt‹Lígth
[
USB_DEVICE_STRING_COUNT
] = {

299 (
g_UsbDevi˚Såög0
), (
g_UsbDevi˚Såög1
), (
g_UsbDevi˚Såög2
), (
g_UsbDevi˚Såög3
), (
g_UsbDevi˚Såög4
)

302 
uöt8_t
 *
	gg_UsbDevi˚SåögDes¸ùt‹Aºay
[
USB_DEVICE_STRING_COUNT
] = {

303 
g_UsbDevi˚Såög0
, 
g_UsbDevi˚Såög1
, 
g_UsbDevi˚Såög2
, 
g_UsbDevi˚Såög3
, 
g_UsbDevi˚Såög4
,

306 
usb_œnguage_t
 
	gg_UsbDevi˚L™guage
[
USB_DEVICE_LANGUAGE_COUNT
] = {{

307 
g_UsbDevi˚SåögDes¸ùt‹Aºay
, 
g_UsbDevi˚SåögDes¸ùt‹Lígth
, (
uöt16_t
)0x0409U,

310 
usb_œnguage_li°_t
 
	gg_UsbDevi˚L™guageLi°
 = {

311 
g_UsbDevi˚Såög0
, (g_UsbDevi˚Såög0), 
g_UsbDevi˚L™guage
, 
USB_DEVICE_LANGUAGE_COUNT
,

319 
usb_°©us_t
 
	$USB_Devi˚GëDevi˚Des¸ùt‹
(
usb_devi˚_h™dÀ
 
h™dÀ
,

320 
usb_devi˚_gë_devi˚_des¸ùt‹_°ru˘_t
 *
devi˚Des¸ùt‹
)

322 
devi˚Des¸ùt‹
->
buf„r
 = 
g_UsbDevi˚Des¸ùt‹
;

323 
devi˚Des¸ùt‹
->
Àngth
 = 
USB_DESCRIPTOR_LENGTH_DEVICE
;

324  
kSètus_USB_Suc˚ss
;

325 
	}
}

326 #i‡(
deföed
(
USB_DEVICE_CONFIG_CV_TEST
) && (USB_DEVICE_CONFIG_CV_TEST > 0U))

328 
usb_°©us_t
 
	$USB_Devi˚GëDevi˚QuÆifõrDes¸ùt‹
(

329 
usb_devi˚_h™dÀ
 
h™dÀ
, 
usb_devi˚_gë_devi˚_quÆifõr_des¸ùt‹_°ru˘_t
 *
devi˚QuÆifõrDes¸ùt‹
)

331 
devi˚QuÆifõrDes¸ùt‹
->
buf„r
 = 
g_UsbDevi˚QuÆifõrDes¸ùt‹
;

332 
devi˚QuÆifõrDes¸ùt‹
->
Àngth
 = 
USB_DESCRIPTOR_LENGTH_DEVICE_QUALITIER
;

333  
kSètus_USB_Suc˚ss
;

334 
	}
}

337 
usb_°©us_t
 
	$USB_Devi˚GëC⁄figuøti⁄Des¸ùt‹
(

338 
usb_devi˚_h™dÀ
 
h™dÀ
, 
usb_devi˚_gë_c⁄figuøti⁄_des¸ùt‹_°ru˘_t
 *
c⁄figuøti⁄Des¸ùt‹
)

340 i‡(
USB_HID_GENERIC_CONFIGURE_INDEX
 > 
c⁄figuøti⁄Des¸ùt‹
->
c⁄figuøti⁄
)

342 
c⁄figuøti⁄Des¸ùt‹
->
buf„r
 = 
g_UsbDevi˚C⁄figuøti⁄Des¸ùt‹
;

343 
c⁄figuøti⁄Des¸ùt‹
->
Àngth
 = 
USB_DESCRIPTOR_LENGTH_CONFIGURATION_ALL
;

344  
kSètus_USB_Suc˚ss
;

346  
kSètus_USB_InvÆidReque°
;

347 
	}
}

350 
usb_°©us_t
 
	$USB_Devi˚GëSåögDes¸ùt‹
(
usb_devi˚_h™dÀ
 
h™dÀ
,

351 
usb_devi˚_gë_°rög_des¸ùt‹_°ru˘_t
 *
°rögDes¸ùt‹
)

353 i‡(
°rögDes¸ùt‹
->
°rögIndex
 == 0U)

355 
°rögDes¸ùt‹
->
buf„r
 = (
uöt8_t
 *)
g_UsbDevi˚L™guageLi°
.
œnguageSåög
;

356 
°rögDes¸ùt‹
->
Àngth
 = 
g_UsbDevi˚L™guageLi°
.
°rögLígth
;

360 
uöt8_t
 
œnguageId
 = 0U;

361 
uöt8_t
 
œnguageIndex
 = 
USB_DEVICE_STRING_COUNT
;

363 ; 
œnguageId
 < 
USB_DEVICE_LANGUAGE_COUNT
;ÜanguageId++)

365 i‡(
°rögDes¸ùt‹
->
œnguageId
 =
g_UsbDevi˚L™guageLi°
.
œnguageLi°
[languageId].languageId)

367 i‡(
°rögDes¸ùt‹
->
°rögIndex
 < 
USB_DEVICE_STRING_COUNT
)

369 
œnguageIndex
 = 
°rögDes¸ùt‹
->
°rögIndex
;

375 i‡(
USB_DEVICE_STRING_COUNT
 =
œnguageIndex
)

377  
kSètus_USB_InvÆidReque°
;

379 
°rögDes¸ùt‹
->
buf„r
 = (
uöt8_t
 *)
g_UsbDevi˚L™guageLi°
.
œnguageLi°
[
œnguageId
].
°rög
[
œnguageIndex
];

380 
°rögDes¸ùt‹
->
Àngth
 = 
g_UsbDevi˚L™guageLi°
.
œnguageLi°
[
œnguageId
].Àngth[
œnguageIndex
];

382  
kSètus_USB_Suc˚ss
;

383 
	}
}

386 
usb_°©us_t
 
	$USB_Devi˚GëHidDes¸ùt‹
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
usb_devi˚_gë_hid_des¸ùt‹_°ru˘_t
 *
hidDes¸ùt‹
)

388  
kSètus_USB_InvÆidReque°
;

389 
	}
}

392 
usb_°©us_t
 
	$USB_Devi˚GëHidRï‹tDes¸ùt‹
(
usb_devi˚_h™dÀ
 
h™dÀ
,

393 
usb_devi˚_gë_hid_ªp‹t_des¸ùt‹_°ru˘_t
 *
hidRï‹tDes¸ùt‹
)

395 i‡(
USB_HID_GENERIC_INTERFACE_INDEX
 =
hidRï‹tDes¸ùt‹
->
öãrÁ˚Numbî
)

397 
hidRï‹tDes¸ùt‹
->
buf„r
 = 
g_UsbDevi˚HidGíîicRï‹tDes¸ùt‹
;

398 
hidRï‹tDes¸ùt‹
->
Àngth
 = 
USB_DESCRIPTOR_LENGTH_HID_GENERIC_REPORT
;

402  
kSètus_USB_InvÆidReque°
;

404  
kSètus_USB_Suc˚ss
;

405 
	}
}

408 
usb_°©us_t
 
	$USB_Devi˚GëHidPhysiˇlDes¸ùt‹
(
usb_devi˚_h™dÀ
 
h™dÀ
,

409 
usb_devi˚_gë_hid_physiˇl_des¸ùt‹_°ru˘_t
 *
hidPhysiˇlDes¸ùt‹
)

411  
kSètus_USB_InvÆidReque°
;

412 
	}
}

420 
usb_°©us_t
 
	$USB_Devi˚SëS≥ed
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
uöt8_t
 
•ìd
)

422 
usb_des¸ùt‹_uni⁄_t
 *
des¸ùt‹Hód
;

423 
usb_des¸ùt‹_uni⁄_t
 *
des¸ùt‹Taû
;

425 
des¸ùt‹Hód
 = (
usb_des¸ùt‹_uni⁄_t
 *)&
g_UsbDevi˚C⁄figuøti⁄Des¸ùt‹
[0];

426 
des¸ùt‹Taû
 =

427 (
usb_des¸ùt‹_uni⁄_t
 *)(&
g_UsbDevi˚C⁄figuøti⁄Des¸ùt‹
[
USB_DESCRIPTOR_LENGTH_CONFIGURATION_ALL
 - 1U]);

429 
des¸ùt‹Hód
 < 
des¸ùt‹Taû
)

431 i‡(
des¸ùt‹Hód
->
comm⁄
.
bDes¸ùt‹Ty≥
 =
USB_DESCRIPTOR_TYPE_ENDPOINT
)

433 i‡(
USB_SPEED_HIGH
 =
•ìd
)

435 i‡(((
des¸ùt‹Hód
->
ídpoöt
.
bEndpoötAddªss
 & 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_IN
) ==

436 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_IN
) &&

437 (
USB_HID_GENERIC_ENDPOINT_IN
 ==

438 (
des¸ùt‹Hód
->
ídpoöt
.
bEndpoötAddªss
 & 
USB_ENDPOINT_NUMBER_MASK
)))

440 
des¸ùt‹Hód
->
ídpoöt
.
bI¡îvÆ
 = 
HS_HID_GENERIC_INTERRUPT_IN_INTERVAL
;

441 
	`USB_SHORT_TO_LITTLE_ENDIAN_ADDRESS
(
HS_HID_GENERIC_INTERRUPT_IN_PACKET_SIZE
,

442 
des¸ùt‹Hód
->
ídpoöt
.
wMaxPackëSize
);

444 i‡(((
des¸ùt‹Hód
->
ídpoöt
.
bEndpoötAddªss
 & 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_OUT
) ==

445 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_OUT
) &&

446 (
USB_HID_GENERIC_ENDPOINT_OUT
 ==

447 (
des¸ùt‹Hód
->
ídpoöt
.
bEndpoötAddªss
 & 
USB_ENDPOINT_NUMBER_MASK
)))

449 
des¸ùt‹Hód
->
ídpoöt
.
bI¡îvÆ
 = 
HS_HID_GENERIC_INTERRUPT_OUT_INTERVAL
;

450 
	`USB_SHORT_TO_LITTLE_ENDIAN_ADDRESS
(
HS_HID_GENERIC_INTERRUPT_OUT_PACKET_SIZE
,

451 
des¸ùt‹Hód
->
ídpoöt
.
wMaxPackëSize
);

459 i‡(((
des¸ùt‹Hód
->
ídpoöt
.
bEndpoötAddªss
 & 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_IN
) ==

460 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_IN
) &&

461 (
USB_HID_GENERIC_ENDPOINT_IN
 ==

462 (
des¸ùt‹Hód
->
ídpoöt
.
bEndpoötAddªss
 & 
USB_ENDPOINT_NUMBER_MASK
)))

464 
des¸ùt‹Hód
->
ídpoöt
.
bI¡îvÆ
 = 
FS_HID_GENERIC_INTERRUPT_IN_INTERVAL
;

465 
	`USB_SHORT_TO_LITTLE_ENDIAN_ADDRESS
(
FS_HID_GENERIC_INTERRUPT_IN_PACKET_SIZE
,

466 
des¸ùt‹Hód
->
ídpoöt
.
wMaxPackëSize
);

468 i‡(((
des¸ùt‹Hód
->
ídpoöt
.
bEndpoötAddªss
 & 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_OUT
) ==

469 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_OUT
) &&

470 (
USB_HID_GENERIC_ENDPOINT_OUT
 ==

471 (
des¸ùt‹Hód
->
ídpoöt
.
bEndpoötAddªss
 & 
USB_ENDPOINT_NUMBER_MASK
)))

473 
des¸ùt‹Hód
->
ídpoöt
.
bI¡îvÆ
 = 
FS_HID_GENERIC_INTERRUPT_OUT_INTERVAL
;

474 
	`USB_SHORT_TO_LITTLE_ENDIAN_ADDRESS
(
FS_HID_GENERIC_INTERRUPT_OUT_PACKET_SIZE
,

475 
des¸ùt‹Hód
->
ídpoöt
.
wMaxPackëSize
);

482 
des¸ùt‹Hód
 = (
usb_des¸ùt‹_uni⁄_t
 *)((
uöt8_t
 *)des¸ùt‹Hód + des¸ùt‹Hód->
comm⁄
.
bLígth
);

485 
i
 = 0U; i < 
USB_HID_GENERIC_ENDPOINT_COUNT
; i++)

487 i‡(
USB_SPEED_HIGH
 =
•ìd
)

489 i‡(
g_UsbDevi˚HidGíîicEndpoöts
[
i
].
ídpoötAddªss
 & 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_IN
)

491 
g_UsbDevi˚HidGíîicEndpoöts
[
i
].
maxPackëSize
 = 
HS_HID_GENERIC_INTERRUPT_IN_PACKET_SIZE
;

495 
g_UsbDevi˚HidGíîicEndpoöts
[
i
].
maxPackëSize
 = 
HS_HID_GENERIC_INTERRUPT_OUT_PACKET_SIZE
;

500 i‡(
g_UsbDevi˚HidGíîicEndpoöts
[
i
].
ídpoötAddªss
 & 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_IN
)

502 
g_UsbDevi˚HidGíîicEndpoöts
[
i
].
maxPackëSize
 = 
FS_HID_GENERIC_INTERRUPT_IN_PACKET_SIZE
;

506 
g_UsbDevi˚HidGíîicEndpoöts
[
i
].
maxPackëSize
 = 
FS_HID_GENERIC_INTERRUPT_OUT_PACKET_SIZE
;

511  
kSètus_USB_Suc˚ss
;

512 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbDevice\usb_device_descriptor.h

35 #i‚de‡
__USB_DEVICE_DESCRIPTOR_H__


36 
	#__USB_DEVICE_DESCRIPTOR_H__


	)

42 
	#USB_DEVICE_SPECIFIC_BCD_VERSION
 (0x0200U)

	)

43 
	#USB_DEVICE_DEMO_BCD_VERSION
 (0x0101U)

	)

45 
	#USB_DEVICE_CLASS
 (0x00U)

	)

46 
	#USB_DEVICE_SUBCLASS
 (0x00U)

	)

47 
	#USB_DEVICE_PROTOCOL
 (0x00U)

	)

49 
	#USB_DEVICE_MAX_POWER
 (0x32U)

	)

51 
	#USB_DESCRIPTOR_LENGTH_CONFIGURATION_ALL
 ((
g_UsbDevi˚C⁄figuøti⁄Des¸ùt‹
))

	)

52 
	#USB_DESCRIPTOR_LENGTH_HID_GENERIC_REPORT
 ((
g_UsbDevi˚HidGíîicRï‹tDes¸ùt‹
))

	)

53 
	#USB_DESCRIPTOR_LENGTH_HID
 (9U)

	)

54 
	#USB_DESCRIPTOR_LENGTH_STRING0
 ((
g_UsbDevi˚Såög0
))

	)

55 
	#USB_DESCRIPTOR_LENGTH_STRING1
 ((
g_UsbDevi˚Såög1
))

	)

56 
	#USB_DESCRIPTOR_LENGTH_STRING2
 ((
g_UsbDevi˚Såög2
))

	)

58 
	#USB_DEVICE_CONFIGURATION_COUNT
 (1U)

	)

59 
	#USB_DEVICE_STRING_COUNT
 (5U)

	)

60 
	#USB_DEVICE_LANGUAGE_COUNT
 (1U)

	)

62 
	#USB_HID_GENERIC_CONFIGURE_INDEX
 (1U)

	)

63 
	#USB_HID_GENERIC_INTERFACE_COUNT
 (1U)

	)

65 
	#USB_HID_GENERIC_IN_BUFFER_LENGTH
 (16U)

	)

66 
	#USB_HID_GENERIC_OUT_BUFFER_LENGTH
 (1024U)

	)

67 
	#USB_HID_GENERIC_ENDPOINT_COUNT
 (2U)

	)

68 
	#USB_HID_GENERIC_INTERFACE_INDEX
 (0U)

	)

69 
	#USB_HID_GENERIC_ENDPOINT_IN
 (1U)

	)

70 
	#USB_HID_GENERIC_ENDPOINT_OUT
 (2U)

	)

72 
	#USB_HID_GENERIC_CLASS
 (0x03U)

	)

73 
	#USB_HID_GENERIC_SUBCLASS
 (0x00U)

	)

74 
	#USB_HID_GENERIC_PROTOCOL
 (0x00U)

	)

76 
	#HS_HID_GENERIC_INTERRUPT_OUT_PACKET_SIZE
 (1024U)

	)

77 
	#FS_HID_GENERIC_INTERRUPT_OUT_PACKET_SIZE
 (63U)

	)

78 
	#HS_HID_GENERIC_INTERRUPT_OUT_INTERVAL
 (0x01UË

	)

79 
	#FS_HID_GENERIC_INTERRUPT_OUT_INTERVAL
 (0x01U)

	)

81 
	#HS_HID_GENERIC_INTERRUPT_IN_PACKET_SIZE
 (16U)

	)

82 
	#FS_HID_GENERIC_INTERRUPT_IN_PACKET_SIZE
 (16U)

	)

83 
	#HS_HID_GENERIC_INTERRUPT_IN_INTERVAL
 (0x01UË

	)

84 
	#FS_HID_GENERIC_INTERRUPT_IN_INTERVAL
 (0x01U)

	)

91 
usb_°©us_t
 
USB_Devi˚SëS≥ed
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
uöt8_t
 
•ìd
);

94 
usb_°©us_t
 
USB_Devi˚GëDevi˚Des¸ùt‹
(
usb_devi˚_h™dÀ
 
h™dÀ
,

95 
usb_devi˚_gë_devi˚_des¸ùt‹_°ru˘_t
 *
devi˚Des¸ùt‹
);

96 #i‡(
deföed
(
USB_DEVICE_CONFIG_CV_TEST
) && (USB_DEVICE_CONFIG_CV_TEST > 0U))

98 
usb_°©us_t
 
USB_Devi˚GëDevi˚QuÆifõrDes¸ùt‹
(

99 
usb_devi˚_h™dÀ
 
h™dÀ
, 
usb_devi˚_gë_devi˚_quÆifõr_des¸ùt‹_°ru˘_t
 *
devi˚QuÆifõrDes¸ùt‹
);

102 
usb_°©us_t
 
USB_Devi˚GëC⁄figuøti⁄Des¸ùt‹
(

103 
usb_devi˚_h™dÀ
 
h™dÀ
, 
usb_devi˚_gë_c⁄figuøti⁄_des¸ùt‹_°ru˘_t
 *
c⁄figuøti⁄Des¸ùt‹
);

106 
usb_°©us_t
 
USB_Devi˚GëSåögDes¸ùt‹
(
usb_devi˚_h™dÀ
 
h™dÀ
,

107 
usb_devi˚_gë_°rög_des¸ùt‹_°ru˘_t
 *
°rögDes¸ùt‹
);

110 
usb_°©us_t
 
USB_Devi˚GëHidDes¸ùt‹
(
usb_devi˚_h™dÀ
 
h™dÀ
,

111 
usb_devi˚_gë_hid_des¸ùt‹_°ru˘_t
 *
hidDes¸ùt‹
);

114 
usb_°©us_t
 
USB_Devi˚GëHidRï‹tDes¸ùt‹
(
usb_devi˚_h™dÀ
 
h™dÀ
,

115 
usb_devi˚_gë_hid_ªp‹t_des¸ùt‹_°ru˘_t
 *
hidRï‹tDes¸ùt‹
);

118 
usb_°©us_t
 
USB_Devi˚GëHidPhysiˇlDes¸ùt‹
(
usb_devi˚_h™dÀ
 
h™dÀ
,

119 
usb_devi˚_gë_hid_physiˇl_des¸ùt‹_°ru˘_t
 *
hidPhysiˇlDes¸ùt‹
);

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbDevice\usb_device_hid.c

35 
	~"usb_devi˚_c⁄fig.h
"

36 
	~"usb.h
"

37 
	~"usb_devi˚.h
"

39 
	~"usb_devi˚_˛ass.h
"

41 #i‡((
deföed
(
USB_DEVICE_CONFIG_HID
)) && (USB_DEVICE_CONFIG_HID > 0U))

42 
	~"usb_devi˚_hid.h
"

52 
usb_°©us_t
 
USB_Devi˚HidAŒoˇãH™dÀ
(
usb_devi˚_hid_°ru˘_t
 **
h™dÀ
);

53 
usb_°©us_t
 
USB_Devi˚HidFªeH™dÀ
(
usb_devi˚_hid_°ru˘_t
 *
h™dÀ
);

54 
usb_°©us_t
 
USB_Devi˚HidI¡îru±In
(
usb_devi˚_h™dÀ
 
h™dÀ
,

55 
usb_devi˚_ídpoöt_ˇŒback_mesßge_°ru˘_t
 *
mesßge
,

56 *
ˇŒbackP¨am
);

57 
usb_°©us_t
 
USB_Devi˚HidI¡îru±Out
(
usb_devi˚_h™dÀ
 
h™dÀ
,

58 
usb_devi˚_ídpoöt_ˇŒback_mesßge_°ru˘_t
 *
mesßge
,

59 *
ˇŒbackP¨am
);

60 
usb_°©us_t
 
USB_Devi˚HidEndpoötsInô
(
usb_devi˚_hid_°ru˘_t
 *
hidH™dÀ
);

61 
usb_°©us_t
 
USB_Devi˚HidEndpoötsDeöô
(
usb_devi˚_hid_°ru˘_t
 *
hidH™dÀ
);

67 
USB_GLOBAL
 
	$USB_RAM_ADDRESS_ALIGNMENT
(
USB_DATA_ALIGN_SIZE
Ë
usb_devi˚_hid_°ru˘_t


68 
s_UsbDevi˚HidH™dÀ
[
USB_DEVICE_CONFIG_HID
];

84 
usb_°©us_t
 
	$USB_Devi˚HidAŒoˇãH™dÀ
(
usb_devi˚_hid_°ru˘_t
 **
h™dÀ
)

86 
öt32_t
 
cou¡
;

87 
cou¡
 = 0U; cou¡ < 
USB_DEVICE_CONFIG_HID
; count++)

89 i‡(
NULL
 =
s_UsbDevi˚HidH™dÀ
[
cou¡
].
h™dÀ
)

91 *
h™dÀ
 = &
s_UsbDevi˚HidH™dÀ
[
cou¡
];

92  
kSètus_USB_Suc˚ss
;

96  
kSètus_USB_Busy
;

97 
	}
}

108 
usb_°©us_t
 
	$USB_Devi˚HidFªeH™dÀ
(
usb_devi˚_hid_°ru˘_t
 *
h™dÀ
)

110 
h™dÀ
->h™dÀ = 
NULL
;

111 
h™dÀ
->
c⁄figSåu˘
 = (
usb_devi˚_˛ass_c⁄fig_°ru˘_t
 *)
NULL
;

112 
h™dÀ
->
c⁄figuøti⁄
 = 0U;

113 
h™dÀ
->
Æã∫©e
 = 0U;

114  
kSètus_USB_Suc˚ss
;

115 
	}
}

130 
usb_°©us_t
 
	$USB_Devi˚HidI¡îru±In
(
usb_devi˚_h™dÀ
 
h™dÀ
,

131 
usb_devi˚_ídpoöt_ˇŒback_mesßge_°ru˘_t
 *
mesßge
,

132 *
ˇŒbackP¨am
)

134 
usb_devi˚_hid_°ru˘_t
 *
hidH™dÀ
;

135 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

138 
hidH™dÀ
 = (
usb_devi˚_hid_°ru˘_t
 *)
ˇŒbackP¨am
;

140 i‡(!
hidH™dÀ
)

142  
kSètus_USB_InvÆidH™dÀ
;

144 
hidH™dÀ
->
öãºu±InPùeBusy
 = 0U;

145 i‡((
NULL
 !
hidH™dÀ
->
c⁄figSåu˘
Ë&& (hidH™dÀ->c⁄figSåu˘->
˛assCÆlback
))

148 
îr‹
 =

149 
hidH™dÀ
->
c⁄figSåu˘
->
	`˛assCÆlback
((
˛ass_h™dÀ_t
)hidH™dÀ, 
kUSB_Devi˚HidEvítSídRe•⁄£
, 
mesßge
);

152  
îr‹
;

153 
	}
}

168 
usb_°©us_t
 
	$USB_Devi˚HidI¡îru±Out
(
usb_devi˚_h™dÀ
 
h™dÀ
,

169 
usb_devi˚_ídpoöt_ˇŒback_mesßge_°ru˘_t
 *
mesßge
,

170 *
ˇŒbackP¨am
)

172 
usb_devi˚_hid_°ru˘_t
 *
hidH™dÀ
;

173 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

176 
hidH™dÀ
 = (
usb_devi˚_hid_°ru˘_t
 *)
ˇŒbackP¨am
;

178 i‡(!
hidH™dÀ
)

180  
kSètus_USB_InvÆidH™dÀ
;

182 
hidH™dÀ
->
öãºu±OutPùeBusy
 = 0U;

183 i‡((
NULL
 !
hidH™dÀ
->
c⁄figSåu˘
Ë&& (hidH™dÀ->c⁄figSåu˘->
˛assCÆlback
))

186 
îr‹
 =

187 
hidH™dÀ
->
c⁄figSåu˘
->
	`˛assCÆlback
((
˛ass_h™dÀ_t
)hidH™dÀ, 
kUSB_Devi˚HidEvítRecvRe•⁄£
, 
mesßge
);

190  
îr‹
;

191 
	}
}

203 
usb_°©us_t
 
	$USB_Devi˚HidEndpoötsInô
(
usb_devi˚_hid_°ru˘_t
 *
hidH™dÀ
)

205 
usb_devi˚_öãrÁ˚_li°_t
 *
öãrÁ˚Li°
;

206 
usb_devi˚_öãrÁ˚_°ru˘_t
 *
öãrÁ˚
 = (usb_devi˚_öãrÁ˚_°ru˘_à*)
NULL
;

207 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

210 i‡(!
hidH™dÀ
->
c⁄figuøti⁄
)

212  
îr‹
;

215 i‡(
hidH™dÀ
->
c⁄figuøti⁄
 > hidH™dÀ->
c⁄figSåu˘
->
˛assInfom©i⁄
->
c⁄figuøti⁄s
)

217  
îr‹
;

221 i‡(
NULL
 =
hidH™dÀ
->
c⁄figSåu˘
->
˛assInfom©i⁄
->
öãrÁ˚Li°
)

223  
îr‹
;

225 
öãrÁ˚Li°
 = &
hidH™dÀ
->
c⁄figSåu˘
->
˛assInfom©i⁄
->öãrÁ˚Li°[hidH™dÀ->
c⁄figuøti⁄
 - 1U];

228 
cou¡
 = 0U; cou¡ < 
öãrÁ˚Li°
->count; count++)

230 i‡(
USB_DEVICE_CONFIG_HID_CLASS_CODE
 =
öãrÁ˚Li°
->
öãrÁ˚s
[
cou¡
].
˛assCode
)

232 
ödex
 = 0U; index < 
öãrÁ˚Li°
->
öãrÁ˚s
[
cou¡
].count; index++)

234 i‡(
öãrÁ˚Li°
->
öãrÁ˚s
[
cou¡
].
öãrÁ˚
[
ödex
].
Æã∫©eSëtög
 =
hidH™dÀ
->
Æã∫©e
)

236 
öãrÁ˚
 = &
öãrÁ˚Li°
->
öãrÁ˚s
[
cou¡
].öãrÁ˚[
ödex
];

240 
hidH™dÀ
->
öãrÁ˚Numbî
 = 
öãrÁ˚Li°
->
öãrÁ˚s
[
cou¡
].interfaceNumber;

244 i‡(!
öãrÁ˚
)

247  
îr‹
;

251 
hidH™dÀ
->
öãrÁ˚H™dÀ
 = 
öãrÁ˚
;

254 
cou¡
 = 0U; cou¡ < 
öãrÁ˚
->
ídpoötLi°
.count; count++)

256 
usb_devi˚_ídpoöt_öô_°ru˘_t
 
ïInôSåu˘
;

257 
usb_devi˚_ídpoöt_ˇŒback_°ru˘_t
 
ïCÆlback
;

258 
ïInôSåu˘
.
z…
 = 0U;

259 
ïInôSåu˘
.
ídpoötAddªss
 = 
öãrÁ˚
->
ídpoötLi°
.
ídpoöt
[
cou¡
].endpointAddress;

260 
ïInôSåu˘
.
maxPackëSize
 = 
öãrÁ˚
->
ídpoötLi°
.
ídpoöt
[
cou¡
].maxPacketSize;

261 
ïInôSåu˘
.
å™s„rTy≥
 = 
öãrÁ˚
->
ídpoötLi°
.
ídpoöt
[
cou¡
].transferType;

263 i‡(
USB_IN
 =((
ïInôSåu˘
.
ídpoötAddªss
 & 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK
) >>

264 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT
))

266 
ïCÆlback
.
ˇŒbackFn
 = 
USB_Devi˚HidI¡îru±In
;

270 
ïCÆlback
.
ˇŒbackFn
 = 
USB_Devi˚HidI¡îru±Out
;

272 
ïCÆlback
.
ˇŒbackP¨am
 = 
hidH™dÀ
;

274 
îr‹
 = 
	`USB_Devi˚InôEndpoöt
(
hidH™dÀ
->
h™dÀ
, &
ïInôSåu˘
, &
ïCÆlback
);

276  
îr‹
;

277 
	}
}

289 
usb_°©us_t
 
	$USB_Devi˚HidEndpoötsDeöô
(
usb_devi˚_hid_°ru˘_t
 *
hidH™dÀ
)

291 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

293 i‡(!
hidH™dÀ
->
öãrÁ˚H™dÀ
)

295  
îr‹
;

298 
cou¡
 = 0U; cou¡ < 
hidH™dÀ
->
öãrÁ˚H™dÀ
->
ídpoötLi°
.count; count++)

300 
îr‹
 = 
	`USB_Devi˚DeöôEndpoöt
(
hidH™dÀ
->
h™dÀ
,

301 
hidH™dÀ
->
öãrÁ˚H™dÀ
->
ídpoötLi°
.
ídpoöt
[
cou¡
].
ídpoötAddªss
);

303 
hidH™dÀ
->
öãrÁ˚H™dÀ
 = 
NULL
;

304  
îr‹
;

305 
	}
}

321 
usb_°©us_t
 
	$USB_Devi˚HidEvít
(*
h™dÀ
, 
uöt32_t
 
evít
, *
∑øm
)

323 
usb_devi˚_hid_°ru˘_t
 *
hidH™dÀ
;

324 
usb_devi˚_hid_ªp‹t_°ru˘_t
 
ªp‹t
;

325 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

326 
uöt16_t
 
öãrÁ˚A…î«ã
;

327 
uöt8_t
 *
ãmp8
;

328 
uöt8_t
 
Æã∫©e
;

330 i‡((!
∑øm
Ë|| (!
h™dÀ
))

332  
kSètus_USB_InvÆidH™dÀ
;

336 
hidH™dÀ
 = (
usb_devi˚_hid_°ru˘_t
 *)
h™dÀ
;

338 
evít
)

340 
kUSB_Devi˚CœssEvítDevi˚Re£t
:

342 
hidH™dÀ
->
c⁄figuøti⁄
 = 0U;

343 
hidH™dÀ
->
öãºu±InPùeBusy
 = 0U;

344 
hidH™dÀ
->
öãºu±OutPùeBusy
 = 0U;

345 
hidH™dÀ
->
öãrÁ˚H™dÀ
 = 
NULL
;

347 
kUSB_Devi˚CœssEvítSëC⁄figuøti⁄
:

349 
ãmp8
 = ((
uöt8_t
 *)
∑øm
);

350 i‡(!
hidH™dÀ
->
c⁄figSåu˘
)

354 i‡(*
ãmp8
 =
hidH™dÀ
->
c⁄figuøti⁄
)

360 i‡(
hidH™dÀ
->
c⁄figuøti⁄
)

362 
îr‹
 = 
	`USB_Devi˚HidEndpoötsDeöô
(
hidH™dÀ
);

365 
hidH™dÀ
->
c⁄figuøti⁄
 = *
ãmp8
;

367 
hidH™dÀ
->
Æã∫©e
 = 0U;

370 
îr‹
 = 
	`USB_Devi˚HidEndpoötsInô
(
hidH™dÀ
);

372 
kUSB_Devi˚CœssEvítSëI¡îÁ˚
:

373 i‡(!
hidH™dÀ
->
c⁄figSåu˘
)

378 
öãrÁ˚A…î«ã
 = *((
uöt16_t
 *)
∑øm
);

380 
Æã∫©e
 = (
uöt8_t
)(
öãrÁ˚A…î«ã
 & 0xFFU);

383 i‡(
hidH™dÀ
->
öãrÁ˚Numbî
 !((
uöt8_t
)(
öãrÁ˚A…î«ã
 >> 8U)))

388 i‡(
Æã∫©e
 =
hidH™dÀ
->alternate)

393 
îr‹
 = 
	`USB_Devi˚HidEndpoötsDeöô
(
hidH™dÀ
);

394 
hidH™dÀ
->
Æã∫©e
 =álternate;

396 
îr‹
 = 
	`USB_Devi˚HidEndpoötsInô
(
hidH™dÀ
);

398 
kUSB_Devi˚CœssEvítSëEndpoötHÆt
:

399 i‡((!
hidH™dÀ
->
c⁄figSåu˘
Ë|| (!hidH™dÀ->
öãrÁ˚H™dÀ
))

404 
ãmp8
 = ((
uöt8_t
 *)
∑øm
);

405 
cou¡
 = 0U; cou¡ < 
hidH™dÀ
->
öãrÁ˚H™dÀ
->
ídpoötLi°
.count; count++)

407 i‡(*
ãmp8
 =
hidH™dÀ
->
öãrÁ˚H™dÀ
->
ídpoötLi°
.
ídpoöt
[
cou¡
].
ídpoötAddªss
)

410 
îr‹
 = 
	`USB_Devi˚SèŒEndpoöt
(
hidH™dÀ
->
h™dÀ
, *
ãmp8
);

414 
kUSB_Devi˚CœssEvítCÀ¨EndpoötHÆt
:

415 i‡((!
hidH™dÀ
->
c⁄figSåu˘
Ë|| (!hidH™dÀ->
öãrÁ˚H™dÀ
))

420 
ãmp8
 = ((
uöt8_t
 *)
∑øm
);

421 
cou¡
 = 0U; cou¡ < 
hidH™dÀ
->
öãrÁ˚H™dÀ
->
ídpoötLi°
.count; count++)

423 i‡(*
ãmp8
 =
hidH™dÀ
->
öãrÁ˚H™dÀ
->
ídpoötLi°
.
ídpoöt
[
cou¡
].
ídpoötAddªss
)

426 
îr‹
 = 
	`USB_Devi˚Un°ÆlEndpoöt
(
hidH™dÀ
->
h™dÀ
, *
ãmp8
);

430 
kUSB_Devi˚CœssEvítCœssReque°
:

431 i‡(
∑øm
)

434 
usb_devi˚_c⁄åﬁ_ªque°_°ru˘_t
 *
c⁄åﬁReque°
 = (usb_devi˚_c⁄åﬁ_ªque°_°ru˘_à*)
∑øm
;

436 i‡((
c⁄åﬁReque°
->
£tup
->
bmReque°Ty≥
 & 
USB_REQUEST_TYPE_RECIPIENT_MASK
) !=

437 
USB_REQUEST_TYPE_RECIPIENT_INTERFACE
)

442 i‡((
c⁄åﬁReque°
->
£tup
->
wIndex
 & 0xFFUË!
hidH™dÀ
->
öãrÁ˚Numbî
)

447 
c⁄åﬁReque°
->
£tup
->
bReque°
)

449 
USB_DEVICE_HID_REQUEST_GET_REPORT
:

451 
ªp‹t
.
ªp‹tTy≥
 = (
c⁄åﬁReque°
->
£tup
->
wVÆue
 & 0xFF00U) >> 0x08U;

452 
ªp‹t
.
ªp‹tId
 = (
c⁄åﬁReque°
->
£tup
->
wVÆue
 & 0x00FFU);

453 
îr‹
 = 
hidH™dÀ
->
c⁄figSåu˘
->
	`˛assCÆlback
((
˛ass_h™dÀ_t
)hidHandle,

454 
kUSB_Devi˚HidEvítGëRï‹t
, &
ªp‹t
);

455 
c⁄åﬁReque°
->
buf„r
 = 
ªp‹t
.
ªp‹tBuf„r
;

456 
c⁄åﬁReque°
->
Àngth
 = 
ªp‹t
.
ªp‹tLígth
;

458 
USB_DEVICE_HID_REQUEST_GET_IDLE
:

460 
îr‹
 = 
hidH™dÀ
->
c⁄figSåu˘
->
	`˛assCÆlback
(

461 (
˛ass_h™dÀ_t
)
hidH™dÀ
, 
kUSB_Devi˚HidEvítGëIdÀ
, &hidH™dÀ->
idÀR©e
);

462 
c⁄åﬁReque°
->
buf„r
 = &
hidH™dÀ
->
idÀR©e
;

464 
USB_DEVICE_HID_REQUEST_GET_PROTOCOL
:

466 
îr‹
 = 
hidH™dÀ
->
c⁄figSåu˘
->
	`˛assCÆlback
(

467 (
˛ass_h™dÀ_t
)
hidH™dÀ
, 
kUSB_Devi˚HidEvítGëIdÀ
, &hidH™dÀ->
¥Ÿocﬁ
);

468 
c⁄åﬁReque°
->
buf„r
 = &
hidH™dÀ
->
¥Ÿocﬁ
;

470 
USB_DEVICE_HID_REQUEST_SET_REPORT
:

472 
ªp‹t
.
ªp‹tTy≥
 = (
c⁄åﬁReque°
->
£tup
->
wVÆue
 & 0xFF00U) >> 0x08U;

473 
ªp‹t
.
ªp‹tId
 = (
c⁄åﬁReque°
->
£tup
->
wVÆue
 & 0x00FFU);

474 i‡(
c⁄åﬁReque°
->
isSëup
)

476 
ªp‹t
.
ªp‹tLígth
 = 
c⁄åﬁReque°
->
Àngth
;

477 
îr‹
 = 
hidH™dÀ
->
c⁄figSåu˘
->
	`˛assCÆlback
(

478 (
˛ass_h™dÀ_t
)
hidH™dÀ
, 
kUSB_Devi˚HidEvítReque°Rï‹tBuf„r
, &
ªp‹t
);

479 
c⁄åﬁReque°
->
buf„r
 = 
ªp‹t
.
ªp‹tBuf„r
;

480 
c⁄åﬁReque°
->
Àngth
 = 
ªp‹t
.
ªp‹tLígth
;

484 
ªp‹t
.
ªp‹tBuf„r
 = 
c⁄åﬁReque°
->
buf„r
;

485 
ªp‹t
.
ªp‹tLígth
 = 
c⁄åﬁReque°
->
Àngth
;

486 
îr‹
 = 
hidH™dÀ
->
c⁄figSåu˘
->
	`˛assCÆlback
((
˛ass_h™dÀ_t
)hidHandle,

487 
kUSB_Devi˚HidEvítSëRï‹t
, &
ªp‹t
);

490 
USB_DEVICE_HID_REQUEST_SET_IDLE
:

493 
hidH™dÀ
->
idÀR©e
 = (
c⁄åﬁReque°
->
£tup
->
wVÆue
 & 0xFF00U) >> 0x08U;

494 
îr‹
 = 
hidH™dÀ
->
c⁄figSåu˘
->
	`˛assCÆlback
(

495 (
˛ass_h™dÀ_t
)
hidH™dÀ
, 
kUSB_Devi˚HidEvítSëIdÀ
, &hidH™dÀ->
idÀR©e
);

498 
USB_DEVICE_HID_REQUEST_SET_PROTOCOL
:

501 
hidH™dÀ
->
¥Ÿocﬁ
 = (
c⁄åﬁReque°
->
£tup
->
wVÆue
 & 0x00FFU);

502 
îr‹
 = 
hidH™dÀ
->
c⁄figSåu˘
->
	`˛assCÆlback
(

503 (
˛ass_h™dÀ_t
)
hidH™dÀ
, 
kUSB_Devi˚HidEvítSëPrŸocﬁ
, &hidH™dÀ->
¥Ÿocﬁ
);

507 
îr‹
 = 
kSètus_USB_InvÆidReque°
;

515  
îr‹
;

516 
	}
}

529 
usb_°©us_t
 
	$USB_Devi˚HidInô
(
uöt8_t
 
c⁄åﬁÀrId
, 
usb_devi˚_˛ass_c⁄fig_°ru˘_t
 *
c⁄fig
, 
˛ass_h™dÀ_t
 *
h™dÀ
)

531 
usb_devi˚_hid_°ru˘_t
 *
hidH™dÀ
;

532 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

535 
îr‹
 = 
	`USB_Devi˚HidAŒoˇãH™dÀ
(&
hidH™dÀ
);

537 i‡(
kSètus_USB_Suc˚ss
 !
îr‹
)

539  
îr‹
;

543 
îr‹
 = 
	`USB_Devi˚CœssGëDevi˚H™dÀ
(
c⁄åﬁÀrId
, &
hidH™dÀ
->
h™dÀ
);

545 i‡(
kSètus_USB_Suc˚ss
 !
îr‹
)

547  
îr‹
;

550 i‡(!
hidH™dÀ
->
h™dÀ
)

552  
kSètus_USB_InvÆidH™dÀ
;

555 
hidH™dÀ
->
c⁄figSåu˘
 = 
c⁄fig
;

557 
hidH™dÀ
->
c⁄figuøti⁄
 = 0U;

558 
hidH™dÀ
->
Æã∫©e
 = 0xffU;

560 *
h™dÀ
 = (
˛ass_h™dÀ_t
)
hidH™dÀ
;

561  
îr‹
;

562 
	}
}

573 
usb_°©us_t
 
	$USB_Devi˚HidDeöô
(
˛ass_h™dÀ_t
 
h™dÀ
)

575 
usb_devi˚_hid_°ru˘_t
 *
hidH™dÀ
;

576 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

578 
hidH™dÀ
 = (
usb_devi˚_hid_°ru˘_t
 *)
h™dÀ
;

580 i‡(!
hidH™dÀ
)

582  
kSètus_USB_InvÆidH™dÀ
;

585 
îr‹
 = 
	`USB_Devi˚HidEndpoötsDeöô
(
hidH™dÀ
);

587 
	`USB_Devi˚HidFªeH™dÀ
(
hidH™dÀ
);

588  
îr‹
;

589 
	}
}

612 
usb_°©us_t
 
	$USB_Devi˚HidSíd
(
˛ass_h™dÀ_t
 
h™dÀ
, 
uöt8_t
 
ï
, uöt8_à*
buf„r
, 
uöt32_t
 
Àngth
)

614 
usb_devi˚_hid_°ru˘_t
 *
hidH™dÀ
;

615 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

617 i‡(!
h™dÀ
)

619  
kSètus_USB_InvÆidH™dÀ
;

621 
hidH™dÀ
 = (
usb_devi˚_hid_°ru˘_t
 *)
h™dÀ
;

623 i‡(
hidH™dÀ
->
öãºu±InPùeBusy
)

625  
kSètus_USB_Busy
;

627 
îr‹
 = 
	`USB_Devi˚SídReque°
(
hidH™dÀ
->
h™dÀ
, 
ï
, 
buf„r
, 
Àngth
);

628 i‡(
kSètus_USB_Suc˚ss
 =
îr‹
)

630 
hidH™dÀ
->
öãºu±InPùeBusy
 = 1U;

632  
îr‹
;

633 
	}
}

656 
usb_°©us_t
 
	$USB_Devi˚HidRecv
(
˛ass_h™dÀ_t
 
h™dÀ
, 
uöt8_t
 
ï
, uöt8_à*
buf„r
, 
uöt32_t
 
Àngth
)

658 
usb_devi˚_hid_°ru˘_t
 *
hidH™dÀ
;

659 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

661 i‡(!
h™dÀ
)

663  
kSètus_USB_InvÆidH™dÀ
;

665 
hidH™dÀ
 = (
usb_devi˚_hid_°ru˘_t
 *)
h™dÀ
;

667 i‡(
hidH™dÀ
->
öãºu±OutPùeBusy
)

669  
kSètus_USB_Busy
;

671 
îr‹
 = 
	`USB_Devi˚RecvReque°
(
hidH™dÀ
->
h™dÀ
, 
ï
, 
buf„r
, 
Àngth
);

672 i‡(
kSètus_USB_Suc˚ss
 =
îr‹
)

674 
hidH™dÀ
->
öãºu±OutPùeBusy
 = 1U;

676  
îr‹
;

677 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbDevice\usb_device_hid.h

35 #i‚de‡
__USB_DEVICE_HID_H__


36 
	#__USB_DEVICE_HID_H__


	)

48 
	#USB_DEVICE_CONFIG_HID_CLASS_CODE
 (0x03U)

	)

51 
	#USB_DEVICE_HID_REQUEST_GET_REPORT
 (0x01U)

	)

52 
	#USB_DEVICE_HID_REQUEST_GET_REPORT_TYPE_INPUT
 (0x01U)

	)

53 
	#USB_DEVICE_HID_REQUEST_GET_REPORT_TYPE_OUPUT
 (0x02U)

	)

54 
	#USB_DEVICE_HID_REQUEST_GET_REPORT_TYPE_FEATURE
 (0x03U)

	)

56 
	#USB_DEVICE_HID_REQUEST_GET_IDLE
 (0x02U)

	)

58 
	#USB_DEVICE_HID_REQUEST_GET_PROTOCOL
 (0x03U)

	)

60 
	#USB_DEVICE_HID_REQUEST_SET_REPORT
 (0x09U)

	)

62 
	#USB_DEVICE_HID_REQUEST_SET_IDLE
 (0x0AU)

	)

64 
	#USB_DEVICE_HID_REQUEST_SET_PROTOCOL
 (0x0BU)

	)

66 #i‡(
deföed
(
USB_DEVICE_CHARGER_DETECT_ENABLE
) && (USB_DEVICE_CHARGER_DETECT_ENABLE > 0U))

68 
	#USB_DEVICE_DCD_SEQ_INIT_TIME
 (1000U)

	)

70 
	#USB_DEVICE_DCD_DBNC_MSEC
 (10U)

	)

72 
	#USB_DEVICE_DCD_VDPSRC_ON_MSEC
 (200U)

	)

74 
	#USB_DEVICE_DCD_TIME_WAIT_AFTER_PRI_DETECTION
 (40U)

	)

76 
	#USB_DEVICE_DCD_TIME_DM_SRC_ON
 (10U)

	)

79 
	e_usb_devi˚_dcd_p‹t_ty≥


81 
	mkUSB_Devi˚DCDP‹tTy≥NoP‹t
 = 0x0U,

82 
	mkUSB_Devi˚DCDP‹tTy≥SDP
,

83 
	mkUSB_Devi˚DCDP‹tTy≥CDP
,

84 
	mkUSB_Devi˚DCDP‹tTy≥DCP
,

85 } 
	tusb_devi˚_dcd_p‹t_ty≥_t
;

88 
	e_usb_devi˚_dcd_dev_°©us


90 
	mkUSB_Devi˚DCDDevSètusVBUSDëe˘
 = 0x0U,

91 
	mkUSB_Devi˚DCDDevSètusD©aC⁄è˘Dëe˘
,

92 
	mkUSB_Devi˚DCDDevSètusCh¨gögP‹tDëe˘
,

93 
	mkUSB_Devi˚DCDDevSètusTimeOut
,

94 
	mkUSB_Devi˚DCDDevSètusUnknownTy≥
,

95 
	mkUSB_Devi˚DCDDevSètusDëe˘Föish
,

96 
	mkUSB_Devi˚DCDDevSètusCom∂ëe
,

97 
	mkUSB_Devi˚DCDDevSètusAâached
,

98 
	mkUSB_Devi˚DCDDevSètusDëached
,

99 } 
	tusb_devi˚_dcd_dev_°©us_t
;

103 
	e_usb_devi˚_hid_evít


105 
	mkUSB_Devi˚HidEvítSídRe•⁄£
 = 0x01U,

106 
	mkUSB_Devi˚HidEvítRecvRe•⁄£
,

107 
	mkUSB_Devi˚HidEvítGëRï‹t
,

108 
	mkUSB_Devi˚HidEvítGëIdÀ
,

109 
	mkUSB_Devi˚HidEvítGëPrŸocﬁ
,

110 
	mkUSB_Devi˚HidEvítSëRï‹t
,

111 
	mkUSB_Devi˚HidEvítSëIdÀ
,

112 
	mkUSB_Devi˚HidEvítSëPrŸocﬁ
,

113 
	mkUSB_Devi˚HidEvítReque°Rï‹tBuf„r
,

114 } 
	tusb_devi˚_hid_evít_t
;

142 
	s_usb_devi˚_hid_ªp‹t_°ru˘


144 
uöt8_t
 *
	mªp‹tBuf„r
;

145 
uöt32_t
 
	mªp‹tLígth
;

146 
uöt8_t
 
	mªp‹tTy≥
;

147 
uöt8_t
 
	mªp‹tId
;

148 } 
	tusb_devi˚_hid_ªp‹t_°ru˘_t
;

151 
	s_usb_devi˚_hid_°ru˘


153 
usb_devi˚_h™dÀ
 
	mh™dÀ
;

154 
usb_devi˚_˛ass_c⁄fig_°ru˘_t
 *
	mc⁄figSåu˘
;

155 
usb_devi˚_öãrÁ˚_°ru˘_t
 *
	möãrÁ˚H™dÀ
;

156 
uöt8_t
 
	mc⁄figuøti⁄
;

157 
uöt8_t
 
	möãrÁ˚Numbî
;

158 
uöt8_t
 
	mÆã∫©e
;

159 
uöt8_t
 
	midÀR©e
;

160 
uöt8_t
 
	m¥Ÿocﬁ
;

161 
uöt8_t
 
	möãºu±InPùeBusy
;

162 
uöt8_t
 
	möãºu±OutPùeBusy
;

163 } 
	tusb_devi˚_hid_°ru˘_t
;

169 #i‡
deföed
(
__˝lu•lus
)

184 
usb_°©us_t
 
USB_Devi˚HidInô
(
uöt8_t
 
c⁄åﬁÀrId
,

185 
usb_devi˚_˛ass_c⁄fig_°ru˘_t
 *
c⁄fig
,

186 
˛ass_h™dÀ_t
 *
h™dÀ
);

197 
usb_°©us_t
 
USB_Devi˚HidDeöô
(
˛ass_h™dÀ_t
 
h™dÀ
);

213 
usb_°©us_t
 
USB_Devi˚HidEvít
(*
h™dÀ
, 
uöt32_t
 
evít
, *
∑øm
);

242 
usb_°©us_t
 
USB_Devi˚HidSíd
(
˛ass_h™dÀ_t
 
h™dÀ
, 
uöt8_t
 
ï
, uöt8_à*
buf„r
, 
uöt32_t
 
Àngth
);

266 
usb_°©us_t
 
USB_Devi˚HidRecv
(
˛ass_h™dÀ_t
 
h™dÀ
, 
uöt8_t
 
ï
, uöt8_à*
buf„r
, 
uöt32_t
 
Àngth
);

270 #i‡
deföed
(
__˝lu•lus
)

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbProtocol\UsbProtocol.c

1 
	~"UsbPrŸocﬁ.h
"

2 
	~"F™Sy°em.h
"

3 
	~"F™C⁄åﬁÀr.h
"

4 
	~"A«logMósuªmítSy°em.h
"

5 
	~"Àd.h
"

7 
	~<°rög.h
>

9 
	#UINT_16_FROM_BIG_ENDIAN
(
±r
Ë(
uöt16_t
Ë((*((
uöt8_t
 *Ë±rË<< 8Ë| *((uöt8_à*Ë±r))

	)

13 
	mSTATUS_OK
 = 0x00,

14 
	mSTATUS_INVALID_COMMAND
 = 0x01,

15 
	mSTATUS_INVALID_PORT_INDEX
 = 0x10,

16 
	mSTATUS_SENSOR_ABSENT
 = 0x11,

17 
	mSTATUS_INVALID_ARGUMENT
 = 0x12,

18 } 
	tB¨budaSètusCode
;

24 
	mCMD_EMPTY
 = 0x00,

25 
	mCMD_READ_STATUS
 = 0x01,

26 
	mCMD_READ_FIRMWARE_VERSION
 = 0x02,

27 
	mCMD_READ_DEVICE_ID
 = 0x03,

28 
	mCMD_WRITE_DEVICE_ID
 = 0x04,

29 
	mCMD_START_FIRMWARE_UPDATE
 = 0x05,

30 
	mCMD_READ_BOOTLOADER_VERSION
 = 0x06,

31 
	mCMD_WRITE_TEST_FLAG
 = 0x07,

34 
	mCMD_READ_TEMPERATURE_MASK
 = 0x10,

35 
	mCMD_READ_TEMPERATURE_VALUE
 = 0x11,

36 
	mCMD_READ_VOLTAGE_VALUE
 = 0x12,

38 
	mCMD_READ_FAN_MASK
 = 0x20,

39 
	mCMD_READ_FAN_SPEED
 = 0x21,

40 
	mCMD_READ_FAN_POWER
 = 0x22,

41 
	mCMD_WRITE_FAN_POWER
 = 0x23,

42 
	mCMD_WRITE_FAN_SPEED
 = 0x24,

43 
	mCMD_WRITE_FAN_CURVE
 = 0x25,

44 
	mCMD_WRITE_FAN_EXTERNAL_TEMP
 = 0x26,

45 
	mCMD_WRITE_FAN_TEST_3
 = 0x27,

47 
	mCMD_READ_LED_STRIP_MASK
 = 0x30,

48 
	mCMD_WRITE_LED_RGB_VALUE
 = 0x31,

49 
	mCMD_WRITE_LED_COLOR_VALUES
 = 0x32,

50 
	mCMD_WRITE_LED_TRIGGER
 = 0x33,

51 
	mCMD_WRITE_LED_CLEAR
 = 0x34,

52 
	mCMD_WRITE_LED_GROUP_SET
 = 0x35,

53 
	mCMD_WRITE_LED_EXTERNAL_TEMP
 = 0x36,

54 
	mCMD_WRITE_LED_GROUPS_CLEAR
 = 0x37,

55 
	mCMD_WRITE_LED_MODE
 = 0x38,

56 
	mCMD_WRITE_LED_BRIGHTNESS
 = 0x39,

57 
	mCMD_WRITE_LED_COUNT
 = 0x3A,

58 
	mCMD_WRITE_LED_PORT_TYPE
 = 0x3B,

60 
	mCMD_PMBUS_WRITE
 = 0x4A,

61 
	mCMD_PMBUS_READ
 = 0x4B

63 } 
	tB¨budaComm™dCode
;

66 
	$CMD_RódSètus
(
uöt8_t
 
öRï‹t
[])

68 
öRï‹t
[0] = 
STATUS_OK
;

69 
	}
}

71 
	$CMD_GëFúmw¨eVîsi⁄
(
uöt8_t
 
öRï‹t
[])

73 
öRï‹t
[0] = 
STATUS_OK
;

77 
	}
}

79 
	$CMD_GëDevi˚Id
(
uöt8_t
 
öRï‹t
[])

81 
uöt8_t
 
devi˚Id
[] = {1, 1, 1, 1};

83 
öRï‹t
[0] = 
STATUS_OK
;

84 
	`mem˝y
(&
öRï‹t
[1], 
devi˚Id
, (deviceId));

85 
	}
}

87 
	$CMD_SëDevi˚Id
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

97 
öRï‹t
[0] = 
STATUS_OK
;

99 
	}
}

101 #i‡
BOOTMODE


102 
	$CMD_SèπFúmw¨eUpd©e
(
uöt8_t
 
öRï‹t
[])

105 
öRï‹t
[0] = 
STATUS_OK
;

106 
	}
}

109 
	$CMD_GëBoŸlﬂdîVîsi⁄
(
uöt8_t
 
öRï‹t
[])

111 
öRï‹t
[0] = 
STATUS_OK
;

113 
	}
}

115 
	$CMD_SëTe°Fœg
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

128 
	}
}

130 
	$CmdRódF™Mask
(
uöt8_t
 
öRï‹t
[])

132 
öRï‹t
[0] = 
STATUS_OK
;

133 
	`mem£t
(&
öRï‹t
[1], 2, 6);

134 
	}
}

136 
	$CmdRódF™S≥ed
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

138 
uöt32_t
 
Án
 = 
outRï‹t
[1];

140 
uöt16_t
 
•ìdRpm
;

141 
öRï‹t
[0] = 
STATUS_OK
;

142 
•ìdRpm
 = 
	`ÁnSy°emGëMónRpm
(
Án
);

144 if(
öRï‹t
[0] =
STATUS_OK
)

146 
öRï‹t
[1] = (
uöt8_t
)(
•ìdRpm
 >> 8);

147 
öRï‹t
[2] = (
uöt8_t
)(
•ìdRpm
 & 0xFF);

149 
	}
}

151 
	$CmdRódF™Powî
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

153 
uöt32_t
 
Án
 = 
outRï‹t
[1];

154 
uöt8_t
 
powî
;

155 
öRï‹t
[0] = 
STATUS_OK
;

157 
powî
 = 
	`ÁnSy°emGëPwm
(
Án
Ë* 100 / 
	`ÁnC⁄åﬁÀrGëMaxPwmVÆue
();

159 if(
öRï‹t
[0] =
STATUS_OK
)

161 
öRï‹t
[1] = 
powî
;

164 
	}
}

166 
	$CMD_GëTem≥øtuªMask
(
uöt8_t
 
öRï‹t
[])

168 
öRï‹t
[0] = 
STATUS_OK
;

169 
öRï‹t
[1] = 1;

170 
öRï‹t
[2] = 1;

171 
öRï‹t
[3] = 0;

172 
öRï‹t
[4] = 0;

173 
öRï‹t
[5] = 0;

174 
	}
}

176 
	$CMD_GëTem≥øtuªVÆue
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

178 
uöt8_t
 
ãm≥øtuªIndex
 = 
outRï‹t
[1];

179 
uöt16_t
 
ãm≥øtuª
;

181 
ãm≥øtuª
 = 
	`™ÆogMósuªmítTem≥øtuªFromAdcVÆue
(
	`ãm≥øtuªGëI¡î«l
(
ãm≥øtuªIndex
));

183 
öRï‹t
[0] = 
STATUS_OK
;

185 
öRï‹t
[1] = (
uöt8_t
)(
ãm≥øtuª
 >> 8);

186 
öRï‹t
[2] = (
uöt8_t
)(
ãm≥øtuª
 & 0xFF);

187 
	}
}

189 
	$CMD_GëVﬁègeVÆue
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

192 
uöt8_t
 
vﬁègeIndex
 = 
outRï‹t
[1];

193 
uöt16_t
 
vﬁège
;

195 
vﬁège
 = 
	`powîGëVﬁège
(
vﬁègeIndex
);

197 
öRï‹t
[0] = 
STATUS_OK
;

198 
öRï‹t
[1] = (
uöt8_t
)(
vﬁège
 >> 8);

199 
öRï‹t
[2] = (
uöt8_t
)(
vﬁège
 & 0xFF);

200 
	}
}

202 
	$CMD_SëF™Powî
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

204 
uöt32_t
 
Án
 = 
outRï‹t
[1];

205 
uöt8_t
 
ÁnPowî
 = 
outRï‹t
[2];

207 
öRï‹t
[0] = 
STATUS_OK
;

208 
	`ÁnSy°emSëMode
(
Án
, 
FAN_SYSTEM_MODE_PWM
);

209 
	`ÁnSy°emSëPwm
(
Án
, 
ÁnPowî
 * 
	`ÁnC⁄åﬁÀrGëMaxPwmVÆue
() / 100);

211 
	}
}

213 
	$CmdWrôeF™S≥ed
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

215 
uöt32_t
 
Án
 = 
outRï‹t
[1];

216 
uöt16_t
 
ÁnS≥ed
 = ((uöt16_tË
outRï‹t
[2] << 8) | outReport[3];

218 
öRï‹t
[0] = 
STATUS_OK
;

219 
	`ÁnSy°emSëMode
(
Án
, 
FAN_SYSTEM_MODE_RPM
);

220 
	`ÁnSy°emSëT¨gëRpm
(
Án
, 
ÁnS≥ed
);

221 
	}
}

223 
	$CMD_SëF™Curve
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

225 
uöt8_t
 
ÁnIndex
 = 
outRï‹t
[1];

226 
uöt8_t
 
ãm≥øtuªIndex
 = 
outRï‹t
[2];

228 
F™S≥edTempCurve
 
ÁnS≥edTempCurve
 = {

229 .
curvePoöts
 = {

230 {.
Ωm
 = 
	`UINT_16_FROM_BIG_ENDIAN
(&
outRï‹t
[15]), .
ãm≥øtuª
 = UINT_16_FROM_BIG_ENDIAN(&outReport[3])},

231 {.
Ωm
 = 
	`UINT_16_FROM_BIG_ENDIAN
(&
outRï‹t
[17]), .
ãm≥øtuª
 = UINT_16_FROM_BIG_ENDIAN(&outReport[5])},

232 {.
Ωm
 = 
	`UINT_16_FROM_BIG_ENDIAN
(&
outRï‹t
[19]), .
ãm≥øtuª
 = UINT_16_FROM_BIG_ENDIAN(&outReport[7])},

233 {.
Ωm
 = 
	`UINT_16_FROM_BIG_ENDIAN
(&
outRï‹t
[21]), .
ãm≥øtuª
 = UINT_16_FROM_BIG_ENDIAN(&outReport[9])},

234 {.
Ωm
 = 
	`UINT_16_FROM_BIG_ENDIAN
(&
outRï‹t
[23]), .
ãm≥øtuª
 = UINT_16_FROM_BIG_ENDIAN(&outReport[11])},

235 {.
Ωm
 = 
	`UINT_16_FROM_BIG_ENDIAN
(&
outRï‹t
[25]), .
ãm≥øtuª
 = UINT_16_FROM_BIG_ENDIAN(&outReport[13])},

237 .
curvePoötCou¡
 = 6

240 
öRï‹t
[0] = 
STATUS_OK
;

241 
	`ÁnSy°emSëMode
(
ÁnIndex
, 
FAN_SYSTEM_MODE_CURVE
);

242 
	`ÁnSy°emSëCurveTem≥øtuªIndex
(
ÁnIndex
, 
ãm≥øtuªIndex
);

243 
	`ÁnSy°emSëCurve
(
ÁnIndex
, &
ÁnS≥edTempCurve
);

244 
	}
}

246 
	$CMD_SëF™Te°3
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

249 
öRï‹t
[0] = 
STATUS_OK
;

250 
	}
}

252 
	$CMD_SëF™Exã∫ÆTem≥øtuª
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

254 
uöt8_t
 
ÁnIndex
 = 
outRï‹t
[1];

256 
uöt16_t
 
ãm≥øtuª
 = 
	`UINT_16_FROM_BIG_ENDIAN
(&
outRï‹t
[2]);

257 
öRï‹t
[0] = 
STATUS_OK
;

258 
	`ãm≥øtuªSëExã∫Æ
(
ÁnIndex
, 
ãm≥øtuª
);

259 
	}
}

261 
	$cmdRódLedSåùMask
(
uöt8_t
 
öRï‹t
[])

263 
öRï‹t
[0] = 
STATUS_OK
;

264 
öRï‹t
[1] = 1;

265 
öRï‹t
[2] = 1;

266 
	}
}

268 
	$cmdWrôeLedRgbVÆue
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

280 
	}
}

282 
	$cmdWrôeLedCﬁ‹VÆues
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

295 
	}
}

297 
	$cmdWrôeLedTriggî
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

305 
	`ÀdE«bÀPœyEf„˘
();

306 
öRï‹t
[0] = 
STATUS_OK
;

327 
	}
}

329 
	$cmdWrôeLedCÀ¨
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

340 
	}
}

342 
	$cmdWrôeLedGroupSë
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

344 
LedGroup
 
ÀdGroup
;

345 
LedSåùIndex
 
°rùIndex
 = 
outRï‹t
[1];

346 
Cﬁ‹
 
cﬁ‹
[3];

347 
uöt16_t
 
ãm≥øtuª
[3];

348 
Ef„˘S≥ed
 
•ìd
 = 
outRï‹t
[5];

349 
uöt8_t
 
f‹w¨dDúe˘i⁄
 = 
outRï‹t
[6];

350 
uöt8_t
 
øndomCﬁ‹
 = 
outRï‹t
[7];

351 
uöt8_t
 
ãm≥øtuªIndex
 = 
outRï‹t
[8];

353 
	`mem£t
(&
ÀdGroup
, 0, (ledGroup));

354 
ÀdGroup
.
°¨tIndex
 = 
outRï‹t
[2];

355 
ÀdGroup
.
°›Index
 = 
outRï‹t
[2] + outReport[3];

356 
ÀdGroup
.
ef„˘Ty≥
 = 
outRï‹t
[4];

357 
cﬁ‹
[0].
r
 = 
outRï‹t
[9];

358 
cﬁ‹
[0].
g
 = 
outRï‹t
[10];

359 
cﬁ‹
[0].
b
 = 
outRï‹t
[11];

360 
cﬁ‹
[1].
r
 = 
outRï‹t
[12];

361 
cﬁ‹
[1].
g
 = 
outRï‹t
[13];

362 
cﬁ‹
[1].
b
 = 
outRï‹t
[14];

363 
cﬁ‹
[2].
r
 = 
outRï‹t
[15];

364 
cﬁ‹
[2].
g
 = 
outRï‹t
[16];

365 
cﬁ‹
[2].
b
 = 
outRï‹t
[17];

366 
ãm≥øtuª
[0] = ((
uöt16_t
Ë
outRï‹t
[18] << 8) | outReport[19];

367 
ãm≥øtuª
[1] = ((
uöt16_t
Ë
outRï‹t
[20] << 8) | outReport[21];

368 
ãm≥øtuª
[2] = ((
uöt16_t
Ë
outRï‹t
[22] << 8) | outReport[23];

370 i‡(
øndomCﬁ‹
) {

371 
	`ÀdGíî©eR™domCﬁ‹
(&
cﬁ‹
[0]);

372 
	`ÀdGíî©eR™domCﬁ‹
(&
cﬁ‹
[1]);

375 
ÀdGroup
.
ef„˘Ty≥
) {

376 
EFFECT_RAINBOW_WAVE
:

377 
ÀdGroup
.
ef„˘
.
øöbowWave
.
•ìd
 = speed;

378 
ÀdGroup
.
ef„˘
.
øöbowWave
.
f‹w¨dDúe˘i⁄
 = forwardDirection;

381 
EFFECT_COLOR_SHIFT
:

382 
ÀdGroup
.
ef„˘
.
cﬁ‹Shi·
.
•ìd
 = speed;

383 
ÀdGroup
.
ef„˘
.
cﬁ‹Shi·
.
øndomCﬁ‹
 =ÑandomColor;

384 
ÀdGroup
.
ef„˘
.
cﬁ‹Shi·
.
cﬁ‹
[0] = color[0];

385 
ÀdGroup
.
ef„˘
.
cﬁ‹Shi·
.
cﬁ‹
[1] = color[1];

388 
EFFECT_COLOR_PULSE
:

389 
ÀdGroup
.
ef„˘
.
cﬁ‹Pul£
.
•ìd
 = speed;

390 
ÀdGroup
.
ef„˘
.
cﬁ‹Pul£
.
øndomCﬁ‹
 =ÑandomColor;

391 
ÀdGroup
.
ef„˘
.
cﬁ‹Pul£
.
cﬁ‹
[0] = color[0];

392 
ÀdGroup
.
ef„˘
.
cﬁ‹Pul£
.
cﬁ‹
[1] = color[1];

395 
EFFECT_COLOR_WAVE
:

396 
ÀdGroup
.
ef„˘
.
cﬁ‹Wave
.
•ìd
 = speed;

397 
ÀdGroup
.
ef„˘
.
cﬁ‹Wave
.
f‹w¨dDúe˘i⁄
 = forwardDirection;

398 
ÀdGroup
.
ef„˘
.
cﬁ‹Wave
.
øndomCﬁ‹
 =ÑandomColor;

399 
ÀdGroup
.
ef„˘
.
cﬁ‹Wave
.
cﬁ‹
[0] = color[0];

400 
ÀdGroup
.
ef„˘
.
cﬁ‹Wave
.
cﬁ‹
[1] = color[1];

403 
EFFECT_STATIC
:

404 
ÀdGroup
.
ef„˘
.
°©icEf„˘
.
cﬁ‹
 = color[0];

407 
EFFECT_TEMPERATURE
:

408 
ÀdGroup
.
ef„˘
.
ãm≥øtuªEf„˘
.
ãm≥øtuªIndex
 =ÅemperatureIndex;

409 
ÀdGroup
.
ef„˘
.
ãm≥øtuªEf„˘
.
cﬁ‹
[0] = color[0];

410 
ÀdGroup
.
ef„˘
.
ãm≥øtuªEf„˘
.
cﬁ‹
[1] = color[1];

411 
ÀdGroup
.
ef„˘
.
ãm≥øtuªEf„˘
.
cﬁ‹
[2] = color[2];

412 
ÀdGroup
.
ef„˘
.
ãm≥øtuªEf„˘
.
ãm≥øtuª
[0] =Åemperature[0];

413 
ÀdGroup
.
ef„˘
.
ãm≥øtuªEf„˘
.
ãm≥øtuª
[1] =Åemperature[1];

414 
ÀdGroup
.
ef„˘
.
ãm≥øtuªEf„˘
.
ãm≥øtuª
[2] =Åemperature[2];

417 
EFFECT_VISOR
:

418 
ÀdGroup
.
ef„˘
.
vis‹
.
•ìd
 = speed;

419 
ÀdGroup
.
ef„˘
.
vis‹
.
øndomCﬁ‹
 =ÑandomColor;

420 
ÀdGroup
.
ef„˘
.
vis‹
.
cﬁ‹
[0] = color[0];

421 
ÀdGroup
.
ef„˘
.
vis‹
.
cﬁ‹
[1] = color[1];

424 
EFFECT_MARQUEE
:

425 
ÀdGroup
.
ef„˘
.
m¨quì
.
•ìd
 = speed;

426 
ÀdGroup
.
ef„˘
.
m¨quì
.
cﬁ‹
 = color[0];

429 
EFFECT_STROBING
:

430 
ÀdGroup
.
ef„˘
.
°robög
.
•ìd
 = speed;

431 
ÀdGroup
.
ef„˘
.
°robög
.
øndomCﬁ‹
 =ÑandomColor;

432 
ÀdGroup
.
ef„˘
.
°robög
.
cﬁ‹
[0] = color[0];

433 
ÀdGroup
.
ef„˘
.
°robög
.
cﬁ‹
[1] = color[1];

436 
EFFECT_SEQUENTIAL
:

437 
ÀdGroup
.
ef„˘
.
£quítül
.
•ìd
 = speed;

438 
ÀdGroup
.
ef„˘
.
£quítül
.
f‹w¨dDúe˘i⁄
 = forwardDirection;

439 
ÀdGroup
.
ef„˘
.
£quítül
.
øndomCﬁ‹
 =ÑandomColor;

440 
ÀdGroup
.
ef„˘
.
£quítül
.
cﬁ‹
 = color[0];

443 
EFFECT_RAINBOW
:

444 
ÀdGroup
.
ef„˘
.
øöbow
.
•ìd
 = speed;

448 
öRï‹t
[0] = 
STATUS_INVALID_ARGUMENT
;

452 
öRï‹t
[0] = 
	`ÀdSåùAµídGroup
(
°rùIndex
, &
ÀdGroup
);

453 
	}
}

455 
	$cmdWrôeLedMode
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

457 
LedSåùIndex
 
°rùIndex
 = 
outRï‹t
[1];

458 
LedSåùMode
 
ÀdMode
 = 
outRï‹t
[2];

459 
öRï‹t
[0] = 
	`ÀdSëSåùMode
(
°rùIndex
, 
ÀdMode
);

460 
	}
}

462 
	$cmdWrôeLedGroupsCÀ¨
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

464 
LedSåùIndex
 
°rùIndex
 = 
outRï‹t
[1];

465 
öRï‹t
[0] = 
	`ÀdSåùCÀ¨
(
°rùIndex
);

475 
	}
}

477 
	$cmdWrôeLedExã∫ÆTemp
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

479 
LedSåùIndex
 
°rùIndex
 = 
outRï‹t
[1];

480 
uöt8_t
 
groupIndex
 = 
outRï‹t
[2];

481 
uöt16_t
 
ãm≥øtuª
 = ((uöt16_tË
outRï‹t
[3] << 8) | outReport[4];

482 
öRï‹t
[0] = 
	`ÀdSåùSëGroupExã∫ÆTem≥øtuª
(
°rùIndex
, 
groupIndex
, 
ãm≥øtuª
);

483 
	}
}

485 
	$cmdWrôeLedBrighäess
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

487 
LedSåùIndex
 
°rùIndex
 = 
outRï‹t
[1];

488 
uöt8_t
 
brighäess
 = 
outRï‹t
[2];

489 
öRï‹t
[0] = 
	`ÀdSëLedBrighäess
(
°rùIndex
, 
brighäess
);

490 
	}
}

492 
	$cmdWrôeLedCou¡
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

494 
LedSåùIndex
 
°rùIndex
 = 
outRï‹t
[1];

495 
uöt8_t
 
ÀdCou¡
 = 
outRï‹t
[2];

496 
öRï‹t
[0] = 
	`ÀdSëLedCou¡
(
°rùIndex
, 
ÀdCou¡
);

498 
	`ÀdSåùCÀ¨
(
°rùIndex
);

499 
	}
}

501 
	$cmdWrôeLedP‹tTy≥
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

503 
LedSåùIndex
 
°rùIndex
 = 
outRï‹t
[1];

504 
LedTy≥
 
ÀdTy≥
 = 
outRï‹t
[2] - 1;

506 
öRï‹t
[0] = 
	`ÀdSëLedTy≥
(
°rùIndex
, 
ÀdTy≥
);

507 
	}
}

509 
	$cmdPmbusWrôe
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

517 
öRï‹t
[0] = 0xAB;

518 
	}
}

520 
	$cmdPmbusRód
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

528 
öRï‹t
[0] = 0xBB;

529 
	}
}

532 
	$HID_Pro˚ssRï‹t
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[])

534 
B¨budaComm™dCode
 
cmd
 = (B¨budaComm™dCode)
outRï‹t
[0];

535 
	`mem£t
(
öRï‹t
, 0, 16);

537 
cmd
)

539 
CMD_READ_STATUS
:

540 
	`CMD_RódSètus
(
öRï‹t
);

543 
CMD_READ_FIRMWARE_VERSION
:

544 
	`CMD_GëFúmw¨eVîsi⁄
(
öRï‹t
);

547 
CMD_READ_DEVICE_ID
:

548 
	`CMD_GëDevi˚Id
(
öRï‹t
);

551 
CMD_WRITE_DEVICE_ID
:

552 
	`CMD_SëDevi˚Id
(
outRï‹t
, 
öRï‹t
);

555 #i‡
BOOTMODE


556 
CMD_START_FIRMWARE_UPDATE
:

557 
	`CMD_SèπFúmw¨eUpd©e
(
öRï‹t
);

561 
CMD_READ_BOOTLOADER_VERSION
:

562 
	`CMD_GëBoŸlﬂdîVîsi⁄
(
öRï‹t
);

565 
CMD_WRITE_TEST_FLAG
:

566 
	`CMD_SëTe°Fœg
(
outRï‹t
, 
öRï‹t
);

569 
CMD_READ_FAN_MASK
:

570 
	`CmdRódF™Mask
(
öRï‹t
);

573 
CMD_READ_FAN_SPEED
:

574 
	`CmdRódF™S≥ed
(
outRï‹t
, 
öRï‹t
);

577 
CMD_READ_FAN_POWER
:

578 
	`CmdRódF™Powî
(
outRï‹t
, 
öRï‹t
);

581 
CMD_READ_TEMPERATURE_MASK
:

582 
	`CMD_GëTem≥øtuªMask
(
öRï‹t
);

585 
CMD_READ_TEMPERATURE_VALUE
:

586 
	`CMD_GëTem≥øtuªVÆue
(
outRï‹t
, 
öRï‹t
);

589 
CMD_READ_VOLTAGE_VALUE
:

590 
	`CMD_GëVﬁègeVÆue
(
outRï‹t
, 
öRï‹t
);

593 
CMD_WRITE_FAN_POWER
:

594 
	`CMD_SëF™Powî
(
outRï‹t
, 
öRï‹t
);

597 
CMD_WRITE_FAN_SPEED
:

598 
	`CmdWrôeF™S≥ed
(
outRï‹t
, 
öRï‹t
);

601 
CMD_WRITE_FAN_CURVE
:

602 
	`CMD_SëF™Curve
(
outRï‹t
, 
öRï‹t
);

605 
CMD_WRITE_FAN_TEST_3
:

606 
	`CMD_SëF™Te°3
(
outRï‹t
, 
öRï‹t
);

609 
CMD_WRITE_FAN_EXTERNAL_TEMP
:

610 
	`CMD_SëF™Exã∫ÆTem≥øtuª
(
outRï‹t
, 
öRï‹t
);

613 
CMD_READ_LED_STRIP_MASK
:

614 
	`cmdRódLedSåùMask
(
öRï‹t
);

617 
CMD_WRITE_LED_RGB_VALUE
:

618 
	`cmdWrôeLedRgbVÆue
(
outRï‹t
, 
öRï‹t
);

621 
CMD_WRITE_LED_COLOR_VALUES
:

622 
	`cmdWrôeLedCﬁ‹VÆues
(
outRï‹t
, 
öRï‹t
);

625 
CMD_WRITE_LED_TRIGGER
:

626 
	`cmdWrôeLedTriggî
(
outRï‹t
, 
öRï‹t
);

629 
CMD_WRITE_LED_CLEAR
:

630 
	`cmdWrôeLedCÀ¨
(
outRï‹t
, 
öRï‹t
);

633 
CMD_WRITE_LED_GROUP_SET
:

634 
	`cmdWrôeLedGroupSë
(
outRï‹t
, 
öRï‹t
);

637 
CMD_WRITE_LED_MODE
:

638 
	`cmdWrôeLedMode
(
outRï‹t
, 
öRï‹t
);

641 
CMD_WRITE_LED_GROUPS_CLEAR
:

642 
	`cmdWrôeLedGroupsCÀ¨
(
outRï‹t
, 
öRï‹t
);

645 
CMD_WRITE_LED_EXTERNAL_TEMP
:

646 
	`cmdWrôeLedExã∫ÆTemp
(
outRï‹t
, 
öRï‹t
);

649 
CMD_WRITE_LED_BRIGHTNESS
:

650 
	`cmdWrôeLedBrighäess
(
outRï‹t
, 
öRï‹t
);

653 
CMD_WRITE_LED_COUNT
:

654 
	`cmdWrôeLedCou¡
(
outRï‹t
, 
öRï‹t
);

657 
CMD_WRITE_LED_PORT_TYPE
:

658 
	`cmdWrôeLedP‹tTy≥
(
outRï‹t
, 
öRï‹t
);

661 
CMD_PMBUS_WRITE
:

662 
	`cmdPmbusWrôe
(
outRï‹t
, 
öRï‹t
);

665 
CMD_PMBUS_READ
:

666 
	`cmdPmbusRód
(
outRï‹t
, 
öRï‹t
);

670 
öRï‹t
[0] = 
STATUS_INVALID_COMMAND
;

673 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbProtocol\UsbProtocol.h

1 #i‚de‡
__USB_PROTOCOL_H__


2 
	#__USB_PROTOCOL_H__


	)

4 
	~<°döt.h
>

6 
HID_Pro˚ssRï‹t
(c⁄° 
uöt8_t
 
outRï‹t
[], uöt8_à
öRï‹t
[]);

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\AnalogMeasurementTask.c

1 
	~"A«logMósuªmítSy°em.h
"

2 
	~"A«logMósuªmítHÆ.h
"

4 
	~"FªeRTOS.h
"

5 
	~"èsk.h
"

6 
	~"£mphr.h
"

8 
	~<°döt.h
>

10 
	#ANALOG_MEASUREMENT_TASK_PRIORITY
 1

	)

11 
	#ANALOG_MEASUREMENT_TASK_STACK_SIZE
 100

	)

12 
	#ANALOG_MEASUREMENT_TASK_PERIOD
 20

	)

14 
	$™ÆogMósuªmítTaskFun˘i⁄
(*
pvP¨amëîs
)

16 
	`™ÆogMósuªmítSy°emInô
();

18 
	`™ÆogMósuªmítSy°emSèπC⁄vîsi⁄
();

19 
	`vTaskDñay
(
ANALOG_MEASUREMENT_TASK_PERIOD
);

21 
	}
}

23 
	$™ÆogMósuªmítTaskCª©e
()

25 
	`xTaskCª©e
(
™ÆogMósuªmítTaskFun˘i⁄
, "™Æog", 
ANALOG_MEASUREMENT_TASK_STACK_SIZE
, 
NULL
, 
ANALOG_MEASUREMENT_TASK_PRIORITY
, NULL);

26 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\AnalogMeasurementTask.h

1 #i‚de‡
__ANALOG_MEASUREMENT_TASK_H__


2 
	#__ANALOG_MEASUREMENT_TASK_H__


	)

4 
	~<°döt.h
>

6 
™ÆogMósuªmítTaskCª©e
();

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\Anim.c

1 
	~"‰ame_00.c
"

2 
	~"‰ame_01.c
"

3 
	~"‰ame_02.c
"

4 
	~"‰ame_03.c
"

5 
	~"‰ame_04.c
"

6 
	~"‰ame_05.c
"

7 
	~"‰ame_06.c
"

8 
	~"‰ame_07.c
"

9 
	~"‰ame_08.c
"

10 
	~"‰ame_09.c
"

11 
	~"‰ame_10.c
"

12 
	~"‰ame_11.c
"

13 
	~"‰ame_12.c
"

14 
	~"‰ame_13.c
"

15 
	~"‰ame_14.c
"

16 
	~"‰ame_15.c
"

17 
	~"‰ame_16.c
"

18 
	~"‰ame_17.c
"

19 
	~"‰ame_18.c
"

20 
	~"‰ame_19.c
"

21 
	~"‰ame_20.c
"

22 
	~"‰ame_21.c
"

23 
	~"‰ame_22.c
"

24 
	~"‰ame_23.c
"

25 
	~"‰ame_24.c
"

26 
	~"‰ame_25.c
"

27 
	~"‰ame_26.c
"

28 
	~"‰ame_27.c
"

29 
	~"‰ame_28.c
"

30 
	~"‰ame_29.c
"

31 
	~"‰ame_30.c
"

32 
	~"‰ame_31.c
"

33 
	~"‰ame_32.c
"

34 
	~"‰ame_33.c
"

35 
	~"‰ame_34.c
"

36 
	~"‰ame_35.c
"

37 
	~"‰ame_36.c
"

38 
	~"‰ame_37.c
"

39 
	~"‰ame_38.c
"

40 
	~"‰ame_39.c
"

41 
	~"‰ame_40.c
"

42 
	~"‰ame_41.c
"

43 
	~"‰ame_42.c
"

44 
	~"‰ame_43.c
"

45 
	~"‰ame_44.c
"

46 
	~"‰ame_45.c
"

47 
	~"‰ame_46.c
"

48 
	~"‰ame_47.c
"

49 
	~"‰ame_48.c
"

50 
	~"‰ame_49.c
"

51 
	~"‰ame_50.c
"

52 
	~"‰ame_51.c
"

53 
	~"‰ame_52.c
"

54 
	~"‰ame_53.c
"

55 
	~"‰ame_54.c
"

56 
	~"‰ame_55.c
"

57 
	~"‰ame_56.c
"

58 
	~"‰ame_57.c
"

59 
	~"‰ame_58.c
"

60 
	~"‰ame_59.c
"

61 
	~"‰ame_60.c
"

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_00.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_imagesimage_d©a_images
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_01.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_01_0015_Layî2
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_02.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_01_0014_Layî3
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_03.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_01_0013_Layî4
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_04.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_01_0012_Layî5
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_05.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_01_0011_Layî6
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_06.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_01_0010_Layî7
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_07.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_01_0009_Layî8
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_08.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_01_0008_Layî9
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_09.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_01_0007_Layî10
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_10.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_01_0006_Layî11
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_11.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_01_0005_Layî12
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_12.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_01_0004_Layî13
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_13.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_01_0003_Layî14
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_14.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_01_0002_Layî15
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_15.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_01_0001_Layî16
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_16.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_01_0000_Layî17
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_17.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_02_0009_Layî1
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_18.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_02_0008_Layî2
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_19.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_02_0007_Layî3
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_20.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_02_0006_Layî4
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_21.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_02_0005_Layî5
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_22.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_02_0004_Layî6
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_23.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_02_0003_Layî7
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_24.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_02_0002_Layî8
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_25.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_02_0001_Layî9
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_26.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_02_0000_Layî10
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_27.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_03_0017_Layî1
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_28.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_03_0016_Layî2
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_29.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_03_0015_Layî3
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_30.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_03_0014_Layî4
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_31.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_03_0013_Layî5
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_32.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_03_0012_Layî6
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_33.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_03_0011_Layî7
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_34.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_03_0010_Layî8
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_35.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_03_0009_Layî9
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_36.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_03_0008_Layî10
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_37.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_03_0007_Layî11
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_38.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_03_0006_Layî12
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_39.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_03_0005_Layî13
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_40.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_03_0004_Layî14
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_41.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_03_0003_Layî15
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_42.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_03_0002_Layî16
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_43.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_03_0001_Layî17
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_44.c

27 
	~<°döt.h
>

31 c⁄° 
uöt8_t
 
	gimage_d©a_03_0000_Layî18
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_45.c

29 
	~<°döt.h
>

33 c⁄° 
uöt8_t
 
	gimage_d©a_‰ame_45_dñay0
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_46.c

29 
	~<°döt.h
>

33 c⁄° 
uöt8_t
 
	gimage_d©a_‰ame_46_dñay0
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_47.c

29 
	~<°döt.h
>

33 c⁄° 
uöt8_t
 
	gimage_d©a_‰ame_47_dñay0
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_48.c

29 
	~<°döt.h
>

33 c⁄° 
uöt8_t
 
	gimage_d©a_‰ame_48_dñay0
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_49.c

29 
	~<°döt.h
>

33 c⁄° 
uöt8_t
 
	gimage_d©a_‰ame_49_dñay0
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_50.c

29 
	~<°döt.h
>

33 c⁄° 
uöt8_t
 
	gimage_d©a_‰ame_50_dñay0
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_51.c

29 
	~<°döt.h
>

33 c⁄° 
uöt8_t
 
	gimage_d©a_‰ame_51_dñay0
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_52.c

29 
	~<°döt.h
>

33 c⁄° 
uöt8_t
 
	gimage_d©a_‰ame_52_dñay0
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_53.c

29 
	~<°döt.h
>

33 c⁄° 
uöt8_t
 
	gimage_d©a_‰ame_53_dñay0
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_54.c

29 
	~<°döt.h
>

33 c⁄° 
uöt8_t
 
	gimage_d©a_‰ame_54_dñay0
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_55.c

29 
	~<°döt.h
>

33 c⁄° 
uöt8_t
 
	gimage_d©a_‰ame_55_dñay0
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_56.c

29 
	~<°döt.h
>

33 c⁄° 
uöt8_t
 
	gimage_d©a_‰ame_56_dñay0
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_57.c

29 
	~<°döt.h
>

33 c⁄° 
uöt8_t
 
	gimage_d©a_‰ame_57_dñay0
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_58.c

29 
	~<°döt.h
>

33 c⁄° 
uöt8_t
 
	gimage_d©a_‰ame_58_dñay0
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_59.c

29 
	~<°döt.h
>

33 c⁄° 
uöt8_t
 
	gimage_d©a_‰ame_59_dñay0
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_60.c

29 
	~<°döt.h
>

33 c⁄° 
uöt8_t
 
	gimage_d©a_‰ame_60_dñay0
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_61.c

29 
	~<°döt.h
>

33 c⁄° 
uöt8_t
 
	gimage_d©a_‰ame_61_dñay0
[32768] = {

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\FanTask.c

1 
	~"F™Task.h
"

3 
	~"FªeRTOS.h
"

4 
	~"èsk.h
"

6 
	~"F™Sy°em.h
"

7 
	~"F™C⁄åﬁÀr.h
"

8 
	~"A«logMósuªmítSy°em.h
"

10 
	~<°döt.h
>

12 
	#FAN_TASK_PRIORITY
 1

	)

13 
	#FAN_TASK_STACK_SIZE
 100

	)

14 
	#FAN_TASK_CALL_PERIOD
 50

	)

16 
	#TEMPERATURE_INDEX_MAX
 0xFF

	)

18 
uöt32_t
 
	$ÁnGëTem∑øtuª
(
uöt32_t
 
ãm≥øtuªIndex
, uöt32_à
ÁnIndex
)

20 i‡(
ãm≥øtuªIndex
 =
TEMPERATURE_INDEX_MAX
)

21  
	`ãm≥øtuªGëExã∫Æ
(
ÁnIndex
);

23  
	`ãm≥øtuªGëI¡î«l
(
ãm≥øtuªIndex
);

24 
	}
}

26 
uöt32_t
 
	$gëTime°amp
()

28  
	`xTaskGëTickCou¡
();

29 
	}
}

31 
	$⁄F™Sy°emEvít
()

34 
	}
}

36 
	$ÁnTaskFun˘i⁄
(*
pvP¨amëîs
)

38 
	`ÁnSy°emInô
(
ÁnGëTem∑øtuª
, 
gëTime°amp
, 
⁄F™Sy°emEvít
);

39 
uöt32_t
 
¥eviousTickCou¡
 = 
	`xTaskGëTickCou¡
();

40 
	`ÁnSy°emSèπF™Dëe˘i⁄
();

42 
	`ÁnSy°emTaskRun
();

43 
	`vTaskDñayU¡û
(&
¥eviousTickCou¡
, 
FAN_TASK_CALL_PERIOD
);

45 
	}
}

47 
	$ÁnTaskCª©e
()

49 
	`xTaskCª©e
(
ÁnTaskFun˘i⁄
, "F™", 
FAN_TASK_STACK_SIZE
, 
NULL
, 
FAN_TASK_PRIORITY
, NULL);

50 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\FanTask.h

1 #i‚de‡
__FAN_TASK_H__


2 
	#__FAN_TASK_H__


	)

4 
	~<°döt.h
>

6 
ÁnTaskCª©e
();

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\FreeRTOSConfig.h

30 #i‚de‡
FREERTOS_CONFIG_H


31 
	#FREERTOS_CONFIG_H


	)

33 
	~"LPC54608.h
"

35 
uöt32_t
 
Sy°emC‹eClock
;

49 
	#c⁄figUSE_PREEMPTION
 1

	)

50 
	#c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 1

	)

51 
	#c⁄figUSE_TICKLESS_IDLE
 1

	)

52 
	#c⁄figUSE_TICKLESS_IDLE_SIMPLE_DEBUG
 1

	)

53 
	#c⁄figCPU_CLOCK_HZ
 ( 
Sy°emC‹eClock
 )

	)

54 
	#c⁄figTICK_RATE_HZ
 1000

	)

55 
	#c⁄figMAX_PRIORITIES
 ( 5 )

	)

56 
	#c⁄figMINIMAL_STACK_SIZE
 ( ( Ë130 )

	)

57 
	#c⁄figTOTAL_HEAP_SIZE
 ( ( 
size_t
 ) ( 0x4000 ) )

	)

58 
	#c⁄figMAX_TASK_NAME_LEN
 ( 8 )

	)

59 
	#c⁄figUSE_16_BIT_TICKS
 0

	)

60 
	#c⁄figIDLE_SHOULD_YIELD
 1

	)

61 
	#c⁄figUSE_MUTEXES
 1

	)

62 
	#c⁄figUSE_RECURSIVE_MUTEXES
 1

	)

63 
	#c⁄figUSE_COUNTING_SEMAPHORES
 1

	)

64 
	#c⁄figUSE_ALTERNATIVE_API
 0

	)

65 
	#c⁄figQUEUE_REGISTRY_SIZE
 2

	)

66 
	#c⁄figUSE_QUEUE_SETS
 0

	)

67 
	#c⁄figUSE_TIME_SLICING
 0

	)

68 
	#c⁄figUSE_NEWLIB_REENTRANT
 0

	)

69 
	#c⁄figENABLE_BACKWARD_COMPATIBILITY
 0

	)

72 
	#c⁄figUSE_IDLE_HOOK
 1

	)

73 
	#c⁄figUSE_TICK_HOOK
 0

	)

74 
	#c⁄figCHECK_FOR_STACK_OVERFLOW
 2

	)

75 
	#c⁄figUSE_MALLOC_FAILED_HOOK
 1

	)

76 
	#c⁄figUSE_DAEMON_TASK_STARTUP_HOOK
 0

	)

78 
	#c⁄figGENERATE_RUN_TIME_STATS
 0

	)

79 
	#c⁄figUSE_TRACE_FACILITY
 0

	)

80 
	#c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 0

	)

83 
	#c⁄figUSE_CO_ROUTINES
 0

	)

84 
	#c⁄figMAX_CO_ROUTINE_PRIORITIES
 ( 2 )

	)

87 
	#c⁄figUSE_TIMERS
 1

	)

88 
	#c⁄figTIMER_TASK_PRIORITY
 ( 2 )

	)

89 
	#c⁄figTIMER_QUEUE_LENGTH
 32

	)

90 
	#c⁄figTIMER_TASK_STACK_DEPTH
 ( 
c⁄figMINIMAL_STACK_SIZE
 * 2 )

	)

93 
	#c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 2

	)

99 
	#c⁄figASSERT
–
x
 ) if––x ) =0 ) { 
	`èskDISABLE_INTERRUPTS
(); 
	`__asm
("BKPT #255"); }

	)

104 
	#c⁄figINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS
 1

	)

107 
	#INCLUDE_vTaskPri‹ôySë
 1

	)

108 
	#INCLUDE_uxTaskPri‹ôyGë
 1

	)

109 
	#INCLUDE_vTaskDñëe
 1

	)

110 
	#INCLUDE_vTaskSu•íd
 1

	)

111 
	#INCLUDE_xResumeFromISR
 1

	)

112 
	#INCLUDE_vTaskDñayU¡û
 1

	)

113 
	#INCLUDE_vTaskDñay
 1

	)

115 
	#INCLUDE_xTaskGëCuºítTaskH™dÀ
 1

	)

119 
	#INCLUDE_vTaskCÀ™UpResour˚s
 0

	)

120 
	#INCLUDE_xTaskGëH™dÀ
 1

	)

122 
	#INCLUDE_xTimîPídFun˘i⁄CÆl
 1

	)

125 #ifde‡
__NVIC_PRIO_BITS


127 
	#c⁄figPRIO_BITS
 
__NVIC_PRIO_BITS


	)

129 
	#c⁄figPRIO_BITS
 3

	)

134 
	#c⁄figLIBRARY_LOWEST_INTERRUPT_PRIORITY
 0x07

	)

140 
	#c⁄figLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY
 2

	)

144 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 ( 
c⁄figLIBRARY_LOWEST_INTERRUPT_PRIORITY
 << (8 - 
c⁄figPRIO_BITS
Ë)

	)

147 
	#c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ( 
c⁄figLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY
 << (8 - 
c⁄figPRIO_BITS
Ë)

	)

152 
	#vP‹tSVCH™dÀr
 
SVC_H™dÀr


	)

153 
	#xP‹tPídSVH™dÀr
 
PídSV_H™dÀr


	)

154 
	#xP‹tSysTickH™dÀr
 
SysTick_H™dÀr


	)

168 
	#c⁄figUSE_DISABLE_TICK_AUTO_CORRECTION_DEBUG
 0

	)

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\LcdInterface.h

5 #i‚de‡
LCDINTERFACE_H_


6 
	#LCDINTERFACE_H_


	)

8 
	$lcdSídFøme
()

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\LcdTask.c

1 
	~"FªeRTOS.h
"

2 
	~"èsk.h
"

3 
	~"£mphr.h
"

5 
	~"Lcd.h
"

7 
	~<°döt.h
>

9 
	~"Anim/Anim.c
"

11 
	#LCD_TASK_PRIORITY
 2

	)

12 
	#LCD_TASK_STACK_SIZE
 200

	)

13 
	#START_IND_SUMBOL
 "START"

	)

15 #¥agm®
∑ck
(
push
,1)

18 
uöt8_t
 
	mcomm™dM¨kî
[(
START_IND_SUMBOL
) - 1];

19 
uöt32_t
 
	msize
;

20 
uöt8_t
 
	m∑ylﬂd
[];

21 } 
	t£ndFømeComm™dT
;

22 #¥agm®
∑ck
(
p›
)

25 
Sem≠h‹eH™dÀ_t
 
	glcdSem≠h‹e
 = 
NULL
;

29 
uöt8_t
 *
	m‰ameBuff
;

30 }
	g‰amePro˚ssög
;

53 
ªadFœshFøme
(
uöt16_t
 
videoIndex
, uöt16_à
videoFømeC¡
);

58 
	mPLAY_FLASH
,

59 
	mPLAY_DIRECT
,

60 }
	t∂aySour˚T
;

65 
	mPLAYER_PLAY
,

66 
	mPLAYER_STOP
,

67 }
	t∂ayîSèãT
;

70 
	s∂ayFœshSèãT


72 
uöt16_t
 
	m‰ameC¡
;

76 
	s∂ayDúe˘SèãT


78 
uöt16_t
 
	mª£rved
;

84 
∂aySour˚T
 
	m∂aySour˚
;

85 
∂ayîSèãT
 
	m∂ayîSèã
;

86 
∂ayFœshSèãT
 
	m∂ayFœshSèã
;

87 
∂ayDúe˘SèãT
 
	m∂ayDúe˘Sèã
;

88 }
	g∂ayîH
 =

90 .
∂aySour˚
 = 
PLAY_DIRECT
,

91 .
	g∂ayîSèã
 = 
PLAYER_STOP
,

95 
	$£tNewFøme
(
uöt8_t
 
‰ameBuff
[])

97 
Ba£Ty≥_t
 
xHighîPri‹ôyTaskWokí
;

98 
£ndFømeComm™dT
 *
‰ameComm™d
 = (£ndFømeComm™dT*)
‰ameBuff
;

99 
‰amePro˚ssög
.
‰ameBuff
 = 
‰ameComm™d
->
∑ylﬂd
;

100 
xHighîPri‹ôyTaskWokí
 = 
pdFALSE
;

101 
∂ayîH
.
∂ayîSèã
 = 
PLAYER_PLAY
;

102 
	`xSem≠h‹eGiveFromISR
(
lcdSem≠h‹e
, &
xHighîPri‹ôyTaskWokí
);

103 
	}
}

107 
	$∂ayFœshPro˚ssög
()

110 
	}
}

113 
	$∂ayDúe˘Pro˚ssög
()

115 
	`putPi˘uª
(
‰amePro˚ssög
.
‰ameBuff
);

116 
	}
}

120 
	$lcdTaskFun˘i⁄
(*
pvP¨amëîs
)

123 
	`lcdInô
();

124 
lcdSem≠h‹e
 = 
	`xSem≠h‹eCª©eBö¨y
();

125 
	`putPi˘uª
(
image_d©a_02_0000_Layî10
);

127 i‡(
	`xSem≠h‹eTake
(
lcdSem≠h‹e
, 
p‹tMAX_DELAY
 ) !
pdTRUE
)

131 if(
∂ayîH
.
∂ayîSèã
 !
PLAYER_PLAY
)

136 
∂ayîH
.
∂aySour˚
)

138 
PLAY_FLASH
:

139 
	`∂ayFœshPro˚ssög
();

141 
PLAY_DIRECT
:

142 
	`∂ayDúe˘Pro˚ssög
();

147 
	}
}

155 
	$lcdTaskCª©e
()

157 
	`xTaskCª©e
(
lcdTaskFun˘i⁄
, "Lcd", 
LCD_TASK_STACK_SIZE
, 
NULL
, 
LCD_TASK_PRIORITY
, NULL);

158 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\LcdTask.h

1 #i‚de‡
__LCD_TASK_H__


2 
	#__LCD_TASK_H__


	)

4 
	~"°döt.h
"

6 
lcdTaskCª©e
();

7 
£tNewFøme
(
uöt8_t
 
‰ameBuff
[]);

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\LightingTask.c

1 
	~"LightögTask.h
"

3 
	~"FªeRTOS.h
"

4 
	~"èsk.h
"

5 
	~"£mphr.h
"

7 
	~"LedC⁄åﬁÀr.h
"

8 
	~"Led.h
"

10 
	~<°döt.h
>

13 
	#LIGHTING_TASK_PRIORITY
 2

	)

14 
	#LIGHTING_TASK_STACK_SIZE
 100

	)

16 c⁄° 
uöt32_t
 
	grgbD©a0
[] = {

23 c⁄° 
uöt32_t
 
	grgbD©a1
[] = {

30 c⁄° 
uöt32_t
 
	grgbD©a2
[] = {

37 
Sem≠h‹eH™dÀ_t
 
	gÀdDrivîRódySem≠h‹e
 = 
NULL
;

39 
	$⁄LedDrivîRódy
()

41 
Ba£Ty≥_t
 
xHighîPri‹ôyTaskWokí
;

42 
xHighîPri‹ôyTaskWokí
 = 
pdFALSE
;

44 
	`xSem≠h‹eGiveFromISR
–
ÀdDrivîRódySem≠h‹e
, &
xHighîPri‹ôyTaskWokí
 );

46 i‡(
xHighîPri‹ôyTaskWokí
 !
pdFALSE
) {

47 
	`p‹tYIELD_FROM_ISR
(
xHighîPri‹ôyTaskWokí
);

50 
	}
}

52 
	$ligthögTaskFun˘i⁄
(*
pvP¨amëîs
)

57 
	`ÀdInô
();

59 
	`ÀdPœyEf„˘s
();

60 
	`vTaskDñay
(40);

62 
	}
}

64 
	$lightögTaskCª©e
()

66 
	`xTaskCª©e
(
ligthögTaskFun˘i⁄
, "Light", 
LIGHTING_TASK_STACK_SIZE
, 
NULL
, 
LIGHTING_TASK_PRIORITY
, NULL);

67 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\LightingTask.h

1 #i‚de‡
__LIGHTING_TASK_H__


2 
	#__LIGHTING_TASK_H__


	)

4 
lightögTaskCª©e
();

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\PmBusCommunicationTask.c

1 
	~"PmBusHÆ.h
"

3 
	~"FªeRTOS.h
"

4 
	~"èsk.h
"

5 
	~"£mphr.h
"

6 
	~<m©h.h
>

8 
	~<°döt.h
>

10 
	#PM_BUS_COMMUNICATION_TASK_PRIORITY
 1

	)

11 
	#PM_BUS_COMMUNICATION_TASK_STACK_SIZE
 200

	)

13 c⁄° 
uöt8_t
 
	gpmBusSëupPackë
[] = {0x00, 0x11, 0x02, 0x64};

15 
uöt8_t
 
	gpmBusWrôeBuf„r
[] = {0x02, 0x8B};

17 
boﬁ
 
	gªsu…
;

19 
	$pmBusOnTøns„rCom∂ëe
(
boﬁ
 
isOk
)

21 
ªsu…
 = 
isOk
;

22 
	}
}

24 
	$vﬁège
(
uöt8_t
 
buff
[])

26 
öt8_t
 
n
 = ((öt8_t)
buff
[1]) >> 3;

27 
öt16_t
 
y
 = ((öt16_t)((((
buff
[1] & 0x07) << 8) | buff[0]) << 5)) >> 5;

28  
y
 * 
	`pow
(2, 
n
);

29 
	}
}

31 
	$pmBusCommuniˇti⁄TaskFun˘i⁄
(*
pvP¨amëîs
)

36 
	`vTaskDñay
(200);

37 
uöt8_t
 
d©a
[10];

83 
	}
}

85 
	$pmBusCommuniˇti⁄TaskCª©e
()

87 
	`xTaskCª©e
(
pmBusCommuniˇti⁄TaskFun˘i⁄
, "pmbus", 
PM_BUS_COMMUNICATION_TASK_STACK_SIZE
, 
NULL
, 
PM_BUS_COMMUNICATION_TASK_PRIORITY
, NULL);

88 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\PmBusCommunicationTask.h

1 #i‚de‡
__PM_BUS_COMMUNICATION_TASK_H__


2 
	#__PM_BUS_COMMUNICATION_TASK_H__


	)

4 
	~<°döt.h
>

6 
pmBusCommuniˇti⁄TaskCª©e
();

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Rtos.c

1 
	~"Rtos.h
"

3 
	~"FªeRTOS.h
"

4 
	~"èsk.h
"

6 
	~<°rög.h
>

8 
	$πosSèπScheduÀr
()

10 
	`vTaskSèπScheduÀr
();

11 
	}
}

13 
	$vAµliˇti⁄MÆlocFaûedHook
()

15 
	`èskDISABLE_INTERRUPTS
();

17 
	}
}

19 
	$vAµliˇti⁄SèckOvîÊowHook
(
TaskH™dÀ_t
 
pxTask
, *
pcTaskName
)

21 
	`èskDISABLE_INTERRUPTS
();

24 (Ë
pcTaskName
;

25 (Ë
pxTask
;

26 
	}
}

28 
	$vAµliˇti⁄IdÀHook
()

31 
	}
}

33 
	$vAµliˇti⁄TickHook
( )

36 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Rtos.h

1 #i‚de‡
__RTOS_H__


2 
	#__RTOS_H__


	)

4 
πosSèπScheduÀr
();

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\UsbDeviceTask.c

1 
	~"UsbDevi˚Task.h
"

2 
	~"LcdTask.h
"

4 
	~"FªeRTOS.h
"

5 
	~"èsk.h
"

6 
	~"£mphr.h
"

8 
	~"UsbHidDevi˚.h
"

10 
	~"UsbPrŸocﬁ.h
"

12 
	~"LPC54608.h
"

13 
	~"f¶_˘imî.h
"

14 
	~"f¶_˛ock.h
"

16 
	~<°döt.h
>

17 
	~<°rög.h
>

19 
	#REASONABLE_LONG_TIME
 0xFFFF

	)

21 
	#USB_DEVICE_TASK_PRIORITY
 3

	)

22 
	#USB_DEVICE_TASK_STACK_SIZE
 256

	)

24 
Sem≠h‹eH™dÀ_t
 
	gxSem≠h‹e
 = 
NULL
;

28 
	#SIZE_PACKET
 (1024)

	)

29 
	#NUMBER_OF_PACKET
 ((32768 + 
SIZE_PACKET
)/SIZE_PACKET + 1)

	)

30 
	#SIZE_RX_BUFFER
 (
SIZE_PACKET
 * 
NUMBER_OF_PACKET
)

	)

32 
CTIMER_Ty≥
 *
	gTIMER_CNT
 = 
CTIMER4
;

34 #¥agm®
∑ck
(
push
,1)

37 
uöt16_t
 
	mqu™tôyPackë
;

38 
uöt16_t
 
	m∑ckëNumbî
;

39 
uöt16_t
 
	mª°
;

40 
uöt8_t
 
	m∑ylﬂd
[];

41 }
	t∑ckëT
;

42 #¥agm®
∑ck
(
p›
)

47 
uöt16_t
 
	m√xtPackëNumbî
;

48 
uöt32_t
 
	mrxTime
;

49 }
	grxPackëSèã
 =

51 .
√xtPackëNumbî
 = 0,

52 .
	grxTime
 = 0,

55 c⁄° 
uöt16_t
 
	g∑ckëPaylﬂdSize
 = 
SIZE_PACKET
 - (
∑ckëT
);

57 
uöt8_t
 
	grxComm™dBuf„r
[
SIZE_RX_BUFFER
] = {[0 ... (SIZE_RX_BUFFER - 1)] = 0};

59 
uöt16_t
 
	grxTime_
[300];

63 
ölöe
 
uöt32_t
 
	$gëTimîCNT
()

65  (
uöt32_t
)
TIMER_CNT
->
TC
;

66 
	}
}

68 
ölöe
 
	$ª£tTimîCNT
()

70 
TIMER_CNT
->
TC
 = 0;

71 
	}
}

73 
	$öôTimîF‹MeTime
()

75 
˘imî_c⁄fig_t
 
öôSåu˘
;

77 
öôSåu˘
.
mode
 = 
kCTIMER_TimîMode
;

78 
SYSCON
->
ASYNCAPBCTRL
 = 
	`SYSCON_ASYNCAPBCTRL_ENABLE
(1);

79 
öôSåu˘
.
¥esˇÀ
 = 
	`CLOCK_GëAsyncApbClkFªq
()/1000000;

80 
	`CTIMER_Inô
(
TIMER_CNT
, &
öôSåu˘
);

81 
	`CTIMER_SèπTimî
(
TIMER_CNT
);

82 
	}
}

85 
ölöe
 
	$rxPackëPro˚ssög
(c⁄° 
uöt8_t
 
buf„r
[], 
uöt16_t
 
buf„rSize
)

87 
Ba£Ty≥_t
 
xHighîPri‹ôyTaskWokí
;

88 
∑ckëT
 *
rxPackë
 = (∑ckëT*)
buf„r
;

89 if(
rxPackë
->
∑ckëNumbî
 !
rxPackëSèã
.
√xtPackëNumbî
)

91 
rxPackëSèã
.
√xtPackëNumbî
 = 0;

94 if(
rxPackëSèã
.
√xtPackëNumbî
 == 0)

96 
rxPackëSèã
.
rxTime
 = 
	`gëTimîCNT
();

98 
rxTime_
[
rxPackëSèã
.
√xtPackëNumbî
] = 
	`gëTimîCNT
(Ë-ÑxPackëSèã.
rxTime
;

99 
rxPackëSèã
.
rxTime
 = 
	`gëTimîCNT
();

101 
	`mem˝y
(&
rxComm™dBuf„r
[
rxPackë
->
∑ckëNumbî
 * 
∑ckëPaylﬂdSize
],ÑxPackë->
∑ylﬂd
, (‘xPackë->
qu™tôyPackë
 - 1) ==ÑxPacket->packetNumber) ?

102 (
rxPackë
->
ª°
):

103 (
∑ckëPaylﬂdSize
));

104 if(
rxPackë
->
∑ckëNumbî
 =‘xPackë->
qu™tôyPackë
 - 1))

107 
rxPackëSèã
.
rxTime
 = 
	`gëTimîCNT
() -ÑxPacketState.rxTime;

108 
rxPackëSèã
.
√xtPackëNumbî
 = 0;

110 
xHighîPri‹ôyTaskWokí
 = 
pdFALSE
;

111 
	`xSem≠h‹eGiveFromISR
(
xSem≠h‹e
, &
xHighîPri‹ôyTaskWokí
);

112 i‡(
xHighîPri‹ôyTaskWokí
 !
pdFALSE
)

114 
	`p‹tYIELD_FROM_ISR
(
xHighîPri‹ôyTaskWokí
);

118 
rxPackëSèã
.
√xtPackëNumbî
++;

119 
	}
}

124 
	$hidI¡OuçutRï‹t
(c⁄° 
uöt8_t
 
ªp‹tD©a
[], 
size_t
 
ªp‹tSize
)

127 
	`rxPackëPro˚ssög
(
ªp‹tD©a
, 
ªp‹tSize
);

158 
	}
}

160 
	$hidI¡I≈utRï‹t
()

163 
	}
}

165 
	$usbDevi˚TaskFun˘i⁄
(*
pvP¨amëîs
)

167 
xSem≠h‹e
 = 
	`xSem≠h‹eCª©eBö¨y
();

171 i‡(
	`xSem≠h‹eTake
(
xSem≠h‹e
, 
REASONABLE_LONG_TIME
Ë=
pdTRUE
)

173 
	`£tNewFøme
(
rxComm™dBuf„r
);

182 
	}
}

184 
	$usbDevi˚TaskCª©e
()

186 
	`öôTimîF‹MeTime
();

187 
	`usbHidDevi˚SëCÆlbacks
(
hidI¡I≈utRï‹t
, 
hidI¡OuçutRï‹t
);

188 
	`xTaskCª©e
(
usbDevi˚TaskFun˘i⁄
, "UsbComm", 
USB_DEVICE_TASK_STACK_SIZE
, 
NULL
, 
USB_DEVICE_TASK_PRIORITY
, NULL);

189 
	`xTaskCª©e
(
usbHidDevi˚TaskFun˘i⁄
, "UsbDrv", 
USB_DEVICE_TASK_STACK_SIZE
, 
NULL
, 
USB_DEVICE_TASK_PRIORITY
, NULL);

190 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\UsbDeviceTask.h

1 #i‚de‡
__USB_DEVICE_TASK_H__


2 
	#__USB_DEVICE_TASK_H__


	)

4 
usbDevi˚TaskCª©e
();

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\clock_config.c

59 
	~"f¶_powî.h
"

60 
	~"f¶_˛ock.h
"

61 
	~"˛ock_c⁄fig.h
"

71 
uöt32_t
 
Sy°emC‹eClock
;

91 
	$BOARD_BoŸClockFRO12M
()

95 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_FRO_EN
);

96 
	`CLOCK_AâachClk
(

97 
kFRO12M_to_MAIN_CLK
);

99 
	`CLOCK_SëupFROClockög
(12000000U);

100 
	`POWER_SëVﬁègeF‹Fªq
(

102 
	`CLOCK_SëFLASHAc˚ssCy˛esF‹Fªq
(12000000U);

105 
	`CLOCK_SëClkDiv
(
kCLOCK_DivAhbClk
, 1U, 
Ál£
);

108 
	`CLOCK_AâachClk
(
kFRO12M_to_MAIN_CLK
);

110 
Sy°emC‹eClock
 = 
BOARD_BOOTCLOCKFRO12M_CORE_CLOCK
;

111 
	}
}

131 
	$BOARD_BoŸClockFROHF48M
()

135 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_FRO_EN
);

136 
	`CLOCK_AâachClk
(

137 
kFRO12M_to_MAIN_CLK
);

139 
	`POWER_SëVﬁègeF‹Fªq
(

141 
	`CLOCK_SëFLASHAc˚ssCy˛esF‹Fªq
(48000000U);

143 
	`CLOCK_SëupFROClockög
(48000000U);

146 
	`CLOCK_SëClkDiv
(
kCLOCK_DivAhbClk
, 1U, 
Ál£
);

149 
	`CLOCK_AâachClk
(
kFRO_HF_to_MAIN_CLK
);

151 
Sy°emC‹eClock
 = 
BOARD_BOOTCLOCKFROHF48M_CORE_CLOCK
;

152 
	}
}

174 
	$BOARD_BoŸClockFROHF96M
()

178 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_FRO_EN
);

179 
	`CLOCK_AâachClk
(

180 
kFRO12M_to_MAIN_CLK
);

182 
	`POWER_SëVﬁègeF‹Fªq
(

184 
	`CLOCK_SëFLASHAc˚ssCy˛esF‹Fªq
(96000000U);

186 
	`CLOCK_SëupFROClockög
(96000000U);

189 
	`CLOCK_SëClkDiv
(
kCLOCK_DivAhbClk
, 1U, 
Ál£
);

192 
	`CLOCK_AâachClk
(
kFRO_HF_to_MAIN_CLK
);

194 
Sy°emC‹eClock
 = 
BOARD_BOOTCLOCKFROHF96M_CORE_CLOCK
;

195 
	}
}

223 
	$BOARD_BoŸClockPLL180M
()

227 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_FRO_EN
);

228 
	`CLOCK_AâachClk
(

229 
kFRO12M_to_MAIN_CLK
);

231 
	`POWER_SëVﬁègeF‹Fªq
(

233 
	`CLOCK_SëFLASHAc˚ssCy˛esF‹Fªq
(12000000U);

236 c⁄° 
∂l_£tup_t
 
∂lSëup
 = {

237 .
∂l˘æ
 = 
	`SYSCON_SYSPLLCTRL_SELI
(32UË| 
	`SYSCON_SYSPLLCTRL_SELP
(16UË| 
	`SYSCON_SYSPLLCTRL_SELR
(0U),

238 .
∂lmdec
 = (
	`SYSCON_SYSPLLMDEC_MDEC
(8191U)),

239 .
∂ dec
 = (
	`SYSCON_SYSPLLNDEC_NDEC
(770U)),

240 .
∂Õdec
 = (
	`SYSCON_SYSPLLPDEC_PDEC
(98U)),

241 .
∂lR©e
 = 180000000U,

242 .
Êags
 = 
PLL_SETUPFLAG_WAITLOCK
 | 
PLL_SETUPFLAG_POWERUP
};

243 
	`CLOCK_AâachClk
(
kEXT_CLK_to_SYS_PLL
);

244 
	`CLOCK_SëPLLFªq
(&
∂lSëup
);

245 
	`POWER_SëVﬁègeF‹Fªq
(

247 
	`CLOCK_SëFLASHAc˚ssCy˛esF‹Fªq
(180000000U);

248 
	`CLOCK_AâachClk
(
kSYS_PLL_to_MAIN_CLK
);

251 
Sy°emC‹eClock
 = 
BOARD_BOOTCLOCKPLL180M_CORE_CLOCK
;

252 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\clock_config.h

35 #i‚de‡
_CLOCK_CONFIG_H_


36 
	#_CLOCK_CONFIG_H_


	)

38 
	~"f¶_comm⁄.h
"

43 
	#BOARD_XTAL0_CLK_HZ
 12000000U

	)

44 
	#BOARD_XTAL32K_CLK_HZ
 32768U

	)

45 
	#BOARD_BoŸClockRUN
 
BOARD_BoŸClockFROHF48M


	)

54 
	#BOARD_BOOTCLOCKFRO12M_CORE_CLOCK
 12000000U

	)

59 #i‡
deföed
(
__˝lu•lus
)

67 
BOARD_BoŸClockFRO12M
();

69 #i‡
deföed
(
__˝lu•lus
)

79 
	#BOARD_BOOTCLOCKFROHF48M_CORE_CLOCK
 48000000U

	)

84 #i‡
deföed
(
__˝lu•lus
)

92 
BOARD_BoŸClockFROHF48M
();

94 #i‡
deföed
(
__˝lu•lus
)

104 
	#BOARD_BOOTCLOCKFROHF96M_CORE_CLOCK
 96000000U

	)

109 #i‡
deföed
(
__˝lu•lus
)

117 
BOARD_BoŸClockFROHF96M
();

119 #i‡
deföed
(
__˝lu•lus
)

129 
	#BOARD_BOOTCLOCKPLL180M_CORE_CLOCK
 180000000U

	)

134 #i‡
deföed
(
__˝lu•lus
)

142 
BOARD_BoŸClockPLL180M
();

144 #i‡
deföed
(
__˝lu•lus
)

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\main.c

1 
	~"Rtos.h
"

2 
	~"UsbDevi˚Task.h
"

3 
	~"LightögTask.h
"

4 
	~"F™Task.h
"

5 
	~"PmBusCommuniˇti⁄Task.h
"

6 
	~"A«logMósuªmítTask.h
"

7 
	~"HÆComm⁄.h
"

8 
	~"PmBusHÆ.h
"

9 
	~"LcdTask.h
"

11 
	$maö
()

13 
	`hÆComm⁄Inô
();

14 
	`usbDevi˚TaskCª©e
();

15 
	`lightögTaskCª©e
();

16 
	`ÁnTaskCª©e
();

17 
	`™ÆogMósuªmítTaskCª©e
();

18 
	`lcdTaskCª©e
();

19 
	`πosSèπScheduÀr
();

26 
	}
}

28 
	$h¨d_Áu…_h™dÀr_c
(* 
h¨dÁu…_¨gs
)

30 
°acked_r0
;

31 
°acked_r1
;

32 
°acked_r2
;

33 
°acked_r3
;

34 
°acked_r12
;

35 
°acked_Ã
;

36 
°acked_pc
;

37 
°acked_p§
;

39 
°acked_r0
 = ((Ë
h¨dÁu…_¨gs
[0]);

40 
°acked_r1
 = ((Ë
h¨dÁu…_¨gs
[1]);

41 
°acked_r2
 = ((Ë
h¨dÁu…_¨gs
[2]);

42 
°acked_r3
 = ((Ë
h¨dÁu…_¨gs
[3]);

44 
°acked_r12
 = ((Ë
h¨dÁu…_¨gs
[4]);

45 
°acked_Ã
 = ((Ë
h¨dÁu…_¨gs
[5]);

46 
°acked_pc
 = ((Ë
h¨dÁu…_¨gs
[6]);

47 
°acked_p§
 = ((Ë
h¨dÁu…_¨gs
[7]);

50 
__asm
 volatile ( "NOP" );

52 (Ë
°acked_r0
;

53 (Ë
°acked_r1
;

54 (Ë
°acked_r2
;

55 (Ë
°acked_r3
;

56 (Ë
°acked_r12
;

57 (Ë
°acked_Ã
;

58 (Ë
°acked_pc
;

59 (Ë
°acked_p§
;

60 
	}
}

62 
	$H¨dFau…_H™dÀr
()

64 
asm
 volatile(

78 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\CMSIS\Include\core_cm4.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_CM4_H_GENERIC


32 
	#__CORE_CM4_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__CM4_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__CM4_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__CM4_CMSIS_VERSION
 ((
__CM4_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__CM4_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_M
 (4UË

	)

76 #i‡
deföed
 ( 
__CC_ARM
 )

77 #i‡
deföed
 
__TARGET_FPU_VFP


78 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

79 
	#__FPU_USED
 1U

	)

82 
	#__FPU_USED
 0U

	)

85 
	#__FPU_USED
 0U

	)

88 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

89 #i‡
deföed
 
__ARM_PCS_VFP


90 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

91 
	#__FPU_USED
 1U

	)

94 
	#__FPU_USED
 0U

	)

97 
	#__FPU_USED
 0U

	)

100 #ñi‡
deföed
 ( 
__GNUC__
 )

101 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

102 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

103 
	#__FPU_USED
 1U

	)

106 
	#__FPU_USED
 0U

	)

109 
	#__FPU_USED
 0U

	)

112 #ñi‡
deföed
 ( 
__ICCARM__
 )

113 #i‡
deföed
 
__ARMVFP__


114 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

115 
	#__FPU_USED
 1U

	)

118 
	#__FPU_USED
 0U

	)

121 
	#__FPU_USED
 0U

	)

124 #ñi‡
deföed
 ( 
__TI_ARM__
 )

125 #i‡
deföed
 
__TI_VFP_SUPPORT__


126 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

127 
	#__FPU_USED
 1U

	)

130 
	#__FPU_USED
 0U

	)

133 
	#__FPU_USED
 0U

	)

136 #ñi‡
deföed
 ( 
__TASKING__
 )

137 #i‡
deföed
 
__FPU_VFP__


138 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

139 
	#__FPU_USED
 1U

	)

142 
	#__FPU_USED
 0U

	)

145 
	#__FPU_USED
 0U

	)

148 #ñi‡
deföed
 ( 
__CSMC__
 )

149 #i‡–
__CSMC__
 & 0x400U)

150 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

151 
	#__FPU_USED
 1U

	)

154 
	#__FPU_USED
 0U

	)

157 
	#__FPU_USED
 0U

	)

162 
	~"cmsis_compûî.h
"

165 #ifde‡
__˝lu•lus


171 #i‚de‡
__CMSIS_GENERIC


173 #i‚de‡
__CORE_CM4_H_DEPENDANT


174 
	#__CORE_CM4_H_DEPENDANT


	)

176 #ifde‡
__˝lu•lus


181 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


182 #i‚de‡
__CM4_REV


183 
	#__CM4_REV
 0x0000U

	)

187 #i‚de‡
__FPU_PRESENT


188 
	#__FPU_PRESENT
 0U

	)

192 #i‚de‡
__MPU_PRESENT


193 
	#__MPU_PRESENT
 0U

	)

197 #i‚de‡
__NVIC_PRIO_BITS


198 
	#__NVIC_PRIO_BITS
 3U

	)

202 #i‚de‡
__Víd‹_SysTickC⁄fig


203 
	#__Víd‹_SysTickC⁄fig
 0U

	)

216 #ifde‡
__˝lu•lus


217 
	#__I
 vﬁ©ûê

	)

219 
	#__I
 vﬁ©ûêc⁄°

	)

221 
	#__O
 vﬁ©ûê

	)

222 
	#__IO
 vﬁ©ûê

	)

225 
	#__IM
 vﬁ©ûêc⁄°

	)

226 
	#__OM
 vﬁ©ûê

	)

227 
	#__IOM
 vﬁ©ûê

	)

263 
uöt32_t
 
_ª£rved0
:16;

264 
uöt32_t
 
GE
:4;

265 
uöt32_t
 
_ª£rved1
:7;

266 
uöt32_t
 
Q
:1;

267 
uöt32_t
 
V
:1;

268 
uöt32_t
 
C
:1;

269 
uöt32_t
 
Z
:1;

270 
uöt32_t
 
N
:1;

271 } 
b
;

272 
uöt32_t
 
w
;

273 } 
	tAPSR_Ty≥
;

276 
	#APSR_N_Pos
 31U

	)

277 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

279 
	#APSR_Z_Pos
 30U

	)

280 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

282 
	#APSR_C_Pos
 29U

	)

283 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

285 
	#APSR_V_Pos
 28U

	)

286 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

288 
	#APSR_Q_Pos
 27U

	)

289 
	#APSR_Q_Msk
 (1UL << 
APSR_Q_Pos
Ë

	)

291 
	#APSR_GE_Pos
 16U

	)

292 
	#APSR_GE_Msk
 (0xFUL << 
APSR_GE_Pos
Ë

	)

302 
uöt32_t
 
ISR
:9;

303 
uöt32_t
 
_ª£rved0
:23;

304 } 
b
;

305 
uöt32_t
 
w
;

306 } 
	tIPSR_Ty≥
;

309 
	#IPSR_ISR_Pos
 0U

	)

310 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

320 
uöt32_t
 
ISR
:9;

321 
uöt32_t
 
_ª£rved0
:1;

322 
uöt32_t
 
ICI_IT_1
:6;

323 
uöt32_t
 
GE
:4;

324 
uöt32_t
 
_ª£rved1
:4;

325 
uöt32_t
 
T
:1;

326 
uöt32_t
 
ICI_IT_2
:2;

327 
uöt32_t
 
Q
:1;

328 
uöt32_t
 
V
:1;

329 
uöt32_t
 
C
:1;

330 
uöt32_t
 
Z
:1;

331 
uöt32_t
 
N
:1;

332 } 
b
;

333 
uöt32_t
 
w
;

334 } 
	txPSR_Ty≥
;

337 
	#xPSR_N_Pos
 31U

	)

338 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

340 
	#xPSR_Z_Pos
 30U

	)

341 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

343 
	#xPSR_C_Pos
 29U

	)

344 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

346 
	#xPSR_V_Pos
 28U

	)

347 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

349 
	#xPSR_Q_Pos
 27U

	)

350 
	#xPSR_Q_Msk
 (1UL << 
xPSR_Q_Pos
Ë

	)

352 
	#xPSR_ICI_IT_2_Pos
 25U

	)

353 
	#xPSR_ICI_IT_2_Msk
 (3UL << 
xPSR_ICI_IT_2_Pos
Ë

	)

355 
	#xPSR_T_Pos
 24U

	)

356 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

358 
	#xPSR_GE_Pos
 16U

	)

359 
	#xPSR_GE_Msk
 (0xFUL << 
xPSR_GE_Pos
Ë

	)

361 
	#xPSR_ICI_IT_1_Pos
 10U

	)

362 
	#xPSR_ICI_IT_1_Msk
 (0x3FUL << 
xPSR_ICI_IT_1_Pos
Ë

	)

364 
	#xPSR_ISR_Pos
 0U

	)

365 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

375 
uöt32_t
 
nPRIV
:1;

376 
uöt32_t
 
SPSEL
:1;

377 
uöt32_t
 
FPCA
:1;

378 
uöt32_t
 
_ª£rved0
:29;

379 } 
b
;

380 
uöt32_t
 
w
;

381 } 
	tCONTROL_Ty≥
;

384 
	#CONTROL_FPCA_Pos
 2U

	)

385 
	#CONTROL_FPCA_Msk
 (1UL << 
CONTROL_FPCA_Pos
Ë

	)

387 
	#CONTROL_SPSEL_Pos
 1U

	)

388 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

390 
	#CONTROL_nPRIV_Pos
 0U

	)

391 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

408 
__IOM
 
uöt32_t
 
ISER
[8U];

409 
uöt32_t
 
RESERVED0
[24U];

410 
__IOM
 
uöt32_t
 
ICER
[8U];

411 
uöt32_t
 
RSERVED1
[24U];

412 
__IOM
 
uöt32_t
 
ISPR
[8U];

413 
uöt32_t
 
RESERVED2
[24U];

414 
__IOM
 
uöt32_t
 
ICPR
[8U];

415 
uöt32_t
 
RESERVED3
[24U];

416 
__IOM
 
uöt32_t
 
IABR
[8U];

417 
uöt32_t
 
RESERVED4
[56U];

418 
__IOM
 
uöt8_t
 
IP
[240U];

419 
uöt32_t
 
RESERVED5
[644U];

420 
__OM
 
uöt32_t
 
STIR
;

421 } 
	tNVIC_Ty≥
;

424 
	#NVIC_STIR_INTID_Pos
 0U

	)

425 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL )

	)

442 
__IM
 
uöt32_t
 
CPUID
;

443 
__IOM
 
uöt32_t
 
ICSR
;

444 
__IOM
 
uöt32_t
 
VTOR
;

445 
__IOM
 
uöt32_t
 
AIRCR
;

446 
__IOM
 
uöt32_t
 
SCR
;

447 
__IOM
 
uöt32_t
 
CCR
;

448 
__IOM
 
uöt8_t
 
SHP
[12U];

449 
__IOM
 
uöt32_t
 
SHCSR
;

450 
__IOM
 
uöt32_t
 
CFSR
;

451 
__IOM
 
uöt32_t
 
HFSR
;

452 
__IOM
 
uöt32_t
 
DFSR
;

453 
__IOM
 
uöt32_t
 
MMFAR
;

454 
__IOM
 
uöt32_t
 
BFAR
;

455 
__IOM
 
uöt32_t
 
AFSR
;

456 
__IM
 
uöt32_t
 
PFR
[2U];

457 
__IM
 
uöt32_t
 
DFR
;

458 
__IM
 
uöt32_t
 
ADR
;

459 
__IM
 
uöt32_t
 
MMFR
[4U];

460 
__IM
 
uöt32_t
 
ISAR
[5U];

461 
uöt32_t
 
RESERVED0
[5U];

462 
__IOM
 
uöt32_t
 
CPACR
;

463 } 
	tSCB_Ty≥
;

466 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

467 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

469 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

470 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

472 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

473 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

475 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

476 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

478 
	#SCB_CPUID_REVISION_Pos
 0U

	)

479 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

482 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

483 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

485 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

486 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

488 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

489 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

491 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

492 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

494 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

495 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

497 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

498 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

500 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

501 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

503 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

504 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

506 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

507 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

509 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

510 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

513 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

514 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

517 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

518 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

520 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

521 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

523 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

524 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

526 
	#SCB_AIRCR_PRIGROUP_Pos
 8U

	)

527 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

529 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

530 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

532 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

533 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

535 
	#SCB_AIRCR_VECTRESET_Pos
 0U

	)

536 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL )

	)

539 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

540 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

542 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

543 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

545 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

546 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

549 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

550 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

552 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

553 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

555 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

556 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

558 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

559 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

561 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

562 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

564 
	#SCB_CCR_NONBASETHRDENA_Pos
 0U

	)

565 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL )

	)

568 
	#SCB_SHCSR_USGFAULTENA_Pos
 18U

	)

569 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

571 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17U

	)

572 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

574 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16U

	)

575 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

577 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

578 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

580 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14U

	)

581 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

583 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13U

	)

584 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

586 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12U

	)

587 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

589 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

590 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

592 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

593 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

595 
	#SCB_SHCSR_MONITORACT_Pos
 8U

	)

596 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

598 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

599 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

601 
	#SCB_SHCSR_USGFAULTACT_Pos
 3U

	)

602 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

604 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1U

	)

605 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

607 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0U

	)

608 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL )

	)

611 
	#SCB_CFSR_USGFAULTSR_Pos
 16U

	)

612 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

614 
	#SCB_CFSR_BUSFAULTSR_Pos
 8U

	)

615 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

617 
	#SCB_CFSR_MEMFAULTSR_Pos
 0U

	)

618 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL )

	)

621 
	#SCB_CFSR_MMARVALID_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 7UË

	)

622 
	#SCB_CFSR_MMARVALID_Msk
 (1UL << 
SCB_CFSR_MMARVALID_Pos
Ë

	)

624 
	#SCB_CFSR_MLSPERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 5UË

	)

625 
	#SCB_CFSR_MLSPERR_Msk
 (1UL << 
SCB_CFSR_MLSPERR_Pos
Ë

	)

627 
	#SCB_CFSR_MSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 4UË

	)

628 
	#SCB_CFSR_MSTKERR_Msk
 (1UL << 
SCB_CFSR_MSTKERR_Pos
Ë

	)

630 
	#SCB_CFSR_MUNSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 3UË

	)

631 
	#SCB_CFSR_MUNSTKERR_Msk
 (1UL << 
SCB_CFSR_MUNSTKERR_Pos
Ë

	)

633 
	#SCB_CFSR_DACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 1UË

	)

634 
	#SCB_CFSR_DACCVIOL_Msk
 (1UL << 
SCB_CFSR_DACCVIOL_Pos
Ë

	)

636 
	#SCB_CFSR_IACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 0UË

	)

637 
	#SCB_CFSR_IACCVIOL_Msk
 (1UL )

	)

640 
	#SCB_CFSR_BFARVALID_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 7UË

	)

641 
	#SCB_CFSR_BFARVALID_Msk
 (1UL << 
SCB_CFSR_BFARVALID_Pos
Ë

	)

643 
	#SCB_CFSR_LSPERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 5UË

	)

644 
	#SCB_CFSR_LSPERR_Msk
 (1UL << 
SCB_CFSR_LSPERR_Pos
Ë

	)

646 
	#SCB_CFSR_STKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 4UË

	)

647 
	#SCB_CFSR_STKERR_Msk
 (1UL << 
SCB_CFSR_STKERR_Pos
Ë

	)

649 
	#SCB_CFSR_UNSTKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 3UË

	)

650 
	#SCB_CFSR_UNSTKERR_Msk
 (1UL << 
SCB_CFSR_UNSTKERR_Pos
Ë

	)

652 
	#SCB_CFSR_IMPRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 2UË

	)

653 
	#SCB_CFSR_IMPRECISERR_Msk
 (1UL << 
SCB_CFSR_IMPRECISERR_Pos
Ë

	)

655 
	#SCB_CFSR_PRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 1UË

	)

656 
	#SCB_CFSR_PRECISERR_Msk
 (1UL << 
SCB_CFSR_PRECISERR_Pos
Ë

	)

658 
	#SCB_CFSR_IBUSERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 0UË

	)

659 
	#SCB_CFSR_IBUSERR_Msk
 (1UL << 
SCB_CFSR_IBUSERR_Pos
Ë

	)

662 
	#SCB_CFSR_DIVBYZERO_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 9UË

	)

663 
	#SCB_CFSR_DIVBYZERO_Msk
 (1UL << 
SCB_CFSR_DIVBYZERO_Pos
Ë

	)

665 
	#SCB_CFSR_UNALIGNED_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 8UË

	)

666 
	#SCB_CFSR_UNALIGNED_Msk
 (1UL << 
SCB_CFSR_UNALIGNED_Pos
Ë

	)

668 
	#SCB_CFSR_NOCP_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 3UË

	)

669 
	#SCB_CFSR_NOCP_Msk
 (1UL << 
SCB_CFSR_NOCP_Pos
Ë

	)

671 
	#SCB_CFSR_INVPC_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 2UË

	)

672 
	#SCB_CFSR_INVPC_Msk
 (1UL << 
SCB_CFSR_INVPC_Pos
Ë

	)

674 
	#SCB_CFSR_INVSTATE_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 1UË

	)

675 
	#SCB_CFSR_INVSTATE_Msk
 (1UL << 
SCB_CFSR_INVSTATE_Pos
Ë

	)

677 
	#SCB_CFSR_UNDEFINSTR_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 0UË

	)

678 
	#SCB_CFSR_UNDEFINSTR_Msk
 (1UL << 
SCB_CFSR_UNDEFINSTR_Pos
Ë

	)

681 
	#SCB_HFSR_DEBUGEVT_Pos
 31U

	)

682 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

684 
	#SCB_HFSR_FORCED_Pos
 30U

	)

685 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

687 
	#SCB_HFSR_VECTTBL_Pos
 1U

	)

688 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

691 
	#SCB_DFSR_EXTERNAL_Pos
 4U

	)

692 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

694 
	#SCB_DFSR_VCATCH_Pos
 3U

	)

695 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

697 
	#SCB_DFSR_DWTTRAP_Pos
 2U

	)

698 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

700 
	#SCB_DFSR_BKPT_Pos
 1U

	)

701 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

703 
	#SCB_DFSR_HALTED_Pos
 0U

	)

704 
	#SCB_DFSR_HALTED_Msk
 (1UL )

	)

721 
uöt32_t
 
RESERVED0
[1U];

722 
__IM
 
uöt32_t
 
ICTR
;

723 
__IOM
 
uöt32_t
 
ACTLR
;

724 } 
	tSCnSCB_Ty≥
;

727 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0U

	)

728 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL )

	)

731 
	#SCnSCB_ACTLR_DISOOFP_Pos
 9U

	)

732 
	#SCnSCB_ACTLR_DISOOFP_Msk
 (1UL << 
SCnSCB_ACTLR_DISOOFP_Pos
Ë

	)

734 
	#SCnSCB_ACTLR_DISFPCA_Pos
 8U

	)

735 
	#SCnSCB_ACTLR_DISFPCA_Msk
 (1UL << 
SCnSCB_ACTLR_DISFPCA_Pos
Ë

	)

737 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2U

	)

738 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

740 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1U

	)

741 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

743 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0U

	)

744 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL )

	)

761 
__IOM
 
uöt32_t
 
CTRL
;

762 
__IOM
 
uöt32_t
 
LOAD
;

763 
__IOM
 
uöt32_t
 
VAL
;

764 
__IM
 
uöt32_t
 
CALIB
;

765 } 
	tSysTick_Ty≥
;

768 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

769 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

771 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

772 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

774 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

775 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

777 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

778 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

781 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

782 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

785 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

786 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

789 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

790 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

792 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

793 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

795 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

796 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

813 
__OM
 union

815 
__OM
 
uöt8_t
 
u8
;

816 
__OM
 
uöt16_t
 
u16
;

817 
__OM
 
uöt32_t
 
u32
;

818 } 
PORT
 [32U];

819 
uöt32_t
 
RESERVED0
[864U];

820 
__IOM
 
uöt32_t
 
TER
;

821 
uöt32_t
 
RESERVED1
[15U];

822 
__IOM
 
uöt32_t
 
TPR
;

823 
uöt32_t
 
RESERVED2
[15U];

824 
__IOM
 
uöt32_t
 
TCR
;

825 
uöt32_t
 
RESERVED3
[29U];

826 
__OM
 
uöt32_t
 
IWR
;

827 
__IM
 
uöt32_t
 
IRR
;

828 
__IOM
 
uöt32_t
 
IMCR
;

829 
uöt32_t
 
RESERVED4
[43U];

830 
__OM
 
uöt32_t
 
LAR
;

831 
__IM
 
uöt32_t
 
LSR
;

832 
uöt32_t
 
RESERVED5
[6U];

833 
__IM
 
uöt32_t
 
PID4
;

834 
__IM
 
uöt32_t
 
PID5
;

835 
__IM
 
uöt32_t
 
PID6
;

836 
__IM
 
uöt32_t
 
PID7
;

837 
__IM
 
uöt32_t
 
PID0
;

838 
__IM
 
uöt32_t
 
PID1
;

839 
__IM
 
uöt32_t
 
PID2
;

840 
__IM
 
uöt32_t
 
PID3
;

841 
__IM
 
uöt32_t
 
CID0
;

842 
__IM
 
uöt32_t
 
CID1
;

843 
__IM
 
uöt32_t
 
CID2
;

844 
__IM
 
uöt32_t
 
CID3
;

845 } 
	tITM_Ty≥
;

848 
	#ITM_TPR_PRIVMASK_Pos
 0U

	)

849 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL )

	)

852 
	#ITM_TCR_BUSY_Pos
 23U

	)

853 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

855 
	#ITM_TCR_Tø˚BusID_Pos
 16U

	)

856 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

858 
	#ITM_TCR_GTSFREQ_Pos
 10U

	)

859 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

861 
	#ITM_TCR_TSPªsˇÀ_Pos
 8U

	)

862 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

864 
	#ITM_TCR_SWOENA_Pos
 4U

	)

865 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

867 
	#ITM_TCR_DWTENA_Pos
 3U

	)

868 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

870 
	#ITM_TCR_SYNCENA_Pos
 2U

	)

871 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

873 
	#ITM_TCR_TSENA_Pos
 1U

	)

874 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

876 
	#ITM_TCR_ITMENA_Pos
 0U

	)

877 
	#ITM_TCR_ITMENA_Msk
 (1UL )

	)

880 
	#ITM_IWR_ATVALIDM_Pos
 0U

	)

881 
	#ITM_IWR_ATVALIDM_Msk
 (1UL )

	)

884 
	#ITM_IRR_ATREADYM_Pos
 0U

	)

885 
	#ITM_IRR_ATREADYM_Msk
 (1UL )

	)

888 
	#ITM_IMCR_INTEGRATION_Pos
 0U

	)

889 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL )

	)

892 
	#ITM_LSR_ByãAcc_Pos
 2U

	)

893 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

895 
	#ITM_LSR_Ac˚ss_Pos
 1U

	)

896 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

898 
	#ITM_LSR_Pª£¡_Pos
 0U

	)

899 
	#ITM_LSR_Pª£¡_Msk
 (1UL )

	)

916 
__IOM
 
uöt32_t
 
CTRL
;

917 
__IOM
 
uöt32_t
 
CYCCNT
;

918 
__IOM
 
uöt32_t
 
CPICNT
;

919 
__IOM
 
uöt32_t
 
EXCCNT
;

920 
__IOM
 
uöt32_t
 
SLEEPCNT
;

921 
__IOM
 
uöt32_t
 
LSUCNT
;

922 
__IOM
 
uöt32_t
 
FOLDCNT
;

923 
__IM
 
uöt32_t
 
PCSR
;

924 
__IOM
 
uöt32_t
 
COMP0
;

925 
__IOM
 
uöt32_t
 
MASK0
;

926 
__IOM
 
uöt32_t
 
FUNCTION0
;

927 
uöt32_t
 
RESERVED0
[1U];

928 
__IOM
 
uöt32_t
 
COMP1
;

929 
__IOM
 
uöt32_t
 
MASK1
;

930 
__IOM
 
uöt32_t
 
FUNCTION1
;

931 
uöt32_t
 
RESERVED1
[1U];

932 
__IOM
 
uöt32_t
 
COMP2
;

933 
__IOM
 
uöt32_t
 
MASK2
;

934 
__IOM
 
uöt32_t
 
FUNCTION2
;

935 
uöt32_t
 
RESERVED2
[1U];

936 
__IOM
 
uöt32_t
 
COMP3
;

937 
__IOM
 
uöt32_t
 
MASK3
;

938 
__IOM
 
uöt32_t
 
FUNCTION3
;

939 } 
	tDWT_Ty≥
;

942 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

943 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

945 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

946 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

948 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

949 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

951 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

952 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

954 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

955 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

957 
	#DWT_CTRL_CYCEVTENA_Pos
 22U

	)

958 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

960 
	#DWT_CTRL_FOLDEVTENA_Pos
 21U

	)

961 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

963 
	#DWT_CTRL_LSUEVTENA_Pos
 20U

	)

964 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

966 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19U

	)

967 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

969 
	#DWT_CTRL_EXCEVTENA_Pos
 18U

	)

970 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

972 
	#DWT_CTRL_CPIEVTENA_Pos
 17U

	)

973 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

975 
	#DWT_CTRL_EXCTRCENA_Pos
 16U

	)

976 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

978 
	#DWT_CTRL_PCSAMPLENA_Pos
 12U

	)

979 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

981 
	#DWT_CTRL_SYNCTAP_Pos
 10U

	)

982 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

984 
	#DWT_CTRL_CYCTAP_Pos
 9U

	)

985 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

987 
	#DWT_CTRL_POSTINIT_Pos
 5U

	)

988 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

990 
	#DWT_CTRL_POSTPRESET_Pos
 1U

	)

991 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

993 
	#DWT_CTRL_CYCCNTENA_Pos
 0U

	)

994 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL )

	)

997 
	#DWT_CPICNT_CPICNT_Pos
 0U

	)

998 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL )

	)

1001 
	#DWT_EXCCNT_EXCCNT_Pos
 0U

	)

1002 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL )

	)

1005 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0U

	)

1006 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL )

	)

1009 
	#DWT_LSUCNT_LSUCNT_Pos
 0U

	)

1010 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL )

	)

1013 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0U

	)

1014 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL )

	)

1017 
	#DWT_MASK_MASK_Pos
 0U

	)

1018 
	#DWT_MASK_MASK_Msk
 (0x1FUL )

	)

1021 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

1022 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

1024 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16U

	)

1025 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

1027 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12U

	)

1028 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

1030 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

1031 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

1033 
	#DWT_FUNCTION_LNK1ENA_Pos
 9U

	)

1034 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

1036 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8U

	)

1037 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

1039 
	#DWT_FUNCTION_CYCMATCH_Pos
 7U

	)

1040 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

1042 
	#DWT_FUNCTION_EMITRANGE_Pos
 5U

	)

1043 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

1045 
	#DWT_FUNCTION_FUNCTION_Pos
 0U

	)

1046 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL )

	)

1063 
__IOM
 
uöt32_t
 
SSPSR
;

1064 
__IOM
 
uöt32_t
 
CSPSR
;

1065 
uöt32_t
 
RESERVED0
[2U];

1066 
__IOM
 
uöt32_t
 
ACPR
;

1067 
uöt32_t
 
RESERVED1
[55U];

1068 
__IOM
 
uöt32_t
 
SPPR
;

1069 
uöt32_t
 
RESERVED2
[131U];

1070 
__IM
 
uöt32_t
 
FFSR
;

1071 
__IOM
 
uöt32_t
 
FFCR
;

1072 
__IM
 
uöt32_t
 
FSCR
;

1073 
uöt32_t
 
RESERVED3
[759U];

1074 
__IM
 
uöt32_t
 
TRIGGER
;

1075 
__IM
 
uöt32_t
 
FIFO0
;

1076 
__IM
 
uöt32_t
 
ITATBCTR2
;

1077 
uöt32_t
 
RESERVED4
[1U];

1078 
__IM
 
uöt32_t
 
ITATBCTR0
;

1079 
__IM
 
uöt32_t
 
FIFO1
;

1080 
__IOM
 
uöt32_t
 
ITCTRL
;

1081 
uöt32_t
 
RESERVED5
[39U];

1082 
__IOM
 
uöt32_t
 
CLAIMSET
;

1083 
__IOM
 
uöt32_t
 
CLAIMCLR
;

1084 
uöt32_t
 
RESERVED7
[8U];

1085 
__IM
 
uöt32_t
 
DEVID
;

1086 
__IM
 
uöt32_t
 
DEVTYPE
;

1087 } 
	tTPI_Ty≥
;

1090 
	#TPI_ACPR_PRESCALER_Pos
 0U

	)

1091 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL )

	)

1094 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

1095 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

1098 
	#TPI_FFSR_FtN⁄St›_Pos
 3U

	)

1099 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

1101 
	#TPI_FFSR_TCPª£¡_Pos
 2U

	)

1102 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

1104 
	#TPI_FFSR_FtSt›≥d_Pos
 1U

	)

1105 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

1107 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

1108 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

1111 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

1112 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

1114 
	#TPI_FFCR_EnFC⁄t_Pos
 1U

	)

1115 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

1118 
	#TPI_TRIGGER_TRIGGER_Pos
 0U

	)

1119 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL )

	)

1122 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29U

	)

1123 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

1125 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27U

	)

1126 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

1128 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26U

	)

1129 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

1131 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24U

	)

1132 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

1134 
	#TPI_FIFO0_ETM2_Pos
 16U

	)

1135 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

1137 
	#TPI_FIFO0_ETM1_Pos
 8U

	)

1138 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

1140 
	#TPI_FIFO0_ETM0_Pos
 0U

	)

1141 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL )

	)

1144 
	#TPI_ITATBCTR2_ATREADY_Pos
 0U

	)

1145 
	#TPI_ITATBCTR2_ATREADY_Msk
 (0x1UL )

	)

1148 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29U

	)

1149 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

1151 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27U

	)

1152 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

1154 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26U

	)

1155 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

1157 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24U

	)

1158 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

1160 
	#TPI_FIFO1_ITM2_Pos
 16U

	)

1161 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

1163 
	#TPI_FIFO1_ITM1_Pos
 8U

	)

1164 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

1166 
	#TPI_FIFO1_ITM0_Pos
 0U

	)

1167 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL )

	)

1170 
	#TPI_ITATBCTR0_ATREADY_Pos
 0U

	)

1171 
	#TPI_ITATBCTR0_ATREADY_Msk
 (0x1UL )

	)

1174 
	#TPI_ITCTRL_Mode_Pos
 0U

	)

1175 
	#TPI_ITCTRL_Mode_Msk
 (0x1UL )

	)

1178 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

1179 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1181 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

1182 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1184 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

1185 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1187 
	#TPI_DEVID_MöBufSz_Pos
 6U

	)

1188 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1190 
	#TPI_DEVID_AsynClkIn_Pos
 5U

	)

1191 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1193 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0U

	)

1194 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL )

	)

1197 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 4U

	)

1198 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1200 
	#TPI_DEVTYPE_SubTy≥_Pos
 0U

	)

1201 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL )

	)

1206 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1219 
__IM
 
uöt32_t
 
TYPE
;

1220 
__IOM
 
uöt32_t
 
CTRL
;

1221 
__IOM
 
uöt32_t
 
RNR
;

1222 
__IOM
 
uöt32_t
 
RBAR
;

1223 
__IOM
 
uöt32_t
 
RASR
;

1224 
__IOM
 
uöt32_t
 
RBAR_A1
;

1225 
__IOM
 
uöt32_t
 
RASR_A1
;

1226 
__IOM
 
uöt32_t
 
RBAR_A2
;

1227 
__IOM
 
uöt32_t
 
RASR_A2
;

1228 
__IOM
 
uöt32_t
 
RBAR_A3
;

1229 
__IOM
 
uöt32_t
 
RASR_A3
;

1230 } 
	tMPU_Ty≥
;

1233 
	#MPU_TYPE_IREGION_Pos
 16U

	)

1234 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1236 
	#MPU_TYPE_DREGION_Pos
 8U

	)

1237 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1239 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

1240 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

1243 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

1244 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1246 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

1247 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1249 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

1250 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

1253 
	#MPU_RNR_REGION_Pos
 0U

	)

1254 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

1257 
	#MPU_RBAR_ADDR_Pos
 5U

	)

1258 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1260 
	#MPU_RBAR_VALID_Pos
 4U

	)

1261 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1263 
	#MPU_RBAR_REGION_Pos
 0U

	)

1264 
	#MPU_RBAR_REGION_Msk
 (0xFUL )

	)

1267 
	#MPU_RASR_ATTRS_Pos
 16U

	)

1268 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1270 
	#MPU_RASR_XN_Pos
 28U

	)

1271 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1273 
	#MPU_RASR_AP_Pos
 24U

	)

1274 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1276 
	#MPU_RASR_TEX_Pos
 19U

	)

1277 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1279 
	#MPU_RASR_S_Pos
 18U

	)

1280 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1282 
	#MPU_RASR_C_Pos
 17U

	)

1283 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1285 
	#MPU_RASR_B_Pos
 16U

	)

1286 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1288 
	#MPU_RASR_SRD_Pos
 8U

	)

1289 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1291 
	#MPU_RASR_SIZE_Pos
 1U

	)

1292 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1294 
	#MPU_RASR_ENABLE_Pos
 0U

	)

1295 
	#MPU_RASR_ENABLE_Msk
 (1UL )

	)

1313 
uöt32_t
 
RESERVED0
[1U];

1314 
__IOM
 
uöt32_t
 
FPCCR
;

1315 
__IOM
 
uöt32_t
 
FPCAR
;

1316 
__IOM
 
uöt32_t
 
FPDSCR
;

1317 
__IM
 
uöt32_t
 
MVFR0
;

1318 
__IM
 
uöt32_t
 
MVFR1
;

1319 } 
	tFPU_Ty≥
;

1322 
	#FPU_FPCCR_ASPEN_Pos
 31U

	)

1323 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

1325 
	#FPU_FPCCR_LSPEN_Pos
 30U

	)

1326 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

1328 
	#FPU_FPCCR_MONRDY_Pos
 8U

	)

1329 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

1331 
	#FPU_FPCCR_BFRDY_Pos
 6U

	)

1332 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

1334 
	#FPU_FPCCR_MMRDY_Pos
 5U

	)

1335 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

1337 
	#FPU_FPCCR_HFRDY_Pos
 4U

	)

1338 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

1340 
	#FPU_FPCCR_THREAD_Pos
 3U

	)

1341 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

1343 
	#FPU_FPCCR_USER_Pos
 1U

	)

1344 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

1346 
	#FPU_FPCCR_LSPACT_Pos
 0U

	)

1347 
	#FPU_FPCCR_LSPACT_Msk
 (1UL )

	)

1350 
	#FPU_FPCAR_ADDRESS_Pos
 3U

	)

1351 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

1354 
	#FPU_FPDSCR_AHP_Pos
 26U

	)

1355 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

1357 
	#FPU_FPDSCR_DN_Pos
 25U

	)

1358 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

1360 
	#FPU_FPDSCR_FZ_Pos
 24U

	)

1361 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

1363 
	#FPU_FPDSCR_RMode_Pos
 22U

	)

1364 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

1367 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28U

	)

1368 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

1370 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24U

	)

1371 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

1373 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20U

	)

1374 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

1376 
	#FPU_MVFR0_Divide_Pos
 16U

	)

1377 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

1379 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12U

	)

1380 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

1382 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8U

	)

1383 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

1385 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4U

	)

1386 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

1388 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0U

	)

1389 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL )

	)

1392 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28U

	)

1393 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

1395 
	#FPU_MVFR1_FP_HPFP_Pos
 24U

	)

1396 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

1398 
	#FPU_MVFR1_D_NaN_mode_Pos
 4U

	)

1399 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

1401 
	#FPU_MVFR1_FtZ_mode_Pos
 0U

	)

1402 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL )

	)

1419 
__IOM
 
uöt32_t
 
DHCSR
;

1420 
__OM
 
uöt32_t
 
DCRSR
;

1421 
__IOM
 
uöt32_t
 
DCRDR
;

1422 
__IOM
 
uöt32_t
 
DEMCR
;

1423 } 
	tC‹eDebug_Ty≥
;

1426 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16U

	)

1427 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1429 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1430 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1432 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1433 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1435 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1436 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1438 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1439 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1441 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17U

	)

1442 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1444 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1445 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1447 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5U

	)

1448 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1450 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1451 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1453 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2U

	)

1454 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1456 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1U

	)

1457 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1459 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1460 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1463 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16U

	)

1464 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1466 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0U

	)

1467 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1470 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24U

	)

1471 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1473 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19U

	)

1474 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1476 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18U

	)

1477 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1479 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17U

	)

1480 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1482 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16U

	)

1483 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1485 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1486 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1488 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9U

	)

1489 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1491 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8U

	)

1492 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1494 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7U

	)

1495 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1497 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6U

	)

1498 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1500 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5U

	)

1501 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1503 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4U

	)

1504 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1506 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1507 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1525 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

1533 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

1546 
	#SCS_BASE
 (0xE000E000ULË

	)

1547 
	#ITM_BASE
 (0xE0000000ULË

	)

1548 
	#DWT_BASE
 (0xE0001000ULË

	)

1549 
	#TPI_BASE
 (0xE0040000ULË

	)

1550 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1551 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1552 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1553 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1555 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1556 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1557 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1558 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1559 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1560 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1561 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1562 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1564 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1565 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1566 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1569 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

1570 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

1598 #ifde‡
CMSIS_NVIC_VIRTUAL


1599 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1600 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

1602 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1604 
	#NVIC_SëPri‹ôyGroupög
 
__NVIC_SëPri‹ôyGroupög


	)

1605 
	#NVIC_GëPri‹ôyGroupög
 
__NVIC_GëPri‹ôyGroupög


	)

1606 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

1607 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

1608 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

1609 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

1610 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

1611 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

1612 
	#NVIC_GëA˘ive
 
__NVIC_GëA˘ive


	)

1613 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

1614 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

1615 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

1618 #ifde‡
CMSIS_VECTAB_VIRTUAL


1619 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1620 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

1622 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1624 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

1625 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

1628 
	#NVIC_USER_IRQ_OFFSET
 16

	)

1641 
__STATIC_INLINE
 
__NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1643 
uöt32_t
 
ªg_vÆue
;

1644 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1646 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1647 
ªg_vÆue
 &~((
uöt32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

1648 
ªg_vÆue
 = (reg_value |

1649 ((
uöt32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1650 (
Pri‹ôyGroupTmp
 << 8U) );

1651 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1660 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôyGroupög
()

1662  ((
uöt32_t
)((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
));

1672 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1674 i‡((
öt32_t
)(
IRQn
) >= 0)

1676 
NVIC
->
ISER
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1689 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1691 i‡((
öt32_t
)(
IRQn
) >= 0)

1693 ((
uöt32_t
)(((
NVIC
->
ISER
[(((uöt32_t)(
öt32_t
)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1708 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1710 i‡((
öt32_t
)(
IRQn
) >= 0)

1712 
NVIC
->
ICER
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1713 
__DSB
();

1714 
__ISB
();

1727 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1729 i‡((
öt32_t
)(
IRQn
) >= 0)

1731 ((
uöt32_t
)(((
NVIC
->
ISPR
[(((uöt32_t)(
öt32_t
)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1746 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1748 i‡((
öt32_t
)(
IRQn
) >= 0)

1750 
NVIC
->
ISPR
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1761 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1763 i‡((
öt32_t
)(
IRQn
) >= 0)

1765 
NVIC
->
ICPR
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1778 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1780 i‡((
öt32_t
)(
IRQn
) >= 0)

1782 ((
uöt32_t
)(((
NVIC
->
IABR
[(((uöt32_t)(
öt32_t
)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1800 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1802 i‡((
öt32_t
)(
IRQn
) >= 0)

1804 
NVIC
->
IP
[((
uöt32_t
)(
öt32_t
)
IRQn
)] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1808 
SCB
->
SHP
[(((
uöt32_t
)(
öt32_t
)
IRQn
Ë& 0xFUL)-4UL] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1822 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1825 i‡((
öt32_t
)(
IRQn
) >= 0)

1827 (((
uöt32_t
)
NVIC
->
IP
[((uöt32_t)(
öt32_t
)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

1831 (((
uöt32_t
)
SCB
->
SHP
[(((uöt32_t)(
öt32_t
)
IRQn
Ë& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

1847 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1849 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1850 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1851 
uöt32_t
 
SubPri‹ôyBôs
;

1853 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1854 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1857 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

1858 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

1874 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

1876 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1877 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1878 
uöt32_t
 
SubPri‹ôyBôs
;

1880 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1881 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1883 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

1884 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

1897 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

1899 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

1900 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

1912 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

1914 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

1915  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

1923 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

1925 
__DSB
();

1927 
SCB
->
AIRCR
 = (
uöt32_t
)((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1928 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1929 
SCB_AIRCR_SYSRESETREQ_Msk
 );

1930 
__DSB
();

1934 
__NOP
();

1942 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1944 
	~"mpu_¨mv7.h
"

1965 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

1967 
uöt32_t
 
mv‰0
;

1969 
mv‰0
 = 
FPU
->
MVFR0
;

1970 i‡((
mv‰0
 & (
FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 | 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
)) == 0x020U)

1993 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

2006 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

2008 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

2013 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

2014 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

2015 
SysTick
->
VAL
 = 0UL;

2016 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

2017 
SysTick_CTRL_TICKINT_Msk
 |

2018 
SysTick_CTRL_ENABLE_Msk
;

2036 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

2037 
	#ITM_RXBUFFER_EMPTY
 ((
öt32_t
)0x5AA55AA5UË

	)

2048 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

2050 i‡(((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) != 0UL) &&

2051 ((
ITM
->
TER
 & 1UL ) != 0UL) )

2053 
ITM
->
PORT
[0U].
u32
 == 0UL)

2055 
__NOP
();

2057 
	gITM
->
	gPORT
[0U].
	gu8
 = (
uöt8_t
)
ch
;

2059  (
	gch
);

2069 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 ()

2071 
öt32_t
 
	gch
 = -1;

2073 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
)

2075 
ch
 = 
ITM_RxBuf„r
;

2076 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

2079  (
	gch
);

2089 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 ()

2092 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
)

2107 #ifde‡
__˝lu•lus


	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\LPC54608.h

67 #i‚de‡
_LPC54608_H_


68 
	#_LPC54608_H_


	)

72 
	#MCU_MEM_MAP_VERSION
 0x0100U

	)

74 
	#MCU_MEM_MAP_VERSION_MINOR
 0x0001U

	)

87 
	#NUMBER_OF_INT_VECTORS
 73

	)

89 
	eIRQn
 {

91 
	mNŸAvaû_IRQn
 = -128,

94 
	mN⁄MaskabÀI¡_IRQn
 = -14,

95 
	mH¨dFau…_IRQn
 = -13,

96 
	mMem‹yM™agemít_IRQn
 = -12,

97 
	mBusFau…_IRQn
 = -11,

98 
	mUßgeFau…_IRQn
 = -10,

99 
	mSVCÆl_IRQn
 = -5,

100 
	mDebugM⁄ô‹_IRQn
 = -4,

101 
	mPídSV_IRQn
 = -2,

102 
	mSysTick_IRQn
 = -1,

105 
	mWDT_BOD_IRQn
 = 0,

106 
	mDMA0_IRQn
 = 1,

107 
	mGINT0_IRQn
 = 2,

108 
	mGINT1_IRQn
 = 3,

109 
	mPIN_INT0_IRQn
 = 4,

110 
	mPIN_INT1_IRQn
 = 5,

111 
	mPIN_INT2_IRQn
 = 6,

112 
	mPIN_INT3_IRQn
 = 7,

113 
	mUTICK0_IRQn
 = 8,

114 
	mMRT0_IRQn
 = 9,

115 
	mCTIMER0_IRQn
 = 10,

116 
	mCTIMER1_IRQn
 = 11,

117 
	mSCT0_IRQn
 = 12,

118 
	mCTIMER3_IRQn
 = 13,

119 
	mFLEXCOMM0_IRQn
 = 14,

120 
	mFLEXCOMM1_IRQn
 = 15,

121 
	mFLEXCOMM2_IRQn
 = 16,

122 
	mFLEXCOMM3_IRQn
 = 17,

123 
	mFLEXCOMM4_IRQn
 = 18,

124 
	mFLEXCOMM5_IRQn
 = 19,

125 
	mFLEXCOMM6_IRQn
 = 20,

126 
	mFLEXCOMM7_IRQn
 = 21,

127 
	mADC0_SEQA_IRQn
 = 22,

128 
	mADC0_SEQB_IRQn
 = 23,

129 
	mADC0_THCMP_IRQn
 = 24,

130 
	mDMIC0_IRQn
 = 25,

131 
	mHWVAD0_IRQn
 = 26,

132 
	mUSB0_NEEDCLK_IRQn
 = 27,

133 
	mUSB0_IRQn
 = 28,

134 
	mRTC_IRQn
 = 29,

135 
	mRe£rved46_IRQn
 = 30,

136 
	mRe£rved47_IRQn
 = 31,

137 
	mPIN_INT4_IRQn
 = 32,

138 
	mPIN_INT5_IRQn
 = 33,

139 
	mPIN_INT6_IRQn
 = 34,

140 
	mPIN_INT7_IRQn
 = 35,

141 
	mCTIMER2_IRQn
 = 36,

142 
	mCTIMER4_IRQn
 = 37,

143 
	mRIT_IRQn
 = 38,

144 
	mSPIFI0_IRQn
 = 39,

145 
	mFLEXCOMM8_IRQn
 = 40,

146 
	mFLEXCOMM9_IRQn
 = 41,

147 
	mSDIO_IRQn
 = 42,

148 
	mCAN0_IRQ0_IRQn
 = 43,

149 
	mCAN0_IRQ1_IRQn
 = 44,

150 
	mCAN1_IRQ0_IRQn
 = 45,

151 
	mCAN1_IRQ1_IRQn
 = 46,

152 
	mUSB1_IRQn
 = 47,

153 
	mUSB1_NEEDCLK_IRQn
 = 48,

154 
	mETHERNET_IRQn
 = 49,

155 
	mETHERNET_PMT_IRQn
 = 50,

156 
	mETHERNET_MACLP_IRQn
 = 51,

157 
	mEEPROM_IRQn
 = 52,

158 
	mLCD_IRQn
 = 53,

159 
	mSHA_IRQn
 = 54,

160 
	mSMARTCARD0_IRQn
 = 55,

161 
	mSMARTCARD1_IRQn
 = 56

162 } 
	tIRQn_Ty≥
;

178 
	#__MPU_PRESENT
 1

	)

179 
	#__NVIC_PRIO_BITS
 3

	)

180 
	#__Víd‹_SysTickC⁄fig
 0

	)

181 
	#__FPU_PRESENT
 1

	)

183 
	~"c‹e_cm4.h
"

184 
	~"sy°em_LPC54608.h
"

221 #i‡
deföed
(
__ARMCC_VERSION
)

222 #¥agm®
push


223 #¥agm®
™⁄_uni⁄s


224 #ñi‡
deföed
(
__GNUC__
)

226 #ñi‡
deföed
(
__IAR_SYSTEMS_ICC__
)

227 #¥agm®
œnguage
=
exãnded


229 #îr‹ 
NŸ
 
suµ‹ãd
 
compûî
 
ty≥


243 
__IO
 
uöt32_t
 
	mCTRL
;

244 
__IO
 
uöt32_t
 
	mINSEL
;

245 
__IO
 
uöt32_t
 
	mSEQ_CTRL
[2];

246 
__I
 
uöt32_t
 
	mSEQ_GDAT
[2];

247 
uöt8_t
 
	mRESERVED_0
[8];

248 
__I
 
uöt32_t
 
	mDAT
[12];

249 
__IO
 
uöt32_t
 
	mTHR0_LOW
;

250 
__IO
 
uöt32_t
 
	mTHR1_LOW
;

251 
__IO
 
uöt32_t
 
	mTHR0_HIGH
;

252 
__IO
 
uöt32_t
 
	mTHR1_HIGH
;

253 
__IO
 
uöt32_t
 
	mCHAN_THRSEL
;

254 
__IO
 
uöt32_t
 
	mINTEN
;

255 
__IO
 
uöt32_t
 
	mFLAGS
;

256 
__IO
 
uöt32_t
 
	mSTARTUP
;

257 
__IO
 
uöt32_t
 
	mCALIB
;

258 } 
	tADC_Ty≥
;

270 
	#ADC_CTRL_CLKDIV_MASK
 (0xFFU)

	)

271 
	#ADC_CTRL_CLKDIV_SHIFT
 (0U)

	)

272 
	#ADC_CTRL_CLKDIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_CTRL_CLKDIV_SHIFT
)Ë& 
ADC_CTRL_CLKDIV_MASK
)

	)

273 
	#ADC_CTRL_ASYNMODE_MASK
 (0x100U)

	)

274 
	#ADC_CTRL_ASYNMODE_SHIFT
 (8U)

	)

275 
	#ADC_CTRL_ASYNMODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_CTRL_ASYNMODE_SHIFT
)Ë& 
ADC_CTRL_ASYNMODE_MASK
)

	)

276 
	#ADC_CTRL_RESOL_MASK
 (0x600U)

	)

277 
	#ADC_CTRL_RESOL_SHIFT
 (9U)

	)

278 
	#ADC_CTRL_RESOL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_CTRL_RESOL_SHIFT
)Ë& 
ADC_CTRL_RESOL_MASK
)

	)

279 
	#ADC_CTRL_BYPASSCAL_MASK
 (0x800U)

	)

280 
	#ADC_CTRL_BYPASSCAL_SHIFT
 (11U)

	)

281 
	#ADC_CTRL_BYPASSCAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_CTRL_BYPASSCAL_SHIFT
)Ë& 
ADC_CTRL_BYPASSCAL_MASK
)

	)

282 
	#ADC_CTRL_TSAMP_MASK
 (0x7000U)

	)

283 
	#ADC_CTRL_TSAMP_SHIFT
 (12U)

	)

284 
	#ADC_CTRL_TSAMP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_CTRL_TSAMP_SHIFT
)Ë& 
ADC_CTRL_TSAMP_MASK
)

	)

287 
	#ADC_INSEL_SEL_MASK
 (0x3U)

	)

288 
	#ADC_INSEL_SEL_SHIFT
 (0U)

	)

289 
	#ADC_INSEL_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_INSEL_SEL_SHIFT
)Ë& 
ADC_INSEL_SEL_MASK
)

	)

292 
	#ADC_SEQ_CTRL_CHANNELS_MASK
 (0xFFFU)

	)

293 
	#ADC_SEQ_CTRL_CHANNELS_SHIFT
 (0U)

	)

294 
	#ADC_SEQ_CTRL_CHANNELS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_SEQ_CTRL_CHANNELS_SHIFT
)Ë& 
ADC_SEQ_CTRL_CHANNELS_MASK
)

	)

295 
	#ADC_SEQ_CTRL_TRIGGER_MASK
 (0x3F000U)

	)

296 
	#ADC_SEQ_CTRL_TRIGGER_SHIFT
 (12U)

	)

297 
	#ADC_SEQ_CTRL_TRIGGER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_SEQ_CTRL_TRIGGER_SHIFT
)Ë& 
ADC_SEQ_CTRL_TRIGGER_MASK
)

	)

298 
	#ADC_SEQ_CTRL_TRIGPOL_MASK
 (0x40000U)

	)

299 
	#ADC_SEQ_CTRL_TRIGPOL_SHIFT
 (18U)

	)

300 
	#ADC_SEQ_CTRL_TRIGPOL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_SEQ_CTRL_TRIGPOL_SHIFT
)Ë& 
ADC_SEQ_CTRL_TRIGPOL_MASK
)

	)

301 
	#ADC_SEQ_CTRL_SYNCBYPASS_MASK
 (0x80000U)

	)

302 
	#ADC_SEQ_CTRL_SYNCBYPASS_SHIFT
 (19U)

	)

303 
	#ADC_SEQ_CTRL_SYNCBYPASS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_SEQ_CTRL_SYNCBYPASS_SHIFT
)Ë& 
ADC_SEQ_CTRL_SYNCBYPASS_MASK
)

	)

304 
	#ADC_SEQ_CTRL_START_MASK
 (0x4000000U)

	)

305 
	#ADC_SEQ_CTRL_START_SHIFT
 (26U)

	)

306 
	#ADC_SEQ_CTRL_START
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_SEQ_CTRL_START_SHIFT
)Ë& 
ADC_SEQ_CTRL_START_MASK
)

	)

307 
	#ADC_SEQ_CTRL_BURST_MASK
 (0x8000000U)

	)

308 
	#ADC_SEQ_CTRL_BURST_SHIFT
 (27U)

	)

309 
	#ADC_SEQ_CTRL_BURST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_SEQ_CTRL_BURST_SHIFT
)Ë& 
ADC_SEQ_CTRL_BURST_MASK
)

	)

310 
	#ADC_SEQ_CTRL_SINGLESTEP_MASK
 (0x10000000U)

	)

311 
	#ADC_SEQ_CTRL_SINGLESTEP_SHIFT
 (28U)

	)

312 
	#ADC_SEQ_CTRL_SINGLESTEP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_SEQ_CTRL_SINGLESTEP_SHIFT
)Ë& 
ADC_SEQ_CTRL_SINGLESTEP_MASK
)

	)

313 
	#ADC_SEQ_CTRL_LOWPRIO_MASK
 (0x20000000U)

	)

314 
	#ADC_SEQ_CTRL_LOWPRIO_SHIFT
 (29U)

	)

315 
	#ADC_SEQ_CTRL_LOWPRIO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_SEQ_CTRL_LOWPRIO_SHIFT
)Ë& 
ADC_SEQ_CTRL_LOWPRIO_MASK
)

	)

316 
	#ADC_SEQ_CTRL_MODE_MASK
 (0x40000000U)

	)

317 
	#ADC_SEQ_CTRL_MODE_SHIFT
 (30U)

	)

318 
	#ADC_SEQ_CTRL_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_SEQ_CTRL_MODE_SHIFT
)Ë& 
ADC_SEQ_CTRL_MODE_MASK
)

	)

319 
	#ADC_SEQ_CTRL_SEQ_ENA_MASK
 (0x80000000U)

	)

320 
	#ADC_SEQ_CTRL_SEQ_ENA_SHIFT
 (31U)

	)

321 
	#ADC_SEQ_CTRL_SEQ_ENA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_SEQ_CTRL_SEQ_ENA_SHIFT
)Ë& 
ADC_SEQ_CTRL_SEQ_ENA_MASK
)

	)

324 
	#ADC_SEQ_CTRL_COUNT
 (2U)

	)

327 
	#ADC_SEQ_GDAT_RESULT_MASK
 (0xFFF0U)

	)

328 
	#ADC_SEQ_GDAT_RESULT_SHIFT
 (4U)

	)

329 
	#ADC_SEQ_GDAT_RESULT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_SEQ_GDAT_RESULT_SHIFT
)Ë& 
ADC_SEQ_GDAT_RESULT_MASK
)

	)

330 
	#ADC_SEQ_GDAT_THCMPRANGE_MASK
 (0x30000U)

	)

331 
	#ADC_SEQ_GDAT_THCMPRANGE_SHIFT
 (16U)

	)

332 
	#ADC_SEQ_GDAT_THCMPRANGE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_SEQ_GDAT_THCMPRANGE_SHIFT
)Ë& 
ADC_SEQ_GDAT_THCMPRANGE_MASK
)

	)

333 
	#ADC_SEQ_GDAT_THCMPCROSS_MASK
 (0xC0000U)

	)

334 
	#ADC_SEQ_GDAT_THCMPCROSS_SHIFT
 (18U)

	)

335 
	#ADC_SEQ_GDAT_THCMPCROSS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_SEQ_GDAT_THCMPCROSS_SHIFT
)Ë& 
ADC_SEQ_GDAT_THCMPCROSS_MASK
)

	)

336 
	#ADC_SEQ_GDAT_CHN_MASK
 (0x3C000000U)

	)

337 
	#ADC_SEQ_GDAT_CHN_SHIFT
 (26U)

	)

338 
	#ADC_SEQ_GDAT_CHN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_SEQ_GDAT_CHN_SHIFT
)Ë& 
ADC_SEQ_GDAT_CHN_MASK
)

	)

339 
	#ADC_SEQ_GDAT_OVERRUN_MASK
 (0x40000000U)

	)

340 
	#ADC_SEQ_GDAT_OVERRUN_SHIFT
 (30U)

	)

341 
	#ADC_SEQ_GDAT_OVERRUN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_SEQ_GDAT_OVERRUN_SHIFT
)Ë& 
ADC_SEQ_GDAT_OVERRUN_MASK
)

	)

342 
	#ADC_SEQ_GDAT_DATAVALID_MASK
 (0x80000000U)

	)

343 
	#ADC_SEQ_GDAT_DATAVALID_SHIFT
 (31U)

	)

344 
	#ADC_SEQ_GDAT_DATAVALID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_SEQ_GDAT_DATAVALID_SHIFT
)Ë& 
ADC_SEQ_GDAT_DATAVALID_MASK
)

	)

347 
	#ADC_SEQ_GDAT_COUNT
 (2U)

	)

350 
	#ADC_DAT_RESULT_MASK
 (0xFFF0U)

	)

351 
	#ADC_DAT_RESULT_SHIFT
 (4U)

	)

352 
	#ADC_DAT_RESULT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_DAT_RESULT_SHIFT
)Ë& 
ADC_DAT_RESULT_MASK
)

	)

353 
	#ADC_DAT_THCMPRANGE_MASK
 (0x30000U)

	)

354 
	#ADC_DAT_THCMPRANGE_SHIFT
 (16U)

	)

355 
	#ADC_DAT_THCMPRANGE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_DAT_THCMPRANGE_SHIFT
)Ë& 
ADC_DAT_THCMPRANGE_MASK
)

	)

356 
	#ADC_DAT_THCMPCROSS_MASK
 (0xC0000U)

	)

357 
	#ADC_DAT_THCMPCROSS_SHIFT
 (18U)

	)

358 
	#ADC_DAT_THCMPCROSS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_DAT_THCMPCROSS_SHIFT
)Ë& 
ADC_DAT_THCMPCROSS_MASK
)

	)

359 
	#ADC_DAT_CHANNEL_MASK
 (0x3C000000U)

	)

360 
	#ADC_DAT_CHANNEL_SHIFT
 (26U)

	)

361 
	#ADC_DAT_CHANNEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_DAT_CHANNEL_SHIFT
)Ë& 
ADC_DAT_CHANNEL_MASK
)

	)

362 
	#ADC_DAT_OVERRUN_MASK
 (0x40000000U)

	)

363 
	#ADC_DAT_OVERRUN_SHIFT
 (30U)

	)

364 
	#ADC_DAT_OVERRUN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_DAT_OVERRUN_SHIFT
)Ë& 
ADC_DAT_OVERRUN_MASK
)

	)

365 
	#ADC_DAT_DATAVALID_MASK
 (0x80000000U)

	)

366 
	#ADC_DAT_DATAVALID_SHIFT
 (31U)

	)

367 
	#ADC_DAT_DATAVALID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_DAT_DATAVALID_SHIFT
)Ë& 
ADC_DAT_DATAVALID_MASK
)

	)

370 
	#ADC_DAT_COUNT
 (12U)

	)

373 
	#ADC_THR0_LOW_THRLOW_MASK
 (0xFFF0U)

	)

374 
	#ADC_THR0_LOW_THRLOW_SHIFT
 (4U)

	)

375 
	#ADC_THR0_LOW_THRLOW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_THR0_LOW_THRLOW_SHIFT
)Ë& 
ADC_THR0_LOW_THRLOW_MASK
)

	)

378 
	#ADC_THR1_LOW_THRLOW_MASK
 (0xFFF0U)

	)

379 
	#ADC_THR1_LOW_THRLOW_SHIFT
 (4U)

	)

380 
	#ADC_THR1_LOW_THRLOW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_THR1_LOW_THRLOW_SHIFT
)Ë& 
ADC_THR1_LOW_THRLOW_MASK
)

	)

383 
	#ADC_THR0_HIGH_THRHIGH_MASK
 (0xFFF0U)

	)

384 
	#ADC_THR0_HIGH_THRHIGH_SHIFT
 (4U)

	)

385 
	#ADC_THR0_HIGH_THRHIGH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_THR0_HIGH_THRHIGH_SHIFT
)Ë& 
ADC_THR0_HIGH_THRHIGH_MASK
)

	)

388 
	#ADC_THR1_HIGH_THRHIGH_MASK
 (0xFFF0U)

	)

389 
	#ADC_THR1_HIGH_THRHIGH_SHIFT
 (4U)

	)

390 
	#ADC_THR1_HIGH_THRHIGH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_THR1_HIGH_THRHIGH_SHIFT
)Ë& 
ADC_THR1_HIGH_THRHIGH_MASK
)

	)

393 
	#ADC_CHAN_THRSEL_CH0_THRSEL_MASK
 (0x1U)

	)

394 
	#ADC_CHAN_THRSEL_CH0_THRSEL_SHIFT
 (0U)

	)

395 
	#ADC_CHAN_THRSEL_CH0_THRSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_CHAN_THRSEL_CH0_THRSEL_SHIFT
)Ë& 
ADC_CHAN_THRSEL_CH0_THRSEL_MASK
)

	)

396 
	#ADC_CHAN_THRSEL_CH1_THRSEL_MASK
 (0x2U)

	)

397 
	#ADC_CHAN_THRSEL_CH1_THRSEL_SHIFT
 (1U)

	)

398 
	#ADC_CHAN_THRSEL_CH1_THRSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_CHAN_THRSEL_CH1_THRSEL_SHIFT
)Ë& 
ADC_CHAN_THRSEL_CH1_THRSEL_MASK
)

	)

399 
	#ADC_CHAN_THRSEL_CH2_THRSEL_MASK
 (0x4U)

	)

400 
	#ADC_CHAN_THRSEL_CH2_THRSEL_SHIFT
 (2U)

	)

401 
	#ADC_CHAN_THRSEL_CH2_THRSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_CHAN_THRSEL_CH2_THRSEL_SHIFT
)Ë& 
ADC_CHAN_THRSEL_CH2_THRSEL_MASK
)

	)

402 
	#ADC_CHAN_THRSEL_CH3_THRSEL_MASK
 (0x8U)

	)

403 
	#ADC_CHAN_THRSEL_CH3_THRSEL_SHIFT
 (3U)

	)

404 
	#ADC_CHAN_THRSEL_CH3_THRSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_CHAN_THRSEL_CH3_THRSEL_SHIFT
)Ë& 
ADC_CHAN_THRSEL_CH3_THRSEL_MASK
)

	)

405 
	#ADC_CHAN_THRSEL_CH4_THRSEL_MASK
 (0x10U)

	)

406 
	#ADC_CHAN_THRSEL_CH4_THRSEL_SHIFT
 (4U)

	)

407 
	#ADC_CHAN_THRSEL_CH4_THRSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_CHAN_THRSEL_CH4_THRSEL_SHIFT
)Ë& 
ADC_CHAN_THRSEL_CH4_THRSEL_MASK
)

	)

408 
	#ADC_CHAN_THRSEL_CH5_THRSEL_MASK
 (0x20U)

	)

409 
	#ADC_CHAN_THRSEL_CH5_THRSEL_SHIFT
 (5U)

	)

410 
	#ADC_CHAN_THRSEL_CH5_THRSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_CHAN_THRSEL_CH5_THRSEL_SHIFT
)Ë& 
ADC_CHAN_THRSEL_CH5_THRSEL_MASK
)

	)

411 
	#ADC_CHAN_THRSEL_CH6_THRSEL_MASK
 (0x40U)

	)

412 
	#ADC_CHAN_THRSEL_CH6_THRSEL_SHIFT
 (6U)

	)

413 
	#ADC_CHAN_THRSEL_CH6_THRSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_CHAN_THRSEL_CH6_THRSEL_SHIFT
)Ë& 
ADC_CHAN_THRSEL_CH6_THRSEL_MASK
)

	)

414 
	#ADC_CHAN_THRSEL_CH7_THRSEL_MASK
 (0x80U)

	)

415 
	#ADC_CHAN_THRSEL_CH7_THRSEL_SHIFT
 (7U)

	)

416 
	#ADC_CHAN_THRSEL_CH7_THRSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_CHAN_THRSEL_CH7_THRSEL_SHIFT
)Ë& 
ADC_CHAN_THRSEL_CH7_THRSEL_MASK
)

	)

417 
	#ADC_CHAN_THRSEL_CH8_THRSEL_MASK
 (0x100U)

	)

418 
	#ADC_CHAN_THRSEL_CH8_THRSEL_SHIFT
 (8U)

	)

419 
	#ADC_CHAN_THRSEL_CH8_THRSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_CHAN_THRSEL_CH8_THRSEL_SHIFT
)Ë& 
ADC_CHAN_THRSEL_CH8_THRSEL_MASK
)

	)

420 
	#ADC_CHAN_THRSEL_CH9_THRSEL_MASK
 (0x200U)

	)

421 
	#ADC_CHAN_THRSEL_CH9_THRSEL_SHIFT
 (9U)

	)

422 
	#ADC_CHAN_THRSEL_CH9_THRSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_CHAN_THRSEL_CH9_THRSEL_SHIFT
)Ë& 
ADC_CHAN_THRSEL_CH9_THRSEL_MASK
)

	)

423 
	#ADC_CHAN_THRSEL_CH10_THRSEL_MASK
 (0x400U)

	)

424 
	#ADC_CHAN_THRSEL_CH10_THRSEL_SHIFT
 (10U)

	)

425 
	#ADC_CHAN_THRSEL_CH10_THRSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_CHAN_THRSEL_CH10_THRSEL_SHIFT
)Ë& 
ADC_CHAN_THRSEL_CH10_THRSEL_MASK
)

	)

426 
	#ADC_CHAN_THRSEL_CH11_THRSEL_MASK
 (0x800U)

	)

427 
	#ADC_CHAN_THRSEL_CH11_THRSEL_SHIFT
 (11U)

	)

428 
	#ADC_CHAN_THRSEL_CH11_THRSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_CHAN_THRSEL_CH11_THRSEL_SHIFT
)Ë& 
ADC_CHAN_THRSEL_CH11_THRSEL_MASK
)

	)

431 
	#ADC_INTEN_SEQA_INTEN_MASK
 (0x1U)

	)

432 
	#ADC_INTEN_SEQA_INTEN_SHIFT
 (0U)

	)

433 
	#ADC_INTEN_SEQA_INTEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_INTEN_SEQA_INTEN_SHIFT
)Ë& 
ADC_INTEN_SEQA_INTEN_MASK
)

	)

434 
	#ADC_INTEN_SEQB_INTEN_MASK
 (0x2U)

	)

435 
	#ADC_INTEN_SEQB_INTEN_SHIFT
 (1U)

	)

436 
	#ADC_INTEN_SEQB_INTEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_INTEN_SEQB_INTEN_SHIFT
)Ë& 
ADC_INTEN_SEQB_INTEN_MASK
)

	)

437 
	#ADC_INTEN_OVR_INTEN_MASK
 (0x4U)

	)

438 
	#ADC_INTEN_OVR_INTEN_SHIFT
 (2U)

	)

439 
	#ADC_INTEN_OVR_INTEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_INTEN_OVR_INTEN_SHIFT
)Ë& 
ADC_INTEN_OVR_INTEN_MASK
)

	)

440 
	#ADC_INTEN_ADCMPINTEN0_MASK
 (0x18U)

	)

441 
	#ADC_INTEN_ADCMPINTEN0_SHIFT
 (3U)

	)

442 
	#ADC_INTEN_ADCMPINTEN0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_INTEN_ADCMPINTEN0_SHIFT
)Ë& 
ADC_INTEN_ADCMPINTEN0_MASK
)

	)

443 
	#ADC_INTEN_ADCMPINTEN1_MASK
 (0x60U)

	)

444 
	#ADC_INTEN_ADCMPINTEN1_SHIFT
 (5U)

	)

445 
	#ADC_INTEN_ADCMPINTEN1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_INTEN_ADCMPINTEN1_SHIFT
)Ë& 
ADC_INTEN_ADCMPINTEN1_MASK
)

	)

446 
	#ADC_INTEN_ADCMPINTEN2_MASK
 (0x180U)

	)

447 
	#ADC_INTEN_ADCMPINTEN2_SHIFT
 (7U)

	)

448 
	#ADC_INTEN_ADCMPINTEN2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_INTEN_ADCMPINTEN2_SHIFT
)Ë& 
ADC_INTEN_ADCMPINTEN2_MASK
)

	)

449 
	#ADC_INTEN_ADCMPINTEN3_MASK
 (0x600U)

	)

450 
	#ADC_INTEN_ADCMPINTEN3_SHIFT
 (9U)

	)

451 
	#ADC_INTEN_ADCMPINTEN3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_INTEN_ADCMPINTEN3_SHIFT
)Ë& 
ADC_INTEN_ADCMPINTEN3_MASK
)

	)

452 
	#ADC_INTEN_ADCMPINTEN4_MASK
 (0x1800U)

	)

453 
	#ADC_INTEN_ADCMPINTEN4_SHIFT
 (11U)

	)

454 
	#ADC_INTEN_ADCMPINTEN4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_INTEN_ADCMPINTEN4_SHIFT
)Ë& 
ADC_INTEN_ADCMPINTEN4_MASK
)

	)

455 
	#ADC_INTEN_ADCMPINTEN5_MASK
 (0x6000U)

	)

456 
	#ADC_INTEN_ADCMPINTEN5_SHIFT
 (13U)

	)

457 
	#ADC_INTEN_ADCMPINTEN5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_INTEN_ADCMPINTEN5_SHIFT
)Ë& 
ADC_INTEN_ADCMPINTEN5_MASK
)

	)

458 
	#ADC_INTEN_ADCMPINTEN6_MASK
 (0x18000U)

	)

459 
	#ADC_INTEN_ADCMPINTEN6_SHIFT
 (15U)

	)

460 
	#ADC_INTEN_ADCMPINTEN6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_INTEN_ADCMPINTEN6_SHIFT
)Ë& 
ADC_INTEN_ADCMPINTEN6_MASK
)

	)

461 
	#ADC_INTEN_ADCMPINTEN7_MASK
 (0x60000U)

	)

462 
	#ADC_INTEN_ADCMPINTEN7_SHIFT
 (17U)

	)

463 
	#ADC_INTEN_ADCMPINTEN7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_INTEN_ADCMPINTEN7_SHIFT
)Ë& 
ADC_INTEN_ADCMPINTEN7_MASK
)

	)

464 
	#ADC_INTEN_ADCMPINTEN8_MASK
 (0x180000U)

	)

465 
	#ADC_INTEN_ADCMPINTEN8_SHIFT
 (19U)

	)

466 
	#ADC_INTEN_ADCMPINTEN8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_INTEN_ADCMPINTEN8_SHIFT
)Ë& 
ADC_INTEN_ADCMPINTEN8_MASK
)

	)

467 
	#ADC_INTEN_ADCMPINTEN9_MASK
 (0x600000U)

	)

468 
	#ADC_INTEN_ADCMPINTEN9_SHIFT
 (21U)

	)

469 
	#ADC_INTEN_ADCMPINTEN9
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_INTEN_ADCMPINTEN9_SHIFT
)Ë& 
ADC_INTEN_ADCMPINTEN9_MASK
)

	)

470 
	#ADC_INTEN_ADCMPINTEN10_MASK
 (0x1800000U)

	)

471 
	#ADC_INTEN_ADCMPINTEN10_SHIFT
 (23U)

	)

472 
	#ADC_INTEN_ADCMPINTEN10
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_INTEN_ADCMPINTEN10_SHIFT
)Ë& 
ADC_INTEN_ADCMPINTEN10_MASK
)

	)

473 
	#ADC_INTEN_ADCMPINTEN11_MASK
 (0x6000000U)

	)

474 
	#ADC_INTEN_ADCMPINTEN11_SHIFT
 (25U)

	)

475 
	#ADC_INTEN_ADCMPINTEN11
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_INTEN_ADCMPINTEN11_SHIFT
)Ë& 
ADC_INTEN_ADCMPINTEN11_MASK
)

	)

478 
	#ADC_FLAGS_THCMP0_MASK
 (0x1U)

	)

479 
	#ADC_FLAGS_THCMP0_SHIFT
 (0U)

	)

480 
	#ADC_FLAGS_THCMP0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_THCMP0_SHIFT
)Ë& 
ADC_FLAGS_THCMP0_MASK
)

	)

481 
	#ADC_FLAGS_THCMP1_MASK
 (0x2U)

	)

482 
	#ADC_FLAGS_THCMP1_SHIFT
 (1U)

	)

483 
	#ADC_FLAGS_THCMP1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_THCMP1_SHIFT
)Ë& 
ADC_FLAGS_THCMP1_MASK
)

	)

484 
	#ADC_FLAGS_THCMP2_MASK
 (0x4U)

	)

485 
	#ADC_FLAGS_THCMP2_SHIFT
 (2U)

	)

486 
	#ADC_FLAGS_THCMP2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_THCMP2_SHIFT
)Ë& 
ADC_FLAGS_THCMP2_MASK
)

	)

487 
	#ADC_FLAGS_THCMP3_MASK
 (0x8U)

	)

488 
	#ADC_FLAGS_THCMP3_SHIFT
 (3U)

	)

489 
	#ADC_FLAGS_THCMP3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_THCMP3_SHIFT
)Ë& 
ADC_FLAGS_THCMP3_MASK
)

	)

490 
	#ADC_FLAGS_THCMP4_MASK
 (0x10U)

	)

491 
	#ADC_FLAGS_THCMP4_SHIFT
 (4U)

	)

492 
	#ADC_FLAGS_THCMP4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_THCMP4_SHIFT
)Ë& 
ADC_FLAGS_THCMP4_MASK
)

	)

493 
	#ADC_FLAGS_THCMP5_MASK
 (0x20U)

	)

494 
	#ADC_FLAGS_THCMP5_SHIFT
 (5U)

	)

495 
	#ADC_FLAGS_THCMP5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_THCMP5_SHIFT
)Ë& 
ADC_FLAGS_THCMP5_MASK
)

	)

496 
	#ADC_FLAGS_THCMP6_MASK
 (0x40U)

	)

497 
	#ADC_FLAGS_THCMP6_SHIFT
 (6U)

	)

498 
	#ADC_FLAGS_THCMP6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_THCMP6_SHIFT
)Ë& 
ADC_FLAGS_THCMP6_MASK
)

	)

499 
	#ADC_FLAGS_THCMP7_MASK
 (0x80U)

	)

500 
	#ADC_FLAGS_THCMP7_SHIFT
 (7U)

	)

501 
	#ADC_FLAGS_THCMP7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_THCMP7_SHIFT
)Ë& 
ADC_FLAGS_THCMP7_MASK
)

	)

502 
	#ADC_FLAGS_THCMP8_MASK
 (0x100U)

	)

503 
	#ADC_FLAGS_THCMP8_SHIFT
 (8U)

	)

504 
	#ADC_FLAGS_THCMP8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_THCMP8_SHIFT
)Ë& 
ADC_FLAGS_THCMP8_MASK
)

	)

505 
	#ADC_FLAGS_THCMP9_MASK
 (0x200U)

	)

506 
	#ADC_FLAGS_THCMP9_SHIFT
 (9U)

	)

507 
	#ADC_FLAGS_THCMP9
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_THCMP9_SHIFT
)Ë& 
ADC_FLAGS_THCMP9_MASK
)

	)

508 
	#ADC_FLAGS_THCMP10_MASK
 (0x400U)

	)

509 
	#ADC_FLAGS_THCMP10_SHIFT
 (10U)

	)

510 
	#ADC_FLAGS_THCMP10
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_THCMP10_SHIFT
)Ë& 
ADC_FLAGS_THCMP10_MASK
)

	)

511 
	#ADC_FLAGS_THCMP11_MASK
 (0x800U)

	)

512 
	#ADC_FLAGS_THCMP11_SHIFT
 (11U)

	)

513 
	#ADC_FLAGS_THCMP11
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_THCMP11_SHIFT
)Ë& 
ADC_FLAGS_THCMP11_MASK
)

	)

514 
	#ADC_FLAGS_OVERRUN0_MASK
 (0x1000U)

	)

515 
	#ADC_FLAGS_OVERRUN0_SHIFT
 (12U)

	)

516 
	#ADC_FLAGS_OVERRUN0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_OVERRUN0_SHIFT
)Ë& 
ADC_FLAGS_OVERRUN0_MASK
)

	)

517 
	#ADC_FLAGS_OVERRUN1_MASK
 (0x2000U)

	)

518 
	#ADC_FLAGS_OVERRUN1_SHIFT
 (13U)

	)

519 
	#ADC_FLAGS_OVERRUN1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_OVERRUN1_SHIFT
)Ë& 
ADC_FLAGS_OVERRUN1_MASK
)

	)

520 
	#ADC_FLAGS_OVERRUN2_MASK
 (0x4000U)

	)

521 
	#ADC_FLAGS_OVERRUN2_SHIFT
 (14U)

	)

522 
	#ADC_FLAGS_OVERRUN2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_OVERRUN2_SHIFT
)Ë& 
ADC_FLAGS_OVERRUN2_MASK
)

	)

523 
	#ADC_FLAGS_OVERRUN3_MASK
 (0x8000U)

	)

524 
	#ADC_FLAGS_OVERRUN3_SHIFT
 (15U)

	)

525 
	#ADC_FLAGS_OVERRUN3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_OVERRUN3_SHIFT
)Ë& 
ADC_FLAGS_OVERRUN3_MASK
)

	)

526 
	#ADC_FLAGS_OVERRUN4_MASK
 (0x10000U)

	)

527 
	#ADC_FLAGS_OVERRUN4_SHIFT
 (16U)

	)

528 
	#ADC_FLAGS_OVERRUN4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_OVERRUN4_SHIFT
)Ë& 
ADC_FLAGS_OVERRUN4_MASK
)

	)

529 
	#ADC_FLAGS_OVERRUN5_MASK
 (0x20000U)

	)

530 
	#ADC_FLAGS_OVERRUN5_SHIFT
 (17U)

	)

531 
	#ADC_FLAGS_OVERRUN5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_OVERRUN5_SHIFT
)Ë& 
ADC_FLAGS_OVERRUN5_MASK
)

	)

532 
	#ADC_FLAGS_OVERRUN6_MASK
 (0x40000U)

	)

533 
	#ADC_FLAGS_OVERRUN6_SHIFT
 (18U)

	)

534 
	#ADC_FLAGS_OVERRUN6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_OVERRUN6_SHIFT
)Ë& 
ADC_FLAGS_OVERRUN6_MASK
)

	)

535 
	#ADC_FLAGS_OVERRUN7_MASK
 (0x80000U)

	)

536 
	#ADC_FLAGS_OVERRUN7_SHIFT
 (19U)

	)

537 
	#ADC_FLAGS_OVERRUN7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_OVERRUN7_SHIFT
)Ë& 
ADC_FLAGS_OVERRUN7_MASK
)

	)

538 
	#ADC_FLAGS_OVERRUN8_MASK
 (0x100000U)

	)

539 
	#ADC_FLAGS_OVERRUN8_SHIFT
 (20U)

	)

540 
	#ADC_FLAGS_OVERRUN8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_OVERRUN8_SHIFT
)Ë& 
ADC_FLAGS_OVERRUN8_MASK
)

	)

541 
	#ADC_FLAGS_OVERRUN9_MASK
 (0x200000U)

	)

542 
	#ADC_FLAGS_OVERRUN9_SHIFT
 (21U)

	)

543 
	#ADC_FLAGS_OVERRUN9
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_OVERRUN9_SHIFT
)Ë& 
ADC_FLAGS_OVERRUN9_MASK
)

	)

544 
	#ADC_FLAGS_OVERRUN10_MASK
 (0x400000U)

	)

545 
	#ADC_FLAGS_OVERRUN10_SHIFT
 (22U)

	)

546 
	#ADC_FLAGS_OVERRUN10
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_OVERRUN10_SHIFT
)Ë& 
ADC_FLAGS_OVERRUN10_MASK
)

	)

547 
	#ADC_FLAGS_OVERRUN11_MASK
 (0x800000U)

	)

548 
	#ADC_FLAGS_OVERRUN11_SHIFT
 (23U)

	)

549 
	#ADC_FLAGS_OVERRUN11
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_OVERRUN11_SHIFT
)Ë& 
ADC_FLAGS_OVERRUN11_MASK
)

	)

550 
	#ADC_FLAGS_SEQA_OVR_MASK
 (0x1000000U)

	)

551 
	#ADC_FLAGS_SEQA_OVR_SHIFT
 (24U)

	)

552 
	#ADC_FLAGS_SEQA_OVR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_SEQA_OVR_SHIFT
)Ë& 
ADC_FLAGS_SEQA_OVR_MASK
)

	)

553 
	#ADC_FLAGS_SEQB_OVR_MASK
 (0x2000000U)

	)

554 
	#ADC_FLAGS_SEQB_OVR_SHIFT
 (25U)

	)

555 
	#ADC_FLAGS_SEQB_OVR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_SEQB_OVR_SHIFT
)Ë& 
ADC_FLAGS_SEQB_OVR_MASK
)

	)

556 
	#ADC_FLAGS_SEQA_INT_MASK
 (0x10000000U)

	)

557 
	#ADC_FLAGS_SEQA_INT_SHIFT
 (28U)

	)

558 
	#ADC_FLAGS_SEQA_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_SEQA_INT_SHIFT
)Ë& 
ADC_FLAGS_SEQA_INT_MASK
)

	)

559 
	#ADC_FLAGS_SEQB_INT_MASK
 (0x20000000U)

	)

560 
	#ADC_FLAGS_SEQB_INT_SHIFT
 (29U)

	)

561 
	#ADC_FLAGS_SEQB_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_SEQB_INT_SHIFT
)Ë& 
ADC_FLAGS_SEQB_INT_MASK
)

	)

562 
	#ADC_FLAGS_THCMP_INT_MASK
 (0x40000000U)

	)

563 
	#ADC_FLAGS_THCMP_INT_SHIFT
 (30U)

	)

564 
	#ADC_FLAGS_THCMP_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_THCMP_INT_SHIFT
)Ë& 
ADC_FLAGS_THCMP_INT_MASK
)

	)

565 
	#ADC_FLAGS_OVR_INT_MASK
 (0x80000000U)

	)

566 
	#ADC_FLAGS_OVR_INT_SHIFT
 (31U)

	)

567 
	#ADC_FLAGS_OVR_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_FLAGS_OVR_INT_SHIFT
)Ë& 
ADC_FLAGS_OVR_INT_MASK
)

	)

570 
	#ADC_STARTUP_ADC_ENA_MASK
 (0x1U)

	)

571 
	#ADC_STARTUP_ADC_ENA_SHIFT
 (0U)

	)

572 
	#ADC_STARTUP_ADC_ENA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_STARTUP_ADC_ENA_SHIFT
)Ë& 
ADC_STARTUP_ADC_ENA_MASK
)

	)

573 
	#ADC_STARTUP_ADC_INIT_MASK
 (0x2U)

	)

574 
	#ADC_STARTUP_ADC_INIT_SHIFT
 (1U)

	)

575 
	#ADC_STARTUP_ADC_INIT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_STARTUP_ADC_INIT_SHIFT
)Ë& 
ADC_STARTUP_ADC_INIT_MASK
)

	)

578 
	#ADC_CALIB_CALIB_MASK
 (0x1U)

	)

579 
	#ADC_CALIB_CALIB_SHIFT
 (0U)

	)

580 
	#ADC_CALIB_CALIB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_CALIB_CALIB_SHIFT
)Ë& 
ADC_CALIB_CALIB_MASK
)

	)

581 
	#ADC_CALIB_CALREQD_MASK
 (0x2U)

	)

582 
	#ADC_CALIB_CALREQD_SHIFT
 (1U)

	)

583 
	#ADC_CALIB_CALREQD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_CALIB_CALREQD_SHIFT
)Ë& 
ADC_CALIB_CALREQD_MASK
)

	)

584 
	#ADC_CALIB_CALVALUE_MASK
 (0x1FCU)

	)

585 
	#ADC_CALIB_CALVALUE_SHIFT
 (2U)

	)

586 
	#ADC_CALIB_CALVALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ADC_CALIB_CALVALUE_SHIFT
)Ë& 
ADC_CALIB_CALVALUE_MASK
)

	)

596 
	#ADC0_BASE
 (0x400A0000u)

	)

598 
	#ADC0
 ((
ADC_Ty≥
 *)
ADC0_BASE
)

	)

600 
	#ADC_BASE_ADDRS
 { 
ADC0_BASE
 }

	)

602 
	#ADC_BASE_PTRS
 { 
ADC0
 }

	)

604 
	#ADC_SEQ_IRQS
 { 
ADC0_SEQA_IRQn
, 
ADC0_SEQB_IRQn
 }

	)

605 
	#ADC_THCMP_IRQS
 { 
ADC0_THCMP_IRQn
 }

	)

623 
__IO
 
uöt32_t
 
	mASYNCPRESETCTRL
;

624 
__O
 
uöt32_t
 
	mASYNCPRESETCTRLSET
;

625 
__O
 
uöt32_t
 
	mASYNCPRESETCTRLCLR
;

626 
uöt8_t
 
	mRESERVED_0
[4];

627 
__IO
 
uöt32_t
 
	mASYNCAPBCLKCTRL
;

628 
__O
 
uöt32_t
 
	mASYNCAPBCLKCTRLSET
;

629 
__O
 
uöt32_t
 
	mASYNCAPBCLKCTRLCLR
;

630 
uöt8_t
 
	mRESERVED_1
[4];

631 
__IO
 
uöt32_t
 
	mASYNCAPBCLKSELA
;

632 } 
	tASYNC_SYSCON_Ty≥
;

644 
	#ASYNC_SYSCON_ASYNCPRESETCTRL_CTIMER3_MASK
 (0x2000U)

	)

645 
	#ASYNC_SYSCON_ASYNCPRESETCTRL_CTIMER3_SHIFT
 (13U)

	)

646 
	#ASYNC_SYSCON_ASYNCPRESETCTRL_CTIMER3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ASYNC_SYSCON_ASYNCPRESETCTRL_CTIMER3_SHIFT
)Ë& 
ASYNC_SYSCON_ASYNCPRESETCTRL_CTIMER3_MASK
)

	)

647 
	#ASYNC_SYSCON_ASYNCPRESETCTRL_CTIMER4_MASK
 (0x4000U)

	)

648 
	#ASYNC_SYSCON_ASYNCPRESETCTRL_CTIMER4_SHIFT
 (14U)

	)

649 
	#ASYNC_SYSCON_ASYNCPRESETCTRL_CTIMER4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ASYNC_SYSCON_ASYNCPRESETCTRL_CTIMER4_SHIFT
)Ë& 
ASYNC_SYSCON_ASYNCPRESETCTRL_CTIMER4_MASK
)

	)

652 
	#ASYNC_SYSCON_ASYNCPRESETCTRLSET_ARST_SET_MASK
 (0xFFFFFFFFU)

	)

653 
	#ASYNC_SYSCON_ASYNCPRESETCTRLSET_ARST_SET_SHIFT
 (0U)

	)

654 
	#ASYNC_SYSCON_ASYNCPRESETCTRLSET_ARST_SET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ASYNC_SYSCON_ASYNCPRESETCTRLSET_ARST_SET_SHIFT
)Ë& 
ASYNC_SYSCON_ASYNCPRESETCTRLSET_ARST_SET_MASK
)

	)

657 
	#ASYNC_SYSCON_ASYNCPRESETCTRLCLR_ARST_CLR_MASK
 (0xFFFFFFFFU)

	)

658 
	#ASYNC_SYSCON_ASYNCPRESETCTRLCLR_ARST_CLR_SHIFT
 (0U)

	)

659 
	#ASYNC_SYSCON_ASYNCPRESETCTRLCLR_ARST_CLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ASYNC_SYSCON_ASYNCPRESETCTRLCLR_ARST_CLR_SHIFT
)Ë& 
ASYNC_SYSCON_ASYNCPRESETCTRLCLR_ARST_CLR_MASK
)

	)

662 
	#ASYNC_SYSCON_ASYNCAPBCLKCTRL_CTIMER3_MASK
 (0x2000U)

	)

663 
	#ASYNC_SYSCON_ASYNCAPBCLKCTRL_CTIMER3_SHIFT
 (13U)

	)

664 
	#ASYNC_SYSCON_ASYNCAPBCLKCTRL_CTIMER3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ASYNC_SYSCON_ASYNCAPBCLKCTRL_CTIMER3_SHIFT
)Ë& 
ASYNC_SYSCON_ASYNCAPBCLKCTRL_CTIMER3_MASK
)

	)

665 
	#ASYNC_SYSCON_ASYNCAPBCLKCTRL_CTIMER4_MASK
 (0x4000U)

	)

666 
	#ASYNC_SYSCON_ASYNCAPBCLKCTRL_CTIMER4_SHIFT
 (14U)

	)

667 
	#ASYNC_SYSCON_ASYNCAPBCLKCTRL_CTIMER4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ASYNC_SYSCON_ASYNCAPBCLKCTRL_CTIMER4_SHIFT
)Ë& 
ASYNC_SYSCON_ASYNCAPBCLKCTRL_CTIMER4_MASK
)

	)

670 
	#ASYNC_SYSCON_ASYNCAPBCLKCTRLSET_ACLK_SET_MASK
 (0xFFFFFFFFU)

	)

671 
	#ASYNC_SYSCON_ASYNCAPBCLKCTRLSET_ACLK_SET_SHIFT
 (0U)

	)

672 
	#ASYNC_SYSCON_ASYNCAPBCLKCTRLSET_ACLK_SET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ASYNC_SYSCON_ASYNCAPBCLKCTRLSET_ACLK_SET_SHIFT
)Ë& 
ASYNC_SYSCON_ASYNCAPBCLKCTRLSET_ACLK_SET_MASK
)

	)

675 
	#ASYNC_SYSCON_ASYNCAPBCLKCTRLCLR_ACLK_CLR_MASK
 (0xFFFFFFFFU)

	)

676 
	#ASYNC_SYSCON_ASYNCAPBCLKCTRLCLR_ACLK_CLR_SHIFT
 (0U)

	)

677 
	#ASYNC_SYSCON_ASYNCAPBCLKCTRLCLR_ACLK_CLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ASYNC_SYSCON_ASYNCAPBCLKCTRLCLR_ACLK_CLR_SHIFT
)Ë& 
ASYNC_SYSCON_ASYNCAPBCLKCTRLCLR_ACLK_CLR_MASK
)

	)

680 
	#ASYNC_SYSCON_ASYNCAPBCLKSELA_SEL_MASK
 (0x3U)

	)

681 
	#ASYNC_SYSCON_ASYNCAPBCLKSELA_SEL_SHIFT
 (0U)

	)

682 
	#ASYNC_SYSCON_ASYNCAPBCLKSELA_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ASYNC_SYSCON_ASYNCAPBCLKSELA_SEL_SHIFT
)Ë& 
ASYNC_SYSCON_ASYNCAPBCLKSELA_SEL_MASK
)

	)

692 
	#ASYNC_SYSCON_BASE
 (0x40040000u)

	)

694 
	#ASYNC_SYSCON
 ((
ASYNC_SYSCON_Ty≥
 *)
ASYNC_SYSCON_BASE
)

	)

696 
	#ASYNC_SYSCON_BASE_ADDRS
 { 
ASYNC_SYSCON_BASE
 }

	)

698 
	#ASYNC_SYSCON_BASE_PTRS
 { 
ASYNC_SYSCON
 }

	)

716 
uöt8_t
 
	mRESERVED_0
[16];

717 
__IO
 
uöt32_t
 
	mTEST
;

718 
uöt8_t
 
	mRESERVED_1
[4];

719 
__IO
 
uöt32_t
 
	mCCCR
;

720 
__IO
 
uöt32_t
 
	mNBTP
;

721 
__IO
 
uöt32_t
 
	mTSCC
;

722 
__IO
 
uöt32_t
 
	mTSCV
;

723 
__IO
 
uöt32_t
 
	mTOCC
;

724 
__I
 
uöt32_t
 
	mTOCV
;

725 
uöt8_t
 
	mRESERVED_2
[16];

726 
__I
 
uöt32_t
 
	mECR
;

727 
__I
 
uöt32_t
 
	mPSR
;

728 
__IO
 
uöt32_t
 
	mTDCR
;

729 
uöt8_t
 
	mRESERVED_3
[4];

730 
__IO
 
uöt32_t
 
	mIR
;

731 
__IO
 
uöt32_t
 
	mIE
;

732 
__IO
 
uöt32_t
 
	mILS
;

733 
__IO
 
uöt32_t
 
	mILE
;

734 
uöt8_t
 
	mRESERVED_4
[32];

735 
__IO
 
uöt32_t
 
	mGFC
;

736 
__IO
 
uöt32_t
 
	mSIDFC
;

737 
__IO
 
uöt32_t
 
	mXIDFC
;

738 
uöt8_t
 
	mRESERVED_5
[4];

739 
__IO
 
uöt32_t
 
	mXIDAM
;

740 
__I
 
uöt32_t
 
	mHPMS
;

741 
__IO
 
uöt32_t
 
	mNDAT1
;

742 
__IO
 
uöt32_t
 
	mNDAT2
;

743 
__IO
 
uöt32_t
 
	mRXF0C
;

744 
__IO
 
uöt32_t
 
	mRXF0S
;

745 
__IO
 
uöt32_t
 
	mRXF0A
;

746 
__IO
 
uöt32_t
 
	mRXBC
;

747 
__IO
 
uöt32_t
 
	mRXF1C
;

748 
__I
 
uöt32_t
 
	mRXF1S
;

749 
__IO
 
uöt32_t
 
	mRXF1A
;

750 
__IO
 
uöt32_t
 
	mRXESC
;

751 
__IO
 
uöt32_t
 
	mTXBC
;

752 
__IO
 
uöt32_t
 
	mTXFQS
;

753 
__IO
 
uöt32_t
 
	mTXESC
;

754 
__IO
 
uöt32_t
 
	mTXBRP
;

755 
__IO
 
uöt32_t
 
	mTXBAR
;

756 
__IO
 
uöt32_t
 
	mTXBCR
;

757 
__IO
 
uöt32_t
 
	mTXBTO
;

758 
__IO
 
uöt32_t
 
	mTXBCF
;

759 
__IO
 
uöt32_t
 
	mTXBTIE
;

760 
__IO
 
uöt32_t
 
	mTXBCIE
;

761 
uöt8_t
 
	mRESERVED_6
[8];

762 
__IO
 
uöt32_t
 
	mTXEFC
;

763 
__I
 
uöt32_t
 
	mTXEFS
;

764 
__IO
 
uöt32_t
 
	mTXEFA
;

765 
uöt8_t
 
	mRESERVED_7
[260];

766 
__IO
 
uöt32_t
 
	mMRBA
;

767 
uöt8_t
 
	mRESERVED_8
[508];

768 
__IO
 
uöt32_t
 
	mETSCC
;

769 
uöt8_t
 
	mRESERVED_9
[508];

770 
__IO
 
uöt32_t
 
	mETSCV
;

771 } 
	tCAN_Ty≥
;

783 
	#CAN_TEST_LBCK_MASK
 (0x10U)

	)

784 
	#CAN_TEST_LBCK_SHIFT
 (4U)

	)

785 
	#CAN_TEST_LBCK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TEST_LBCK_SHIFT
)Ë& 
CAN_TEST_LBCK_MASK
)

	)

786 
	#CAN_TEST_TX_MASK
 (0x60U)

	)

787 
	#CAN_TEST_TX_SHIFT
 (5U)

	)

788 
	#CAN_TEST_TX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TEST_TX_SHIFT
)Ë& 
CAN_TEST_TX_MASK
)

	)

789 
	#CAN_TEST_RX_MASK
 (0x80U)

	)

790 
	#CAN_TEST_RX_SHIFT
 (7U)

	)

791 
	#CAN_TEST_RX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TEST_RX_SHIFT
)Ë& 
CAN_TEST_RX_MASK
)

	)

794 
	#CAN_CCCR_INIT_MASK
 (0x1U)

	)

795 
	#CAN_CCCR_INIT_SHIFT
 (0U)

	)

796 
	#CAN_CCCR_INIT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_CCCR_INIT_SHIFT
)Ë& 
CAN_CCCR_INIT_MASK
)

	)

797 
	#CAN_CCCR_CCE_MASK
 (0x2U)

	)

798 
	#CAN_CCCR_CCE_SHIFT
 (1U)

	)

799 
	#CAN_CCCR_CCE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_CCCR_CCE_SHIFT
)Ë& 
CAN_CCCR_CCE_MASK
)

	)

800 
	#CAN_CCCR_ASM_MASK
 (0x4U)

	)

801 
	#CAN_CCCR_ASM_SHIFT
 (2U)

	)

802 
	#CAN_CCCR_ASM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_CCCR_ASM_SHIFT
)Ë& 
CAN_CCCR_ASM_MASK
)

	)

803 
	#CAN_CCCR_CSA_MASK
 (0x8U)

	)

804 
	#CAN_CCCR_CSA_SHIFT
 (3U)

	)

805 
	#CAN_CCCR_CSA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_CCCR_CSA_SHIFT
)Ë& 
CAN_CCCR_CSA_MASK
)

	)

806 
	#CAN_CCCR_CSR_MASK
 (0x10U)

	)

807 
	#CAN_CCCR_CSR_SHIFT
 (4U)

	)

808 
	#CAN_CCCR_CSR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_CCCR_CSR_SHIFT
)Ë& 
CAN_CCCR_CSR_MASK
)

	)

809 
	#CAN_CCCR_MON_MASK
 (0x20U)

	)

810 
	#CAN_CCCR_MON_SHIFT
 (5U)

	)

811 
	#CAN_CCCR_MON
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_CCCR_MON_SHIFT
)Ë& 
CAN_CCCR_MON_MASK
)

	)

812 
	#CAN_CCCR_DAR_MASK
 (0x40U)

	)

813 
	#CAN_CCCR_DAR_SHIFT
 (6U)

	)

814 
	#CAN_CCCR_DAR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_CCCR_DAR_SHIFT
)Ë& 
CAN_CCCR_DAR_MASK
)

	)

815 
	#CAN_CCCR_TEST_MASK
 (0x80U)

	)

816 
	#CAN_CCCR_TEST_SHIFT
 (7U)

	)

817 
	#CAN_CCCR_TEST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_CCCR_TEST_SHIFT
)Ë& 
CAN_CCCR_TEST_MASK
)

	)

818 
	#CAN_CCCR_PXHD_MASK
 (0x1000U)

	)

819 
	#CAN_CCCR_PXHD_SHIFT
 (12U)

	)

820 
	#CAN_CCCR_PXHD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_CCCR_PXHD_SHIFT
)Ë& 
CAN_CCCR_PXHD_MASK
)

	)

821 
	#CAN_CCCR_EFBI_MASK
 (0x2000U)

	)

822 
	#CAN_CCCR_EFBI_SHIFT
 (13U)

	)

823 
	#CAN_CCCR_EFBI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_CCCR_EFBI_SHIFT
)Ë& 
CAN_CCCR_EFBI_MASK
)

	)

824 
	#CAN_CCCR_TXP_MASK
 (0x4000U)

	)

825 
	#CAN_CCCR_TXP_SHIFT
 (14U)

	)

826 
	#CAN_CCCR_TXP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_CCCR_TXP_SHIFT
)Ë& 
CAN_CCCR_TXP_MASK
)

	)

829 
	#CAN_NBTP_NTSEG2_MASK
 (0x7FU)

	)

830 
	#CAN_NBTP_NTSEG2_SHIFT
 (0U)

	)

831 
	#CAN_NBTP_NTSEG2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_NBTP_NTSEG2_SHIFT
)Ë& 
CAN_NBTP_NTSEG2_MASK
)

	)

832 
	#CAN_NBTP_NTSEG1_MASK
 (0xFF00U)

	)

833 
	#CAN_NBTP_NTSEG1_SHIFT
 (8U)

	)

834 
	#CAN_NBTP_NTSEG1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_NBTP_NTSEG1_SHIFT
)Ë& 
CAN_NBTP_NTSEG1_MASK
)

	)

835 
	#CAN_NBTP_NBRP_MASK
 (0x1FF0000U)

	)

836 
	#CAN_NBTP_NBRP_SHIFT
 (16U)

	)

837 
	#CAN_NBTP_NBRP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_NBTP_NBRP_SHIFT
)Ë& 
CAN_NBTP_NBRP_MASK
)

	)

838 
	#CAN_NBTP_NSJW_MASK
 (0xFE000000U)

	)

839 
	#CAN_NBTP_NSJW_SHIFT
 (25U)

	)

840 
	#CAN_NBTP_NSJW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_NBTP_NSJW_SHIFT
)Ë& 
CAN_NBTP_NSJW_MASK
)

	)

843 
	#CAN_TSCC_TSS_MASK
 (0x3U)

	)

844 
	#CAN_TSCC_TSS_SHIFT
 (0U)

	)

845 
	#CAN_TSCC_TSS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TSCC_TSS_SHIFT
)Ë& 
CAN_TSCC_TSS_MASK
)

	)

846 
	#CAN_TSCC_TCP_MASK
 (0xF0000U)

	)

847 
	#CAN_TSCC_TCP_SHIFT
 (16U)

	)

848 
	#CAN_TSCC_TCP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TSCC_TCP_SHIFT
)Ë& 
CAN_TSCC_TCP_MASK
)

	)

851 
	#CAN_TSCV_TSC_MASK
 (0xFFFFU)

	)

852 
	#CAN_TSCV_TSC_SHIFT
 (0U)

	)

853 
	#CAN_TSCV_TSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TSCV_TSC_SHIFT
)Ë& 
CAN_TSCV_TSC_MASK
)

	)

856 
	#CAN_TOCC_ETOC_MASK
 (0x1U)

	)

857 
	#CAN_TOCC_ETOC_SHIFT
 (0U)

	)

858 
	#CAN_TOCC_ETOC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TOCC_ETOC_SHIFT
)Ë& 
CAN_TOCC_ETOC_MASK
)

	)

859 
	#CAN_TOCC_TOS_MASK
 (0x6U)

	)

860 
	#CAN_TOCC_TOS_SHIFT
 (1U)

	)

861 
	#CAN_TOCC_TOS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TOCC_TOS_SHIFT
)Ë& 
CAN_TOCC_TOS_MASK
)

	)

862 
	#CAN_TOCC_TOP_MASK
 (0xFFFF0000U)

	)

863 
	#CAN_TOCC_TOP_SHIFT
 (16U)

	)

864 
	#CAN_TOCC_TOP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TOCC_TOP_SHIFT
)Ë& 
CAN_TOCC_TOP_MASK
)

	)

867 
	#CAN_TOCV_TOC_MASK
 (0xFFFFU)

	)

868 
	#CAN_TOCV_TOC_SHIFT
 (0U)

	)

869 
	#CAN_TOCV_TOC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TOCV_TOC_SHIFT
)Ë& 
CAN_TOCV_TOC_MASK
)

	)

872 
	#CAN_ECR_TEC_MASK
 (0xFFU)

	)

873 
	#CAN_ECR_TEC_SHIFT
 (0U)

	)

874 
	#CAN_ECR_TEC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ECR_TEC_SHIFT
)Ë& 
CAN_ECR_TEC_MASK
)

	)

875 
	#CAN_ECR_REC_MASK
 (0x7F00U)

	)

876 
	#CAN_ECR_REC_SHIFT
 (8U)

	)

877 
	#CAN_ECR_REC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ECR_REC_SHIFT
)Ë& 
CAN_ECR_REC_MASK
)

	)

878 
	#CAN_ECR_RP_MASK
 (0x8000U)

	)

879 
	#CAN_ECR_RP_SHIFT
 (15U)

	)

880 
	#CAN_ECR_RP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ECR_RP_SHIFT
)Ë& 
CAN_ECR_RP_MASK
)

	)

881 
	#CAN_ECR_CEL_MASK
 (0xFF0000U)

	)

882 
	#CAN_ECR_CEL_SHIFT
 (16U)

	)

883 
	#CAN_ECR_CEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ECR_CEL_SHIFT
)Ë& 
CAN_ECR_CEL_MASK
)

	)

886 
	#CAN_PSR_LEC_MASK
 (0x7U)

	)

887 
	#CAN_PSR_LEC_SHIFT
 (0U)

	)

888 
	#CAN_PSR_LEC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_PSR_LEC_SHIFT
)Ë& 
CAN_PSR_LEC_MASK
)

	)

889 
	#CAN_PSR_ACT_MASK
 (0x18U)

	)

890 
	#CAN_PSR_ACT_SHIFT
 (3U)

	)

891 
	#CAN_PSR_ACT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_PSR_ACT_SHIFT
)Ë& 
CAN_PSR_ACT_MASK
)

	)

892 
	#CAN_PSR_EP_MASK
 (0x20U)

	)

893 
	#CAN_PSR_EP_SHIFT
 (5U)

	)

894 
	#CAN_PSR_EP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_PSR_EP_SHIFT
)Ë& 
CAN_PSR_EP_MASK
)

	)

895 
	#CAN_PSR_EW_MASK
 (0x40U)

	)

896 
	#CAN_PSR_EW_SHIFT
 (6U)

	)

897 
	#CAN_PSR_EW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_PSR_EW_SHIFT
)Ë& 
CAN_PSR_EW_MASK
)

	)

898 
	#CAN_PSR_BO_MASK
 (0x80U)

	)

899 
	#CAN_PSR_BO_SHIFT
 (7U)

	)

900 
	#CAN_PSR_BO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_PSR_BO_SHIFT
)Ë& 
CAN_PSR_BO_MASK
)

	)

901 
	#CAN_PSR_PXE_MASK
 (0x4000U)

	)

902 
	#CAN_PSR_PXE_SHIFT
 (14U)

	)

903 
	#CAN_PSR_PXE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_PSR_PXE_SHIFT
)Ë& 
CAN_PSR_PXE_MASK
)

	)

904 
	#CAN_PSR_TDCV_MASK
 (0x7F0000U)

	)

905 
	#CAN_PSR_TDCV_SHIFT
 (16U)

	)

906 
	#CAN_PSR_TDCV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_PSR_TDCV_SHIFT
)Ë& 
CAN_PSR_TDCV_MASK
)

	)

909 
	#CAN_TDCR_TDCF_MASK
 (0x7FU)

	)

910 
	#CAN_TDCR_TDCF_SHIFT
 (0U)

	)

911 
	#CAN_TDCR_TDCF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TDCR_TDCF_SHIFT
)Ë& 
CAN_TDCR_TDCF_MASK
)

	)

912 
	#CAN_TDCR_TDCO_MASK
 (0x7F00U)

	)

913 
	#CAN_TDCR_TDCO_SHIFT
 (8U)

	)

914 
	#CAN_TDCR_TDCO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TDCR_TDCO_SHIFT
)Ë& 
CAN_TDCR_TDCO_MASK
)

	)

917 
	#CAN_IR_RF0N_MASK
 (0x1U)

	)

918 
	#CAN_IR_RF0N_SHIFT
 (0U)

	)

919 
	#CAN_IR_RF0N
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_RF0N_SHIFT
)Ë& 
CAN_IR_RF0N_MASK
)

	)

920 
	#CAN_IR_RF0W_MASK
 (0x2U)

	)

921 
	#CAN_IR_RF0W_SHIFT
 (1U)

	)

922 
	#CAN_IR_RF0W
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_RF0W_SHIFT
)Ë& 
CAN_IR_RF0W_MASK
)

	)

923 
	#CAN_IR_RF0F_MASK
 (0x4U)

	)

924 
	#CAN_IR_RF0F_SHIFT
 (2U)

	)

925 
	#CAN_IR_RF0F
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_RF0F_SHIFT
)Ë& 
CAN_IR_RF0F_MASK
)

	)

926 
	#CAN_IR_RF0L_MASK
 (0x8U)

	)

927 
	#CAN_IR_RF0L_SHIFT
 (3U)

	)

928 
	#CAN_IR_RF0L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_RF0L_SHIFT
)Ë& 
CAN_IR_RF0L_MASK
)

	)

929 
	#CAN_IR_RF1N_MASK
 (0x10U)

	)

930 
	#CAN_IR_RF1N_SHIFT
 (4U)

	)

931 
	#CAN_IR_RF1N
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_RF1N_SHIFT
)Ë& 
CAN_IR_RF1N_MASK
)

	)

932 
	#CAN_IR_RF1W_MASK
 (0x20U)

	)

933 
	#CAN_IR_RF1W_SHIFT
 (5U)

	)

934 
	#CAN_IR_RF1W
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_RF1W_SHIFT
)Ë& 
CAN_IR_RF1W_MASK
)

	)

935 
	#CAN_IR_RF1F_MASK
 (0x40U)

	)

936 
	#CAN_IR_RF1F_SHIFT
 (6U)

	)

937 
	#CAN_IR_RF1F
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_RF1F_SHIFT
)Ë& 
CAN_IR_RF1F_MASK
)

	)

938 
	#CAN_IR_RF1L_MASK
 (0x80U)

	)

939 
	#CAN_IR_RF1L_SHIFT
 (7U)

	)

940 
	#CAN_IR_RF1L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_RF1L_SHIFT
)Ë& 
CAN_IR_RF1L_MASK
)

	)

941 
	#CAN_IR_HPM_MASK
 (0x100U)

	)

942 
	#CAN_IR_HPM_SHIFT
 (8U)

	)

943 
	#CAN_IR_HPM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_HPM_SHIFT
)Ë& 
CAN_IR_HPM_MASK
)

	)

944 
	#CAN_IR_TC_MASK
 (0x200U)

	)

945 
	#CAN_IR_TC_SHIFT
 (9U)

	)

946 
	#CAN_IR_TC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_TC_SHIFT
)Ë& 
CAN_IR_TC_MASK
)

	)

947 
	#CAN_IR_TCF_MASK
 (0x400U)

	)

948 
	#CAN_IR_TCF_SHIFT
 (10U)

	)

949 
	#CAN_IR_TCF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_TCF_SHIFT
)Ë& 
CAN_IR_TCF_MASK
)

	)

950 
	#CAN_IR_TFE_MASK
 (0x800U)

	)

951 
	#CAN_IR_TFE_SHIFT
 (11U)

	)

952 
	#CAN_IR_TFE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_TFE_SHIFT
)Ë& 
CAN_IR_TFE_MASK
)

	)

953 
	#CAN_IR_TEFN_MASK
 (0x1000U)

	)

954 
	#CAN_IR_TEFN_SHIFT
 (12U)

	)

955 
	#CAN_IR_TEFN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_TEFN_SHIFT
)Ë& 
CAN_IR_TEFN_MASK
)

	)

956 
	#CAN_IR_TEFW_MASK
 (0x2000U)

	)

957 
	#CAN_IR_TEFW_SHIFT
 (13U)

	)

958 
	#CAN_IR_TEFW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_TEFW_SHIFT
)Ë& 
CAN_IR_TEFW_MASK
)

	)

959 
	#CAN_IR_TEFF_MASK
 (0x4000U)

	)

960 
	#CAN_IR_TEFF_SHIFT
 (14U)

	)

961 
	#CAN_IR_TEFF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_TEFF_SHIFT
)Ë& 
CAN_IR_TEFF_MASK
)

	)

962 
	#CAN_IR_TEFL_MASK
 (0x8000U)

	)

963 
	#CAN_IR_TEFL_SHIFT
 (15U)

	)

964 
	#CAN_IR_TEFL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_TEFL_SHIFT
)Ë& 
CAN_IR_TEFL_MASK
)

	)

965 
	#CAN_IR_TSW_MASK
 (0x10000U)

	)

966 
	#CAN_IR_TSW_SHIFT
 (16U)

	)

967 
	#CAN_IR_TSW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_TSW_SHIFT
)Ë& 
CAN_IR_TSW_MASK
)

	)

968 
	#CAN_IR_MRAF_MASK
 (0x20000U)

	)

969 
	#CAN_IR_MRAF_SHIFT
 (17U)

	)

970 
	#CAN_IR_MRAF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_MRAF_SHIFT
)Ë& 
CAN_IR_MRAF_MASK
)

	)

971 
	#CAN_IR_TOO_MASK
 (0x40000U)

	)

972 
	#CAN_IR_TOO_SHIFT
 (18U)

	)

973 
	#CAN_IR_TOO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_TOO_SHIFT
)Ë& 
CAN_IR_TOO_MASK
)

	)

974 
	#CAN_IR_DRX_MASK
 (0x80000U)

	)

975 
	#CAN_IR_DRX_SHIFT
 (19U)

	)

976 
	#CAN_IR_DRX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_DRX_SHIFT
)Ë& 
CAN_IR_DRX_MASK
)

	)

977 
	#CAN_IR_BEC_MASK
 (0x100000U)

	)

978 
	#CAN_IR_BEC_SHIFT
 (20U)

	)

979 
	#CAN_IR_BEC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_BEC_SHIFT
)Ë& 
CAN_IR_BEC_MASK
)

	)

980 
	#CAN_IR_BEU_MASK
 (0x200000U)

	)

981 
	#CAN_IR_BEU_SHIFT
 (21U)

	)

982 
	#CAN_IR_BEU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_BEU_SHIFT
)Ë& 
CAN_IR_BEU_MASK
)

	)

983 
	#CAN_IR_ELO_MASK
 (0x400000U)

	)

984 
	#CAN_IR_ELO_SHIFT
 (22U)

	)

985 
	#CAN_IR_ELO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_ELO_SHIFT
)Ë& 
CAN_IR_ELO_MASK
)

	)

986 
	#CAN_IR_EP_MASK
 (0x800000U)

	)

987 
	#CAN_IR_EP_SHIFT
 (23U)

	)

988 
	#CAN_IR_EP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_EP_SHIFT
)Ë& 
CAN_IR_EP_MASK
)

	)

989 
	#CAN_IR_EW_MASK
 (0x1000000U)

	)

990 
	#CAN_IR_EW_SHIFT
 (24U)

	)

991 
	#CAN_IR_EW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_EW_SHIFT
)Ë& 
CAN_IR_EW_MASK
)

	)

992 
	#CAN_IR_BO_MASK
 (0x2000000U)

	)

993 
	#CAN_IR_BO_SHIFT
 (25U)

	)

994 
	#CAN_IR_BO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_BO_SHIFT
)Ë& 
CAN_IR_BO_MASK
)

	)

995 
	#CAN_IR_WDI_MASK
 (0x4000000U)

	)

996 
	#CAN_IR_WDI_SHIFT
 (26U)

	)

997 
	#CAN_IR_WDI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_WDI_SHIFT
)Ë& 
CAN_IR_WDI_MASK
)

	)

998 
	#CAN_IR_PEA_MASK
 (0x8000000U)

	)

999 
	#CAN_IR_PEA_SHIFT
 (27U)

	)

1000 
	#CAN_IR_PEA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_PEA_SHIFT
)Ë& 
CAN_IR_PEA_MASK
)

	)

1001 
	#CAN_IR_PED_MASK
 (0x10000000U)

	)

1002 
	#CAN_IR_PED_SHIFT
 (28U)

	)

1003 
	#CAN_IR_PED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_PED_SHIFT
)Ë& 
CAN_IR_PED_MASK
)

	)

1004 
	#CAN_IR_ARA_MASK
 (0x20000000U)

	)

1005 
	#CAN_IR_ARA_SHIFT
 (29U)

	)

1006 
	#CAN_IR_ARA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IR_ARA_SHIFT
)Ë& 
CAN_IR_ARA_MASK
)

	)

1009 
	#CAN_IE_RF0NE_MASK
 (0x1U)

	)

1010 
	#CAN_IE_RF0NE_SHIFT
 (0U)

	)

1011 
	#CAN_IE_RF0NE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_RF0NE_SHIFT
)Ë& 
CAN_IE_RF0NE_MASK
)

	)

1012 
	#CAN_IE_RF0WE_MASK
 (0x2U)

	)

1013 
	#CAN_IE_RF0WE_SHIFT
 (1U)

	)

1014 
	#CAN_IE_RF0WE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_RF0WE_SHIFT
)Ë& 
CAN_IE_RF0WE_MASK
)

	)

1015 
	#CAN_IE_RF0FE_MASK
 (0x4U)

	)

1016 
	#CAN_IE_RF0FE_SHIFT
 (2U)

	)

1017 
	#CAN_IE_RF0FE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_RF0FE_SHIFT
)Ë& 
CAN_IE_RF0FE_MASK
)

	)

1018 
	#CAN_IE_RF0LE_MASK
 (0x8U)

	)

1019 
	#CAN_IE_RF0LE_SHIFT
 (3U)

	)

1020 
	#CAN_IE_RF0LE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_RF0LE_SHIFT
)Ë& 
CAN_IE_RF0LE_MASK
)

	)

1021 
	#CAN_IE_RF1NE_MASK
 (0x10U)

	)

1022 
	#CAN_IE_RF1NE_SHIFT
 (4U)

	)

1023 
	#CAN_IE_RF1NE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_RF1NE_SHIFT
)Ë& 
CAN_IE_RF1NE_MASK
)

	)

1024 
	#CAN_IE_RF1WE_MASK
 (0x20U)

	)

1025 
	#CAN_IE_RF1WE_SHIFT
 (5U)

	)

1026 
	#CAN_IE_RF1WE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_RF1WE_SHIFT
)Ë& 
CAN_IE_RF1WE_MASK
)

	)

1027 
	#CAN_IE_RF1FE_MASK
 (0x40U)

	)

1028 
	#CAN_IE_RF1FE_SHIFT
 (6U)

	)

1029 
	#CAN_IE_RF1FE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_RF1FE_SHIFT
)Ë& 
CAN_IE_RF1FE_MASK
)

	)

1030 
	#CAN_IE_RF1LE_MASK
 (0x80U)

	)

1031 
	#CAN_IE_RF1LE_SHIFT
 (7U)

	)

1032 
	#CAN_IE_RF1LE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_RF1LE_SHIFT
)Ë& 
CAN_IE_RF1LE_MASK
)

	)

1033 
	#CAN_IE_HPME_MASK
 (0x100U)

	)

1034 
	#CAN_IE_HPME_SHIFT
 (8U)

	)

1035 
	#CAN_IE_HPME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_HPME_SHIFT
)Ë& 
CAN_IE_HPME_MASK
)

	)

1036 
	#CAN_IE_TCE_MASK
 (0x200U)

	)

1037 
	#CAN_IE_TCE_SHIFT
 (9U)

	)

1038 
	#CAN_IE_TCE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_TCE_SHIFT
)Ë& 
CAN_IE_TCE_MASK
)

	)

1039 
	#CAN_IE_TCFE_MASK
 (0x400U)

	)

1040 
	#CAN_IE_TCFE_SHIFT
 (10U)

	)

1041 
	#CAN_IE_TCFE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_TCFE_SHIFT
)Ë& 
CAN_IE_TCFE_MASK
)

	)

1042 
	#CAN_IE_TFEE_MASK
 (0x800U)

	)

1043 
	#CAN_IE_TFEE_SHIFT
 (11U)

	)

1044 
	#CAN_IE_TFEE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_TFEE_SHIFT
)Ë& 
CAN_IE_TFEE_MASK
)

	)

1045 
	#CAN_IE_TEFNE_MASK
 (0x1000U)

	)

1046 
	#CAN_IE_TEFNE_SHIFT
 (12U)

	)

1047 
	#CAN_IE_TEFNE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_TEFNE_SHIFT
)Ë& 
CAN_IE_TEFNE_MASK
)

	)

1048 
	#CAN_IE_TEFWE_MASK
 (0x2000U)

	)

1049 
	#CAN_IE_TEFWE_SHIFT
 (13U)

	)

1050 
	#CAN_IE_TEFWE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_TEFWE_SHIFT
)Ë& 
CAN_IE_TEFWE_MASK
)

	)

1051 
	#CAN_IE_TEFFE_MASK
 (0x4000U)

	)

1052 
	#CAN_IE_TEFFE_SHIFT
 (14U)

	)

1053 
	#CAN_IE_TEFFE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_TEFFE_SHIFT
)Ë& 
CAN_IE_TEFFE_MASK
)

	)

1054 
	#CAN_IE_TEFLE_MASK
 (0x8000U)

	)

1055 
	#CAN_IE_TEFLE_SHIFT
 (15U)

	)

1056 
	#CAN_IE_TEFLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_TEFLE_SHIFT
)Ë& 
CAN_IE_TEFLE_MASK
)

	)

1057 
	#CAN_IE_TSWE_MASK
 (0x10000U)

	)

1058 
	#CAN_IE_TSWE_SHIFT
 (16U)

	)

1059 
	#CAN_IE_TSWE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_TSWE_SHIFT
)Ë& 
CAN_IE_TSWE_MASK
)

	)

1060 
	#CAN_IE_MRAFE_MASK
 (0x20000U)

	)

1061 
	#CAN_IE_MRAFE_SHIFT
 (17U)

	)

1062 
	#CAN_IE_MRAFE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_MRAFE_SHIFT
)Ë& 
CAN_IE_MRAFE_MASK
)

	)

1063 
	#CAN_IE_TOOE_MASK
 (0x40000U)

	)

1064 
	#CAN_IE_TOOE_SHIFT
 (18U)

	)

1065 
	#CAN_IE_TOOE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_TOOE_SHIFT
)Ë& 
CAN_IE_TOOE_MASK
)

	)

1066 
	#CAN_IE_DRXE_MASK
 (0x80000U)

	)

1067 
	#CAN_IE_DRXE_SHIFT
 (19U)

	)

1068 
	#CAN_IE_DRXE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_DRXE_SHIFT
)Ë& 
CAN_IE_DRXE_MASK
)

	)

1069 
	#CAN_IE_BECE_MASK
 (0x100000U)

	)

1070 
	#CAN_IE_BECE_SHIFT
 (20U)

	)

1071 
	#CAN_IE_BECE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_BECE_SHIFT
)Ë& 
CAN_IE_BECE_MASK
)

	)

1072 
	#CAN_IE_BEUE_MASK
 (0x200000U)

	)

1073 
	#CAN_IE_BEUE_SHIFT
 (21U)

	)

1074 
	#CAN_IE_BEUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_BEUE_SHIFT
)Ë& 
CAN_IE_BEUE_MASK
)

	)

1075 
	#CAN_IE_ELOE_MASK
 (0x400000U)

	)

1076 
	#CAN_IE_ELOE_SHIFT
 (22U)

	)

1077 
	#CAN_IE_ELOE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_ELOE_SHIFT
)Ë& 
CAN_IE_ELOE_MASK
)

	)

1078 
	#CAN_IE_EPE_MASK
 (0x800000U)

	)

1079 
	#CAN_IE_EPE_SHIFT
 (23U)

	)

1080 
	#CAN_IE_EPE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_EPE_SHIFT
)Ë& 
CAN_IE_EPE_MASK
)

	)

1081 
	#CAN_IE_EWE_MASK
 (0x1000000U)

	)

1082 
	#CAN_IE_EWE_SHIFT
 (24U)

	)

1083 
	#CAN_IE_EWE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_EWE_SHIFT
)Ë& 
CAN_IE_EWE_MASK
)

	)

1084 
	#CAN_IE_BOE_MASK
 (0x2000000U)

	)

1085 
	#CAN_IE_BOE_SHIFT
 (25U)

	)

1086 
	#CAN_IE_BOE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_BOE_SHIFT
)Ë& 
CAN_IE_BOE_MASK
)

	)

1087 
	#CAN_IE_WDIE_MASK
 (0x4000000U)

	)

1088 
	#CAN_IE_WDIE_SHIFT
 (26U)

	)

1089 
	#CAN_IE_WDIE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_WDIE_SHIFT
)Ë& 
CAN_IE_WDIE_MASK
)

	)

1090 
	#CAN_IE_PEAE_MASK
 (0x8000000U)

	)

1091 
	#CAN_IE_PEAE_SHIFT
 (27U)

	)

1092 
	#CAN_IE_PEAE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_PEAE_SHIFT
)Ë& 
CAN_IE_PEAE_MASK
)

	)

1093 
	#CAN_IE_PEDE_MASK
 (0x10000000U)

	)

1094 
	#CAN_IE_PEDE_SHIFT
 (28U)

	)

1095 
	#CAN_IE_PEDE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_PEDE_SHIFT
)Ë& 
CAN_IE_PEDE_MASK
)

	)

1096 
	#CAN_IE_ARAE_MASK
 (0x20000000U)

	)

1097 
	#CAN_IE_ARAE_SHIFT
 (29U)

	)

1098 
	#CAN_IE_ARAE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_IE_ARAE_SHIFT
)Ë& 
CAN_IE_ARAE_MASK
)

	)

1101 
	#CAN_ILS_RF0NL_MASK
 (0x1U)

	)

1102 
	#CAN_ILS_RF0NL_SHIFT
 (0U)

	)

1103 
	#CAN_ILS_RF0NL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_RF0NL_SHIFT
)Ë& 
CAN_ILS_RF0NL_MASK
)

	)

1104 
	#CAN_ILS_RF0WL_MASK
 (0x2U)

	)

1105 
	#CAN_ILS_RF0WL_SHIFT
 (1U)

	)

1106 
	#CAN_ILS_RF0WL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_RF0WL_SHIFT
)Ë& 
CAN_ILS_RF0WL_MASK
)

	)

1107 
	#CAN_ILS_RF0FL_MASK
 (0x4U)

	)

1108 
	#CAN_ILS_RF0FL_SHIFT
 (2U)

	)

1109 
	#CAN_ILS_RF0FL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_RF0FL_SHIFT
)Ë& 
CAN_ILS_RF0FL_MASK
)

	)

1110 
	#CAN_ILS_RF0LL_MASK
 (0x8U)

	)

1111 
	#CAN_ILS_RF0LL_SHIFT
 (3U)

	)

1112 
	#CAN_ILS_RF0LL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_RF0LL_SHIFT
)Ë& 
CAN_ILS_RF0LL_MASK
)

	)

1113 
	#CAN_ILS_RF1NL_MASK
 (0x10U)

	)

1114 
	#CAN_ILS_RF1NL_SHIFT
 (4U)

	)

1115 
	#CAN_ILS_RF1NL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_RF1NL_SHIFT
)Ë& 
CAN_ILS_RF1NL_MASK
)

	)

1116 
	#CAN_ILS_RF1WL_MASK
 (0x20U)

	)

1117 
	#CAN_ILS_RF1WL_SHIFT
 (5U)

	)

1118 
	#CAN_ILS_RF1WL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_RF1WL_SHIFT
)Ë& 
CAN_ILS_RF1WL_MASK
)

	)

1119 
	#CAN_ILS_RF1FL_MASK
 (0x40U)

	)

1120 
	#CAN_ILS_RF1FL_SHIFT
 (6U)

	)

1121 
	#CAN_ILS_RF1FL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_RF1FL_SHIFT
)Ë& 
CAN_ILS_RF1FL_MASK
)

	)

1122 
	#CAN_ILS_RF1LL_MASK
 (0x80U)

	)

1123 
	#CAN_ILS_RF1LL_SHIFT
 (7U)

	)

1124 
	#CAN_ILS_RF1LL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_RF1LL_SHIFT
)Ë& 
CAN_ILS_RF1LL_MASK
)

	)

1125 
	#CAN_ILS_HPML_MASK
 (0x100U)

	)

1126 
	#CAN_ILS_HPML_SHIFT
 (8U)

	)

1127 
	#CAN_ILS_HPML
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_HPML_SHIFT
)Ë& 
CAN_ILS_HPML_MASK
)

	)

1128 
	#CAN_ILS_TCL_MASK
 (0x200U)

	)

1129 
	#CAN_ILS_TCL_SHIFT
 (9U)

	)

1130 
	#CAN_ILS_TCL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_TCL_SHIFT
)Ë& 
CAN_ILS_TCL_MASK
)

	)

1131 
	#CAN_ILS_TCFL_MASK
 (0x400U)

	)

1132 
	#CAN_ILS_TCFL_SHIFT
 (10U)

	)

1133 
	#CAN_ILS_TCFL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_TCFL_SHIFT
)Ë& 
CAN_ILS_TCFL_MASK
)

	)

1134 
	#CAN_ILS_TFEL_MASK
 (0x800U)

	)

1135 
	#CAN_ILS_TFEL_SHIFT
 (11U)

	)

1136 
	#CAN_ILS_TFEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_TFEL_SHIFT
)Ë& 
CAN_ILS_TFEL_MASK
)

	)

1137 
	#CAN_ILS_TEFNL_MASK
 (0x1000U)

	)

1138 
	#CAN_ILS_TEFNL_SHIFT
 (12U)

	)

1139 
	#CAN_ILS_TEFNL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_TEFNL_SHIFT
)Ë& 
CAN_ILS_TEFNL_MASK
)

	)

1140 
	#CAN_ILS_TEFWL_MASK
 (0x2000U)

	)

1141 
	#CAN_ILS_TEFWL_SHIFT
 (13U)

	)

1142 
	#CAN_ILS_TEFWL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_TEFWL_SHIFT
)Ë& 
CAN_ILS_TEFWL_MASK
)

	)

1143 
	#CAN_ILS_TEFFL_MASK
 (0x4000U)

	)

1144 
	#CAN_ILS_TEFFL_SHIFT
 (14U)

	)

1145 
	#CAN_ILS_TEFFL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_TEFFL_SHIFT
)Ë& 
CAN_ILS_TEFFL_MASK
)

	)

1146 
	#CAN_ILS_TEFLL_MASK
 (0x8000U)

	)

1147 
	#CAN_ILS_TEFLL_SHIFT
 (15U)

	)

1148 
	#CAN_ILS_TEFLL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_TEFLL_SHIFT
)Ë& 
CAN_ILS_TEFLL_MASK
)

	)

1149 
	#CAN_ILS_TSWL_MASK
 (0x10000U)

	)

1150 
	#CAN_ILS_TSWL_SHIFT
 (16U)

	)

1151 
	#CAN_ILS_TSWL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_TSWL_SHIFT
)Ë& 
CAN_ILS_TSWL_MASK
)

	)

1152 
	#CAN_ILS_MRAFL_MASK
 (0x20000U)

	)

1153 
	#CAN_ILS_MRAFL_SHIFT
 (17U)

	)

1154 
	#CAN_ILS_MRAFL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_MRAFL_SHIFT
)Ë& 
CAN_ILS_MRAFL_MASK
)

	)

1155 
	#CAN_ILS_TOOL_MASK
 (0x40000U)

	)

1156 
	#CAN_ILS_TOOL_SHIFT
 (18U)

	)

1157 
	#CAN_ILS_TOOL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_TOOL_SHIFT
)Ë& 
CAN_ILS_TOOL_MASK
)

	)

1158 
	#CAN_ILS_DRXL_MASK
 (0x80000U)

	)

1159 
	#CAN_ILS_DRXL_SHIFT
 (19U)

	)

1160 
	#CAN_ILS_DRXL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_DRXL_SHIFT
)Ë& 
CAN_ILS_DRXL_MASK
)

	)

1161 
	#CAN_ILS_BECL_MASK
 (0x100000U)

	)

1162 
	#CAN_ILS_BECL_SHIFT
 (20U)

	)

1163 
	#CAN_ILS_BECL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_BECL_SHIFT
)Ë& 
CAN_ILS_BECL_MASK
)

	)

1164 
	#CAN_ILS_BEUL_MASK
 (0x200000U)

	)

1165 
	#CAN_ILS_BEUL_SHIFT
 (21U)

	)

1166 
	#CAN_ILS_BEUL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_BEUL_SHIFT
)Ë& 
CAN_ILS_BEUL_MASK
)

	)

1167 
	#CAN_ILS_ELOL_MASK
 (0x400000U)

	)

1168 
	#CAN_ILS_ELOL_SHIFT
 (22U)

	)

1169 
	#CAN_ILS_ELOL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_ELOL_SHIFT
)Ë& 
CAN_ILS_ELOL_MASK
)

	)

1170 
	#CAN_ILS_EPL_MASK
 (0x800000U)

	)

1171 
	#CAN_ILS_EPL_SHIFT
 (23U)

	)

1172 
	#CAN_ILS_EPL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_EPL_SHIFT
)Ë& 
CAN_ILS_EPL_MASK
)

	)

1173 
	#CAN_ILS_EWL_MASK
 (0x1000000U)

	)

1174 
	#CAN_ILS_EWL_SHIFT
 (24U)

	)

1175 
	#CAN_ILS_EWL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_EWL_SHIFT
)Ë& 
CAN_ILS_EWL_MASK
)

	)

1176 
	#CAN_ILS_BOL_MASK
 (0x2000000U)

	)

1177 
	#CAN_ILS_BOL_SHIFT
 (25U)

	)

1178 
	#CAN_ILS_BOL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_BOL_SHIFT
)Ë& 
CAN_ILS_BOL_MASK
)

	)

1179 
	#CAN_ILS_WDIL_MASK
 (0x4000000U)

	)

1180 
	#CAN_ILS_WDIL_SHIFT
 (26U)

	)

1181 
	#CAN_ILS_WDIL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_WDIL_SHIFT
)Ë& 
CAN_ILS_WDIL_MASK
)

	)

1182 
	#CAN_ILS_PEAL_MASK
 (0x8000000U)

	)

1183 
	#CAN_ILS_PEAL_SHIFT
 (27U)

	)

1184 
	#CAN_ILS_PEAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_PEAL_SHIFT
)Ë& 
CAN_ILS_PEAL_MASK
)

	)

1185 
	#CAN_ILS_PEDL_MASK
 (0x10000000U)

	)

1186 
	#CAN_ILS_PEDL_SHIFT
 (28U)

	)

1187 
	#CAN_ILS_PEDL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_PEDL_SHIFT
)Ë& 
CAN_ILS_PEDL_MASK
)

	)

1188 
	#CAN_ILS_ARAL_MASK
 (0x20000000U)

	)

1189 
	#CAN_ILS_ARAL_SHIFT
 (29U)

	)

1190 
	#CAN_ILS_ARAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILS_ARAL_SHIFT
)Ë& 
CAN_ILS_ARAL_MASK
)

	)

1193 
	#CAN_ILE_EINT0_MASK
 (0x1U)

	)

1194 
	#CAN_ILE_EINT0_SHIFT
 (0U)

	)

1195 
	#CAN_ILE_EINT0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILE_EINT0_SHIFT
)Ë& 
CAN_ILE_EINT0_MASK
)

	)

1196 
	#CAN_ILE_EINT1_MASK
 (0x2U)

	)

1197 
	#CAN_ILE_EINT1_SHIFT
 (1U)

	)

1198 
	#CAN_ILE_EINT1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ILE_EINT1_SHIFT
)Ë& 
CAN_ILE_EINT1_MASK
)

	)

1201 
	#CAN_GFC_RRFE_MASK
 (0x1U)

	)

1202 
	#CAN_GFC_RRFE_SHIFT
 (0U)

	)

1203 
	#CAN_GFC_RRFE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_GFC_RRFE_SHIFT
)Ë& 
CAN_GFC_RRFE_MASK
)

	)

1204 
	#CAN_GFC_RRFS_MASK
 (0x2U)

	)

1205 
	#CAN_GFC_RRFS_SHIFT
 (1U)

	)

1206 
	#CAN_GFC_RRFS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_GFC_RRFS_SHIFT
)Ë& 
CAN_GFC_RRFS_MASK
)

	)

1207 
	#CAN_GFC_ANFE_MASK
 (0xCU)

	)

1208 
	#CAN_GFC_ANFE_SHIFT
 (2U)

	)

1209 
	#CAN_GFC_ANFE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_GFC_ANFE_SHIFT
)Ë& 
CAN_GFC_ANFE_MASK
)

	)

1210 
	#CAN_GFC_ANFS_MASK
 (0x30U)

	)

1211 
	#CAN_GFC_ANFS_SHIFT
 (4U)

	)

1212 
	#CAN_GFC_ANFS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_GFC_ANFS_SHIFT
)Ë& 
CAN_GFC_ANFS_MASK
)

	)

1215 
	#CAN_SIDFC_FLSSA_MASK
 (0xFFFCU)

	)

1216 
	#CAN_SIDFC_FLSSA_SHIFT
 (2U)

	)

1217 
	#CAN_SIDFC_FLSSA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_SIDFC_FLSSA_SHIFT
)Ë& 
CAN_SIDFC_FLSSA_MASK
)

	)

1218 
	#CAN_SIDFC_LSS_MASK
 (0xFF0000U)

	)

1219 
	#CAN_SIDFC_LSS_SHIFT
 (16U)

	)

1220 
	#CAN_SIDFC_LSS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_SIDFC_LSS_SHIFT
)Ë& 
CAN_SIDFC_LSS_MASK
)

	)

1223 
	#CAN_XIDFC_FLESA_MASK
 (0xFFFCU)

	)

1224 
	#CAN_XIDFC_FLESA_SHIFT
 (2U)

	)

1225 
	#CAN_XIDFC_FLESA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_XIDFC_FLESA_SHIFT
)Ë& 
CAN_XIDFC_FLESA_MASK
)

	)

1226 
	#CAN_XIDFC_LSE_MASK
 (0xFF0000U)

	)

1227 
	#CAN_XIDFC_LSE_SHIFT
 (16U)

	)

1228 
	#CAN_XIDFC_LSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_XIDFC_LSE_SHIFT
)Ë& 
CAN_XIDFC_LSE_MASK
)

	)

1231 
	#CAN_XIDAM_EIDM_MASK
 (0x1FFFFFFFU)

	)

1232 
	#CAN_XIDAM_EIDM_SHIFT
 (0U)

	)

1233 
	#CAN_XIDAM_EIDM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_XIDAM_EIDM_SHIFT
)Ë& 
CAN_XIDAM_EIDM_MASK
)

	)

1236 
	#CAN_HPMS_BIDX_MASK
 (0x3FU)

	)

1237 
	#CAN_HPMS_BIDX_SHIFT
 (0U)

	)

1238 
	#CAN_HPMS_BIDX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_HPMS_BIDX_SHIFT
)Ë& 
CAN_HPMS_BIDX_MASK
)

	)

1239 
	#CAN_HPMS_MSI_MASK
 (0xC0U)

	)

1240 
	#CAN_HPMS_MSI_SHIFT
 (6U)

	)

1241 
	#CAN_HPMS_MSI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_HPMS_MSI_SHIFT
)Ë& 
CAN_HPMS_MSI_MASK
)

	)

1242 
	#CAN_HPMS_FIDX_MASK
 (0x7F00U)

	)

1243 
	#CAN_HPMS_FIDX_SHIFT
 (8U)

	)

1244 
	#CAN_HPMS_FIDX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_HPMS_FIDX_SHIFT
)Ë& 
CAN_HPMS_FIDX_MASK
)

	)

1245 
	#CAN_HPMS_FLST_MASK
 (0x8000U)

	)

1246 
	#CAN_HPMS_FLST_SHIFT
 (15U)

	)

1247 
	#CAN_HPMS_FLST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_HPMS_FLST_SHIFT
)Ë& 
CAN_HPMS_FLST_MASK
)

	)

1250 
	#CAN_NDAT1_ND_MASK
 (0xFFFFFFFFU)

	)

1251 
	#CAN_NDAT1_ND_SHIFT
 (0U)

	)

1252 
	#CAN_NDAT1_ND
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_NDAT1_ND_SHIFT
)Ë& 
CAN_NDAT1_ND_MASK
)

	)

1255 
	#CAN_NDAT2_ND_MASK
 (0xFFFFFFFFU)

	)

1256 
	#CAN_NDAT2_ND_SHIFT
 (0U)

	)

1257 
	#CAN_NDAT2_ND
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_NDAT2_ND_SHIFT
)Ë& 
CAN_NDAT2_ND_MASK
)

	)

1260 
	#CAN_RXF0C_F0SA_MASK
 (0xFFFCU)

	)

1261 
	#CAN_RXF0C_F0SA_SHIFT
 (2U)

	)

1262 
	#CAN_RXF0C_F0SA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXF0C_F0SA_SHIFT
)Ë& 
CAN_RXF0C_F0SA_MASK
)

	)

1263 
	#CAN_RXF0C_F0S_MASK
 (0x7F0000U)

	)

1264 
	#CAN_RXF0C_F0S_SHIFT
 (16U)

	)

1265 
	#CAN_RXF0C_F0S
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXF0C_F0S_SHIFT
)Ë& 
CAN_RXF0C_F0S_MASK
)

	)

1266 
	#CAN_RXF0C_F0WM_MASK
 (0x7F000000U)

	)

1267 
	#CAN_RXF0C_F0WM_SHIFT
 (24U)

	)

1268 
	#CAN_RXF0C_F0WM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXF0C_F0WM_SHIFT
)Ë& 
CAN_RXF0C_F0WM_MASK
)

	)

1269 
	#CAN_RXF0C_F0OM_MASK
 (0x80000000U)

	)

1270 
	#CAN_RXF0C_F0OM_SHIFT
 (31U)

	)

1271 
	#CAN_RXF0C_F0OM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXF0C_F0OM_SHIFT
)Ë& 
CAN_RXF0C_F0OM_MASK
)

	)

1274 
	#CAN_RXF0S_F0FL_MASK
 (0x7FU)

	)

1275 
	#CAN_RXF0S_F0FL_SHIFT
 (0U)

	)

1276 
	#CAN_RXF0S_F0FL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXF0S_F0FL_SHIFT
)Ë& 
CAN_RXF0S_F0FL_MASK
)

	)

1277 
	#CAN_RXF0S_F0GI_MASK
 (0x3F00U)

	)

1278 
	#CAN_RXF0S_F0GI_SHIFT
 (8U)

	)

1279 
	#CAN_RXF0S_F0GI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXF0S_F0GI_SHIFT
)Ë& 
CAN_RXF0S_F0GI_MASK
)

	)

1280 
	#CAN_RXF0S_F0PI_MASK
 (0x3F0000U)

	)

1281 
	#CAN_RXF0S_F0PI_SHIFT
 (16U)

	)

1282 
	#CAN_RXF0S_F0PI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXF0S_F0PI_SHIFT
)Ë& 
CAN_RXF0S_F0PI_MASK
)

	)

1283 
	#CAN_RXF0S_F0F_MASK
 (0x1000000U)

	)

1284 
	#CAN_RXF0S_F0F_SHIFT
 (24U)

	)

1285 
	#CAN_RXF0S_F0F
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXF0S_F0F_SHIFT
)Ë& 
CAN_RXF0S_F0F_MASK
)

	)

1286 
	#CAN_RXF0S_RF0L_MASK
 (0x2000000U)

	)

1287 
	#CAN_RXF0S_RF0L_SHIFT
 (25U)

	)

1288 
	#CAN_RXF0S_RF0L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXF0S_RF0L_SHIFT
)Ë& 
CAN_RXF0S_RF0L_MASK
)

	)

1291 
	#CAN_RXF0A_F0AI_MASK
 (0x3FU)

	)

1292 
	#CAN_RXF0A_F0AI_SHIFT
 (0U)

	)

1293 
	#CAN_RXF0A_F0AI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXF0A_F0AI_SHIFT
)Ë& 
CAN_RXF0A_F0AI_MASK
)

	)

1296 
	#CAN_RXBC_RBSA_MASK
 (0xFFFCU)

	)

1297 
	#CAN_RXBC_RBSA_SHIFT
 (2U)

	)

1298 
	#CAN_RXBC_RBSA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXBC_RBSA_SHIFT
)Ë& 
CAN_RXBC_RBSA_MASK
)

	)

1301 
	#CAN_RXF1C_F1SA_MASK
 (0xFFFCU)

	)

1302 
	#CAN_RXF1C_F1SA_SHIFT
 (2U)

	)

1303 
	#CAN_RXF1C_F1SA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXF1C_F1SA_SHIFT
)Ë& 
CAN_RXF1C_F1SA_MASK
)

	)

1304 
	#CAN_RXF1C_F1S_MASK
 (0x7F0000U)

	)

1305 
	#CAN_RXF1C_F1S_SHIFT
 (16U)

	)

1306 
	#CAN_RXF1C_F1S
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXF1C_F1S_SHIFT
)Ë& 
CAN_RXF1C_F1S_MASK
)

	)

1307 
	#CAN_RXF1C_F1WM_MASK
 (0x7F000000U)

	)

1308 
	#CAN_RXF1C_F1WM_SHIFT
 (24U)

	)

1309 
	#CAN_RXF1C_F1WM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXF1C_F1WM_SHIFT
)Ë& 
CAN_RXF1C_F1WM_MASK
)

	)

1310 
	#CAN_RXF1C_F1OM_MASK
 (0x80000000U)

	)

1311 
	#CAN_RXF1C_F1OM_SHIFT
 (31U)

	)

1312 
	#CAN_RXF1C_F1OM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXF1C_F1OM_SHIFT
)Ë& 
CAN_RXF1C_F1OM_MASK
)

	)

1315 
	#CAN_RXF1S_F1FL_MASK
 (0x7FU)

	)

1316 
	#CAN_RXF1S_F1FL_SHIFT
 (0U)

	)

1317 
	#CAN_RXF1S_F1FL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXF1S_F1FL_SHIFT
)Ë& 
CAN_RXF1S_F1FL_MASK
)

	)

1318 
	#CAN_RXF1S_F1GI_MASK
 (0x3F00U)

	)

1319 
	#CAN_RXF1S_F1GI_SHIFT
 (8U)

	)

1320 
	#CAN_RXF1S_F1GI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXF1S_F1GI_SHIFT
)Ë& 
CAN_RXF1S_F1GI_MASK
)

	)

1321 
	#CAN_RXF1S_F1PI_MASK
 (0x3F0000U)

	)

1322 
	#CAN_RXF1S_F1PI_SHIFT
 (16U)

	)

1323 
	#CAN_RXF1S_F1PI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXF1S_F1PI_SHIFT
)Ë& 
CAN_RXF1S_F1PI_MASK
)

	)

1324 
	#CAN_RXF1S_F1F_MASK
 (0x1000000U)

	)

1325 
	#CAN_RXF1S_F1F_SHIFT
 (24U)

	)

1326 
	#CAN_RXF1S_F1F
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXF1S_F1F_SHIFT
)Ë& 
CAN_RXF1S_F1F_MASK
)

	)

1327 
	#CAN_RXF1S_RF1L_MASK
 (0x2000000U)

	)

1328 
	#CAN_RXF1S_RF1L_SHIFT
 (25U)

	)

1329 
	#CAN_RXF1S_RF1L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXF1S_RF1L_SHIFT
)Ë& 
CAN_RXF1S_RF1L_MASK
)

	)

1332 
	#CAN_RXF1A_F1AI_MASK
 (0x3FU)

	)

1333 
	#CAN_RXF1A_F1AI_SHIFT
 (0U)

	)

1334 
	#CAN_RXF1A_F1AI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXF1A_F1AI_SHIFT
)Ë& 
CAN_RXF1A_F1AI_MASK
)

	)

1337 
	#CAN_RXESC_F0DS_MASK
 (0x7U)

	)

1338 
	#CAN_RXESC_F0DS_SHIFT
 (0U)

	)

1339 
	#CAN_RXESC_F0DS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXESC_F0DS_SHIFT
)Ë& 
CAN_RXESC_F0DS_MASK
)

	)

1340 
	#CAN_RXESC_F1DS_MASK
 (0x70U)

	)

1341 
	#CAN_RXESC_F1DS_SHIFT
 (4U)

	)

1342 
	#CAN_RXESC_F1DS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXESC_F1DS_SHIFT
)Ë& 
CAN_RXESC_F1DS_MASK
)

	)

1343 
	#CAN_RXESC_RBDS_MASK
 (0x700U)

	)

1344 
	#CAN_RXESC_RBDS_SHIFT
 (8U)

	)

1345 
	#CAN_RXESC_RBDS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_RXESC_RBDS_SHIFT
)Ë& 
CAN_RXESC_RBDS_MASK
)

	)

1348 
	#CAN_TXBC_TBSA_MASK
 (0xFFFCU)

	)

1349 
	#CAN_TXBC_TBSA_SHIFT
 (2U)

	)

1350 
	#CAN_TXBC_TBSA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXBC_TBSA_SHIFT
)Ë& 
CAN_TXBC_TBSA_MASK
)

	)

1351 
	#CAN_TXBC_NDTB_MASK
 (0x3F0000U)

	)

1352 
	#CAN_TXBC_NDTB_SHIFT
 (16U)

	)

1353 
	#CAN_TXBC_NDTB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXBC_NDTB_SHIFT
)Ë& 
CAN_TXBC_NDTB_MASK
)

	)

1354 
	#CAN_TXBC_TFQS_MASK
 (0x3F000000U)

	)

1355 
	#CAN_TXBC_TFQS_SHIFT
 (24U)

	)

1356 
	#CAN_TXBC_TFQS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXBC_TFQS_SHIFT
)Ë& 
CAN_TXBC_TFQS_MASK
)

	)

1357 
	#CAN_TXBC_TFQM_MASK
 (0x40000000U)

	)

1358 
	#CAN_TXBC_TFQM_SHIFT
 (30U)

	)

1359 
	#CAN_TXBC_TFQM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXBC_TFQM_SHIFT
)Ë& 
CAN_TXBC_TFQM_MASK
)

	)

1362 
	#CAN_TXFQS_TFGI_MASK
 (0x1F00U)

	)

1363 
	#CAN_TXFQS_TFGI_SHIFT
 (8U)

	)

1364 
	#CAN_TXFQS_TFGI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXFQS_TFGI_SHIFT
)Ë& 
CAN_TXFQS_TFGI_MASK
)

	)

1365 
	#CAN_TXFQS_TFQPI_MASK
 (0x1F0000U)

	)

1366 
	#CAN_TXFQS_TFQPI_SHIFT
 (16U)

	)

1367 
	#CAN_TXFQS_TFQPI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXFQS_TFQPI_SHIFT
)Ë& 
CAN_TXFQS_TFQPI_MASK
)

	)

1368 
	#CAN_TXFQS_TFQF_MASK
 (0x200000U)

	)

1369 
	#CAN_TXFQS_TFQF_SHIFT
 (21U)

	)

1370 
	#CAN_TXFQS_TFQF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXFQS_TFQF_SHIFT
)Ë& 
CAN_TXFQS_TFQF_MASK
)

	)

1373 
	#CAN_TXESC_TBDS_MASK
 (0x7U)

	)

1374 
	#CAN_TXESC_TBDS_SHIFT
 (0U)

	)

1375 
	#CAN_TXESC_TBDS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXESC_TBDS_SHIFT
)Ë& 
CAN_TXESC_TBDS_MASK
)

	)

1378 
	#CAN_TXBRP_TRP_MASK
 (0xFFFFFFFFU)

	)

1379 
	#CAN_TXBRP_TRP_SHIFT
 (0U)

	)

1380 
	#CAN_TXBRP_TRP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXBRP_TRP_SHIFT
)Ë& 
CAN_TXBRP_TRP_MASK
)

	)

1383 
	#CAN_TXBAR_AR_MASK
 (0xFFFFFFFFU)

	)

1384 
	#CAN_TXBAR_AR_SHIFT
 (0U)

	)

1385 
	#CAN_TXBAR_AR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXBAR_AR_SHIFT
)Ë& 
CAN_TXBAR_AR_MASK
)

	)

1388 
	#CAN_TXBCR_CR_MASK
 (0xFFFFFFFFU)

	)

1389 
	#CAN_TXBCR_CR_SHIFT
 (0U)

	)

1390 
	#CAN_TXBCR_CR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXBCR_CR_SHIFT
)Ë& 
CAN_TXBCR_CR_MASK
)

	)

1393 
	#CAN_TXBTO_TO_MASK
 (0xFFFFFFFFU)

	)

1394 
	#CAN_TXBTO_TO_SHIFT
 (0U)

	)

1395 
	#CAN_TXBTO_TO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXBTO_TO_SHIFT
)Ë& 
CAN_TXBTO_TO_MASK
)

	)

1398 
	#CAN_TXBCF_TO_MASK
 (0xFFFFFFFFU)

	)

1399 
	#CAN_TXBCF_TO_SHIFT
 (0U)

	)

1400 
	#CAN_TXBCF_TO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXBCF_TO_SHIFT
)Ë& 
CAN_TXBCF_TO_MASK
)

	)

1403 
	#CAN_TXBTIE_TIE_MASK
 (0xFFFFFFFFU)

	)

1404 
	#CAN_TXBTIE_TIE_SHIFT
 (0U)

	)

1405 
	#CAN_TXBTIE_TIE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXBTIE_TIE_SHIFT
)Ë& 
CAN_TXBTIE_TIE_MASK
)

	)

1408 
	#CAN_TXBCIE_CFIE_MASK
 (0xFFFFFFFFU)

	)

1409 
	#CAN_TXBCIE_CFIE_SHIFT
 (0U)

	)

1410 
	#CAN_TXBCIE_CFIE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXBCIE_CFIE_SHIFT
)Ë& 
CAN_TXBCIE_CFIE_MASK
)

	)

1413 
	#CAN_TXEFC_EFSA_MASK
 (0xFFFCU)

	)

1414 
	#CAN_TXEFC_EFSA_SHIFT
 (2U)

	)

1415 
	#CAN_TXEFC_EFSA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXEFC_EFSA_SHIFT
)Ë& 
CAN_TXEFC_EFSA_MASK
)

	)

1416 
	#CAN_TXEFC_EFS_MASK
 (0x3F0000U)

	)

1417 
	#CAN_TXEFC_EFS_SHIFT
 (16U)

	)

1418 
	#CAN_TXEFC_EFS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXEFC_EFS_SHIFT
)Ë& 
CAN_TXEFC_EFS_MASK
)

	)

1419 
	#CAN_TXEFC_EFWM_MASK
 (0x3F000000U)

	)

1420 
	#CAN_TXEFC_EFWM_SHIFT
 (24U)

	)

1421 
	#CAN_TXEFC_EFWM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXEFC_EFWM_SHIFT
)Ë& 
CAN_TXEFC_EFWM_MASK
)

	)

1424 
	#CAN_TXEFS_EFFL_MASK
 (0x3FU)

	)

1425 
	#CAN_TXEFS_EFFL_SHIFT
 (0U)

	)

1426 
	#CAN_TXEFS_EFFL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXEFS_EFFL_SHIFT
)Ë& 
CAN_TXEFS_EFFL_MASK
)

	)

1427 
	#CAN_TXEFS_EFGI_MASK
 (0x1F00U)

	)

1428 
	#CAN_TXEFS_EFGI_SHIFT
 (8U)

	)

1429 
	#CAN_TXEFS_EFGI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXEFS_EFGI_SHIFT
)Ë& 
CAN_TXEFS_EFGI_MASK
)

	)

1430 
	#CAN_TXEFS_EFPI_MASK
 (0x3F0000U)

	)

1431 
	#CAN_TXEFS_EFPI_SHIFT
 (16U)

	)

1432 
	#CAN_TXEFS_EFPI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXEFS_EFPI_SHIFT
)Ë& 
CAN_TXEFS_EFPI_MASK
)

	)

1433 
	#CAN_TXEFS_EFF_MASK
 (0x1000000U)

	)

1434 
	#CAN_TXEFS_EFF_SHIFT
 (24U)

	)

1435 
	#CAN_TXEFS_EFF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXEFS_EFF_SHIFT
)Ë& 
CAN_TXEFS_EFF_MASK
)

	)

1436 
	#CAN_TXEFS_TEFL_MASK
 (0x2000000U)

	)

1437 
	#CAN_TXEFS_TEFL_SHIFT
 (25U)

	)

1438 
	#CAN_TXEFS_TEFL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXEFS_TEFL_SHIFT
)Ë& 
CAN_TXEFS_TEFL_MASK
)

	)

1441 
	#CAN_TXEFA_EFAI_MASK
 (0x1FU)

	)

1442 
	#CAN_TXEFA_EFAI_SHIFT
 (0U)

	)

1443 
	#CAN_TXEFA_EFAI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_TXEFA_EFAI_SHIFT
)Ë& 
CAN_TXEFA_EFAI_MASK
)

	)

1446 
	#CAN_MRBA_BA_MASK
 (0xFFFFFFFFU)

	)

1447 
	#CAN_MRBA_BA_SHIFT
 (0U)

	)

1448 
	#CAN_MRBA_BA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_MRBA_BA_SHIFT
)Ë& 
CAN_MRBA_BA_MASK
)

	)

1451 
	#CAN_ETSCC_ETCP_MASK
 (0x7FFU)

	)

1452 
	#CAN_ETSCC_ETCP_SHIFT
 (0U)

	)

1453 
	#CAN_ETSCC_ETCP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ETSCC_ETCP_SHIFT
)Ë& 
CAN_ETSCC_ETCP_MASK
)

	)

1454 
	#CAN_ETSCC_ETCE_MASK
 (0x80000000U)

	)

1455 
	#CAN_ETSCC_ETCE_SHIFT
 (31U)

	)

1456 
	#CAN_ETSCC_ETCE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ETSCC_ETCE_SHIFT
)Ë& 
CAN_ETSCC_ETCE_MASK
)

	)

1459 
	#CAN_ETSCV_ETSC_MASK
 (0xFFFFU)

	)

1460 
	#CAN_ETSCV_ETSC_SHIFT
 (0U)

	)

1461 
	#CAN_ETSCV_ETSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CAN_ETSCV_ETSC_SHIFT
)Ë& 
CAN_ETSCV_ETSC_MASK
)

	)

1471 
	#CAN0_BASE
 (0x4009D000u)

	)

1473 
	#CAN0
 ((
CAN_Ty≥
 *)
CAN0_BASE
)

	)

1475 
	#CAN1_BASE
 (0x4009E000u)

	)

1477 
	#CAN1
 ((
CAN_Ty≥
 *)
CAN1_BASE
)

	)

1479 
	#CAN_BASE_ADDRS
 { 
CAN0_BASE
, 
CAN1_BASE
 }

	)

1481 
	#CAN_BASE_PTRS
 { 
CAN0
, 
CAN1
 }

	)

1483 
	#CAN_IRQS
 { { 
CAN0_IRQ0_IRQn
, 
CAN0_IRQ1_IRQn
 }, { 
CAN1_IRQ0_IRQn
, 
CAN1_IRQ1_IRQn
 } }

	)

1501 
__IO
 
uöt32_t
 
	mMODE
;

1502 
__IO
 
uöt32_t
 
	mSEED
;

1504 
__I
 
uöt32_t
 
	mSUM
;

1505 
__O
 
uöt32_t
 
	mWR_DATA
;

1507 } 
	tCRC_Ty≥
;

1519 
	#CRC_MODE_CRC_POLY_MASK
 (0x3U)

	)

1520 
	#CRC_MODE_CRC_POLY_SHIFT
 (0U)

	)

1521 
	#CRC_MODE_CRC_POLY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CRC_MODE_CRC_POLY_SHIFT
)Ë& 
CRC_MODE_CRC_POLY_MASK
)

	)

1522 
	#CRC_MODE_BIT_RVS_WR_MASK
 (0x4U)

	)

1523 
	#CRC_MODE_BIT_RVS_WR_SHIFT
 (2U)

	)

1524 
	#CRC_MODE_BIT_RVS_WR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CRC_MODE_BIT_RVS_WR_SHIFT
)Ë& 
CRC_MODE_BIT_RVS_WR_MASK
)

	)

1525 
	#CRC_MODE_CMPL_WR_MASK
 (0x8U)

	)

1526 
	#CRC_MODE_CMPL_WR_SHIFT
 (3U)

	)

1527 
	#CRC_MODE_CMPL_WR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CRC_MODE_CMPL_WR_SHIFT
)Ë& 
CRC_MODE_CMPL_WR_MASK
)

	)

1528 
	#CRC_MODE_BIT_RVS_SUM_MASK
 (0x10U)

	)

1529 
	#CRC_MODE_BIT_RVS_SUM_SHIFT
 (4U)

	)

1530 
	#CRC_MODE_BIT_RVS_SUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CRC_MODE_BIT_RVS_SUM_SHIFT
)Ë& 
CRC_MODE_BIT_RVS_SUM_MASK
)

	)

1531 
	#CRC_MODE_CMPL_SUM_MASK
 (0x20U)

	)

1532 
	#CRC_MODE_CMPL_SUM_SHIFT
 (5U)

	)

1533 
	#CRC_MODE_CMPL_SUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CRC_MODE_CMPL_SUM_SHIFT
)Ë& 
CRC_MODE_CMPL_SUM_MASK
)

	)

1536 
	#CRC_SEED_CRC_SEED_MASK
 (0xFFFFFFFFU)

	)

1537 
	#CRC_SEED_CRC_SEED_SHIFT
 (0U)

	)

1538 
	#CRC_SEED_CRC_SEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CRC_SEED_CRC_SEED_SHIFT
)Ë& 
CRC_SEED_CRC_SEED_MASK
)

	)

1541 
	#CRC_SUM_CRC_SUM_MASK
 (0xFFFFFFFFU)

	)

1542 
	#CRC_SUM_CRC_SUM_SHIFT
 (0U)

	)

1543 
	#CRC_SUM_CRC_SUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CRC_SUM_CRC_SUM_SHIFT
)Ë& 
CRC_SUM_CRC_SUM_MASK
)

	)

1546 
	#CRC_WR_DATA_CRC_WR_DATA_MASK
 (0xFFFFFFFFU)

	)

1547 
	#CRC_WR_DATA_CRC_WR_DATA_SHIFT
 (0U)

	)

1548 
	#CRC_WR_DATA_CRC_WR_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CRC_WR_DATA_CRC_WR_DATA_SHIFT
)Ë& 
CRC_WR_DATA_CRC_WR_DATA_MASK
)

	)

1558 
	#CRC_ENGINE_BASE
 (0x40095000u)

	)

1560 
	#CRC_ENGINE
 ((
CRC_Ty≥
 *)
CRC_ENGINE_BASE
)

	)

1562 
	#CRC_BASE_ADDRS
 { 
CRC_ENGINE_BASE
 }

	)

1564 
	#CRC_BASE_PTRS
 { 
CRC_ENGINE
 }

	)

1582 
__IO
 
uöt32_t
 
	mIR
;

1583 
__IO
 
uöt32_t
 
	mTCR
;

1584 
__IO
 
uöt32_t
 
	mTC
;

1585 
__IO
 
uöt32_t
 
	mPR
;

1586 
__IO
 
uöt32_t
 
	mPC
;

1587 
__IO
 
uöt32_t
 
	mMCR
;

1588 
__IO
 
uöt32_t
 
	mMR
[4];

1589 
__IO
 
uöt32_t
 
	mCCR
;

1590 
__I
 
uöt32_t
 
	mCR
[4];

1591 
__IO
 
uöt32_t
 
	mEMR
;

1592 
uöt8_t
 
	mRESERVED_0
[48];

1593 
__IO
 
uöt32_t
 
	mCTCR
;

1594 
__IO
 
uöt32_t
 
	mPWMC
;

1595 
__IO
 
uöt32_t
 
	mMSR
[4];

1596 } 
	tCTIMER_Ty≥
;

1608 
	#CTIMER_IR_MR0INT_MASK
 (0x1U)

	)

1609 
	#CTIMER_IR_MR0INT_SHIFT
 (0U)

	)

1610 
	#CTIMER_IR_MR0INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_IR_MR0INT_SHIFT
)Ë& 
CTIMER_IR_MR0INT_MASK
)

	)

1611 
	#CTIMER_IR_MR1INT_MASK
 (0x2U)

	)

1612 
	#CTIMER_IR_MR1INT_SHIFT
 (1U)

	)

1613 
	#CTIMER_IR_MR1INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_IR_MR1INT_SHIFT
)Ë& 
CTIMER_IR_MR1INT_MASK
)

	)

1614 
	#CTIMER_IR_MR2INT_MASK
 (0x4U)

	)

1615 
	#CTIMER_IR_MR2INT_SHIFT
 (2U)

	)

1616 
	#CTIMER_IR_MR2INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_IR_MR2INT_SHIFT
)Ë& 
CTIMER_IR_MR2INT_MASK
)

	)

1617 
	#CTIMER_IR_MR3INT_MASK
 (0x8U)

	)

1618 
	#CTIMER_IR_MR3INT_SHIFT
 (3U)

	)

1619 
	#CTIMER_IR_MR3INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_IR_MR3INT_SHIFT
)Ë& 
CTIMER_IR_MR3INT_MASK
)

	)

1620 
	#CTIMER_IR_CR0INT_MASK
 (0x10U)

	)

1621 
	#CTIMER_IR_CR0INT_SHIFT
 (4U)

	)

1622 
	#CTIMER_IR_CR0INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_IR_CR0INT_SHIFT
)Ë& 
CTIMER_IR_CR0INT_MASK
)

	)

1623 
	#CTIMER_IR_CR1INT_MASK
 (0x20U)

	)

1624 
	#CTIMER_IR_CR1INT_SHIFT
 (5U)

	)

1625 
	#CTIMER_IR_CR1INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_IR_CR1INT_SHIFT
)Ë& 
CTIMER_IR_CR1INT_MASK
)

	)

1626 
	#CTIMER_IR_CR2INT_MASK
 (0x40U)

	)

1627 
	#CTIMER_IR_CR2INT_SHIFT
 (6U)

	)

1628 
	#CTIMER_IR_CR2INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_IR_CR2INT_SHIFT
)Ë& 
CTIMER_IR_CR2INT_MASK
)

	)

1629 
	#CTIMER_IR_CR3INT_MASK
 (0x80U)

	)

1630 
	#CTIMER_IR_CR3INT_SHIFT
 (7U)

	)

1631 
	#CTIMER_IR_CR3INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_IR_CR3INT_SHIFT
)Ë& 
CTIMER_IR_CR3INT_MASK
)

	)

1634 
	#CTIMER_TCR_CEN_MASK
 (0x1U)

	)

1635 
	#CTIMER_TCR_CEN_SHIFT
 (0U)

	)

1636 
	#CTIMER_TCR_CEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_TCR_CEN_SHIFT
)Ë& 
CTIMER_TCR_CEN_MASK
)

	)

1637 
	#CTIMER_TCR_CRST_MASK
 (0x2U)

	)

1638 
	#CTIMER_TCR_CRST_SHIFT
 (1U)

	)

1639 
	#CTIMER_TCR_CRST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_TCR_CRST_SHIFT
)Ë& 
CTIMER_TCR_CRST_MASK
)

	)

1642 
	#CTIMER_TC_TCVAL_MASK
 (0xFFFFFFFFU)

	)

1643 
	#CTIMER_TC_TCVAL_SHIFT
 (0U)

	)

1644 
	#CTIMER_TC_TCVAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_TC_TCVAL_SHIFT
)Ë& 
CTIMER_TC_TCVAL_MASK
)

	)

1647 
	#CTIMER_PR_PRVAL_MASK
 (0xFFFFFFFFU)

	)

1648 
	#CTIMER_PR_PRVAL_SHIFT
 (0U)

	)

1649 
	#CTIMER_PR_PRVAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_PR_PRVAL_SHIFT
)Ë& 
CTIMER_PR_PRVAL_MASK
)

	)

1652 
	#CTIMER_PC_PCVAL_MASK
 (0xFFFFFFFFU)

	)

1653 
	#CTIMER_PC_PCVAL_SHIFT
 (0U)

	)

1654 
	#CTIMER_PC_PCVAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_PC_PCVAL_SHIFT
)Ë& 
CTIMER_PC_PCVAL_MASK
)

	)

1657 
	#CTIMER_MCR_MR0I_MASK
 (0x1U)

	)

1658 
	#CTIMER_MCR_MR0I_SHIFT
 (0U)

	)

1659 
	#CTIMER_MCR_MR0I
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_MCR_MR0I_SHIFT
)Ë& 
CTIMER_MCR_MR0I_MASK
)

	)

1660 
	#CTIMER_MCR_MR0R_MASK
 (0x2U)

	)

1661 
	#CTIMER_MCR_MR0R_SHIFT
 (1U)

	)

1662 
	#CTIMER_MCR_MR0R
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_MCR_MR0R_SHIFT
)Ë& 
CTIMER_MCR_MR0R_MASK
)

	)

1663 
	#CTIMER_MCR_MR0S_MASK
 (0x4U)

	)

1664 
	#CTIMER_MCR_MR0S_SHIFT
 (2U)

	)

1665 
	#CTIMER_MCR_MR0S
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_MCR_MR0S_SHIFT
)Ë& 
CTIMER_MCR_MR0S_MASK
)

	)

1666 
	#CTIMER_MCR_MR1I_MASK
 (0x8U)

	)

1667 
	#CTIMER_MCR_MR1I_SHIFT
 (3U)

	)

1668 
	#CTIMER_MCR_MR1I
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_MCR_MR1I_SHIFT
)Ë& 
CTIMER_MCR_MR1I_MASK
)

	)

1669 
	#CTIMER_MCR_MR1R_MASK
 (0x10U)

	)

1670 
	#CTIMER_MCR_MR1R_SHIFT
 (4U)

	)

1671 
	#CTIMER_MCR_MR1R
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_MCR_MR1R_SHIFT
)Ë& 
CTIMER_MCR_MR1R_MASK
)

	)

1672 
	#CTIMER_MCR_MR1S_MASK
 (0x20U)

	)

1673 
	#CTIMER_MCR_MR1S_SHIFT
 (5U)

	)

1674 
	#CTIMER_MCR_MR1S
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_MCR_MR1S_SHIFT
)Ë& 
CTIMER_MCR_MR1S_MASK
)

	)

1675 
	#CTIMER_MCR_MR2I_MASK
 (0x40U)

	)

1676 
	#CTIMER_MCR_MR2I_SHIFT
 (6U)

	)

1677 
	#CTIMER_MCR_MR2I
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_MCR_MR2I_SHIFT
)Ë& 
CTIMER_MCR_MR2I_MASK
)

	)

1678 
	#CTIMER_MCR_MR2R_MASK
 (0x80U)

	)

1679 
	#CTIMER_MCR_MR2R_SHIFT
 (7U)

	)

1680 
	#CTIMER_MCR_MR2R
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_MCR_MR2R_SHIFT
)Ë& 
CTIMER_MCR_MR2R_MASK
)

	)

1681 
	#CTIMER_MCR_MR2S_MASK
 (0x100U)

	)

1682 
	#CTIMER_MCR_MR2S_SHIFT
 (8U)

	)

1683 
	#CTIMER_MCR_MR2S
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_MCR_MR2S_SHIFT
)Ë& 
CTIMER_MCR_MR2S_MASK
)

	)

1684 
	#CTIMER_MCR_MR3I_MASK
 (0x200U)

	)

1685 
	#CTIMER_MCR_MR3I_SHIFT
 (9U)

	)

1686 
	#CTIMER_MCR_MR3I
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_MCR_MR3I_SHIFT
)Ë& 
CTIMER_MCR_MR3I_MASK
)

	)

1687 
	#CTIMER_MCR_MR3R_MASK
 (0x400U)

	)

1688 
	#CTIMER_MCR_MR3R_SHIFT
 (10U)

	)

1689 
	#CTIMER_MCR_MR3R
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_MCR_MR3R_SHIFT
)Ë& 
CTIMER_MCR_MR3R_MASK
)

	)

1690 
	#CTIMER_MCR_MR3S_MASK
 (0x800U)

	)

1691 
	#CTIMER_MCR_MR3S_SHIFT
 (11U)

	)

1692 
	#CTIMER_MCR_MR3S
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_MCR_MR3S_SHIFT
)Ë& 
CTIMER_MCR_MR3S_MASK
)

	)

1693 
	#CTIMER_MCR_MR0RL_MASK
 (0x1000000U)

	)

1694 
	#CTIMER_MCR_MR0RL_SHIFT
 (24U)

	)

1695 
	#CTIMER_MCR_MR0RL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_MCR_MR0RL_SHIFT
)Ë& 
CTIMER_MCR_MR0RL_MASK
)

	)

1696 
	#CTIMER_MCR_MR1RL_MASK
 (0x2000000U)

	)

1697 
	#CTIMER_MCR_MR1RL_SHIFT
 (25U)

	)

1698 
	#CTIMER_MCR_MR1RL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_MCR_MR1RL_SHIFT
)Ë& 
CTIMER_MCR_MR1RL_MASK
)

	)

1699 
	#CTIMER_MCR_MR2RL_MASK
 (0x4000000U)

	)

1700 
	#CTIMER_MCR_MR2RL_SHIFT
 (26U)

	)

1701 
	#CTIMER_MCR_MR2RL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_MCR_MR2RL_SHIFT
)Ë& 
CTIMER_MCR_MR2RL_MASK
)

	)

1702 
	#CTIMER_MCR_MR3RL_MASK
 (0x8000000U)

	)

1703 
	#CTIMER_MCR_MR3RL_SHIFT
 (27U)

	)

1704 
	#CTIMER_MCR_MR3RL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_MCR_MR3RL_SHIFT
)Ë& 
CTIMER_MCR_MR3RL_MASK
)

	)

1707 
	#CTIMER_MR_MATCH_MASK
 (0xFFFFFFFFU)

	)

1708 
	#CTIMER_MR_MATCH_SHIFT
 (0U)

	)

1709 
	#CTIMER_MR_MATCH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_MR_MATCH_SHIFT
)Ë& 
CTIMER_MR_MATCH_MASK
)

	)

1712 
	#CTIMER_MR_COUNT
 (4U)

	)

1715 
	#CTIMER_CCR_CAP0RE_MASK
 (0x1U)

	)

1716 
	#CTIMER_CCR_CAP0RE_SHIFT
 (0U)

	)

1717 
	#CTIMER_CCR_CAP0RE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_CCR_CAP0RE_SHIFT
)Ë& 
CTIMER_CCR_CAP0RE_MASK
)

	)

1718 
	#CTIMER_CCR_CAP0FE_MASK
 (0x2U)

	)

1719 
	#CTIMER_CCR_CAP0FE_SHIFT
 (1U)

	)

1720 
	#CTIMER_CCR_CAP0FE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_CCR_CAP0FE_SHIFT
)Ë& 
CTIMER_CCR_CAP0FE_MASK
)

	)

1721 
	#CTIMER_CCR_CAP0I_MASK
 (0x4U)

	)

1722 
	#CTIMER_CCR_CAP0I_SHIFT
 (2U)

	)

1723 
	#CTIMER_CCR_CAP0I
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_CCR_CAP0I_SHIFT
)Ë& 
CTIMER_CCR_CAP0I_MASK
)

	)

1724 
	#CTIMER_CCR_CAP1RE_MASK
 (0x8U)

	)

1725 
	#CTIMER_CCR_CAP1RE_SHIFT
 (3U)

	)

1726 
	#CTIMER_CCR_CAP1RE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_CCR_CAP1RE_SHIFT
)Ë& 
CTIMER_CCR_CAP1RE_MASK
)

	)

1727 
	#CTIMER_CCR_CAP1FE_MASK
 (0x10U)

	)

1728 
	#CTIMER_CCR_CAP1FE_SHIFT
 (4U)

	)

1729 
	#CTIMER_CCR_CAP1FE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_CCR_CAP1FE_SHIFT
)Ë& 
CTIMER_CCR_CAP1FE_MASK
)

	)

1730 
	#CTIMER_CCR_CAP1I_MASK
 (0x20U)

	)

1731 
	#CTIMER_CCR_CAP1I_SHIFT
 (5U)

	)

1732 
	#CTIMER_CCR_CAP1I
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_CCR_CAP1I_SHIFT
)Ë& 
CTIMER_CCR_CAP1I_MASK
)

	)

1733 
	#CTIMER_CCR_CAP2RE_MASK
 (0x40U)

	)

1734 
	#CTIMER_CCR_CAP2RE_SHIFT
 (6U)

	)

1735 
	#CTIMER_CCR_CAP2RE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_CCR_CAP2RE_SHIFT
)Ë& 
CTIMER_CCR_CAP2RE_MASK
)

	)

1736 
	#CTIMER_CCR_CAP2FE_MASK
 (0x80U)

	)

1737 
	#CTIMER_CCR_CAP2FE_SHIFT
 (7U)

	)

1738 
	#CTIMER_CCR_CAP2FE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_CCR_CAP2FE_SHIFT
)Ë& 
CTIMER_CCR_CAP2FE_MASK
)

	)

1739 
	#CTIMER_CCR_CAP2I_MASK
 (0x100U)

	)

1740 
	#CTIMER_CCR_CAP2I_SHIFT
 (8U)

	)

1741 
	#CTIMER_CCR_CAP2I
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_CCR_CAP2I_SHIFT
)Ë& 
CTIMER_CCR_CAP2I_MASK
)

	)

1742 
	#CTIMER_CCR_CAP3RE_MASK
 (0x200U)

	)

1743 
	#CTIMER_CCR_CAP3RE_SHIFT
 (9U)

	)

1744 
	#CTIMER_CCR_CAP3RE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_CCR_CAP3RE_SHIFT
)Ë& 
CTIMER_CCR_CAP3RE_MASK
)

	)

1745 
	#CTIMER_CCR_CAP3FE_MASK
 (0x400U)

	)

1746 
	#CTIMER_CCR_CAP3FE_SHIFT
 (10U)

	)

1747 
	#CTIMER_CCR_CAP3FE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_CCR_CAP3FE_SHIFT
)Ë& 
CTIMER_CCR_CAP3FE_MASK
)

	)

1748 
	#CTIMER_CCR_CAP3I_MASK
 (0x800U)

	)

1749 
	#CTIMER_CCR_CAP3I_SHIFT
 (11U)

	)

1750 
	#CTIMER_CCR_CAP3I
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_CCR_CAP3I_SHIFT
)Ë& 
CTIMER_CCR_CAP3I_MASK
)

	)

1753 
	#CTIMER_CR_CAP_MASK
 (0xFFFFFFFFU)

	)

1754 
	#CTIMER_CR_CAP_SHIFT
 (0U)

	)

1755 
	#CTIMER_CR_CAP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_CR_CAP_SHIFT
)Ë& 
CTIMER_CR_CAP_MASK
)

	)

1758 
	#CTIMER_CR_COUNT
 (4U)

	)

1761 
	#CTIMER_EMR_EM0_MASK
 (0x1U)

	)

1762 
	#CTIMER_EMR_EM0_SHIFT
 (0U)

	)

1763 
	#CTIMER_EMR_EM0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_EMR_EM0_SHIFT
)Ë& 
CTIMER_EMR_EM0_MASK
)

	)

1764 
	#CTIMER_EMR_EM1_MASK
 (0x2U)

	)

1765 
	#CTIMER_EMR_EM1_SHIFT
 (1U)

	)

1766 
	#CTIMER_EMR_EM1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_EMR_EM1_SHIFT
)Ë& 
CTIMER_EMR_EM1_MASK
)

	)

1767 
	#CTIMER_EMR_EM2_MASK
 (0x4U)

	)

1768 
	#CTIMER_EMR_EM2_SHIFT
 (2U)

	)

1769 
	#CTIMER_EMR_EM2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_EMR_EM2_SHIFT
)Ë& 
CTIMER_EMR_EM2_MASK
)

	)

1770 
	#CTIMER_EMR_EM3_MASK
 (0x8U)

	)

1771 
	#CTIMER_EMR_EM3_SHIFT
 (3U)

	)

1772 
	#CTIMER_EMR_EM3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_EMR_EM3_SHIFT
)Ë& 
CTIMER_EMR_EM3_MASK
)

	)

1773 
	#CTIMER_EMR_EMC0_MASK
 (0x30U)

	)

1774 
	#CTIMER_EMR_EMC0_SHIFT
 (4U)

	)

1775 
	#CTIMER_EMR_EMC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_EMR_EMC0_SHIFT
)Ë& 
CTIMER_EMR_EMC0_MASK
)

	)

1776 
	#CTIMER_EMR_EMC1_MASK
 (0xC0U)

	)

1777 
	#CTIMER_EMR_EMC1_SHIFT
 (6U)

	)

1778 
	#CTIMER_EMR_EMC1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_EMR_EMC1_SHIFT
)Ë& 
CTIMER_EMR_EMC1_MASK
)

	)

1779 
	#CTIMER_EMR_EMC2_MASK
 (0x300U)

	)

1780 
	#CTIMER_EMR_EMC2_SHIFT
 (8U)

	)

1781 
	#CTIMER_EMR_EMC2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_EMR_EMC2_SHIFT
)Ë& 
CTIMER_EMR_EMC2_MASK
)

	)

1782 
	#CTIMER_EMR_EMC3_MASK
 (0xC00U)

	)

1783 
	#CTIMER_EMR_EMC3_SHIFT
 (10U)

	)

1784 
	#CTIMER_EMR_EMC3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_EMR_EMC3_SHIFT
)Ë& 
CTIMER_EMR_EMC3_MASK
)

	)

1787 
	#CTIMER_CTCR_CTMODE_MASK
 (0x3U)

	)

1788 
	#CTIMER_CTCR_CTMODE_SHIFT
 (0U)

	)

1789 
	#CTIMER_CTCR_CTMODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_CTCR_CTMODE_SHIFT
)Ë& 
CTIMER_CTCR_CTMODE_MASK
)

	)

1790 
	#CTIMER_CTCR_CINSEL_MASK
 (0xCU)

	)

1791 
	#CTIMER_CTCR_CINSEL_SHIFT
 (2U)

	)

1792 
	#CTIMER_CTCR_CINSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_CTCR_CINSEL_SHIFT
)Ë& 
CTIMER_CTCR_CINSEL_MASK
)

	)

1793 
	#CTIMER_CTCR_ENCC_MASK
 (0x10U)

	)

1794 
	#CTIMER_CTCR_ENCC_SHIFT
 (4U)

	)

1795 
	#CTIMER_CTCR_ENCC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_CTCR_ENCC_SHIFT
)Ë& 
CTIMER_CTCR_ENCC_MASK
)

	)

1796 
	#CTIMER_CTCR_SELCC_MASK
 (0xE0U)

	)

1797 
	#CTIMER_CTCR_SELCC_SHIFT
 (5U)

	)

1798 
	#CTIMER_CTCR_SELCC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_CTCR_SELCC_SHIFT
)Ë& 
CTIMER_CTCR_SELCC_MASK
)

	)

1801 
	#CTIMER_PWMC_PWMEN0_MASK
 (0x1U)

	)

1802 
	#CTIMER_PWMC_PWMEN0_SHIFT
 (0U)

	)

1803 
	#CTIMER_PWMC_PWMEN0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_PWMC_PWMEN0_SHIFT
)Ë& 
CTIMER_PWMC_PWMEN0_MASK
)

	)

1804 
	#CTIMER_PWMC_PWMEN1_MASK
 (0x2U)

	)

1805 
	#CTIMER_PWMC_PWMEN1_SHIFT
 (1U)

	)

1806 
	#CTIMER_PWMC_PWMEN1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_PWMC_PWMEN1_SHIFT
)Ë& 
CTIMER_PWMC_PWMEN1_MASK
)

	)

1807 
	#CTIMER_PWMC_PWMEN2_MASK
 (0x4U)

	)

1808 
	#CTIMER_PWMC_PWMEN2_SHIFT
 (2U)

	)

1809 
	#CTIMER_PWMC_PWMEN2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_PWMC_PWMEN2_SHIFT
)Ë& 
CTIMER_PWMC_PWMEN2_MASK
)

	)

1810 
	#CTIMER_PWMC_PWMEN3_MASK
 (0x8U)

	)

1811 
	#CTIMER_PWMC_PWMEN3_SHIFT
 (3U)

	)

1812 
	#CTIMER_PWMC_PWMEN3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_PWMC_PWMEN3_SHIFT
)Ë& 
CTIMER_PWMC_PWMEN3_MASK
)

	)

1815 
	#CTIMER_MSR_SHADOWW_MASK
 (0xFFFFFFFFU)

	)

1816 
	#CTIMER_MSR_SHADOWW_SHIFT
 (0U)

	)

1817 
	#CTIMER_MSR_SHADOWW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
CTIMER_MSR_SHADOWW_SHIFT
)Ë& 
CTIMER_MSR_SHADOWW_MASK
)

	)

1820 
	#CTIMER_MSR_COUNT
 (4U)

	)

1830 
	#CTIMER0_BASE
 (0x40008000u)

	)

1832 
	#CTIMER0
 ((
CTIMER_Ty≥
 *)
CTIMER0_BASE
)

	)

1834 
	#CTIMER1_BASE
 (0x40009000u)

	)

1836 
	#CTIMER1
 ((
CTIMER_Ty≥
 *)
CTIMER1_BASE
)

	)

1838 
	#CTIMER2_BASE
 (0x40028000u)

	)

1840 
	#CTIMER2
 ((
CTIMER_Ty≥
 *)
CTIMER2_BASE
)

	)

1842 
	#CTIMER3_BASE
 (0x40048000u)

	)

1844 
	#CTIMER3
 ((
CTIMER_Ty≥
 *)
CTIMER3_BASE
)

	)

1846 
	#CTIMER4_BASE
 (0x40049000u)

	)

1848 
	#CTIMER4
 ((
CTIMER_Ty≥
 *)
CTIMER4_BASE
)

	)

1850 
	#CTIMER_BASE_ADDRS
 { 
CTIMER0_BASE
, 
CTIMER1_BASE
, 
CTIMER2_BASE
, 
CTIMER3_BASE
, 
CTIMER4_BASE
 }

	)

1852 
	#CTIMER_BASE_PTRS
 { 
CTIMER0
, 
CTIMER1
, 
CTIMER2
, 
CTIMER3
, 
CTIMER4
 }

	)

1854 
	#CTIMER_IRQS
 { 
CTIMER0_IRQn
, 
CTIMER1_IRQn
, 
CTIMER2_IRQn
, 
CTIMER3_IRQn
, 
CTIMER4_IRQn
 }

	)

1872 
__IO
 
uöt32_t
 
	mCTRL
;

1873 
__I
 
uöt32_t
 
	mINTSTAT
;

1874 
__IO
 
uöt32_t
 
	mSRAMBASE
;

1875 
uöt8_t
 
	mRESERVED_0
[20];

1877 
__IO
 
uöt32_t
 
	mENABLESET
;

1878 
uöt8_t
 
	mRESERVED_0
[4];

1879 
__O
 
uöt32_t
 
	mENABLECLR
;

1880 
uöt8_t
 
	mRESERVED_1
[4];

1881 
__I
 
uöt32_t
 
	mACTIVE
;

1882 
uöt8_t
 
	mRESERVED_2
[4];

1883 
__I
 
uöt32_t
 
	mBUSY
;

1884 
uöt8_t
 
	mRESERVED_3
[4];

1885 
__IO
 
uöt32_t
 
	mERRINT
;

1886 
uöt8_t
 
	mRESERVED_4
[4];

1887 
__IO
 
uöt32_t
 
	mINTENSET
;

1888 
uöt8_t
 
	mRESERVED_5
[4];

1889 
__O
 
uöt32_t
 
	mINTENCLR
;

1890 
uöt8_t
 
	mRESERVED_6
[4];

1891 
__IO
 
uöt32_t
 
	mINTA
;

1892 
uöt8_t
 
	mRESERVED_7
[4];

1893 
__IO
 
uöt32_t
 
	mINTB
;

1894 
uöt8_t
 
	mRESERVED_8
[4];

1895 
__O
 
uöt32_t
 
	mSETVALID
;

1896 
uöt8_t
 
	mRESERVED_9
[4];

1897 
__O
 
uöt32_t
 
	mSETTRIG
;

1898 
uöt8_t
 
	mRESERVED_10
[4];

1899 
__O
 
uöt32_t
 
	mABORT
;

1900 } 
	mCOMMON
[1];

1901 
uöt8_t
 
	mRESERVED_1
[900];

1903 
__IO
 
uöt32_t
 
	mCFG
;

1904 
__I
 
uöt32_t
 
	mCTLSTAT
;

1905 
__IO
 
uöt32_t
 
	mXFERCFG
;

1906 
uöt8_t
 
	mRESERVED_0
[4];

1907 } 
	mCHANNEL
[30];

1908 } 
	tDMA_Ty≥
;

1920 
	#DMA_CTRL_ENABLE_MASK
 (0x1U)

	)

1921 
	#DMA_CTRL_ENABLE_SHIFT
 (0U)

	)

1922 
	#DMA_CTRL_ENABLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_CTRL_ENABLE_SHIFT
)Ë& 
DMA_CTRL_ENABLE_MASK
)

	)

1925 
	#DMA_INTSTAT_ACTIVEINT_MASK
 (0x2U)

	)

1926 
	#DMA_INTSTAT_ACTIVEINT_SHIFT
 (1U)

	)

1927 
	#DMA_INTSTAT_ACTIVEINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_INTSTAT_ACTIVEINT_SHIFT
)Ë& 
DMA_INTSTAT_ACTIVEINT_MASK
)

	)

1928 
	#DMA_INTSTAT_ACTIVEERRINT_MASK
 (0x4U)

	)

1929 
	#DMA_INTSTAT_ACTIVEERRINT_SHIFT
 (2U)

	)

1930 
	#DMA_INTSTAT_ACTIVEERRINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_INTSTAT_ACTIVEERRINT_SHIFT
)Ë& 
DMA_INTSTAT_ACTIVEERRINT_MASK
)

	)

1933 
	#DMA_SRAMBASE_OFFSET_MASK
 (0xFFFFFE00U)

	)

1934 
	#DMA_SRAMBASE_OFFSET_SHIFT
 (9U)

	)

1935 
	#DMA_SRAMBASE_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_SRAMBASE_OFFSET_SHIFT
)Ë& 
DMA_SRAMBASE_OFFSET_MASK
)

	)

1938 
	#DMA_COMMON_ENABLESET_ENA_MASK
 (0xFFFFFFFFU)

	)

1939 
	#DMA_COMMON_ENABLESET_ENA_SHIFT
 (0U)

	)

1940 
	#DMA_COMMON_ENABLESET_ENA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_COMMON_ENABLESET_ENA_SHIFT
)Ë& 
DMA_COMMON_ENABLESET_ENA_MASK
)

	)

1943 
	#DMA_COMMON_ENABLESET_COUNT
 (1U)

	)

1946 
	#DMA_COMMON_ENABLECLR_CLR_MASK
 (0xFFFFFFFFU)

	)

1947 
	#DMA_COMMON_ENABLECLR_CLR_SHIFT
 (0U)

	)

1948 
	#DMA_COMMON_ENABLECLR_CLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_COMMON_ENABLECLR_CLR_SHIFT
)Ë& 
DMA_COMMON_ENABLECLR_CLR_MASK
)

	)

1951 
	#DMA_COMMON_ENABLECLR_COUNT
 (1U)

	)

1954 
	#DMA_COMMON_ACTIVE_ACT_MASK
 (0xFFFFFFFFU)

	)

1955 
	#DMA_COMMON_ACTIVE_ACT_SHIFT
 (0U)

	)

1956 
	#DMA_COMMON_ACTIVE_ACT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_COMMON_ACTIVE_ACT_SHIFT
)Ë& 
DMA_COMMON_ACTIVE_ACT_MASK
)

	)

1959 
	#DMA_COMMON_ACTIVE_COUNT
 (1U)

	)

1962 
	#DMA_COMMON_BUSY_BSY_MASK
 (0xFFFFFFFFU)

	)

1963 
	#DMA_COMMON_BUSY_BSY_SHIFT
 (0U)

	)

1964 
	#DMA_COMMON_BUSY_BSY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_COMMON_BUSY_BSY_SHIFT
)Ë& 
DMA_COMMON_BUSY_BSY_MASK
)

	)

1967 
	#DMA_COMMON_BUSY_COUNT
 (1U)

	)

1970 
	#DMA_COMMON_ERRINT_ERR_MASK
 (0xFFFFFFFFU)

	)

1971 
	#DMA_COMMON_ERRINT_ERR_SHIFT
 (0U)

	)

1972 
	#DMA_COMMON_ERRINT_ERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_COMMON_ERRINT_ERR_SHIFT
)Ë& 
DMA_COMMON_ERRINT_ERR_MASK
)

	)

1975 
	#DMA_COMMON_ERRINT_COUNT
 (1U)

	)

1978 
	#DMA_COMMON_INTENSET_INTEN_MASK
 (0xFFFFFFFFU)

	)

1979 
	#DMA_COMMON_INTENSET_INTEN_SHIFT
 (0U)

	)

1980 
	#DMA_COMMON_INTENSET_INTEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_COMMON_INTENSET_INTEN_SHIFT
)Ë& 
DMA_COMMON_INTENSET_INTEN_MASK
)

	)

1983 
	#DMA_COMMON_INTENSET_COUNT
 (1U)

	)

1986 
	#DMA_COMMON_INTENCLR_CLR_MASK
 (0xFFFFFFFFU)

	)

1987 
	#DMA_COMMON_INTENCLR_CLR_SHIFT
 (0U)

	)

1988 
	#DMA_COMMON_INTENCLR_CLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_COMMON_INTENCLR_CLR_SHIFT
)Ë& 
DMA_COMMON_INTENCLR_CLR_MASK
)

	)

1991 
	#DMA_COMMON_INTENCLR_COUNT
 (1U)

	)

1994 
	#DMA_COMMON_INTA_IA_MASK
 (0xFFFFFFFFU)

	)

1995 
	#DMA_COMMON_INTA_IA_SHIFT
 (0U)

	)

1996 
	#DMA_COMMON_INTA_IA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_COMMON_INTA_IA_SHIFT
)Ë& 
DMA_COMMON_INTA_IA_MASK
)

	)

1999 
	#DMA_COMMON_INTA_COUNT
 (1U)

	)

2002 
	#DMA_COMMON_INTB_IB_MASK
 (0xFFFFFFFFU)

	)

2003 
	#DMA_COMMON_INTB_IB_SHIFT
 (0U)

	)

2004 
	#DMA_COMMON_INTB_IB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_COMMON_INTB_IB_SHIFT
)Ë& 
DMA_COMMON_INTB_IB_MASK
)

	)

2007 
	#DMA_COMMON_INTB_COUNT
 (1U)

	)

2010 
	#DMA_COMMON_SETVALID_SV_MASK
 (0xFFFFFFFFU)

	)

2011 
	#DMA_COMMON_SETVALID_SV_SHIFT
 (0U)

	)

2012 
	#DMA_COMMON_SETVALID_SV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_COMMON_SETVALID_SV_SHIFT
)Ë& 
DMA_COMMON_SETVALID_SV_MASK
)

	)

2015 
	#DMA_COMMON_SETVALID_COUNT
 (1U)

	)

2018 
	#DMA_COMMON_SETTRIG_TRIG_MASK
 (0xFFFFFFFFU)

	)

2019 
	#DMA_COMMON_SETTRIG_TRIG_SHIFT
 (0U)

	)

2020 
	#DMA_COMMON_SETTRIG_TRIG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_COMMON_SETTRIG_TRIG_SHIFT
)Ë& 
DMA_COMMON_SETTRIG_TRIG_MASK
)

	)

2023 
	#DMA_COMMON_SETTRIG_COUNT
 (1U)

	)

2026 
	#DMA_COMMON_ABORT_ABORTCTRL_MASK
 (0xFFFFFFFFU)

	)

2027 
	#DMA_COMMON_ABORT_ABORTCTRL_SHIFT
 (0U)

	)

2028 
	#DMA_COMMON_ABORT_ABORTCTRL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_COMMON_ABORT_ABORTCTRL_SHIFT
)Ë& 
DMA_COMMON_ABORT_ABORTCTRL_MASK
)

	)

2031 
	#DMA_COMMON_ABORT_COUNT
 (1U)

	)

2034 
	#DMA_CHANNEL_CFG_PERIPHREQEN_MASK
 (0x1U)

	)

2035 
	#DMA_CHANNEL_CFG_PERIPHREQEN_SHIFT
 (0U)

	)

2036 
	#DMA_CHANNEL_CFG_PERIPHREQEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_CHANNEL_CFG_PERIPHREQEN_SHIFT
)Ë& 
DMA_CHANNEL_CFG_PERIPHREQEN_MASK
)

	)

2037 
	#DMA_CHANNEL_CFG_HWTRIGEN_MASK
 (0x2U)

	)

2038 
	#DMA_CHANNEL_CFG_HWTRIGEN_SHIFT
 (1U)

	)

2039 
	#DMA_CHANNEL_CFG_HWTRIGEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_CHANNEL_CFG_HWTRIGEN_SHIFT
)Ë& 
DMA_CHANNEL_CFG_HWTRIGEN_MASK
)

	)

2040 
	#DMA_CHANNEL_CFG_TRIGPOL_MASK
 (0x10U)

	)

2041 
	#DMA_CHANNEL_CFG_TRIGPOL_SHIFT
 (4U)

	)

2042 
	#DMA_CHANNEL_CFG_TRIGPOL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_CHANNEL_CFG_TRIGPOL_SHIFT
)Ë& 
DMA_CHANNEL_CFG_TRIGPOL_MASK
)

	)

2043 
	#DMA_CHANNEL_CFG_TRIGTYPE_MASK
 (0x20U)

	)

2044 
	#DMA_CHANNEL_CFG_TRIGTYPE_SHIFT
 (5U)

	)

2045 
	#DMA_CHANNEL_CFG_TRIGTYPE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_CHANNEL_CFG_TRIGTYPE_SHIFT
)Ë& 
DMA_CHANNEL_CFG_TRIGTYPE_MASK
)

	)

2046 
	#DMA_CHANNEL_CFG_TRIGBURST_MASK
 (0x40U)

	)

2047 
	#DMA_CHANNEL_CFG_TRIGBURST_SHIFT
 (6U)

	)

2048 
	#DMA_CHANNEL_CFG_TRIGBURST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_CHANNEL_CFG_TRIGBURST_SHIFT
)Ë& 
DMA_CHANNEL_CFG_TRIGBURST_MASK
)

	)

2049 
	#DMA_CHANNEL_CFG_BURSTPOWER_MASK
 (0xF00U)

	)

2050 
	#DMA_CHANNEL_CFG_BURSTPOWER_SHIFT
 (8U)

	)

2051 
	#DMA_CHANNEL_CFG_BURSTPOWER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_CHANNEL_CFG_BURSTPOWER_SHIFT
)Ë& 
DMA_CHANNEL_CFG_BURSTPOWER_MASK
)

	)

2052 
	#DMA_CHANNEL_CFG_SRCBURSTWRAP_MASK
 (0x4000U)

	)

2053 
	#DMA_CHANNEL_CFG_SRCBURSTWRAP_SHIFT
 (14U)

	)

2054 
	#DMA_CHANNEL_CFG_SRCBURSTWRAP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_CHANNEL_CFG_SRCBURSTWRAP_SHIFT
)Ë& 
DMA_CHANNEL_CFG_SRCBURSTWRAP_MASK
)

	)

2055 
	#DMA_CHANNEL_CFG_DSTBURSTWRAP_MASK
 (0x8000U)

	)

2056 
	#DMA_CHANNEL_CFG_DSTBURSTWRAP_SHIFT
 (15U)

	)

2057 
	#DMA_CHANNEL_CFG_DSTBURSTWRAP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_CHANNEL_CFG_DSTBURSTWRAP_SHIFT
)Ë& 
DMA_CHANNEL_CFG_DSTBURSTWRAP_MASK
)

	)

2058 
	#DMA_CHANNEL_CFG_CHPRIORITY_MASK
 (0x70000U)

	)

2059 
	#DMA_CHANNEL_CFG_CHPRIORITY_SHIFT
 (16U)

	)

2060 
	#DMA_CHANNEL_CFG_CHPRIORITY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_CHANNEL_CFG_CHPRIORITY_SHIFT
)Ë& 
DMA_CHANNEL_CFG_CHPRIORITY_MASK
)

	)

2063 
	#DMA_CHANNEL_CFG_COUNT
 (30U)

	)

2066 
	#DMA_CHANNEL_CTLSTAT_VALIDPENDING_MASK
 (0x1U)

	)

2067 
	#DMA_CHANNEL_CTLSTAT_VALIDPENDING_SHIFT
 (0U)

	)

2068 
	#DMA_CHANNEL_CTLSTAT_VALIDPENDING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_CHANNEL_CTLSTAT_VALIDPENDING_SHIFT
)Ë& 
DMA_CHANNEL_CTLSTAT_VALIDPENDING_MASK
)

	)

2069 
	#DMA_CHANNEL_CTLSTAT_TRIG_MASK
 (0x4U)

	)

2070 
	#DMA_CHANNEL_CTLSTAT_TRIG_SHIFT
 (2U)

	)

2071 
	#DMA_CHANNEL_CTLSTAT_TRIG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_CHANNEL_CTLSTAT_TRIG_SHIFT
)Ë& 
DMA_CHANNEL_CTLSTAT_TRIG_MASK
)

	)

2074 
	#DMA_CHANNEL_CTLSTAT_COUNT
 (30U)

	)

2077 
	#DMA_CHANNEL_XFERCFG_CFGVALID_MASK
 (0x1U)

	)

2078 
	#DMA_CHANNEL_XFERCFG_CFGVALID_SHIFT
 (0U)

	)

2079 
	#DMA_CHANNEL_XFERCFG_CFGVALID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_CHANNEL_XFERCFG_CFGVALID_SHIFT
)Ë& 
DMA_CHANNEL_XFERCFG_CFGVALID_MASK
)

	)

2080 
	#DMA_CHANNEL_XFERCFG_RELOAD_MASK
 (0x2U)

	)

2081 
	#DMA_CHANNEL_XFERCFG_RELOAD_SHIFT
 (1U)

	)

2082 
	#DMA_CHANNEL_XFERCFG_RELOAD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_CHANNEL_XFERCFG_RELOAD_SHIFT
)Ë& 
DMA_CHANNEL_XFERCFG_RELOAD_MASK
)

	)

2083 
	#DMA_CHANNEL_XFERCFG_SWTRIG_MASK
 (0x4U)

	)

2084 
	#DMA_CHANNEL_XFERCFG_SWTRIG_SHIFT
 (2U)

	)

2085 
	#DMA_CHANNEL_XFERCFG_SWTRIG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_CHANNEL_XFERCFG_SWTRIG_SHIFT
)Ë& 
DMA_CHANNEL_XFERCFG_SWTRIG_MASK
)

	)

2086 
	#DMA_CHANNEL_XFERCFG_CLRTRIG_MASK
 (0x8U)

	)

2087 
	#DMA_CHANNEL_XFERCFG_CLRTRIG_SHIFT
 (3U)

	)

2088 
	#DMA_CHANNEL_XFERCFG_CLRTRIG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_CHANNEL_XFERCFG_CLRTRIG_SHIFT
)Ë& 
DMA_CHANNEL_XFERCFG_CLRTRIG_MASK
)

	)

2089 
	#DMA_CHANNEL_XFERCFG_SETINTA_MASK
 (0x10U)

	)

2090 
	#DMA_CHANNEL_XFERCFG_SETINTA_SHIFT
 (4U)

	)

2091 
	#DMA_CHANNEL_XFERCFG_SETINTA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_CHANNEL_XFERCFG_SETINTA_SHIFT
)Ë& 
DMA_CHANNEL_XFERCFG_SETINTA_MASK
)

	)

2092 
	#DMA_CHANNEL_XFERCFG_SETINTB_MASK
 (0x20U)

	)

2093 
	#DMA_CHANNEL_XFERCFG_SETINTB_SHIFT
 (5U)

	)

2094 
	#DMA_CHANNEL_XFERCFG_SETINTB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_CHANNEL_XFERCFG_SETINTB_SHIFT
)Ë& 
DMA_CHANNEL_XFERCFG_SETINTB_MASK
)

	)

2095 
	#DMA_CHANNEL_XFERCFG_WIDTH_MASK
 (0x300U)

	)

2096 
	#DMA_CHANNEL_XFERCFG_WIDTH_SHIFT
 (8U)

	)

2097 
	#DMA_CHANNEL_XFERCFG_WIDTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_CHANNEL_XFERCFG_WIDTH_SHIFT
)Ë& 
DMA_CHANNEL_XFERCFG_WIDTH_MASK
)

	)

2098 
	#DMA_CHANNEL_XFERCFG_SRCINC_MASK
 (0x3000U)

	)

2099 
	#DMA_CHANNEL_XFERCFG_SRCINC_SHIFT
 (12U)

	)

2100 
	#DMA_CHANNEL_XFERCFG_SRCINC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_CHANNEL_XFERCFG_SRCINC_SHIFT
)Ë& 
DMA_CHANNEL_XFERCFG_SRCINC_MASK
)

	)

2101 
	#DMA_CHANNEL_XFERCFG_DSTINC_MASK
 (0xC000U)

	)

2102 
	#DMA_CHANNEL_XFERCFG_DSTINC_SHIFT
 (14U)

	)

2103 
	#DMA_CHANNEL_XFERCFG_DSTINC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_CHANNEL_XFERCFG_DSTINC_SHIFT
)Ë& 
DMA_CHANNEL_XFERCFG_DSTINC_MASK
)

	)

2104 
	#DMA_CHANNEL_XFERCFG_XFERCOUNT_MASK
 (0x3FF0000U)

	)

2105 
	#DMA_CHANNEL_XFERCFG_XFERCOUNT_SHIFT
 (16U)

	)

2106 
	#DMA_CHANNEL_XFERCFG_XFERCOUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMA_CHANNEL_XFERCFG_XFERCOUNT_SHIFT
)Ë& 
DMA_CHANNEL_XFERCFG_XFERCOUNT_MASK
)

	)

2109 
	#DMA_CHANNEL_XFERCFG_COUNT
 (30U)

	)

2119 
	#DMA0_BASE
 (0x40082000u)

	)

2121 
	#DMA0
 ((
DMA_Ty≥
 *)
DMA0_BASE
)

	)

2123 
	#DMA_BASE_ADDRS
 { 
DMA0_BASE
 }

	)

2125 
	#DMA_BASE_PTRS
 { 
DMA0
 }

	)

2127 
	#DMA_IRQS
 { 
DMA0_IRQn
 }

	)

2146 
__IO
 
uöt32_t
 
	mOSR
;

2147 
__IO
 
uöt32_t
 
	mDIVHFCLK
;

2148 
__IO
 
uöt32_t
 
	mPREAC2FSCOEF
;

2149 
__IO
 
uöt32_t
 
	mPREAC4FSCOEF
;

2150 
__IO
 
uöt32_t
 
	mGAINSHIFT
;

2151 
uöt8_t
 
	mRESERVED_0
[108];

2152 
__IO
 
uöt32_t
 
	mFIFO_CTRL
;

2153 
__IO
 
uöt32_t
 
	mFIFO_STATUS
;

2154 
__IO
 
uöt32_t
 
	mFIFO_DATA
;

2155 
__IO
 
uöt32_t
 
	mPHY_CTRL
;

2156 
__IO
 
uöt32_t
 
	mDC_CTRL
;

2157 
uöt8_t
 
	mRESERVED_1
[108];

2158 } 
	mCHANNEL
[2];

2159 
uöt8_t
 
	mRESERVED_0
[3328];

2160 
__IO
 
uöt32_t
 
	mCHANEN
;

2161 
uöt8_t
 
	mRESERVED_1
[8];

2162 
__IO
 
uöt32_t
 
	mIOCFG
;

2163 
__IO
 
uöt32_t
 
	mUSE2FS
;

2164 
uöt8_t
 
	mRESERVED_2
[108];

2165 
__IO
 
uöt32_t
 
	mHWVADGAIN
;

2166 
__IO
 
uöt32_t
 
	mHWVADHPFS
;

2167 
__IO
 
uöt32_t
 
	mHWVADST10
;

2168 
__IO
 
uöt32_t
 
	mHWVADRSTT
;

2169 
__IO
 
uöt32_t
 
	mHWVADTHGN
;

2170 
__IO
 
uöt32_t
 
	mHWVADTHGS
;

2171 
__I
 
uöt32_t
 
	mHWVADLOWZ
;

2172 
uöt8_t
 
	mRESERVED_3
[96];

2173 
__I
 
uöt32_t
 
	mID
;

2174 } 
	tDMIC_Ty≥
;

2186 
	#DMIC_CHANNEL_OSR_OSR_MASK
 (0xFFU)

	)

2187 
	#DMIC_CHANNEL_OSR_OSR_SHIFT
 (0U)

	)

2188 
	#DMIC_CHANNEL_OSR_OSR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_CHANNEL_OSR_OSR_SHIFT
)Ë& 
DMIC_CHANNEL_OSR_OSR_MASK
)

	)

2191 
	#DMIC_CHANNEL_OSR_COUNT
 (2U)

	)

2194 
	#DMIC_CHANNEL_DIVHFCLK_PDMDIV_MASK
 (0xFU)

	)

2195 
	#DMIC_CHANNEL_DIVHFCLK_PDMDIV_SHIFT
 (0U)

	)

2196 
	#DMIC_CHANNEL_DIVHFCLK_PDMDIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_CHANNEL_DIVHFCLK_PDMDIV_SHIFT
)Ë& 
DMIC_CHANNEL_DIVHFCLK_PDMDIV_MASK
)

	)

2199 
	#DMIC_CHANNEL_DIVHFCLK_COUNT
 (2U)

	)

2202 
	#DMIC_CHANNEL_PREAC2FSCOEF_COMP_MASK
 (0x3U)

	)

2203 
	#DMIC_CHANNEL_PREAC2FSCOEF_COMP_SHIFT
 (0U)

	)

2204 
	#DMIC_CHANNEL_PREAC2FSCOEF_COMP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_CHANNEL_PREAC2FSCOEF_COMP_SHIFT
)Ë& 
DMIC_CHANNEL_PREAC2FSCOEF_COMP_MASK
)

	)

2207 
	#DMIC_CHANNEL_PREAC2FSCOEF_COUNT
 (2U)

	)

2210 
	#DMIC_CHANNEL_PREAC4FSCOEF_COMP_MASK
 (0x3U)

	)

2211 
	#DMIC_CHANNEL_PREAC4FSCOEF_COMP_SHIFT
 (0U)

	)

2212 
	#DMIC_CHANNEL_PREAC4FSCOEF_COMP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_CHANNEL_PREAC4FSCOEF_COMP_SHIFT
)Ë& 
DMIC_CHANNEL_PREAC4FSCOEF_COMP_MASK
)

	)

2215 
	#DMIC_CHANNEL_PREAC4FSCOEF_COUNT
 (2U)

	)

2218 
	#DMIC_CHANNEL_GAINSHIFT_GAIN_MASK
 (0x3FU)

	)

2219 
	#DMIC_CHANNEL_GAINSHIFT_GAIN_SHIFT
 (0U)

	)

2220 
	#DMIC_CHANNEL_GAINSHIFT_GAIN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_CHANNEL_GAINSHIFT_GAIN_SHIFT
)Ë& 
DMIC_CHANNEL_GAINSHIFT_GAIN_MASK
)

	)

2223 
	#DMIC_CHANNEL_GAINSHIFT_COUNT
 (2U)

	)

2226 
	#DMIC_CHANNEL_FIFO_CTRL_ENABLE_MASK
 (0x1U)

	)

2227 
	#DMIC_CHANNEL_FIFO_CTRL_ENABLE_SHIFT
 (0U)

	)

2228 
	#DMIC_CHANNEL_FIFO_CTRL_ENABLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_CHANNEL_FIFO_CTRL_ENABLE_SHIFT
)Ë& 
DMIC_CHANNEL_FIFO_CTRL_ENABLE_MASK
)

	)

2229 
	#DMIC_CHANNEL_FIFO_CTRL_RESETN_MASK
 (0x2U)

	)

2230 
	#DMIC_CHANNEL_FIFO_CTRL_RESETN_SHIFT
 (1U)

	)

2231 
	#DMIC_CHANNEL_FIFO_CTRL_RESETN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_CHANNEL_FIFO_CTRL_RESETN_SHIFT
)Ë& 
DMIC_CHANNEL_FIFO_CTRL_RESETN_MASK
)

	)

2232 
	#DMIC_CHANNEL_FIFO_CTRL_INTEN_MASK
 (0x4U)

	)

2233 
	#DMIC_CHANNEL_FIFO_CTRL_INTEN_SHIFT
 (2U)

	)

2234 
	#DMIC_CHANNEL_FIFO_CTRL_INTEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_CHANNEL_FIFO_CTRL_INTEN_SHIFT
)Ë& 
DMIC_CHANNEL_FIFO_CTRL_INTEN_MASK
)

	)

2235 
	#DMIC_CHANNEL_FIFO_CTRL_DMAEN_MASK
 (0x8U)

	)

2236 
	#DMIC_CHANNEL_FIFO_CTRL_DMAEN_SHIFT
 (3U)

	)

2237 
	#DMIC_CHANNEL_FIFO_CTRL_DMAEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_CHANNEL_FIFO_CTRL_DMAEN_SHIFT
)Ë& 
DMIC_CHANNEL_FIFO_CTRL_DMAEN_MASK
)

	)

2238 
	#DMIC_CHANNEL_FIFO_CTRL_TRIGLVL_MASK
 (0x1F0000U)

	)

2239 
	#DMIC_CHANNEL_FIFO_CTRL_TRIGLVL_SHIFT
 (16U)

	)

2240 
	#DMIC_CHANNEL_FIFO_CTRL_TRIGLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_CHANNEL_FIFO_CTRL_TRIGLVL_SHIFT
)Ë& 
DMIC_CHANNEL_FIFO_CTRL_TRIGLVL_MASK
)

	)

2243 
	#DMIC_CHANNEL_FIFO_CTRL_COUNT
 (2U)

	)

2246 
	#DMIC_CHANNEL_FIFO_STATUS_INT_MASK
 (0x1U)

	)

2247 
	#DMIC_CHANNEL_FIFO_STATUS_INT_SHIFT
 (0U)

	)

2248 
	#DMIC_CHANNEL_FIFO_STATUS_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_CHANNEL_FIFO_STATUS_INT_SHIFT
)Ë& 
DMIC_CHANNEL_FIFO_STATUS_INT_MASK
)

	)

2249 
	#DMIC_CHANNEL_FIFO_STATUS_OVERRUN_MASK
 (0x2U)

	)

2250 
	#DMIC_CHANNEL_FIFO_STATUS_OVERRUN_SHIFT
 (1U)

	)

2251 
	#DMIC_CHANNEL_FIFO_STATUS_OVERRUN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_CHANNEL_FIFO_STATUS_OVERRUN_SHIFT
)Ë& 
DMIC_CHANNEL_FIFO_STATUS_OVERRUN_MASK
)

	)

2252 
	#DMIC_CHANNEL_FIFO_STATUS_UNDERRUN_MASK
 (0x4U)

	)

2253 
	#DMIC_CHANNEL_FIFO_STATUS_UNDERRUN_SHIFT
 (2U)

	)

2254 
	#DMIC_CHANNEL_FIFO_STATUS_UNDERRUN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_CHANNEL_FIFO_STATUS_UNDERRUN_SHIFT
)Ë& 
DMIC_CHANNEL_FIFO_STATUS_UNDERRUN_MASK
)

	)

2257 
	#DMIC_CHANNEL_FIFO_STATUS_COUNT
 (2U)

	)

2260 
	#DMIC_CHANNEL_FIFO_DATA_DATA_MASK
 (0xFFFFFFU)

	)

2261 
	#DMIC_CHANNEL_FIFO_DATA_DATA_SHIFT
 (0U)

	)

2262 
	#DMIC_CHANNEL_FIFO_DATA_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_CHANNEL_FIFO_DATA_DATA_SHIFT
)Ë& 
DMIC_CHANNEL_FIFO_DATA_DATA_MASK
)

	)

2265 
	#DMIC_CHANNEL_FIFO_DATA_COUNT
 (2U)

	)

2268 
	#DMIC_CHANNEL_PHY_CTRL_PHY_FALL_MASK
 (0x1U)

	)

2269 
	#DMIC_CHANNEL_PHY_CTRL_PHY_FALL_SHIFT
 (0U)

	)

2270 
	#DMIC_CHANNEL_PHY_CTRL_PHY_FALL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_CHANNEL_PHY_CTRL_PHY_FALL_SHIFT
)Ë& 
DMIC_CHANNEL_PHY_CTRL_PHY_FALL_MASK
)

	)

2271 
	#DMIC_CHANNEL_PHY_CTRL_PHY_HALF_MASK
 (0x2U)

	)

2272 
	#DMIC_CHANNEL_PHY_CTRL_PHY_HALF_SHIFT
 (1U)

	)

2273 
	#DMIC_CHANNEL_PHY_CTRL_PHY_HALF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_CHANNEL_PHY_CTRL_PHY_HALF_SHIFT
)Ë& 
DMIC_CHANNEL_PHY_CTRL_PHY_HALF_MASK
)

	)

2276 
	#DMIC_CHANNEL_PHY_CTRL_COUNT
 (2U)

	)

2279 
	#DMIC_CHANNEL_DC_CTRL_DCPOLE_MASK
 (0x3U)

	)

2280 
	#DMIC_CHANNEL_DC_CTRL_DCPOLE_SHIFT
 (0U)

	)

2281 
	#DMIC_CHANNEL_DC_CTRL_DCPOLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_CHANNEL_DC_CTRL_DCPOLE_SHIFT
)Ë& 
DMIC_CHANNEL_DC_CTRL_DCPOLE_MASK
)

	)

2282 
	#DMIC_CHANNEL_DC_CTRL_DCGAIN_MASK
 (0xF0U)

	)

2283 
	#DMIC_CHANNEL_DC_CTRL_DCGAIN_SHIFT
 (4U)

	)

2284 
	#DMIC_CHANNEL_DC_CTRL_DCGAIN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_CHANNEL_DC_CTRL_DCGAIN_SHIFT
)Ë& 
DMIC_CHANNEL_DC_CTRL_DCGAIN_MASK
)

	)

2285 
	#DMIC_CHANNEL_DC_CTRL_SATURATEAT16BIT_MASK
 (0x100U)

	)

2286 
	#DMIC_CHANNEL_DC_CTRL_SATURATEAT16BIT_SHIFT
 (8U)

	)

2287 
	#DMIC_CHANNEL_DC_CTRL_SATURATEAT16BIT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_CHANNEL_DC_CTRL_SATURATEAT16BIT_SHIFT
)Ë& 
DMIC_CHANNEL_DC_CTRL_SATURATEAT16BIT_MASK
)

	)

2290 
	#DMIC_CHANNEL_DC_CTRL_COUNT
 (2U)

	)

2293 
	#DMIC_CHANEN_EN_CH0_MASK
 (0x1U)

	)

2294 
	#DMIC_CHANEN_EN_CH0_SHIFT
 (0U)

	)

2295 
	#DMIC_CHANEN_EN_CH0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_CHANEN_EN_CH0_SHIFT
)Ë& 
DMIC_CHANEN_EN_CH0_MASK
)

	)

2296 
	#DMIC_CHANEN_EN_CH1_MASK
 (0x2U)

	)

2297 
	#DMIC_CHANEN_EN_CH1_SHIFT
 (1U)

	)

2298 
	#DMIC_CHANEN_EN_CH1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_CHANEN_EN_CH1_SHIFT
)Ë& 
DMIC_CHANEN_EN_CH1_MASK
)

	)

2301 
	#DMIC_IOCFG_CLK_BYPASS0_MASK
 (0x1U)

	)

2302 
	#DMIC_IOCFG_CLK_BYPASS0_SHIFT
 (0U)

	)

2303 
	#DMIC_IOCFG_CLK_BYPASS0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_IOCFG_CLK_BYPASS0_SHIFT
)Ë& 
DMIC_IOCFG_CLK_BYPASS0_MASK
)

	)

2304 
	#DMIC_IOCFG_CLK_BYPASS1_MASK
 (0x2U)

	)

2305 
	#DMIC_IOCFG_CLK_BYPASS1_SHIFT
 (1U)

	)

2306 
	#DMIC_IOCFG_CLK_BYPASS1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_IOCFG_CLK_BYPASS1_SHIFT
)Ë& 
DMIC_IOCFG_CLK_BYPASS1_MASK
)

	)

2307 
	#DMIC_IOCFG_STEREO_DATA0_MASK
 (0x4U)

	)

2308 
	#DMIC_IOCFG_STEREO_DATA0_SHIFT
 (2U)

	)

2309 
	#DMIC_IOCFG_STEREO_DATA0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_IOCFG_STEREO_DATA0_SHIFT
)Ë& 
DMIC_IOCFG_STEREO_DATA0_MASK
)

	)

2312 
	#DMIC_USE2FS_USE2FS_MASK
 (0x1U)

	)

2313 
	#DMIC_USE2FS_USE2FS_SHIFT
 (0U)

	)

2314 
	#DMIC_USE2FS_USE2FS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_USE2FS_USE2FS_SHIFT
)Ë& 
DMIC_USE2FS_USE2FS_MASK
)

	)

2317 
	#DMIC_HWVADGAIN_INPUTGAIN_MASK
 (0xFU)

	)

2318 
	#DMIC_HWVADGAIN_INPUTGAIN_SHIFT
 (0U)

	)

2319 
	#DMIC_HWVADGAIN_INPUTGAIN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_HWVADGAIN_INPUTGAIN_SHIFT
)Ë& 
DMIC_HWVADGAIN_INPUTGAIN_MASK
)

	)

2322 
	#DMIC_HWVADHPFS_HPFS_MASK
 (0x3U)

	)

2323 
	#DMIC_HWVADHPFS_HPFS_SHIFT
 (0U)

	)

2324 
	#DMIC_HWVADHPFS_HPFS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_HWVADHPFS_HPFS_SHIFT
)Ë& 
DMIC_HWVADHPFS_HPFS_MASK
)

	)

2327 
	#DMIC_HWVADST10_ST10_MASK
 (0x1U)

	)

2328 
	#DMIC_HWVADST10_ST10_SHIFT
 (0U)

	)

2329 
	#DMIC_HWVADST10_ST10
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_HWVADST10_ST10_SHIFT
)Ë& 
DMIC_HWVADST10_ST10_MASK
)

	)

2332 
	#DMIC_HWVADRSTT_RSTT_MASK
 (0x1U)

	)

2333 
	#DMIC_HWVADRSTT_RSTT_SHIFT
 (0U)

	)

2334 
	#DMIC_HWVADRSTT_RSTT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_HWVADRSTT_RSTT_SHIFT
)Ë& 
DMIC_HWVADRSTT_RSTT_MASK
)

	)

2337 
	#DMIC_HWVADTHGN_THGN_MASK
 (0xFU)

	)

2338 
	#DMIC_HWVADTHGN_THGN_SHIFT
 (0U)

	)

2339 
	#DMIC_HWVADTHGN_THGN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_HWVADTHGN_THGN_SHIFT
)Ë& 
DMIC_HWVADTHGN_THGN_MASK
)

	)

2342 
	#DMIC_HWVADTHGS_THGS_MASK
 (0xFU)

	)

2343 
	#DMIC_HWVADTHGS_THGS_SHIFT
 (0U)

	)

2344 
	#DMIC_HWVADTHGS_THGS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_HWVADTHGS_THGS_SHIFT
)Ë& 
DMIC_HWVADTHGS_THGS_MASK
)

	)

2347 
	#DMIC_HWVADLOWZ_LOWZ_MASK
 (0xFFFFU)

	)

2348 
	#DMIC_HWVADLOWZ_LOWZ_SHIFT
 (0U)

	)

2349 
	#DMIC_HWVADLOWZ_LOWZ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_HWVADLOWZ_LOWZ_SHIFT
)Ë& 
DMIC_HWVADLOWZ_LOWZ_MASK
)

	)

2352 
	#DMIC_ID_ID_MASK
 (0xFFFFFFFFU)

	)

2353 
	#DMIC_ID_ID_SHIFT
 (0U)

	)

2354 
	#DMIC_ID_ID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
DMIC_ID_ID_SHIFT
)Ë& 
DMIC_ID_ID_MASK
)

	)

2364 
	#DMIC0_BASE
 (0x40090000u)

	)

2366 
	#DMIC0
 ((
DMIC_Ty≥
 *)
DMIC0_BASE
)

	)

2368 
	#DMIC_BASE_ADDRS
 { 
DMIC0_BASE
 }

	)

2370 
	#DMIC_BASE_PTRS
 { 
DMIC0
 }

	)

2372 
	#DMIC_IRQS
 { 
DMIC0_IRQn
 }

	)

2373 
	#DMIC_HWVAD_IRQS
 { 
HWVAD0_IRQn
 }

	)

2391 
__IO
 
uöt32_t
 
	mCMD
;

2392 
uöt8_t
 
	mRESERVED_0
[4];

2393 
__IO
 
uöt32_t
 
	mRWSTATE
;

2394 
__IO
 
uöt32_t
 
	mAUTOPROG
;

2395 
__IO
 
uöt32_t
 
	mWSTATE
;

2396 
__IO
 
uöt32_t
 
	mCLKDIV
;

2397 
__IO
 
uöt32_t
 
	mPWRDWN
;

2398 
uöt8_t
 
	mRESERVED_1
[4028];

2399 
__O
 
uöt32_t
 
	mINTENCLR
;

2400 
__O
 
uöt32_t
 
	mINTENSET
;

2401 
__I
 
uöt32_t
 
	mINTSTAT
;

2402 
__I
 
uöt32_t
 
	mINTEN
;

2403 
__O
 
uöt32_t
 
	mINTSTATCLR
;

2404 
__O
 
uöt32_t
 
	mINTSTATSET
;

2405 } 
	tEEPROM_Ty≥
;

2417 
	#EEPROM_CMD_CMD_MASK
 (0x7U)

	)

2418 
	#EEPROM_CMD_CMD_SHIFT
 (0U)

	)

2419 
	#EEPROM_CMD_CMD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EEPROM_CMD_CMD_SHIFT
)Ë& 
EEPROM_CMD_CMD_MASK
)

	)

2422 
	#EEPROM_RWSTATE_RPHASE2_MASK
 (0xFFU)

	)

2423 
	#EEPROM_RWSTATE_RPHASE2_SHIFT
 (0U)

	)

2424 
	#EEPROM_RWSTATE_RPHASE2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EEPROM_RWSTATE_RPHASE2_SHIFT
)Ë& 
EEPROM_RWSTATE_RPHASE2_MASK
)

	)

2425 
	#EEPROM_RWSTATE_RPHASE1_MASK
 (0xFF00U)

	)

2426 
	#EEPROM_RWSTATE_RPHASE1_SHIFT
 (8U)

	)

2427 
	#EEPROM_RWSTATE_RPHASE1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EEPROM_RWSTATE_RPHASE1_SHIFT
)Ë& 
EEPROM_RWSTATE_RPHASE1_MASK
)

	)

2430 
	#EEPROM_AUTOPROG_AUTOPROG_MASK
 (0x3U)

	)

2431 
	#EEPROM_AUTOPROG_AUTOPROG_SHIFT
 (0U)

	)

2432 
	#EEPROM_AUTOPROG_AUTOPROG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EEPROM_AUTOPROG_AUTOPROG_SHIFT
)Ë& 
EEPROM_AUTOPROG_AUTOPROG_MASK
)

	)

2435 
	#EEPROM_WSTATE_PHASE3_MASK
 (0xFFU)

	)

2436 
	#EEPROM_WSTATE_PHASE3_SHIFT
 (0U)

	)

2437 
	#EEPROM_WSTATE_PHASE3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EEPROM_WSTATE_PHASE3_SHIFT
)Ë& 
EEPROM_WSTATE_PHASE3_MASK
)

	)

2438 
	#EEPROM_WSTATE_PHASE2_MASK
 (0xFF00U)

	)

2439 
	#EEPROM_WSTATE_PHASE2_SHIFT
 (8U)

	)

2440 
	#EEPROM_WSTATE_PHASE2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EEPROM_WSTATE_PHASE2_SHIFT
)Ë& 
EEPROM_WSTATE_PHASE2_MASK
)

	)

2441 
	#EEPROM_WSTATE_PHASE1_MASK
 (0xFF0000U)

	)

2442 
	#EEPROM_WSTATE_PHASE1_SHIFT
 (16U)

	)

2443 
	#EEPROM_WSTATE_PHASE1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EEPROM_WSTATE_PHASE1_SHIFT
)Ë& 
EEPROM_WSTATE_PHASE1_MASK
)

	)

2444 
	#EEPROM_WSTATE_LCK_PARWEP_MASK
 (0x80000000U)

	)

2445 
	#EEPROM_WSTATE_LCK_PARWEP_SHIFT
 (31U)

	)

2446 
	#EEPROM_WSTATE_LCK_PARWEP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EEPROM_WSTATE_LCK_PARWEP_SHIFT
)Ë& 
EEPROM_WSTATE_LCK_PARWEP_MASK
)

	)

2449 
	#EEPROM_CLKDIV_CLKDIV_MASK
 (0xFFFFU)

	)

2450 
	#EEPROM_CLKDIV_CLKDIV_SHIFT
 (0U)

	)

2451 
	#EEPROM_CLKDIV_CLKDIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EEPROM_CLKDIV_CLKDIV_SHIFT
)Ë& 
EEPROM_CLKDIV_CLKDIV_MASK
)

	)

2454 
	#EEPROM_PWRDWN_PWRDWN_MASK
 (0x1U)

	)

2455 
	#EEPROM_PWRDWN_PWRDWN_SHIFT
 (0U)

	)

2456 
	#EEPROM_PWRDWN_PWRDWN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EEPROM_PWRDWN_PWRDWN_SHIFT
)Ë& 
EEPROM_PWRDWN_PWRDWN_MASK
)

	)

2459 
	#EEPROM_INTENCLR_PROG_CLR_EN_MASK
 (0x4U)

	)

2460 
	#EEPROM_INTENCLR_PROG_CLR_EN_SHIFT
 (2U)

	)

2461 
	#EEPROM_INTENCLR_PROG_CLR_EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EEPROM_INTENCLR_PROG_CLR_EN_SHIFT
)Ë& 
EEPROM_INTENCLR_PROG_CLR_EN_MASK
)

	)

2464 
	#EEPROM_INTENSET_PROG_SET_EN_MASK
 (0x4U)

	)

2465 
	#EEPROM_INTENSET_PROG_SET_EN_SHIFT
 (2U)

	)

2466 
	#EEPROM_INTENSET_PROG_SET_EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EEPROM_INTENSET_PROG_SET_EN_SHIFT
)Ë& 
EEPROM_INTENSET_PROG_SET_EN_MASK
)

	)

2469 
	#EEPROM_INTSTAT_END_OF_PROG_MASK
 (0x4U)

	)

2470 
	#EEPROM_INTSTAT_END_OF_PROG_SHIFT
 (2U)

	)

2471 
	#EEPROM_INTSTAT_END_OF_PROG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EEPROM_INTSTAT_END_OF_PROG_SHIFT
)Ë& 
EEPROM_INTSTAT_END_OF_PROG_MASK
)

	)

2474 
	#EEPROM_INTEN_EE_PROG_DONE_MASK
 (0x4U)

	)

2475 
	#EEPROM_INTEN_EE_PROG_DONE_SHIFT
 (2U)

	)

2476 
	#EEPROM_INTEN_EE_PROG_DONE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EEPROM_INTEN_EE_PROG_DONE_SHIFT
)Ë& 
EEPROM_INTEN_EE_PROG_DONE_MASK
)

	)

2479 
	#EEPROM_INTSTATCLR_PROG_CLR_ST_MASK
 (0x4U)

	)

2480 
	#EEPROM_INTSTATCLR_PROG_CLR_ST_SHIFT
 (2U)

	)

2481 
	#EEPROM_INTSTATCLR_PROG_CLR_ST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EEPROM_INTSTATCLR_PROG_CLR_ST_SHIFT
)Ë& 
EEPROM_INTSTATCLR_PROG_CLR_ST_MASK
)

	)

2484 
	#EEPROM_INTSTATSET_PROG_SET_ST_MASK
 (0x4U)

	)

2485 
	#EEPROM_INTSTATSET_PROG_SET_ST_SHIFT
 (2U)

	)

2486 
	#EEPROM_INTSTATSET_PROG_SET_ST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EEPROM_INTSTATSET_PROG_SET_ST_SHIFT
)Ë& 
EEPROM_INTSTATSET_PROG_SET_ST_MASK
)

	)

2496 
	#EEPROM_BASE
 (0x40014000u)

	)

2498 
	#EEPROM
 ((
EEPROM_Ty≥
 *)
EEPROM_BASE
)

	)

2500 
	#EEPROM_BASE_ADDRS
 { 
EEPROM_BASE
 }

	)

2502 
	#EEPROM_BASE_PTRS
 { 
EEPROM
 }

	)

2504 
	#EEPROM_IRQS
 { 
EEPROM_IRQn
 }

	)

2522 
__IO
 
uöt32_t
 
	mCONTROL
;

2523 
__I
 
uöt32_t
 
	mSTATUS
;

2524 
__IO
 
uöt32_t
 
	mCONFIG
;

2525 
uöt8_t
 
	mRESERVED_0
[20];

2526 
__IO
 
uöt32_t
 
	mDYNAMICCONTROL
;

2527 
__IO
 
uöt32_t
 
	mDYNAMICREFRESH
;

2528 
__IO
 
uöt32_t
 
	mDYNAMICREADCONFIG
;

2529 
uöt8_t
 
	mRESERVED_1
[4];

2530 
__IO
 
uöt32_t
 
	mDYNAMICRP
;

2531 
__IO
 
uöt32_t
 
	mDYNAMICRAS
;

2532 
__IO
 
uöt32_t
 
	mDYNAMICSREX
;

2533 
__IO
 
uöt32_t
 
	mDYNAMICAPR
;

2534 
__IO
 
uöt32_t
 
	mDYNAMICDAL
;

2535 
__IO
 
uöt32_t
 
	mDYNAMICWR
;

2536 
__IO
 
uöt32_t
 
	mDYNAMICRC
;

2537 
__IO
 
uöt32_t
 
	mDYNAMICRFC
;

2538 
__IO
 
uöt32_t
 
	mDYNAMICXSR
;

2539 
__IO
 
uöt32_t
 
	mDYNAMICRRD
;

2540 
__IO
 
uöt32_t
 
	mDYNAMICMRD
;

2541 
uöt8_t
 
	mRESERVED_2
[36];

2542 
__IO
 
uöt32_t
 
	mSTATICEXTENDEDWAIT
;

2543 
uöt8_t
 
	mRESERVED_3
[124];

2545 
__IO
 
uöt32_t
 
	mDYNAMICCONFIG
;

2546 
__IO
 
uöt32_t
 
	mDYNAMICRASCAS
;

2547 
uöt8_t
 
	mRESERVED_0
[24];

2548 } 
	mDYNAMIC
[4];

2549 
uöt8_t
 
	mRESERVED_4
[128];

2551 
__IO
 
uöt32_t
 
	mSTATICCONFIG
;

2552 
__IO
 
uöt32_t
 
	mSTATICWAITWEN
;

2553 
__IO
 
uöt32_t
 
	mSTATICWAITOEN
;

2554 
__IO
 
uöt32_t
 
	mSTATICWAITRD
;

2555 
__IO
 
uöt32_t
 
	mSTATICWAITPAGE
;

2556 
__IO
 
uöt32_t
 
	mSTATICWAITWR
;

2557 
__IO
 
uöt32_t
 
	mSTATICWAITTURN
;

2558 
uöt8_t
 
	mRESERVED_0
[4];

2559 } 
	mSTATIC
[4];

2560 } 
	tEMC_Ty≥
;

2572 
	#EMC_CONTROL_E_MASK
 (0x1U)

	)

2573 
	#EMC_CONTROL_E_SHIFT
 (0U)

	)

2574 
	#EMC_CONTROL_E
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_CONTROL_E_SHIFT
)Ë& 
EMC_CONTROL_E_MASK
)

	)

2575 
	#EMC_CONTROL_M_MASK
 (0x2U)

	)

2576 
	#EMC_CONTROL_M_SHIFT
 (1U)

	)

2577 
	#EMC_CONTROL_M
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_CONTROL_M_SHIFT
)Ë& 
EMC_CONTROL_M_MASK
)

	)

2578 
	#EMC_CONTROL_L_MASK
 (0x4U)

	)

2579 
	#EMC_CONTROL_L_SHIFT
 (2U)

	)

2580 
	#EMC_CONTROL_L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_CONTROL_L_SHIFT
)Ë& 
EMC_CONTROL_L_MASK
)

	)

2583 
	#EMC_STATUS_B_MASK
 (0x1U)

	)

2584 
	#EMC_STATUS_B_SHIFT
 (0U)

	)

2585 
	#EMC_STATUS_B
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_STATUS_B_SHIFT
)Ë& 
EMC_STATUS_B_MASK
)

	)

2586 
	#EMC_STATUS_S_MASK
 (0x2U)

	)

2587 
	#EMC_STATUS_S_SHIFT
 (1U)

	)

2588 
	#EMC_STATUS_S
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_STATUS_S_SHIFT
)Ë& 
EMC_STATUS_S_MASK
)

	)

2589 
	#EMC_STATUS_SA_MASK
 (0x4U)

	)

2590 
	#EMC_STATUS_SA_SHIFT
 (2U)

	)

2591 
	#EMC_STATUS_SA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_STATUS_SA_SHIFT
)Ë& 
EMC_STATUS_SA_MASK
)

	)

2594 
	#EMC_CONFIG_EM_MASK
 (0x1U)

	)

2595 
	#EMC_CONFIG_EM_SHIFT
 (0U)

	)

2596 
	#EMC_CONFIG_EM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_CONFIG_EM_SHIFT
)Ë& 
EMC_CONFIG_EM_MASK
)

	)

2597 
	#EMC_CONFIG_CLKR_MASK
 (0x100U)

	)

2598 
	#EMC_CONFIG_CLKR_SHIFT
 (8U)

	)

2599 
	#EMC_CONFIG_CLKR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_CONFIG_CLKR_SHIFT
)Ë& 
EMC_CONFIG_CLKR_MASK
)

	)

2602 
	#EMC_DYNAMICCONTROL_CE_MASK
 (0x1U)

	)

2603 
	#EMC_DYNAMICCONTROL_CE_SHIFT
 (0U)

	)

2604 
	#EMC_DYNAMICCONTROL_CE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMICCONTROL_CE_SHIFT
)Ë& 
EMC_DYNAMICCONTROL_CE_MASK
)

	)

2605 
	#EMC_DYNAMICCONTROL_CS_MASK
 (0x2U)

	)

2606 
	#EMC_DYNAMICCONTROL_CS_SHIFT
 (1U)

	)

2607 
	#EMC_DYNAMICCONTROL_CS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMICCONTROL_CS_SHIFT
)Ë& 
EMC_DYNAMICCONTROL_CS_MASK
)

	)

2608 
	#EMC_DYNAMICCONTROL_SR_MASK
 (0x4U)

	)

2609 
	#EMC_DYNAMICCONTROL_SR_SHIFT
 (2U)

	)

2610 
	#EMC_DYNAMICCONTROL_SR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMICCONTROL_SR_SHIFT
)Ë& 
EMC_DYNAMICCONTROL_SR_MASK
)

	)

2611 
	#EMC_DYNAMICCONTROL_MMC_MASK
 (0x20U)

	)

2612 
	#EMC_DYNAMICCONTROL_MMC_SHIFT
 (5U)

	)

2613 
	#EMC_DYNAMICCONTROL_MMC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMICCONTROL_MMC_SHIFT
)Ë& 
EMC_DYNAMICCONTROL_MMC_MASK
)

	)

2614 
	#EMC_DYNAMICCONTROL_I_MASK
 (0x180U)

	)

2615 
	#EMC_DYNAMICCONTROL_I_SHIFT
 (7U)

	)

2616 
	#EMC_DYNAMICCONTROL_I
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMICCONTROL_I_SHIFT
)Ë& 
EMC_DYNAMICCONTROL_I_MASK
)

	)

2619 
	#EMC_DYNAMICREFRESH_REFRESH_MASK
 (0x7FFU)

	)

2620 
	#EMC_DYNAMICREFRESH_REFRESH_SHIFT
 (0U)

	)

2621 
	#EMC_DYNAMICREFRESH_REFRESH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMICREFRESH_REFRESH_SHIFT
)Ë& 
EMC_DYNAMICREFRESH_REFRESH_MASK
)

	)

2624 
	#EMC_DYNAMICREADCONFIG_RD_MASK
 (0x3U)

	)

2625 
	#EMC_DYNAMICREADCONFIG_RD_SHIFT
 (0U)

	)

2626 
	#EMC_DYNAMICREADCONFIG_RD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMICREADCONFIG_RD_SHIFT
)Ë& 
EMC_DYNAMICREADCONFIG_RD_MASK
)

	)

2629 
	#EMC_DYNAMICRP_TRP_MASK
 (0xFU)

	)

2630 
	#EMC_DYNAMICRP_TRP_SHIFT
 (0U)

	)

2631 
	#EMC_DYNAMICRP_TRP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMICRP_TRP_SHIFT
)Ë& 
EMC_DYNAMICRP_TRP_MASK
)

	)

2634 
	#EMC_DYNAMICRAS_TRAS_MASK
 (0xFU)

	)

2635 
	#EMC_DYNAMICRAS_TRAS_SHIFT
 (0U)

	)

2636 
	#EMC_DYNAMICRAS_TRAS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMICRAS_TRAS_SHIFT
)Ë& 
EMC_DYNAMICRAS_TRAS_MASK
)

	)

2639 
	#EMC_DYNAMICSREX_TSREX_MASK
 (0xFU)

	)

2640 
	#EMC_DYNAMICSREX_TSREX_SHIFT
 (0U)

	)

2641 
	#EMC_DYNAMICSREX_TSREX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMICSREX_TSREX_SHIFT
)Ë& 
EMC_DYNAMICSREX_TSREX_MASK
)

	)

2644 
	#EMC_DYNAMICAPR_TAPR_MASK
 (0xFU)

	)

2645 
	#EMC_DYNAMICAPR_TAPR_SHIFT
 (0U)

	)

2646 
	#EMC_DYNAMICAPR_TAPR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMICAPR_TAPR_SHIFT
)Ë& 
EMC_DYNAMICAPR_TAPR_MASK
)

	)

2649 
	#EMC_DYNAMICDAL_TDAL_MASK
 (0xFU)

	)

2650 
	#EMC_DYNAMICDAL_TDAL_SHIFT
 (0U)

	)

2651 
	#EMC_DYNAMICDAL_TDAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMICDAL_TDAL_SHIFT
)Ë& 
EMC_DYNAMICDAL_TDAL_MASK
)

	)

2654 
	#EMC_DYNAMICWR_TWR_MASK
 (0xFU)

	)

2655 
	#EMC_DYNAMICWR_TWR_SHIFT
 (0U)

	)

2656 
	#EMC_DYNAMICWR_TWR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMICWR_TWR_SHIFT
)Ë& 
EMC_DYNAMICWR_TWR_MASK
)

	)

2659 
	#EMC_DYNAMICRC_TRC_MASK
 (0x1FU)

	)

2660 
	#EMC_DYNAMICRC_TRC_SHIFT
 (0U)

	)

2661 
	#EMC_DYNAMICRC_TRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMICRC_TRC_SHIFT
)Ë& 
EMC_DYNAMICRC_TRC_MASK
)

	)

2664 
	#EMC_DYNAMICRFC_TRFC_MASK
 (0x1FU)

	)

2665 
	#EMC_DYNAMICRFC_TRFC_SHIFT
 (0U)

	)

2666 
	#EMC_DYNAMICRFC_TRFC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMICRFC_TRFC_SHIFT
)Ë& 
EMC_DYNAMICRFC_TRFC_MASK
)

	)

2669 
	#EMC_DYNAMICXSR_TXSR_MASK
 (0x1FU)

	)

2670 
	#EMC_DYNAMICXSR_TXSR_SHIFT
 (0U)

	)

2671 
	#EMC_DYNAMICXSR_TXSR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMICXSR_TXSR_SHIFT
)Ë& 
EMC_DYNAMICXSR_TXSR_MASK
)

	)

2674 
	#EMC_DYNAMICRRD_TRRD_MASK
 (0xFU)

	)

2675 
	#EMC_DYNAMICRRD_TRRD_SHIFT
 (0U)

	)

2676 
	#EMC_DYNAMICRRD_TRRD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMICRRD_TRRD_SHIFT
)Ë& 
EMC_DYNAMICRRD_TRRD_MASK
)

	)

2679 
	#EMC_DYNAMICMRD_TMRD_MASK
 (0xFU)

	)

2680 
	#EMC_DYNAMICMRD_TMRD_SHIFT
 (0U)

	)

2681 
	#EMC_DYNAMICMRD_TMRD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMICMRD_TMRD_SHIFT
)Ë& 
EMC_DYNAMICMRD_TMRD_MASK
)

	)

2684 
	#EMC_STATICEXTENDEDWAIT_EXTENDEDWAIT_MASK
 (0x3FFU)

	)

2685 
	#EMC_STATICEXTENDEDWAIT_EXTENDEDWAIT_SHIFT
 (0U)

	)

2686 
	#EMC_STATICEXTENDEDWAIT_EXTENDEDWAIT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_STATICEXTENDEDWAIT_EXTENDEDWAIT_SHIFT
)Ë& 
EMC_STATICEXTENDEDWAIT_EXTENDEDWAIT_MASK
)

	)

2689 
	#EMC_DYNAMIC_DYNAMICCONFIG_MD_MASK
 (0x18U)

	)

2690 
	#EMC_DYNAMIC_DYNAMICCONFIG_MD_SHIFT
 (3U)

	)

2691 
	#EMC_DYNAMIC_DYNAMICCONFIG_MD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMIC_DYNAMICCONFIG_MD_SHIFT
)Ë& 
EMC_DYNAMIC_DYNAMICCONFIG_MD_MASK
)

	)

2692 
	#EMC_DYNAMIC_DYNAMICCONFIG_AM0_MASK
 (0x1F80U)

	)

2693 
	#EMC_DYNAMIC_DYNAMICCONFIG_AM0_SHIFT
 (7U)

	)

2694 
	#EMC_DYNAMIC_DYNAMICCONFIG_AM0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMIC_DYNAMICCONFIG_AM0_SHIFT
)Ë& 
EMC_DYNAMIC_DYNAMICCONFIG_AM0_MASK
)

	)

2695 
	#EMC_DYNAMIC_DYNAMICCONFIG_AM1_MASK
 (0x4000U)

	)

2696 
	#EMC_DYNAMIC_DYNAMICCONFIG_AM1_SHIFT
 (14U)

	)

2697 
	#EMC_DYNAMIC_DYNAMICCONFIG_AM1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMIC_DYNAMICCONFIG_AM1_SHIFT
)Ë& 
EMC_DYNAMIC_DYNAMICCONFIG_AM1_MASK
)

	)

2698 
	#EMC_DYNAMIC_DYNAMICCONFIG_B_MASK
 (0x80000U)

	)

2699 
	#EMC_DYNAMIC_DYNAMICCONFIG_B_SHIFT
 (19U)

	)

2700 
	#EMC_DYNAMIC_DYNAMICCONFIG_B
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMIC_DYNAMICCONFIG_B_SHIFT
)Ë& 
EMC_DYNAMIC_DYNAMICCONFIG_B_MASK
)

	)

2701 
	#EMC_DYNAMIC_DYNAMICCONFIG_P_MASK
 (0x100000U)

	)

2702 
	#EMC_DYNAMIC_DYNAMICCONFIG_P_SHIFT
 (20U)

	)

2703 
	#EMC_DYNAMIC_DYNAMICCONFIG_P
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMIC_DYNAMICCONFIG_P_SHIFT
)Ë& 
EMC_DYNAMIC_DYNAMICCONFIG_P_MASK
)

	)

2706 
	#EMC_DYNAMIC_DYNAMICCONFIG_COUNT
 (4U)

	)

2709 
	#EMC_DYNAMIC_DYNAMICRASCAS_RAS_MASK
 (0x3U)

	)

2710 
	#EMC_DYNAMIC_DYNAMICRASCAS_RAS_SHIFT
 (0U)

	)

2711 
	#EMC_DYNAMIC_DYNAMICRASCAS_RAS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMIC_DYNAMICRASCAS_RAS_SHIFT
)Ë& 
EMC_DYNAMIC_DYNAMICRASCAS_RAS_MASK
)

	)

2712 
	#EMC_DYNAMIC_DYNAMICRASCAS_CAS_MASK
 (0x300U)

	)

2713 
	#EMC_DYNAMIC_DYNAMICRASCAS_CAS_SHIFT
 (8U)

	)

2714 
	#EMC_DYNAMIC_DYNAMICRASCAS_CAS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_DYNAMIC_DYNAMICRASCAS_CAS_SHIFT
)Ë& 
EMC_DYNAMIC_DYNAMICRASCAS_CAS_MASK
)

	)

2717 
	#EMC_DYNAMIC_DYNAMICRASCAS_COUNT
 (4U)

	)

2720 
	#EMC_STATIC_STATICCONFIG_MW_MASK
 (0x3U)

	)

2721 
	#EMC_STATIC_STATICCONFIG_MW_SHIFT
 (0U)

	)

2722 
	#EMC_STATIC_STATICCONFIG_MW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_STATIC_STATICCONFIG_MW_SHIFT
)Ë& 
EMC_STATIC_STATICCONFIG_MW_MASK
)

	)

2723 
	#EMC_STATIC_STATICCONFIG_PM_MASK
 (0x8U)

	)

2724 
	#EMC_STATIC_STATICCONFIG_PM_SHIFT
 (3U)

	)

2725 
	#EMC_STATIC_STATICCONFIG_PM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_STATIC_STATICCONFIG_PM_SHIFT
)Ë& 
EMC_STATIC_STATICCONFIG_PM_MASK
)

	)

2726 
	#EMC_STATIC_STATICCONFIG_PC_MASK
 (0x40U)

	)

2727 
	#EMC_STATIC_STATICCONFIG_PC_SHIFT
 (6U)

	)

2728 
	#EMC_STATIC_STATICCONFIG_PC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_STATIC_STATICCONFIG_PC_SHIFT
)Ë& 
EMC_STATIC_STATICCONFIG_PC_MASK
)

	)

2729 
	#EMC_STATIC_STATICCONFIG_PB_MASK
 (0x80U)

	)

2730 
	#EMC_STATIC_STATICCONFIG_PB_SHIFT
 (7U)

	)

2731 
	#EMC_STATIC_STATICCONFIG_PB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_STATIC_STATICCONFIG_PB_SHIFT
)Ë& 
EMC_STATIC_STATICCONFIG_PB_MASK
)

	)

2732 
	#EMC_STATIC_STATICCONFIG_EW_MASK
 (0x100U)

	)

2733 
	#EMC_STATIC_STATICCONFIG_EW_SHIFT
 (8U)

	)

2734 
	#EMC_STATIC_STATICCONFIG_EW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_STATIC_STATICCONFIG_EW_SHIFT
)Ë& 
EMC_STATIC_STATICCONFIG_EW_MASK
)

	)

2735 
	#EMC_STATIC_STATICCONFIG_B_MASK
 (0x80000U)

	)

2736 
	#EMC_STATIC_STATICCONFIG_B_SHIFT
 (19U)

	)

2737 
	#EMC_STATIC_STATICCONFIG_B
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_STATIC_STATICCONFIG_B_SHIFT
)Ë& 
EMC_STATIC_STATICCONFIG_B_MASK
)

	)

2738 
	#EMC_STATIC_STATICCONFIG_P_MASK
 (0x100000U)

	)

2739 
	#EMC_STATIC_STATICCONFIG_P_SHIFT
 (20U)

	)

2740 
	#EMC_STATIC_STATICCONFIG_P
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_STATIC_STATICCONFIG_P_SHIFT
)Ë& 
EMC_STATIC_STATICCONFIG_P_MASK
)

	)

2743 
	#EMC_STATIC_STATICCONFIG_COUNT
 (4U)

	)

2746 
	#EMC_STATIC_STATICWAITWEN_WAITWEN_MASK
 (0xFU)

	)

2747 
	#EMC_STATIC_STATICWAITWEN_WAITWEN_SHIFT
 (0U)

	)

2748 
	#EMC_STATIC_STATICWAITWEN_WAITWEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_STATIC_STATICWAITWEN_WAITWEN_SHIFT
)Ë& 
EMC_STATIC_STATICWAITWEN_WAITWEN_MASK
)

	)

2751 
	#EMC_STATIC_STATICWAITWEN_COUNT
 (4U)

	)

2754 
	#EMC_STATIC_STATICWAITOEN_WAITOEN_MASK
 (0xFU)

	)

2755 
	#EMC_STATIC_STATICWAITOEN_WAITOEN_SHIFT
 (0U)

	)

2756 
	#EMC_STATIC_STATICWAITOEN_WAITOEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_STATIC_STATICWAITOEN_WAITOEN_SHIFT
)Ë& 
EMC_STATIC_STATICWAITOEN_WAITOEN_MASK
)

	)

2759 
	#EMC_STATIC_STATICWAITOEN_COUNT
 (4U)

	)

2762 
	#EMC_STATIC_STATICWAITRD_WAITRD_MASK
 (0x1FU)

	)

2763 
	#EMC_STATIC_STATICWAITRD_WAITRD_SHIFT
 (0U)

	)

2764 
	#EMC_STATIC_STATICWAITRD_WAITRD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_STATIC_STATICWAITRD_WAITRD_SHIFT
)Ë& 
EMC_STATIC_STATICWAITRD_WAITRD_MASK
)

	)

2767 
	#EMC_STATIC_STATICWAITRD_COUNT
 (4U)

	)

2770 
	#EMC_STATIC_STATICWAITPAGE_WAITPAGE_MASK
 (0x1FU)

	)

2771 
	#EMC_STATIC_STATICWAITPAGE_WAITPAGE_SHIFT
 (0U)

	)

2772 
	#EMC_STATIC_STATICWAITPAGE_WAITPAGE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_STATIC_STATICWAITPAGE_WAITPAGE_SHIFT
)Ë& 
EMC_STATIC_STATICWAITPAGE_WAITPAGE_MASK
)

	)

2775 
	#EMC_STATIC_STATICWAITPAGE_COUNT
 (4U)

	)

2778 
	#EMC_STATIC_STATICWAITWR_WAITWR_MASK
 (0x1FU)

	)

2779 
	#EMC_STATIC_STATICWAITWR_WAITWR_SHIFT
 (0U)

	)

2780 
	#EMC_STATIC_STATICWAITWR_WAITWR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_STATIC_STATICWAITWR_WAITWR_SHIFT
)Ë& 
EMC_STATIC_STATICWAITWR_WAITWR_MASK
)

	)

2783 
	#EMC_STATIC_STATICWAITWR_COUNT
 (4U)

	)

2786 
	#EMC_STATIC_STATICWAITTURN_WAITTURN_MASK
 (0xFU)

	)

2787 
	#EMC_STATIC_STATICWAITTURN_WAITTURN_SHIFT
 (0U)

	)

2788 
	#EMC_STATIC_STATICWAITTURN_WAITTURN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
EMC_STATIC_STATICWAITTURN_WAITTURN_SHIFT
)Ë& 
EMC_STATIC_STATICWAITTURN_WAITTURN_MASK
)

	)

2791 
	#EMC_STATIC_STATICWAITTURN_COUNT
 (4U)

	)

2801 
	#EMC_BASE
 (0x40081000u)

	)

2803 
	#EMC
 ((
EMC_Ty≥
 *)
EMC_BASE
)

	)

2805 
	#EMC_BASE_ADDRS
 { 
EMC_BASE
 }

	)

2807 
	#EMC_BASE_PTRS
 { 
EMC
 }

	)

2825 
__IO
 
uöt32_t
 
	mMAC_CONFIG
;

2826 
__IO
 
uöt32_t
 
	mMAC_EXT_CONFIG
;

2827 
__IO
 
uöt32_t
 
	mMAC_FRAME_FILTER
;

2828 
__IO
 
uöt32_t
 
	mMAC_WD_TIMEROUT
;

2829 
uöt8_t
 
	mRESERVED_0
[64];

2830 
__IO
 
uöt32_t
 
	mMAC_VLAN_TAG
;

2831 
uöt8_t
 
	mRESERVED_1
[28];

2832 
__IO
 
uöt32_t
 
	mMAC_TX_FLOW_CTRL_Q
[2];

2833 
uöt8_t
 
	mRESERVED_2
[24];

2834 
__IO
 
uöt32_t
 
	mMAC_RX_FLOW_CTRL
;

2835 
uöt8_t
 
	mRESERVED_3
[4];

2836 
__IO
 
uöt32_t
 
	mMAC_TXQ_PRIO_MAP
;

2837 
uöt8_t
 
	mRESERVED_4
[4];

2838 
__IO
 
uöt32_t
 
	mMAC_RXQ_CTRL
[3];

2839 
uöt8_t
 
	mRESERVED_5
[4];

2840 
__I
 
uöt32_t
 
	mMAC_INTR_STAT
;

2841 
__IO
 
uöt32_t
 
	mMAC_INTR_EN
;

2842 
__I
 
uöt32_t
 
	mMAC_RXTX_STAT
;

2843 
uöt8_t
 
	mRESERVED_6
[4];

2844 
__IO
 
uöt32_t
 
	mMAC_PMT_CRTL_STAT
;

2845 
__IO
 
uöt32_t
 
	mMAC_RWAKE_FRFLT
;

2846 
uöt8_t
 
	mRESERVED_7
[8];

2847 
__IO
 
uöt32_t
 
	mMAC_LPI_CTRL_STAT
;

2848 
__IO
 
uöt32_t
 
	mMAC_LPI_TIMER_CTRL
;

2849 
__IO
 
uöt32_t
 
	mMAC_LPI_ENTR_TIMR
;

2850 
__IO
 
uöt32_t
 
	mMAC_1US_TIC_COUNTR
;

2851 
uöt8_t
 
	mRESERVED_8
[48];

2852 
__IO
 
uöt32_t
 
	mMAC_VERSION
;

2853 
__I
 
uöt32_t
 
	mMAC_DBG
;

2854 
uöt8_t
 
	mRESERVED_9
[4];

2855 
__IO
 
uöt32_t
 
	mMAC_HW_FEAT
[3];

2856 
uöt8_t
 
	mRESERVED_10
[216];

2857 
__IO
 
uöt32_t
 
	mMAC_MDIO_ADDR
;

2858 
__IO
 
uöt32_t
 
	mMAC_MDIO_DATA
;

2859 
uöt8_t
 
	mRESERVED_11
[248];

2860 
__IO
 
uöt32_t
 
	mMAC_ADDR_HIGH
;

2861 
__IO
 
uöt32_t
 
	mMAC_ADDR_LOW
;

2862 
uöt8_t
 
	mRESERVED_12
[2040];

2863 
__IO
 
uöt32_t
 
	mMAC_TIMESTAMP_CTRL
;

2864 
__IO
 
uöt32_t
 
	mMAC_SUB_SCND_INCR
;

2865 
__I
 
uöt32_t
 
	mMAC_SYS_TIME_SCND
;

2866 
__I
 
uöt32_t
 
	mMAC_SYS_TIME_NSCND
;

2867 
__IO
 
uöt32_t
 
	mMAC_SYS_TIME_SCND_UPD
;

2868 
__IO
 
uöt32_t
 
	mMAC_SYS_TIME_NSCND_UPD
;

2869 
__IO
 
uöt32_t
 
	mMAC_SYS_TIMESTMP_ADDEND
;

2870 
__IO
 
uöt32_t
 
	mMAC_SYS_TIME_HWORD_SCND
;

2871 
__I
 
uöt32_t
 
	mMAC_SYS_TIMESTMP_STAT
;

2872 
uöt8_t
 
	mRESERVED_13
[12];

2873 
__I
 
uöt32_t
 
	mMAC_TX_TIMESTAMP_STATUS_NANOSECONDS
;

2874 
__I
 
uöt32_t
 
	mMAC_TX_TIMESTAMP_STATUS_SECONDS
;

2875 
uöt8_t
 
	mRESERVED_14
[32];

2876 
__IO
 
uöt32_t
 
	mMAC_TIMESTAMP_INGRESS_CORR_NANOSECOND
;

2877 
__IO
 
uöt32_t
 
	mMAC_TIMESTAMP_EGRESS_CORR_NANOSECOND
;

2878 
uöt8_t
 
	mRESERVED_15
[160];

2879 
__IO
 
uöt32_t
 
	mMTL_OP_MODE
;

2880 
uöt8_t
 
	mRESERVED_16
[28];

2881 
__I
 
uöt32_t
 
	mMTL_INTR_STAT
;

2882 
uöt8_t
 
	mRESERVED_17
[12];

2883 
__IO
 
uöt32_t
 
	mMTL_RXQ_DMA_MAP
;

2884 
uöt8_t
 
	mRESERVED_18
[204];

2886 
__IO
 
uöt32_t
 
	mMTL_TXQX_OP_MODE
;

2887 
__I
 
uöt32_t
 
	mMTL_TXQX_UNDRFLW
;

2888 
__I
 
uöt32_t
 
	mMTL_TXQX_DBG
;

2889 
uöt8_t
 
	mRESERVED_0
[4];

2890 
__IO
 
uöt32_t
 
	mMTL_TXQX_ETS_CTRL
;

2891 
__IO
 
uöt32_t
 
	mMTL_TXQX_ETS_STAT
;

2892 
__IO
 
uöt32_t
 
	mMTL_TXQX_QNTM_WGHT
;

2893 
__IO
 
uöt32_t
 
	mMTL_TXQX_SNDSLP_CRDT
;

2894 
__IO
 
uöt32_t
 
	mMTL_TXQX_HI_CRDT
;

2895 
__IO
 
uöt32_t
 
	mMTL_TXQX_LO_CRDT
;

2896 
uöt8_t
 
	mRESERVED_1
[4];

2897 
__IO
 
uöt32_t
 
	mMTL_TXQX_INTCTRL_STAT
;

2898 
__IO
 
uöt32_t
 
	mMTL_RXQX_OP_MODE
;

2899 
__IO
 
uöt32_t
 
	mMTL_RXQX_MISSPKT_OVRFLW_CNT
;

2900 
__IO
 
uöt32_t
 
	mMTL_RXQX_DBG
;

2901 
__IO
 
uöt32_t
 
	mMTL_RXQX_CTRL
;

2902 } 
	mMTL_QUEUE
[2];

2903 
uöt8_t
 
	mRESERVED_19
[640];

2904 
__IO
 
uöt32_t
 
	mDMA_MODE
;

2905 
__IO
 
uöt32_t
 
	mDMA_SYSBUS_MODE
;

2906 
__IO
 
uöt32_t
 
	mDMA_INTR_STAT
;

2907 
__IO
 
uöt32_t
 
	mDMA_DBG_STAT
;

2908 
uöt8_t
 
	mRESERVED_20
[240];

2910 
__IO
 
uöt32_t
 
	mDMA_CHX_CTRL
;

2911 
__IO
 
uöt32_t
 
	mDMA_CHX_TX_CTRL
;

2912 
__IO
 
uöt32_t
 
	mDMA_CHX_RX_CTRL
;

2913 
uöt8_t
 
	mRESERVED_0
[8];

2914 
__IO
 
uöt32_t
 
	mDMA_CHX_TXDESC_LIST_ADDR
;

2915 
uöt8_t
 
	mRESERVED_1
[4];

2916 
__IO
 
uöt32_t
 
	mDMA_CHX_RXDESC_LIST_ADDR
;

2917 
__IO
 
uöt32_t
 
	mDMA_CHX_TXDESC_TAIL_PTR
;

2918 
uöt8_t
 
	mRESERVED_2
[4];

2919 
__IO
 
uöt32_t
 
	mDMA_CHX_RXDESC_TAIL_PTR
;

2920 
__IO
 
uöt32_t
 
	mDMA_CHX_TXDESC_RING_LENGTH
;

2921 
__IO
 
uöt32_t
 
	mDMA_CHX_RXDESC_RING_LENGTH
;

2922 
__IO
 
uöt32_t
 
	mDMA_CHX_INT_EN
;

2923 
__IO
 
uöt32_t
 
	mDMA_CHX_RX_INT_WDTIMER
;

2924 
__IO
 
uöt32_t
 
	mDMA_CHX_SLOT_FUNC_CTRL_STAT
;

2925 
uöt8_t
 
	mRESERVED_3
[4];

2926 
__I
 
uöt32_t
 
	mDMA_CHX_CUR_HST_TXDESC
;

2927 
uöt8_t
 
	mRESERVED_4
[4];

2928 
__I
 
uöt32_t
 
	mDMA_CHX_CUR_HST_RXDESC
;

2929 
uöt8_t
 
	mRESERVED_5
[4];

2930 
__I
 
uöt32_t
 
	mDMA_CHX_CUR_HST_TXBUF
;

2931 
uöt8_t
 
	mRESERVED_6
[4];

2932 
__I
 
uöt32_t
 
	mDMA_CHX_CUR_HST_RXBUF
;

2933 
__IO
 
uöt32_t
 
	mDMA_CHX_STAT
;

2934 
uöt8_t
 
	mRESERVED_7
[28];

2935 } 
	mDMA_CH
[2];

2936 } 
	tENET_Ty≥
;

2948 
	#ENET_MAC_CONFIG_RE_MASK
 (0x1U)

	)

2949 
	#ENET_MAC_CONFIG_RE_SHIFT
 (0U)

	)

2950 
	#ENET_MAC_CONFIG_RE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_RE_SHIFT
)Ë& 
ENET_MAC_CONFIG_RE_MASK
)

	)

2951 
	#ENET_MAC_CONFIG_TE_MASK
 (0x2U)

	)

2952 
	#ENET_MAC_CONFIG_TE_SHIFT
 (1U)

	)

2953 
	#ENET_MAC_CONFIG_TE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_TE_SHIFT
)Ë& 
ENET_MAC_CONFIG_TE_MASK
)

	)

2954 
	#ENET_MAC_CONFIG_PRELEN_MASK
 (0xCU)

	)

2955 
	#ENET_MAC_CONFIG_PRELEN_SHIFT
 (2U)

	)

2956 
	#ENET_MAC_CONFIG_PRELEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_PRELEN_SHIFT
)Ë& 
ENET_MAC_CONFIG_PRELEN_MASK
)

	)

2957 
	#ENET_MAC_CONFIG_DC_MASK
 (0x10U)

	)

2958 
	#ENET_MAC_CONFIG_DC_SHIFT
 (4U)

	)

2959 
	#ENET_MAC_CONFIG_DC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_DC_SHIFT
)Ë& 
ENET_MAC_CONFIG_DC_MASK
)

	)

2960 
	#ENET_MAC_CONFIG_BL_MASK
 (0x60U)

	)

2961 
	#ENET_MAC_CONFIG_BL_SHIFT
 (5U)

	)

2962 
	#ENET_MAC_CONFIG_BL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_BL_SHIFT
)Ë& 
ENET_MAC_CONFIG_BL_MASK
)

	)

2963 
	#ENET_MAC_CONFIG_DR_MASK
 (0x100U)

	)

2964 
	#ENET_MAC_CONFIG_DR_SHIFT
 (8U)

	)

2965 
	#ENET_MAC_CONFIG_DR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_DR_SHIFT
)Ë& 
ENET_MAC_CONFIG_DR_MASK
)

	)

2966 
	#ENET_MAC_CONFIG_DCRS_MASK
 (0x200U)

	)

2967 
	#ENET_MAC_CONFIG_DCRS_SHIFT
 (9U)

	)

2968 
	#ENET_MAC_CONFIG_DCRS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_DCRS_SHIFT
)Ë& 
ENET_MAC_CONFIG_DCRS_MASK
)

	)

2969 
	#ENET_MAC_CONFIG_DO_MASK
 (0x400U)

	)

2970 
	#ENET_MAC_CONFIG_DO_SHIFT
 (10U)

	)

2971 
	#ENET_MAC_CONFIG_DO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_DO_SHIFT
)Ë& 
ENET_MAC_CONFIG_DO_MASK
)

	)

2972 
	#ENET_MAC_CONFIG_ECRSFD_MASK
 (0x800U)

	)

2973 
	#ENET_MAC_CONFIG_ECRSFD_SHIFT
 (11U)

	)

2974 
	#ENET_MAC_CONFIG_ECRSFD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_ECRSFD_SHIFT
)Ë& 
ENET_MAC_CONFIG_ECRSFD_MASK
)

	)

2975 
	#ENET_MAC_CONFIG_LM_MASK
 (0x1000U)

	)

2976 
	#ENET_MAC_CONFIG_LM_SHIFT
 (12U)

	)

2977 
	#ENET_MAC_CONFIG_LM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_LM_SHIFT
)Ë& 
ENET_MAC_CONFIG_LM_MASK
)

	)

2978 
	#ENET_MAC_CONFIG_DM_MASK
 (0x2000U)

	)

2979 
	#ENET_MAC_CONFIG_DM_SHIFT
 (13U)

	)

2980 
	#ENET_MAC_CONFIG_DM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_DM_SHIFT
)Ë& 
ENET_MAC_CONFIG_DM_MASK
)

	)

2981 
	#ENET_MAC_CONFIG_FES_MASK
 (0x4000U)

	)

2982 
	#ENET_MAC_CONFIG_FES_SHIFT
 (14U)

	)

2983 
	#ENET_MAC_CONFIG_FES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_FES_SHIFT
)Ë& 
ENET_MAC_CONFIG_FES_MASK
)

	)

2984 
	#ENET_MAC_CONFIG_PS_MASK
 (0x8000U)

	)

2985 
	#ENET_MAC_CONFIG_PS_SHIFT
 (15U)

	)

2986 
	#ENET_MAC_CONFIG_PS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_PS_SHIFT
)Ë& 
ENET_MAC_CONFIG_PS_MASK
)

	)

2987 
	#ENET_MAC_CONFIG_JE_MASK
 (0x10000U)

	)

2988 
	#ENET_MAC_CONFIG_JE_SHIFT
 (16U)

	)

2989 
	#ENET_MAC_CONFIG_JE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_JE_SHIFT
)Ë& 
ENET_MAC_CONFIG_JE_MASK
)

	)

2990 
	#ENET_MAC_CONFIG_JD_MASK
 (0x20000U)

	)

2991 
	#ENET_MAC_CONFIG_JD_SHIFT
 (17U)

	)

2992 
	#ENET_MAC_CONFIG_JD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_JD_SHIFT
)Ë& 
ENET_MAC_CONFIG_JD_MASK
)

	)

2993 
	#ENET_MAC_CONFIG_BE_MASK
 (0x40000U)

	)

2994 
	#ENET_MAC_CONFIG_BE_SHIFT
 (18U)

	)

2995 
	#ENET_MAC_CONFIG_BE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_BE_SHIFT
)Ë& 
ENET_MAC_CONFIG_BE_MASK
)

	)

2996 
	#ENET_MAC_CONFIG_WD_MASK
 (0x80000U)

	)

2997 
	#ENET_MAC_CONFIG_WD_SHIFT
 (19U)

	)

2998 
	#ENET_MAC_CONFIG_WD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_WD_SHIFT
)Ë& 
ENET_MAC_CONFIG_WD_MASK
)

	)

2999 
	#ENET_MAC_CONFIG_ACS_MASK
 (0x100000U)

	)

3000 
	#ENET_MAC_CONFIG_ACS_SHIFT
 (20U)

	)

3001 
	#ENET_MAC_CONFIG_ACS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_ACS_SHIFT
)Ë& 
ENET_MAC_CONFIG_ACS_MASK
)

	)

3002 
	#ENET_MAC_CONFIG_CST_MASK
 (0x200000U)

	)

3003 
	#ENET_MAC_CONFIG_CST_SHIFT
 (21U)

	)

3004 
	#ENET_MAC_CONFIG_CST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_CST_SHIFT
)Ë& 
ENET_MAC_CONFIG_CST_MASK
)

	)

3005 
	#ENET_MAC_CONFIG_S2KP_MASK
 (0x400000U)

	)

3006 
	#ENET_MAC_CONFIG_S2KP_SHIFT
 (22U)

	)

3007 
	#ENET_MAC_CONFIG_S2KP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_S2KP_SHIFT
)Ë& 
ENET_MAC_CONFIG_S2KP_MASK
)

	)

3008 
	#ENET_MAC_CONFIG_GPSLCE_MASK
 (0x800000U)

	)

3009 
	#ENET_MAC_CONFIG_GPSLCE_SHIFT
 (23U)

	)

3010 
	#ENET_MAC_CONFIG_GPSLCE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_GPSLCE_SHIFT
)Ë& 
ENET_MAC_CONFIG_GPSLCE_MASK
)

	)

3011 
	#ENET_MAC_CONFIG_IPG_MASK
 (0x7000000U)

	)

3012 
	#ENET_MAC_CONFIG_IPG_SHIFT
 (24U)

	)

3013 
	#ENET_MAC_CONFIG_IPG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_IPG_SHIFT
)Ë& 
ENET_MAC_CONFIG_IPG_MASK
)

	)

3014 
	#ENET_MAC_CONFIG_IPC_MASK
 (0x8000000U)

	)

3015 
	#ENET_MAC_CONFIG_IPC_SHIFT
 (27U)

	)

3016 
	#ENET_MAC_CONFIG_IPC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_CONFIG_IPC_SHIFT
)Ë& 
ENET_MAC_CONFIG_IPC_MASK
)

	)

3019 
	#ENET_MAC_EXT_CONFIG_GPSL_MASK
 (0x3FFFU)

	)

3020 
	#ENET_MAC_EXT_CONFIG_GPSL_SHIFT
 (0U)

	)

3021 
	#ENET_MAC_EXT_CONFIG_GPSL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_EXT_CONFIG_GPSL_SHIFT
)Ë& 
ENET_MAC_EXT_CONFIG_GPSL_MASK
)

	)

3022 
	#ENET_MAC_EXT_CONFIG_DCRCC_MASK
 (0x10000U)

	)

3023 
	#ENET_MAC_EXT_CONFIG_DCRCC_SHIFT
 (16U)

	)

3024 
	#ENET_MAC_EXT_CONFIG_DCRCC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_EXT_CONFIG_DCRCC_SHIFT
)Ë& 
ENET_MAC_EXT_CONFIG_DCRCC_MASK
)

	)

3025 
	#ENET_MAC_EXT_CONFIG_SPEN_MASK
 (0x20000U)

	)

3026 
	#ENET_MAC_EXT_CONFIG_SPEN_SHIFT
 (17U)

	)

3027 
	#ENET_MAC_EXT_CONFIG_SPEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_EXT_CONFIG_SPEN_SHIFT
)Ë& 
ENET_MAC_EXT_CONFIG_SPEN_MASK
)

	)

3028 
	#ENET_MAC_EXT_CONFIG_USP_MASK
 (0x40000U)

	)

3029 
	#ENET_MAC_EXT_CONFIG_USP_SHIFT
 (18U)

	)

3030 
	#ENET_MAC_EXT_CONFIG_USP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_EXT_CONFIG_USP_SHIFT
)Ë& 
ENET_MAC_EXT_CONFIG_USP_MASK
)

	)

3033 
	#ENET_MAC_FRAME_FILTER_PR_MASK
 (0x1U)

	)

3034 
	#ENET_MAC_FRAME_FILTER_PR_SHIFT
 (0U)

	)

3035 
	#ENET_MAC_FRAME_FILTER_PR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_FRAME_FILTER_PR_SHIFT
)Ë& 
ENET_MAC_FRAME_FILTER_PR_MASK
)

	)

3036 
	#ENET_MAC_FRAME_FILTER_DAIF_MASK
 (0x8U)

	)

3037 
	#ENET_MAC_FRAME_FILTER_DAIF_SHIFT
 (3U)

	)

3038 
	#ENET_MAC_FRAME_FILTER_DAIF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_FRAME_FILTER_DAIF_SHIFT
)Ë& 
ENET_MAC_FRAME_FILTER_DAIF_MASK
)

	)

3039 
	#ENET_MAC_FRAME_FILTER_PM_MASK
 (0x10U)

	)

3040 
	#ENET_MAC_FRAME_FILTER_PM_SHIFT
 (4U)

	)

3041 
	#ENET_MAC_FRAME_FILTER_PM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_FRAME_FILTER_PM_SHIFT
)Ë& 
ENET_MAC_FRAME_FILTER_PM_MASK
)

	)

3042 
	#ENET_MAC_FRAME_FILTER_DBF_MASK
 (0x20U)

	)

3043 
	#ENET_MAC_FRAME_FILTER_DBF_SHIFT
 (5U)

	)

3044 
	#ENET_MAC_FRAME_FILTER_DBF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_FRAME_FILTER_DBF_SHIFT
)Ë& 
ENET_MAC_FRAME_FILTER_DBF_MASK
)

	)

3045 
	#ENET_MAC_FRAME_FILTER_PCF_MASK
 (0xC0U)

	)

3046 
	#ENET_MAC_FRAME_FILTER_PCF_SHIFT
 (6U)

	)

3047 
	#ENET_MAC_FRAME_FILTER_PCF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_FRAME_FILTER_PCF_SHIFT
)Ë& 
ENET_MAC_FRAME_FILTER_PCF_MASK
)

	)

3048 
	#ENET_MAC_FRAME_FILTER_SAIF_MASK
 (0x100U)

	)

3049 
	#ENET_MAC_FRAME_FILTER_SAIF_SHIFT
 (8U)

	)

3050 
	#ENET_MAC_FRAME_FILTER_SAIF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_FRAME_FILTER_SAIF_SHIFT
)Ë& 
ENET_MAC_FRAME_FILTER_SAIF_MASK
)

	)

3051 
	#ENET_MAC_FRAME_FILTER_SAF_MASK
 (0x200U)

	)

3052 
	#ENET_MAC_FRAME_FILTER_SAF_SHIFT
 (9U)

	)

3053 
	#ENET_MAC_FRAME_FILTER_SAF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_FRAME_FILTER_SAF_SHIFT
)Ë& 
ENET_MAC_FRAME_FILTER_SAF_MASK
)

	)

3054 
	#ENET_MAC_FRAME_FILTER_RA_MASK
 (0x80000000U)

	)

3055 
	#ENET_MAC_FRAME_FILTER_RA_SHIFT
 (31U)

	)

3056 
	#ENET_MAC_FRAME_FILTER_RA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_FRAME_FILTER_RA_SHIFT
)Ë& 
ENET_MAC_FRAME_FILTER_RA_MASK
)

	)

3059 
	#ENET_MAC_WD_TIMEROUT_WTO_MASK
 (0xFU)

	)

3060 
	#ENET_MAC_WD_TIMEROUT_WTO_SHIFT
 (0U)

	)

3061 
	#ENET_MAC_WD_TIMEROUT_WTO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_WD_TIMEROUT_WTO_SHIFT
)Ë& 
ENET_MAC_WD_TIMEROUT_WTO_MASK
)

	)

3062 
	#ENET_MAC_WD_TIMEROUT_PWE_MASK
 (0x100U)

	)

3063 
	#ENET_MAC_WD_TIMEROUT_PWE_SHIFT
 (8U)

	)

3064 
	#ENET_MAC_WD_TIMEROUT_PWE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_WD_TIMEROUT_PWE_SHIFT
)Ë& 
ENET_MAC_WD_TIMEROUT_PWE_MASK
)

	)

3067 
	#ENET_MAC_VLAN_TAG_VL_MASK
 (0xFFFFU)

	)

3068 
	#ENET_MAC_VLAN_TAG_VL_SHIFT
 (0U)

	)

3069 
	#ENET_MAC_VLAN_TAG_VL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_VLAN_TAG_VL_SHIFT
)Ë& 
ENET_MAC_VLAN_TAG_VL_MASK
)

	)

3070 
	#ENET_MAC_VLAN_TAG_ETV_MASK
 (0x10000U)

	)

3071 
	#ENET_MAC_VLAN_TAG_ETV_SHIFT
 (16U)

	)

3072 
	#ENET_MAC_VLAN_TAG_ETV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_VLAN_TAG_ETV_SHIFT
)Ë& 
ENET_MAC_VLAN_TAG_ETV_MASK
)

	)

3073 
	#ENET_MAC_VLAN_TAG_VTIM_MASK
 (0x20000U)

	)

3074 
	#ENET_MAC_VLAN_TAG_VTIM_SHIFT
 (17U)

	)

3075 
	#ENET_MAC_VLAN_TAG_VTIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_VLAN_TAG_VTIM_SHIFT
)Ë& 
ENET_MAC_VLAN_TAG_VTIM_MASK
)

	)

3076 
	#ENET_MAC_VLAN_TAG_ESVL_MASK
 (0x40000U)

	)

3077 
	#ENET_MAC_VLAN_TAG_ESVL_SHIFT
 (18U)

	)

3078 
	#ENET_MAC_VLAN_TAG_ESVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_VLAN_TAG_ESVL_SHIFT
)Ë& 
ENET_MAC_VLAN_TAG_ESVL_MASK
)

	)

3079 
	#ENET_MAC_VLAN_TAG_ERSVLM_MASK
 (0x80000U)

	)

3080 
	#ENET_MAC_VLAN_TAG_ERSVLM_SHIFT
 (19U)

	)

3081 
	#ENET_MAC_VLAN_TAG_ERSVLM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_VLAN_TAG_ERSVLM_SHIFT
)Ë& 
ENET_MAC_VLAN_TAG_ERSVLM_MASK
)

	)

3082 
	#ENET_MAC_VLAN_TAG_DOVLTC_MASK
 (0x100000U)

	)

3083 
	#ENET_MAC_VLAN_TAG_DOVLTC_SHIFT
 (20U)

	)

3084 
	#ENET_MAC_VLAN_TAG_DOVLTC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_VLAN_TAG_DOVLTC_SHIFT
)Ë& 
ENET_MAC_VLAN_TAG_DOVLTC_MASK
)

	)

3085 
	#ENET_MAC_VLAN_TAG_EVLS_MASK
 (0x600000U)

	)

3086 
	#ENET_MAC_VLAN_TAG_EVLS_SHIFT
 (21U)

	)

3087 
	#ENET_MAC_VLAN_TAG_EVLS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_VLAN_TAG_EVLS_SHIFT
)Ë& 
ENET_MAC_VLAN_TAG_EVLS_MASK
)

	)

3088 
	#ENET_MAC_VLAN_TAG_EVLRXS_MASK
 (0x1000000U)

	)

3089 
	#ENET_MAC_VLAN_TAG_EVLRXS_SHIFT
 (24U)

	)

3090 
	#ENET_MAC_VLAN_TAG_EVLRXS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_VLAN_TAG_EVLRXS_SHIFT
)Ë& 
ENET_MAC_VLAN_TAG_EVLRXS_MASK
)

	)

3091 
	#ENET_MAC_VLAN_TAG_VTHM_MASK
 (0x2000000U)

	)

3092 
	#ENET_MAC_VLAN_TAG_VTHM_SHIFT
 (25U)

	)

3093 
	#ENET_MAC_VLAN_TAG_VTHM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_VLAN_TAG_VTHM_SHIFT
)Ë& 
ENET_MAC_VLAN_TAG_VTHM_MASK
)

	)

3094 
	#ENET_MAC_VLAN_TAG_EDVLP_MASK
 (0x4000000U)

	)

3095 
	#ENET_MAC_VLAN_TAG_EDVLP_SHIFT
 (26U)

	)

3096 
	#ENET_MAC_VLAN_TAG_EDVLP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_VLAN_TAG_EDVLP_SHIFT
)Ë& 
ENET_MAC_VLAN_TAG_EDVLP_MASK
)

	)

3097 
	#ENET_MAC_VLAN_TAG_ERIVLT_MASK
 (0x8000000U)

	)

3098 
	#ENET_MAC_VLAN_TAG_ERIVLT_SHIFT
 (27U)

	)

3099 
	#ENET_MAC_VLAN_TAG_ERIVLT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_VLAN_TAG_ERIVLT_SHIFT
)Ë& 
ENET_MAC_VLAN_TAG_ERIVLT_MASK
)

	)

3100 
	#ENET_MAC_VLAN_TAG_EIVLS_MASK
 (0x30000000U)

	)

3101 
	#ENET_MAC_VLAN_TAG_EIVLS_SHIFT
 (28U)

	)

3102 
	#ENET_MAC_VLAN_TAG_EIVLS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_VLAN_TAG_EIVLS_SHIFT
)Ë& 
ENET_MAC_VLAN_TAG_EIVLS_MASK
)

	)

3103 
	#ENET_MAC_VLAN_TAG_EIVLRXS_MASK
 (0x80000000U)

	)

3104 
	#ENET_MAC_VLAN_TAG_EIVLRXS_SHIFT
 (31U)

	)

3105 
	#ENET_MAC_VLAN_TAG_EIVLRXS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_VLAN_TAG_EIVLRXS_SHIFT
)Ë& 
ENET_MAC_VLAN_TAG_EIVLRXS_MASK
)

	)

3108 
	#ENET_MAC_TX_FLOW_CTRL_Q_FCB_MASK
 (0x1U)

	)

3109 
	#ENET_MAC_TX_FLOW_CTRL_Q_FCB_SHIFT
 (0U)

	)

3110 
	#ENET_MAC_TX_FLOW_CTRL_Q_FCB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TX_FLOW_CTRL_Q_FCB_SHIFT
)Ë& 
ENET_MAC_TX_FLOW_CTRL_Q_FCB_MASK
)

	)

3111 
	#ENET_MAC_TX_FLOW_CTRL_Q_TFE_MASK
 (0x2U)

	)

3112 
	#ENET_MAC_TX_FLOW_CTRL_Q_TFE_SHIFT
 (1U)

	)

3113 
	#ENET_MAC_TX_FLOW_CTRL_Q_TFE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TX_FLOW_CTRL_Q_TFE_SHIFT
)Ë& 
ENET_MAC_TX_FLOW_CTRL_Q_TFE_MASK
)

	)

3114 
	#ENET_MAC_TX_FLOW_CTRL_Q_PLT_MASK
 (0x70U)

	)

3115 
	#ENET_MAC_TX_FLOW_CTRL_Q_PLT_SHIFT
 (4U)

	)

3116 
	#ENET_MAC_TX_FLOW_CTRL_Q_PLT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TX_FLOW_CTRL_Q_PLT_SHIFT
)Ë& 
ENET_MAC_TX_FLOW_CTRL_Q_PLT_MASK
)

	)

3117 
	#ENET_MAC_TX_FLOW_CTRL_Q_DZPQ_MASK
 (0x80U)

	)

3118 
	#ENET_MAC_TX_FLOW_CTRL_Q_DZPQ_SHIFT
 (7U)

	)

3119 
	#ENET_MAC_TX_FLOW_CTRL_Q_DZPQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TX_FLOW_CTRL_Q_DZPQ_SHIFT
)Ë& 
ENET_MAC_TX_FLOW_CTRL_Q_DZPQ_MASK
)

	)

3120 
	#ENET_MAC_TX_FLOW_CTRL_Q_PT_MASK
 (0xFFFF0000U)

	)

3121 
	#ENET_MAC_TX_FLOW_CTRL_Q_PT_SHIFT
 (16U)

	)

3122 
	#ENET_MAC_TX_FLOW_CTRL_Q_PT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TX_FLOW_CTRL_Q_PT_SHIFT
)Ë& 
ENET_MAC_TX_FLOW_CTRL_Q_PT_MASK
)

	)

3125 
	#ENET_MAC_TX_FLOW_CTRL_Q_COUNT
 (2U)

	)

3128 
	#ENET_MAC_RX_FLOW_CTRL_RFE_MASK
 (0x1U)

	)

3129 
	#ENET_MAC_RX_FLOW_CTRL_RFE_SHIFT
 (0U)

	)

3130 
	#ENET_MAC_RX_FLOW_CTRL_RFE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_RX_FLOW_CTRL_RFE_SHIFT
)Ë& 
ENET_MAC_RX_FLOW_CTRL_RFE_MASK
)

	)

3131 
	#ENET_MAC_RX_FLOW_CTRL_UP_MASK
 (0x2U)

	)

3132 
	#ENET_MAC_RX_FLOW_CTRL_UP_SHIFT
 (1U)

	)

3133 
	#ENET_MAC_RX_FLOW_CTRL_UP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_RX_FLOW_CTRL_UP_SHIFT
)Ë& 
ENET_MAC_RX_FLOW_CTRL_UP_MASK
)

	)

3136 
	#ENET_MAC_TXQ_PRIO_MAP_PSTQ0_MASK
 (0xFFU)

	)

3137 
	#ENET_MAC_TXQ_PRIO_MAP_PSTQ0_SHIFT
 (0U)

	)

3138 
	#ENET_MAC_TXQ_PRIO_MAP_PSTQ0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TXQ_PRIO_MAP_PSTQ0_SHIFT
)Ë& 
ENET_MAC_TXQ_PRIO_MAP_PSTQ0_MASK
)

	)

3139 
	#ENET_MAC_TXQ_PRIO_MAP_PSTQ1_MASK
 (0xFF00U)

	)

3140 
	#ENET_MAC_TXQ_PRIO_MAP_PSTQ1_SHIFT
 (8U)

	)

3141 
	#ENET_MAC_TXQ_PRIO_MAP_PSTQ1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TXQ_PRIO_MAP_PSTQ1_SHIFT
)Ë& 
ENET_MAC_TXQ_PRIO_MAP_PSTQ1_MASK
)

	)

3144 
	#ENET_MAC_RXQ_CTRL_RXQ0EN_MASK
 (0x3U)

	)

3145 
	#ENET_MAC_RXQ_CTRL_RXQ0EN_SHIFT
 (0U)

	)

3146 
	#ENET_MAC_RXQ_CTRL_RXQ0EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_RXQ_CTRL_RXQ0EN_SHIFT
)Ë& 
ENET_MAC_RXQ_CTRL_RXQ0EN_MASK
)

	)

3147 
	#ENET_MAC_RXQ_CTRL_PSRQ0_MASK
 (0xFFU)

	)

3148 
	#ENET_MAC_RXQ_CTRL_PSRQ0_SHIFT
 (0U)

	)

3149 
	#ENET_MAC_RXQ_CTRL_PSRQ0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_RXQ_CTRL_PSRQ0_SHIFT
)Ë& 
ENET_MAC_RXQ_CTRL_PSRQ0_MASK
)

	)

3150 
	#ENET_MAC_RXQ_CTRL_AVCPQ_MASK
 (0x7U)

	)

3151 
	#ENET_MAC_RXQ_CTRL_AVCPQ_SHIFT
 (0U)

	)

3152 
	#ENET_MAC_RXQ_CTRL_AVCPQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_RXQ_CTRL_AVCPQ_SHIFT
)Ë& 
ENET_MAC_RXQ_CTRL_AVCPQ_MASK
)

	)

3153 
	#ENET_MAC_RXQ_CTRL_RXQ1EN_MASK
 (0xCU)

	)

3154 
	#ENET_MAC_RXQ_CTRL_RXQ1EN_SHIFT
 (2U)

	)

3155 
	#ENET_MAC_RXQ_CTRL_RXQ1EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_RXQ_CTRL_RXQ1EN_SHIFT
)Ë& 
ENET_MAC_RXQ_CTRL_RXQ1EN_MASK
)

	)

3156 
	#ENET_MAC_RXQ_CTRL_AVPTPQ_MASK
 (0x70U)

	)

3157 
	#ENET_MAC_RXQ_CTRL_AVPTPQ_SHIFT
 (4U)

	)

3158 
	#ENET_MAC_RXQ_CTRL_AVPTPQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_RXQ_CTRL_AVPTPQ_SHIFT
)Ë& 
ENET_MAC_RXQ_CTRL_AVPTPQ_MASK
)

	)

3159 
	#ENET_MAC_RXQ_CTRL_PSRQ1_MASK
 (0xFF00U)

	)

3160 
	#ENET_MAC_RXQ_CTRL_PSRQ1_SHIFT
 (8U)

	)

3161 
	#ENET_MAC_RXQ_CTRL_PSRQ1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_RXQ_CTRL_PSRQ1_SHIFT
)Ë& 
ENET_MAC_RXQ_CTRL_PSRQ1_MASK
)

	)

3162 
	#ENET_MAC_RXQ_CTRL_UPQ_MASK
 (0x7000U)

	)

3163 
	#ENET_MAC_RXQ_CTRL_UPQ_SHIFT
 (12U)

	)

3164 
	#ENET_MAC_RXQ_CTRL_UPQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_RXQ_CTRL_UPQ_SHIFT
)Ë& 
ENET_MAC_RXQ_CTRL_UPQ_MASK
)

	)

3165 
	#ENET_MAC_RXQ_CTRL_PSRQ2_MASK
 (0xFF0000U)

	)

3166 
	#ENET_MAC_RXQ_CTRL_PSRQ2_SHIFT
 (16U)

	)

3167 
	#ENET_MAC_RXQ_CTRL_PSRQ2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_RXQ_CTRL_PSRQ2_SHIFT
)Ë& 
ENET_MAC_RXQ_CTRL_PSRQ2_MASK
)

	)

3168 
	#ENET_MAC_RXQ_CTRL_MCBCQ_MASK
 (0x70000U)

	)

3169 
	#ENET_MAC_RXQ_CTRL_MCBCQ_SHIFT
 (16U)

	)

3170 
	#ENET_MAC_RXQ_CTRL_MCBCQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_RXQ_CTRL_MCBCQ_SHIFT
)Ë& 
ENET_MAC_RXQ_CTRL_MCBCQ_MASK
)

	)

3171 
	#ENET_MAC_RXQ_CTRL_MCBCQEN_MASK
 (0x100000U)

	)

3172 
	#ENET_MAC_RXQ_CTRL_MCBCQEN_SHIFT
 (20U)

	)

3173 
	#ENET_MAC_RXQ_CTRL_MCBCQEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_RXQ_CTRL_MCBCQEN_SHIFT
)Ë& 
ENET_MAC_RXQ_CTRL_MCBCQEN_MASK
)

	)

3174 
	#ENET_MAC_RXQ_CTRL_PSRQ3_MASK
 (0xFF000000U)

	)

3175 
	#ENET_MAC_RXQ_CTRL_PSRQ3_SHIFT
 (24U)

	)

3176 
	#ENET_MAC_RXQ_CTRL_PSRQ3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_RXQ_CTRL_PSRQ3_SHIFT
)Ë& 
ENET_MAC_RXQ_CTRL_PSRQ3_MASK
)

	)

3179 
	#ENET_MAC_RXQ_CTRL_COUNT
 (3U)

	)

3182 
	#ENET_MAC_INTR_STAT_PHYIS_MASK
 (0x8U)

	)

3183 
	#ENET_MAC_INTR_STAT_PHYIS_SHIFT
 (3U)

	)

3184 
	#ENET_MAC_INTR_STAT_PHYIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_INTR_STAT_PHYIS_SHIFT
)Ë& 
ENET_MAC_INTR_STAT_PHYIS_MASK
)

	)

3185 
	#ENET_MAC_INTR_STAT_PMTIS_MASK
 (0x10U)

	)

3186 
	#ENET_MAC_INTR_STAT_PMTIS_SHIFT
 (4U)

	)

3187 
	#ENET_MAC_INTR_STAT_PMTIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_INTR_STAT_PMTIS_SHIFT
)Ë& 
ENET_MAC_INTR_STAT_PMTIS_MASK
)

	)

3188 
	#ENET_MAC_INTR_STAT_LPIIS_MASK
 (0x20U)

	)

3189 
	#ENET_MAC_INTR_STAT_LPIIS_SHIFT
 (5U)

	)

3190 
	#ENET_MAC_INTR_STAT_LPIIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_INTR_STAT_LPIIS_SHIFT
)Ë& 
ENET_MAC_INTR_STAT_LPIIS_MASK
)

	)

3191 
	#ENET_MAC_INTR_STAT_TSIS_MASK
 (0x1000U)

	)

3192 
	#ENET_MAC_INTR_STAT_TSIS_SHIFT
 (12U)

	)

3193 
	#ENET_MAC_INTR_STAT_TSIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_INTR_STAT_TSIS_SHIFT
)Ë& 
ENET_MAC_INTR_STAT_TSIS_MASK
)

	)

3194 
	#ENET_MAC_INTR_STAT_TXSTSIS_MASK
 (0x2000U)

	)

3195 
	#ENET_MAC_INTR_STAT_TXSTSIS_SHIFT
 (13U)

	)

3196 
	#ENET_MAC_INTR_STAT_TXSTSIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_INTR_STAT_TXSTSIS_SHIFT
)Ë& 
ENET_MAC_INTR_STAT_TXSTSIS_MASK
)

	)

3197 
	#ENET_MAC_INTR_STAT_RXSTSIS_MASK
 (0x4000U)

	)

3198 
	#ENET_MAC_INTR_STAT_RXSTSIS_SHIFT
 (14U)

	)

3199 
	#ENET_MAC_INTR_STAT_RXSTSIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_INTR_STAT_RXSTSIS_SHIFT
)Ë& 
ENET_MAC_INTR_STAT_RXSTSIS_MASK
)

	)

3202 
	#ENET_MAC_INTR_EN_PHYIE_MASK
 (0x8U)

	)

3203 
	#ENET_MAC_INTR_EN_PHYIE_SHIFT
 (3U)

	)

3204 
	#ENET_MAC_INTR_EN_PHYIE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_INTR_EN_PHYIE_SHIFT
)Ë& 
ENET_MAC_INTR_EN_PHYIE_MASK
)

	)

3205 
	#ENET_MAC_INTR_EN_PMTIE_MASK
 (0x10U)

	)

3206 
	#ENET_MAC_INTR_EN_PMTIE_SHIFT
 (4U)

	)

3207 
	#ENET_MAC_INTR_EN_PMTIE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_INTR_EN_PMTIE_SHIFT
)Ë& 
ENET_MAC_INTR_EN_PMTIE_MASK
)

	)

3208 
	#ENET_MAC_INTR_EN_LPIIE_MASK
 (0x20U)

	)

3209 
	#ENET_MAC_INTR_EN_LPIIE_SHIFT
 (5U)

	)

3210 
	#ENET_MAC_INTR_EN_LPIIE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_INTR_EN_LPIIE_SHIFT
)Ë& 
ENET_MAC_INTR_EN_LPIIE_MASK
)

	)

3211 
	#ENET_MAC_INTR_EN_TSIE_MASK
 (0x1000U)

	)

3212 
	#ENET_MAC_INTR_EN_TSIE_SHIFT
 (12U)

	)

3213 
	#ENET_MAC_INTR_EN_TSIE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_INTR_EN_TSIE_SHIFT
)Ë& 
ENET_MAC_INTR_EN_TSIE_MASK
)

	)

3214 
	#ENET_MAC_INTR_EN_TXSTSIE_MASK
 (0x2000U)

	)

3215 
	#ENET_MAC_INTR_EN_TXSTSIE_SHIFT
 (13U)

	)

3216 
	#ENET_MAC_INTR_EN_TXSTSIE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_INTR_EN_TXSTSIE_SHIFT
)Ë& 
ENET_MAC_INTR_EN_TXSTSIE_MASK
)

	)

3217 
	#ENET_MAC_INTR_EN_RXSTSIS_MASK
 (0x4000U)

	)

3218 
	#ENET_MAC_INTR_EN_RXSTSIS_SHIFT
 (14U)

	)

3219 
	#ENET_MAC_INTR_EN_RXSTSIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_INTR_EN_RXSTSIS_SHIFT
)Ë& 
ENET_MAC_INTR_EN_RXSTSIS_MASK
)

	)

3222 
	#ENET_MAC_RXTX_STAT_TJT_MASK
 (0x1U)

	)

3223 
	#ENET_MAC_RXTX_STAT_TJT_SHIFT
 (0U)

	)

3224 
	#ENET_MAC_RXTX_STAT_TJT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_RXTX_STAT_TJT_SHIFT
)Ë& 
ENET_MAC_RXTX_STAT_TJT_MASK
)

	)

3225 
	#ENET_MAC_RXTX_STAT_NCARR_MASK
 (0x2U)

	)

3226 
	#ENET_MAC_RXTX_STAT_NCARR_SHIFT
 (1U)

	)

3227 
	#ENET_MAC_RXTX_STAT_NCARR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_RXTX_STAT_NCARR_SHIFT
)Ë& 
ENET_MAC_RXTX_STAT_NCARR_MASK
)

	)

3228 
	#ENET_MAC_RXTX_STAT_LCARR_MASK
 (0x4U)

	)

3229 
	#ENET_MAC_RXTX_STAT_LCARR_SHIFT
 (2U)

	)

3230 
	#ENET_MAC_RXTX_STAT_LCARR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_RXTX_STAT_LCARR_SHIFT
)Ë& 
ENET_MAC_RXTX_STAT_LCARR_MASK
)

	)

3231 
	#ENET_MAC_RXTX_STAT_EXDEF_MASK
 (0x8U)

	)

3232 
	#ENET_MAC_RXTX_STAT_EXDEF_SHIFT
 (3U)

	)

3233 
	#ENET_MAC_RXTX_STAT_EXDEF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_RXTX_STAT_EXDEF_SHIFT
)Ë& 
ENET_MAC_RXTX_STAT_EXDEF_MASK
)

	)

3234 
	#ENET_MAC_RXTX_STAT_LCOL_MASK
 (0x10U)

	)

3235 
	#ENET_MAC_RXTX_STAT_LCOL_SHIFT
 (4U)

	)

3236 
	#ENET_MAC_RXTX_STAT_LCOL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_RXTX_STAT_LCOL_SHIFT
)Ë& 
ENET_MAC_RXTX_STAT_LCOL_MASK
)

	)

3237 
	#ENET_MAC_RXTX_STAT_EXCOL_MASK
 (0x20U)

	)

3238 
	#ENET_MAC_RXTX_STAT_EXCOL_SHIFT
 (5U)

	)

3239 
	#ENET_MAC_RXTX_STAT_EXCOL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_RXTX_STAT_EXCOL_SHIFT
)Ë& 
ENET_MAC_RXTX_STAT_EXCOL_MASK
)

	)

3240 
	#ENET_MAC_RXTX_STAT_RWT_MASK
 (0x100U)

	)

3241 
	#ENET_MAC_RXTX_STAT_RWT_SHIFT
 (8U)

	)

3242 
	#ENET_MAC_RXTX_STAT_RWT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_RXTX_STAT_RWT_SHIFT
)Ë& 
ENET_MAC_RXTX_STAT_RWT_MASK
)

	)

3245 
	#ENET_MAC_PMT_CRTL_STAT_PWRDWN_MASK
 (0x1U)

	)

3246 
	#ENET_MAC_PMT_CRTL_STAT_PWRDWN_SHIFT
 (0U)

	)

3247 
	#ENET_MAC_PMT_CRTL_STAT_PWRDWN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_PMT_CRTL_STAT_PWRDWN_SHIFT
)Ë& 
ENET_MAC_PMT_CRTL_STAT_PWRDWN_MASK
)

	)

3248 
	#ENET_MAC_PMT_CRTL_STAT_MGKPKTEN_MASK
 (0x2U)

	)

3249 
	#ENET_MAC_PMT_CRTL_STAT_MGKPKTEN_SHIFT
 (1U)

	)

3250 
	#ENET_MAC_PMT_CRTL_STAT_MGKPKTEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_PMT_CRTL_STAT_MGKPKTEN_SHIFT
)Ë& 
ENET_MAC_PMT_CRTL_STAT_MGKPKTEN_MASK
)

	)

3251 
	#ENET_MAC_PMT_CRTL_STAT_RWKPKTEN_MASK
 (0x4U)

	)

3252 
	#ENET_MAC_PMT_CRTL_STAT_RWKPKTEN_SHIFT
 (2U)

	)

3253 
	#ENET_MAC_PMT_CRTL_STAT_RWKPKTEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_PMT_CRTL_STAT_RWKPKTEN_SHIFT
)Ë& 
ENET_MAC_PMT_CRTL_STAT_RWKPKTEN_MASK
)

	)

3254 
	#ENET_MAC_PMT_CRTL_STAT_MGKPRCVD_MASK
 (0x20U)

	)

3255 
	#ENET_MAC_PMT_CRTL_STAT_MGKPRCVD_SHIFT
 (5U)

	)

3256 
	#ENET_MAC_PMT_CRTL_STAT_MGKPRCVD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_PMT_CRTL_STAT_MGKPRCVD_SHIFT
)Ë& 
ENET_MAC_PMT_CRTL_STAT_MGKPRCVD_MASK
)

	)

3257 
	#ENET_MAC_PMT_CRTL_STAT_RWKPRCVD_MASK
 (0x40U)

	)

3258 
	#ENET_MAC_PMT_CRTL_STAT_RWKPRCVD_SHIFT
 (6U)

	)

3259 
	#ENET_MAC_PMT_CRTL_STAT_RWKPRCVD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_PMT_CRTL_STAT_RWKPRCVD_SHIFT
)Ë& 
ENET_MAC_PMT_CRTL_STAT_RWKPRCVD_MASK
)

	)

3260 
	#ENET_MAC_PMT_CRTL_STAT_GLBLUCAST_MASK
 (0x200U)

	)

3261 
	#ENET_MAC_PMT_CRTL_STAT_GLBLUCAST_SHIFT
 (9U)

	)

3262 
	#ENET_MAC_PMT_CRTL_STAT_GLBLUCAST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_PMT_CRTL_STAT_GLBLUCAST_SHIFT
)Ë& 
ENET_MAC_PMT_CRTL_STAT_GLBLUCAST_MASK
)

	)

3263 
	#ENET_MAC_PMT_CRTL_STAT_RWKPFE_MASK
 (0x400U)

	)

3264 
	#ENET_MAC_PMT_CRTL_STAT_RWKPFE_SHIFT
 (10U)

	)

3265 
	#ENET_MAC_PMT_CRTL_STAT_RWKPFE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_PMT_CRTL_STAT_RWKPFE_SHIFT
)Ë& 
ENET_MAC_PMT_CRTL_STAT_RWKPFE_MASK
)

	)

3266 
	#ENET_MAC_PMT_CRTL_STAT_RWKPTR_MASK
 (0x1F000000U)

	)

3267 
	#ENET_MAC_PMT_CRTL_STAT_RWKPTR_SHIFT
 (24U)

	)

3268 
	#ENET_MAC_PMT_CRTL_STAT_RWKPTR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_PMT_CRTL_STAT_RWKPTR_SHIFT
)Ë& 
ENET_MAC_PMT_CRTL_STAT_RWKPTR_MASK
)

	)

3269 
	#ENET_MAC_PMT_CRTL_STAT_RWKFILTRST_MASK
 (0x80000000U)

	)

3270 
	#ENET_MAC_PMT_CRTL_STAT_RWKFILTRST_SHIFT
 (31U)

	)

3271 
	#ENET_MAC_PMT_CRTL_STAT_RWKFILTRST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_PMT_CRTL_STAT_RWKFILTRST_SHIFT
)Ë& 
ENET_MAC_PMT_CRTL_STAT_RWKFILTRST_MASK
)

	)

3274 
	#ENET_MAC_RWAKE_FRFLT_ADDR_MASK
 (0xFFFFFFFFU)

	)

3275 
	#ENET_MAC_RWAKE_FRFLT_ADDR_SHIFT
 (0U)

	)

3276 
	#ENET_MAC_RWAKE_FRFLT_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_RWAKE_FRFLT_ADDR_SHIFT
)Ë& 
ENET_MAC_RWAKE_FRFLT_ADDR_MASK
)

	)

3279 
	#ENET_MAC_LPI_CTRL_STAT_TLPIEN_MASK
 (0x1U)

	)

3280 
	#ENET_MAC_LPI_CTRL_STAT_TLPIEN_SHIFT
 (0U)

	)

3281 
	#ENET_MAC_LPI_CTRL_STAT_TLPIEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_LPI_CTRL_STAT_TLPIEN_SHIFT
)Ë& 
ENET_MAC_LPI_CTRL_STAT_TLPIEN_MASK
)

	)

3282 
	#ENET_MAC_LPI_CTRL_STAT_TLPIEX_MASK
 (0x2U)

	)

3283 
	#ENET_MAC_LPI_CTRL_STAT_TLPIEX_SHIFT
 (1U)

	)

3284 
	#ENET_MAC_LPI_CTRL_STAT_TLPIEX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_LPI_CTRL_STAT_TLPIEX_SHIFT
)Ë& 
ENET_MAC_LPI_CTRL_STAT_TLPIEX_MASK
)

	)

3285 
	#ENET_MAC_LPI_CTRL_STAT_RLPIEN_MASK
 (0x4U)

	)

3286 
	#ENET_MAC_LPI_CTRL_STAT_RLPIEN_SHIFT
 (2U)

	)

3287 
	#ENET_MAC_LPI_CTRL_STAT_RLPIEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_LPI_CTRL_STAT_RLPIEN_SHIFT
)Ë& 
ENET_MAC_LPI_CTRL_STAT_RLPIEN_MASK
)

	)

3288 
	#ENET_MAC_LPI_CTRL_STAT_RLPIEX_MASK
 (0x8U)

	)

3289 
	#ENET_MAC_LPI_CTRL_STAT_RLPIEX_SHIFT
 (3U)

	)

3290 
	#ENET_MAC_LPI_CTRL_STAT_RLPIEX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_LPI_CTRL_STAT_RLPIEX_SHIFT
)Ë& 
ENET_MAC_LPI_CTRL_STAT_RLPIEX_MASK
)

	)

3291 
	#ENET_MAC_LPI_CTRL_STAT_TLPIST_MASK
 (0x100U)

	)

3292 
	#ENET_MAC_LPI_CTRL_STAT_TLPIST_SHIFT
 (8U)

	)

3293 
	#ENET_MAC_LPI_CTRL_STAT_TLPIST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_LPI_CTRL_STAT_TLPIST_SHIFT
)Ë& 
ENET_MAC_LPI_CTRL_STAT_TLPIST_MASK
)

	)

3294 
	#ENET_MAC_LPI_CTRL_STAT_RLPIST_MASK
 (0x200U)

	)

3295 
	#ENET_MAC_LPI_CTRL_STAT_RLPIST_SHIFT
 (9U)

	)

3296 
	#ENET_MAC_LPI_CTRL_STAT_RLPIST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_LPI_CTRL_STAT_RLPIST_SHIFT
)Ë& 
ENET_MAC_LPI_CTRL_STAT_RLPIST_MASK
)

	)

3297 
	#ENET_MAC_LPI_CTRL_STAT_LPIEN_MASK
 (0x10000U)

	)

3298 
	#ENET_MAC_LPI_CTRL_STAT_LPIEN_SHIFT
 (16U)

	)

3299 
	#ENET_MAC_LPI_CTRL_STAT_LPIEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_LPI_CTRL_STAT_LPIEN_SHIFT
)Ë& 
ENET_MAC_LPI_CTRL_STAT_LPIEN_MASK
)

	)

3300 
	#ENET_MAC_LPI_CTRL_STAT_PLS_MASK
 (0x20000U)

	)

3301 
	#ENET_MAC_LPI_CTRL_STAT_PLS_SHIFT
 (17U)

	)

3302 
	#ENET_MAC_LPI_CTRL_STAT_PLS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_LPI_CTRL_STAT_PLS_SHIFT
)Ë& 
ENET_MAC_LPI_CTRL_STAT_PLS_MASK
)

	)

3303 
	#ENET_MAC_LPI_CTRL_STAT_LPITXA_MASK
 (0x80000U)

	)

3304 
	#ENET_MAC_LPI_CTRL_STAT_LPITXA_SHIFT
 (19U)

	)

3305 
	#ENET_MAC_LPI_CTRL_STAT_LPITXA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_LPI_CTRL_STAT_LPITXA_SHIFT
)Ë& 
ENET_MAC_LPI_CTRL_STAT_LPITXA_MASK
)

	)

3306 
	#ENET_MAC_LPI_CTRL_STAT_LPIATE_MASK
 (0x100000U)

	)

3307 
	#ENET_MAC_LPI_CTRL_STAT_LPIATE_SHIFT
 (20U)

	)

3308 
	#ENET_MAC_LPI_CTRL_STAT_LPIATE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_LPI_CTRL_STAT_LPIATE_SHIFT
)Ë& 
ENET_MAC_LPI_CTRL_STAT_LPIATE_MASK
)

	)

3309 
	#ENET_MAC_LPI_CTRL_STAT_LPITCSE_MASK
 (0x200000U)

	)

3310 
	#ENET_MAC_LPI_CTRL_STAT_LPITCSE_SHIFT
 (21U)

	)

3311 
	#ENET_MAC_LPI_CTRL_STAT_LPITCSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_LPI_CTRL_STAT_LPITCSE_SHIFT
)Ë& 
ENET_MAC_LPI_CTRL_STAT_LPITCSE_MASK
)

	)

3314 
	#ENET_MAC_LPI_TIMER_CTRL_TWT_MASK
 (0xFFFFU)

	)

3315 
	#ENET_MAC_LPI_TIMER_CTRL_TWT_SHIFT
 (0U)

	)

3316 
	#ENET_MAC_LPI_TIMER_CTRL_TWT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_LPI_TIMER_CTRL_TWT_SHIFT
)Ë& 
ENET_MAC_LPI_TIMER_CTRL_TWT_MASK
)

	)

3317 
	#ENET_MAC_LPI_TIMER_CTRL_LST_MASK
 (0x3FF0000U)

	)

3318 
	#ENET_MAC_LPI_TIMER_CTRL_LST_SHIFT
 (16U)

	)

3319 
	#ENET_MAC_LPI_TIMER_CTRL_LST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_LPI_TIMER_CTRL_LST_SHIFT
)Ë& 
ENET_MAC_LPI_TIMER_CTRL_LST_MASK
)

	)

3322 
	#ENET_MAC_LPI_ENTR_TIMR_LPIET_MASK
 (0xFFFF8U)

	)

3323 
	#ENET_MAC_LPI_ENTR_TIMR_LPIET_SHIFT
 (3U)

	)

3324 
	#ENET_MAC_LPI_ENTR_TIMR_LPIET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_LPI_ENTR_TIMR_LPIET_SHIFT
)Ë& 
ENET_MAC_LPI_ENTR_TIMR_LPIET_MASK
)

	)

3327 
	#ENET_MAC_1US_TIC_COUNTR_TIC_1US_CNTR_MASK
 (0xFFFU)

	)

3328 
	#ENET_MAC_1US_TIC_COUNTR_TIC_1US_CNTR_SHIFT
 (0U)

	)

3329 
	#ENET_MAC_1US_TIC_COUNTR_TIC_1US_CNTR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_1US_TIC_COUNTR_TIC_1US_CNTR_SHIFT
)Ë& 
ENET_MAC_1US_TIC_COUNTR_TIC_1US_CNTR_MASK
)

	)

3332 
	#ENET_MAC_VERSION_SNPVER_MASK
 (0xFFU)

	)

3333 
	#ENET_MAC_VERSION_SNPVER_SHIFT
 (0U)

	)

3334 
	#ENET_MAC_VERSION_SNPVER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_VERSION_SNPVER_SHIFT
)Ë& 
ENET_MAC_VERSION_SNPVER_MASK
)

	)

3335 
	#ENET_MAC_VERSION_USERVER_MASK
 (0xFF00U)

	)

3336 
	#ENET_MAC_VERSION_USERVER_SHIFT
 (8U)

	)

3337 
	#ENET_MAC_VERSION_USERVER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_VERSION_USERVER_SHIFT
)Ë& 
ENET_MAC_VERSION_USERVER_MASK
)

	)

3340 
	#ENET_MAC_DBG_REPESTS_MASK
 (0x1U)

	)

3341 
	#ENET_MAC_DBG_REPESTS_SHIFT
 (0U)

	)

3342 
	#ENET_MAC_DBG_REPESTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_DBG_REPESTS_SHIFT
)Ë& 
ENET_MAC_DBG_REPESTS_MASK
)

	)

3343 
	#ENET_MAC_DBG_RFCFCSTS_MASK
 (0x6U)

	)

3344 
	#ENET_MAC_DBG_RFCFCSTS_SHIFT
 (1U)

	)

3345 
	#ENET_MAC_DBG_RFCFCSTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_DBG_RFCFCSTS_SHIFT
)Ë& 
ENET_MAC_DBG_RFCFCSTS_MASK
)

	)

3346 
	#ENET_MAC_DBG_TPESTS_MASK
 (0x10000U)

	)

3347 
	#ENET_MAC_DBG_TPESTS_SHIFT
 (16U)

	)

3348 
	#ENET_MAC_DBG_TPESTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_DBG_TPESTS_SHIFT
)Ë& 
ENET_MAC_DBG_TPESTS_MASK
)

	)

3349 
	#ENET_MAC_DBG_TFCSTS_MASK
 (0x60000U)

	)

3350 
	#ENET_MAC_DBG_TFCSTS_SHIFT
 (17U)

	)

3351 
	#ENET_MAC_DBG_TFCSTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_DBG_TFCSTS_SHIFT
)Ë& 
ENET_MAC_DBG_TFCSTS_MASK
)

	)

3354 
	#ENET_MAC_HW_FEAT_RXFIFOSIZE_MASK
 (0x1FU)

	)

3355 
	#ENET_MAC_HW_FEAT_RXFIFOSIZE_SHIFT
 (0U)

	)

3356 
	#ENET_MAC_HW_FEAT_RXFIFOSIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_RXFIFOSIZE_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_RXFIFOSIZE_MASK
)

	)

3357 
	#ENET_MAC_HW_FEAT_RXQCNT_MASK
 (0xFU)

	)

3358 
	#ENET_MAC_HW_FEAT_RXQCNT_SHIFT
 (0U)

	)

3359 
	#ENET_MAC_HW_FEAT_RXQCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_RXQCNT_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_RXQCNT_MASK
)

	)

3360 
	#ENET_MAC_HW_FEAT_MIISEL_MASK
 (0x1U)

	)

3361 
	#ENET_MAC_HW_FEAT_MIISEL_SHIFT
 (0U)

	)

3362 
	#ENET_MAC_HW_FEAT_MIISEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_MIISEL_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_MIISEL_MASK
)

	)

3363 
	#ENET_MAC_HW_FEAT_HDSEL_MASK
 (0x4U)

	)

3364 
	#ENET_MAC_HW_FEAT_HDSEL_SHIFT
 (2U)

	)

3365 
	#ENET_MAC_HW_FEAT_HDSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_HDSEL_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_HDSEL_MASK
)

	)

3366 
	#ENET_MAC_HW_FEAT_VLHASH_MASK
 (0x10U)

	)

3367 
	#ENET_MAC_HW_FEAT_VLHASH_SHIFT
 (4U)

	)

3368 
	#ENET_MAC_HW_FEAT_VLHASH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_VLHASH_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_VLHASH_MASK
)

	)

3369 
	#ENET_MAC_HW_FEAT_SMASEL_MASK
 (0x20U)

	)

3370 
	#ENET_MAC_HW_FEAT_SMASEL_SHIFT
 (5U)

	)

3371 
	#ENET_MAC_HW_FEAT_SMASEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_SMASEL_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_SMASEL_MASK
)

	)

3372 
	#ENET_MAC_HW_FEAT_TXQCNT_MASK
 (0x3C0U)

	)

3373 
	#ENET_MAC_HW_FEAT_TXQCNT_SHIFT
 (6U)

	)

3374 
	#ENET_MAC_HW_FEAT_TXQCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_TXQCNT_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_TXQCNT_MASK
)

	)

3375 
	#ENET_MAC_HW_FEAT_RWKSEL_MASK
 (0x40U)

	)

3376 
	#ENET_MAC_HW_FEAT_RWKSEL_SHIFT
 (6U)

	)

3377 
	#ENET_MAC_HW_FEAT_RWKSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_RWKSEL_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_RWKSEL_MASK
)

	)

3378 
	#ENET_MAC_HW_FEAT_TXFIFOSIZE_MASK
 (0x7C0U)

	)

3379 
	#ENET_MAC_HW_FEAT_TXFIFOSIZE_SHIFT
 (6U)

	)

3380 
	#ENET_MAC_HW_FEAT_TXFIFOSIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_TXFIFOSIZE_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_TXFIFOSIZE_MASK
)

	)

3381 
	#ENET_MAC_HW_FEAT_MGKSEL_MASK
 (0x80U)

	)

3382 
	#ENET_MAC_HW_FEAT_MGKSEL_SHIFT
 (7U)

	)

3383 
	#ENET_MAC_HW_FEAT_MGKSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_MGKSEL_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_MGKSEL_MASK
)

	)

3384 
	#ENET_MAC_HW_FEAT_MMCSEL_MASK
 (0x100U)

	)

3385 
	#ENET_MAC_HW_FEAT_MMCSEL_SHIFT
 (8U)

	)

3386 
	#ENET_MAC_HW_FEAT_MMCSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_MMCSEL_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_MMCSEL_MASK
)

	)

3387 
	#ENET_MAC_HW_FEAT_ARPOFFSEL_MASK
 (0x200U)

	)

3388 
	#ENET_MAC_HW_FEAT_ARPOFFSEL_SHIFT
 (9U)

	)

3389 
	#ENET_MAC_HW_FEAT_ARPOFFSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_ARPOFFSEL_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_ARPOFFSEL_MASK
)

	)

3390 
	#ENET_MAC_HW_FEAT_OSTEN_MASK
 (0x800U)

	)

3391 
	#ENET_MAC_HW_FEAT_OSTEN_SHIFT
 (11U)

	)

3392 
	#ENET_MAC_HW_FEAT_OSTEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_OSTEN_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_OSTEN_MASK
)

	)

3393 
	#ENET_MAC_HW_FEAT_RXCHCNT_MASK
 (0xF000U)

	)

3394 
	#ENET_MAC_HW_FEAT_RXCHCNT_SHIFT
 (12U)

	)

3395 
	#ENET_MAC_HW_FEAT_RXCHCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_RXCHCNT_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_RXCHCNT_MASK
)

	)

3396 
	#ENET_MAC_HW_FEAT_TSSEL_MASK
 (0x1000U)

	)

3397 
	#ENET_MAC_HW_FEAT_TSSEL_SHIFT
 (12U)

	)

3398 
	#ENET_MAC_HW_FEAT_TSSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_TSSEL_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_TSSEL_MASK
)

	)

3399 
	#ENET_MAC_HW_FEAT_PTOEN_MASK
 (0x1000U)

	)

3400 
	#ENET_MAC_HW_FEAT_PTOEN_SHIFT
 (12U)

	)

3401 
	#ENET_MAC_HW_FEAT_PTOEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_PTOEN_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_PTOEN_MASK
)

	)

3402 
	#ENET_MAC_HW_FEAT_EEESEL_MASK
 (0x2000U)

	)

3403 
	#ENET_MAC_HW_FEAT_EEESEL_SHIFT
 (13U)

	)

3404 
	#ENET_MAC_HW_FEAT_EEESEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_EEESEL_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_EEESEL_MASK
)

	)

3405 
	#ENET_MAC_HW_FEAT_ADVTHWORD_MASK
 (0x2000U)

	)

3406 
	#ENET_MAC_HW_FEAT_ADVTHWORD_SHIFT
 (13U)

	)

3407 
	#ENET_MAC_HW_FEAT_ADVTHWORD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_ADVTHWORD_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_ADVTHWORD_MASK
)

	)

3408 
	#ENET_MAC_HW_FEAT_ADDR64_MASK
 (0xC000U)

	)

3409 
	#ENET_MAC_HW_FEAT_ADDR64_SHIFT
 (14U)

	)

3410 
	#ENET_MAC_HW_FEAT_ADDR64
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_ADDR64_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_ADDR64_MASK
)

	)

3411 
	#ENET_MAC_HW_FEAT_TXCOESEL_MASK
 (0x4000U)

	)

3412 
	#ENET_MAC_HW_FEAT_TXCOESEL_SHIFT
 (14U)

	)

3413 
	#ENET_MAC_HW_FEAT_TXCOESEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_TXCOESEL_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_TXCOESEL_MASK
)

	)

3414 
	#ENET_MAC_HW_FEAT_DCBEN_MASK
 (0x10000U)

	)

3415 
	#ENET_MAC_HW_FEAT_DCBEN_SHIFT
 (16U)

	)

3416 
	#ENET_MAC_HW_FEAT_DCBEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_DCBEN_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_DCBEN_MASK
)

	)

3417 
	#ENET_MAC_HW_FEAT_RXCOESEL_MASK
 (0x10000U)

	)

3418 
	#ENET_MAC_HW_FEAT_RXCOESEL_SHIFT
 (16U)

	)

3419 
	#ENET_MAC_HW_FEAT_RXCOESEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_RXCOESEL_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_RXCOESEL_MASK
)

	)

3420 
	#ENET_MAC_HW_FEAT_SPEN_MASK
 (0x20000U)

	)

3421 
	#ENET_MAC_HW_FEAT_SPEN_SHIFT
 (17U)

	)

3422 
	#ENET_MAC_HW_FEAT_SPEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_SPEN_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_SPEN_MASK
)

	)

3423 
	#ENET_MAC_HW_FEAT_TXCHCNT_MASK
 (0x3C0000U)

	)

3424 
	#ENET_MAC_HW_FEAT_TXCHCNT_SHIFT
 (18U)

	)

3425 
	#ENET_MAC_HW_FEAT_TXCHCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_TXCHCNT_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_TXCHCNT_MASK
)

	)

3426 
	#ENET_MAC_HW_FEAT_TSOEN_MASK
 (0x40000U)

	)

3427 
	#ENET_MAC_HW_FEAT_TSOEN_SHIFT
 (18U)

	)

3428 
	#ENET_MAC_HW_FEAT_TSOEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_TSOEN_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_TSOEN_MASK
)

	)

3429 
	#ENET_MAC_HW_FEAT_DBGMEMA_MASK
 (0x80000U)

	)

3430 
	#ENET_MAC_HW_FEAT_DBGMEMA_SHIFT
 (19U)

	)

3431 
	#ENET_MAC_HW_FEAT_DBGMEMA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_DBGMEMA_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_DBGMEMA_MASK
)

	)

3432 
	#ENET_MAC_HW_FEAT_AVSEL_MASK
 (0x100000U)

	)

3433 
	#ENET_MAC_HW_FEAT_AVSEL_SHIFT
 (20U)

	)

3434 
	#ENET_MAC_HW_FEAT_AVSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_AVSEL_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_AVSEL_MASK
)

	)

3435 
	#ENET_MAC_HW_FEAT_LPMODEEN_MASK
 (0x800000U)

	)

3436 
	#ENET_MAC_HW_FEAT_LPMODEEN_SHIFT
 (23U)

	)

3437 
	#ENET_MAC_HW_FEAT_LPMODEEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_LPMODEEN_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_LPMODEEN_MASK
)

	)

3438 
	#ENET_MAC_HW_FEAT_PPSOUTNUM_MASK
 (0x7000000U)

	)

3439 
	#ENET_MAC_HW_FEAT_PPSOUTNUM_SHIFT
 (24U)

	)

3440 
	#ENET_MAC_HW_FEAT_PPSOUTNUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_PPSOUTNUM_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_PPSOUTNUM_MASK
)

	)

3441 
	#ENET_MAC_HW_FEAT_HASHTBLSZ_MASK
 (0x3000000U)

	)

3442 
	#ENET_MAC_HW_FEAT_HASHTBLSZ_SHIFT
 (24U)

	)

3443 
	#ENET_MAC_HW_FEAT_HASHTBLSZ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_HASHTBLSZ_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_HASHTBLSZ_MASK
)

	)

3444 
	#ENET_MAC_HW_FEAT_TSSTSSEL_MASK
 (0x6000000U)

	)

3445 
	#ENET_MAC_HW_FEAT_TSSTSSEL_SHIFT
 (25U)

	)

3446 
	#ENET_MAC_HW_FEAT_TSSTSSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_TSSTSSEL_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_TSSTSSEL_MASK
)

	)

3447 
	#ENET_MAC_HW_FEAT_L3_L4_FILTER_MASK
 (0x78000000U)

	)

3448 
	#ENET_MAC_HW_FEAT_L3_L4_FILTER_SHIFT
 (27U)

	)

3449 
	#ENET_MAC_HW_FEAT_L3_L4_FILTER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_L3_L4_FILTER_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_L3_L4_FILTER_MASK
)

	)

3450 
	#ENET_MAC_HW_FEAT_AUXSNAPNUM_MASK
 (0x70000000U)

	)

3451 
	#ENET_MAC_HW_FEAT_AUXSNAPNUM_SHIFT
 (28U)

	)

3452 
	#ENET_MAC_HW_FEAT_AUXSNAPNUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_AUXSNAPNUM_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_AUXSNAPNUM_MASK
)

	)

3453 
	#ENET_MAC_HW_FEAT_ACTPHYSEL_MASK
 (0x70000000U)

	)

3454 
	#ENET_MAC_HW_FEAT_ACTPHYSEL_SHIFT
 (28U)

	)

3455 
	#ENET_MAC_HW_FEAT_ACTPHYSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_HW_FEAT_ACTPHYSEL_SHIFT
)Ë& 
ENET_MAC_HW_FEAT_ACTPHYSEL_MASK
)

	)

3458 
	#ENET_MAC_HW_FEAT_COUNT
 (3U)

	)

3461 
	#ENET_MAC_MDIO_ADDR_MB_MASK
 (0x1U)

	)

3462 
	#ENET_MAC_MDIO_ADDR_MB_SHIFT
 (0U)

	)

3463 
	#ENET_MAC_MDIO_ADDR_MB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_MDIO_ADDR_MB_SHIFT
)Ë& 
ENET_MAC_MDIO_ADDR_MB_MASK
)

	)

3464 
	#ENET_MAC_MDIO_ADDR_MOC_MASK
 (0xCU)

	)

3465 
	#ENET_MAC_MDIO_ADDR_MOC_SHIFT
 (2U)

	)

3466 
	#ENET_MAC_MDIO_ADDR_MOC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_MDIO_ADDR_MOC_SHIFT
)Ë& 
ENET_MAC_MDIO_ADDR_MOC_MASK
)

	)

3467 
	#ENET_MAC_MDIO_ADDR_CR_MASK
 (0xF00U)

	)

3468 
	#ENET_MAC_MDIO_ADDR_CR_SHIFT
 (8U)

	)

3469 
	#ENET_MAC_MDIO_ADDR_CR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_MDIO_ADDR_CR_SHIFT
)Ë& 
ENET_MAC_MDIO_ADDR_CR_MASK
)

	)

3470 
	#ENET_MAC_MDIO_ADDR_NTC_MASK
 (0x7000U)

	)

3471 
	#ENET_MAC_MDIO_ADDR_NTC_SHIFT
 (12U)

	)

3472 
	#ENET_MAC_MDIO_ADDR_NTC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_MDIO_ADDR_NTC_SHIFT
)Ë& 
ENET_MAC_MDIO_ADDR_NTC_MASK
)

	)

3473 
	#ENET_MAC_MDIO_ADDR_RDA_MASK
 (0x1F0000U)

	)

3474 
	#ENET_MAC_MDIO_ADDR_RDA_SHIFT
 (16U)

	)

3475 
	#ENET_MAC_MDIO_ADDR_RDA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_MDIO_ADDR_RDA_SHIFT
)Ë& 
ENET_MAC_MDIO_ADDR_RDA_MASK
)

	)

3476 
	#ENET_MAC_MDIO_ADDR_PA_MASK
 (0x3E00000U)

	)

3477 
	#ENET_MAC_MDIO_ADDR_PA_SHIFT
 (21U)

	)

3478 
	#ENET_MAC_MDIO_ADDR_PA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_MDIO_ADDR_PA_SHIFT
)Ë& 
ENET_MAC_MDIO_ADDR_PA_MASK
)

	)

3479 
	#ENET_MAC_MDIO_ADDR_BTB_MASK
 (0x4000000U)

	)

3480 
	#ENET_MAC_MDIO_ADDR_BTB_SHIFT
 (26U)

	)

3481 
	#ENET_MAC_MDIO_ADDR_BTB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_MDIO_ADDR_BTB_SHIFT
)Ë& 
ENET_MAC_MDIO_ADDR_BTB_MASK
)

	)

3482 
	#ENET_MAC_MDIO_ADDR_PSE_MASK
 (0x8000000U)

	)

3483 
	#ENET_MAC_MDIO_ADDR_PSE_SHIFT
 (27U)

	)

3484 
	#ENET_MAC_MDIO_ADDR_PSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_MDIO_ADDR_PSE_SHIFT
)Ë& 
ENET_MAC_MDIO_ADDR_PSE_MASK
)

	)

3487 
	#ENET_MAC_MDIO_DATA_MD_MASK
 (0xFFFFU)

	)

3488 
	#ENET_MAC_MDIO_DATA_MD_SHIFT
 (0U)

	)

3489 
	#ENET_MAC_MDIO_DATA_MD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_MDIO_DATA_MD_SHIFT
)Ë& 
ENET_MAC_MDIO_DATA_MD_MASK
)

	)

3492 
	#ENET_MAC_ADDR_HIGH_A47_32_MASK
 (0xFFFFU)

	)

3493 
	#ENET_MAC_ADDR_HIGH_A47_32_SHIFT
 (0U)

	)

3494 
	#ENET_MAC_ADDR_HIGH_A47_32
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_ADDR_HIGH_A47_32_SHIFT
)Ë& 
ENET_MAC_ADDR_HIGH_A47_32_MASK
)

	)

3495 
	#ENET_MAC_ADDR_HIGH_DCS_MASK
 (0x10000U)

	)

3496 
	#ENET_MAC_ADDR_HIGH_DCS_SHIFT
 (16U)

	)

3497 
	#ENET_MAC_ADDR_HIGH_DCS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_ADDR_HIGH_DCS_SHIFT
)Ë& 
ENET_MAC_ADDR_HIGH_DCS_MASK
)

	)

3498 
	#ENET_MAC_ADDR_HIGH_AE_MASK
 (0x80000000U)

	)

3499 
	#ENET_MAC_ADDR_HIGH_AE_SHIFT
 (31U)

	)

3500 
	#ENET_MAC_ADDR_HIGH_AE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_ADDR_HIGH_AE_SHIFT
)Ë& 
ENET_MAC_ADDR_HIGH_AE_MASK
)

	)

3503 
	#ENET_MAC_ADDR_LOW_A31_0_MASK
 (0xFFFFFFFFU)

	)

3504 
	#ENET_MAC_ADDR_LOW_A31_0_SHIFT
 (0U)

	)

3505 
	#ENET_MAC_ADDR_LOW_A31_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_ADDR_LOW_A31_0_SHIFT
)Ë& 
ENET_MAC_ADDR_LOW_A31_0_MASK
)

	)

3508 
	#ENET_MAC_TIMESTAMP_CTRL_TSENA_MASK
 (0x1U)

	)

3509 
	#ENET_MAC_TIMESTAMP_CTRL_TSENA_SHIFT
 (0U)

	)

3510 
	#ENET_MAC_TIMESTAMP_CTRL_TSENA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TIMESTAMP_CTRL_TSENA_SHIFT
)Ë& 
ENET_MAC_TIMESTAMP_CTRL_TSENA_MASK
)

	)

3511 
	#ENET_MAC_TIMESTAMP_CTRL_TSCFUPDT_MASK
 (0x2U)

	)

3512 
	#ENET_MAC_TIMESTAMP_CTRL_TSCFUPDT_SHIFT
 (1U)

	)

3513 
	#ENET_MAC_TIMESTAMP_CTRL_TSCFUPDT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TIMESTAMP_CTRL_TSCFUPDT_SHIFT
)Ë& 
ENET_MAC_TIMESTAMP_CTRL_TSCFUPDT_MASK
)

	)

3514 
	#ENET_MAC_TIMESTAMP_CTRL_TSINIT_MASK
 (0x4U)

	)

3515 
	#ENET_MAC_TIMESTAMP_CTRL_TSINIT_SHIFT
 (2U)

	)

3516 
	#ENET_MAC_TIMESTAMP_CTRL_TSINIT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TIMESTAMP_CTRL_TSINIT_SHIFT
)Ë& 
ENET_MAC_TIMESTAMP_CTRL_TSINIT_MASK
)

	)

3517 
	#ENET_MAC_TIMESTAMP_CTRL_TSUPDT_MASK
 (0x8U)

	)

3518 
	#ENET_MAC_TIMESTAMP_CTRL_TSUPDT_SHIFT
 (3U)

	)

3519 
	#ENET_MAC_TIMESTAMP_CTRL_TSUPDT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TIMESTAMP_CTRL_TSUPDT_SHIFT
)Ë& 
ENET_MAC_TIMESTAMP_CTRL_TSUPDT_MASK
)

	)

3520 
	#ENET_MAC_TIMESTAMP_CTRL_TSTRIG_MASK
 (0x10U)

	)

3521 
	#ENET_MAC_TIMESTAMP_CTRL_TSTRIG_SHIFT
 (4U)

	)

3522 
	#ENET_MAC_TIMESTAMP_CTRL_TSTRIG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TIMESTAMP_CTRL_TSTRIG_SHIFT
)Ë& 
ENET_MAC_TIMESTAMP_CTRL_TSTRIG_MASK
)

	)

3523 
	#ENET_MAC_TIMESTAMP_CTRL_TADDREG_MASK
 (0x20U)

	)

3524 
	#ENET_MAC_TIMESTAMP_CTRL_TADDREG_SHIFT
 (5U)

	)

3525 
	#ENET_MAC_TIMESTAMP_CTRL_TADDREG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TIMESTAMP_CTRL_TADDREG_SHIFT
)Ë& 
ENET_MAC_TIMESTAMP_CTRL_TADDREG_MASK
)

	)

3526 
	#ENET_MAC_TIMESTAMP_CTRL_TSENALL_MASK
 (0x100U)

	)

3527 
	#ENET_MAC_TIMESTAMP_CTRL_TSENALL_SHIFT
 (8U)

	)

3528 
	#ENET_MAC_TIMESTAMP_CTRL_TSENALL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TIMESTAMP_CTRL_TSENALL_SHIFT
)Ë& 
ENET_MAC_TIMESTAMP_CTRL_TSENALL_MASK
)

	)

3529 
	#ENET_MAC_TIMESTAMP_CTRL_TSCTRLSSR_MASK
 (0x200U)

	)

3530 
	#ENET_MAC_TIMESTAMP_CTRL_TSCTRLSSR_SHIFT
 (9U)

	)

3531 
	#ENET_MAC_TIMESTAMP_CTRL_TSCTRLSSR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TIMESTAMP_CTRL_TSCTRLSSR_SHIFT
)Ë& 
ENET_MAC_TIMESTAMP_CTRL_TSCTRLSSR_MASK
)

	)

3532 
	#ENET_MAC_TIMESTAMP_CTRL_TSVER2ENA_MASK
 (0x400U)

	)

3533 
	#ENET_MAC_TIMESTAMP_CTRL_TSVER2ENA_SHIFT
 (10U)

	)

3534 
	#ENET_MAC_TIMESTAMP_CTRL_TSVER2ENA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TIMESTAMP_CTRL_TSVER2ENA_SHIFT
)Ë& 
ENET_MAC_TIMESTAMP_CTRL_TSVER2ENA_MASK
)

	)

3535 
	#ENET_MAC_TIMESTAMP_CTRL_TSIPENA_MASK
 (0x800U)

	)

3536 
	#ENET_MAC_TIMESTAMP_CTRL_TSIPENA_SHIFT
 (11U)

	)

3537 
	#ENET_MAC_TIMESTAMP_CTRL_TSIPENA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TIMESTAMP_CTRL_TSIPENA_SHIFT
)Ë& 
ENET_MAC_TIMESTAMP_CTRL_TSIPENA_MASK
)

	)

3538 
	#ENET_MAC_TIMESTAMP_CTRL_TSIPV6ENA_MASK
 (0x1000U)

	)

3539 
	#ENET_MAC_TIMESTAMP_CTRL_TSIPV6ENA_SHIFT
 (12U)

	)

3540 
	#ENET_MAC_TIMESTAMP_CTRL_TSIPV6ENA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TIMESTAMP_CTRL_TSIPV6ENA_SHIFT
)Ë& 
ENET_MAC_TIMESTAMP_CTRL_TSIPV6ENA_MASK
)

	)

3541 
	#ENET_MAC_TIMESTAMP_CTRL_TSIPV4ENA_MASK
 (0x2000U)

	)

3542 
	#ENET_MAC_TIMESTAMP_CTRL_TSIPV4ENA_SHIFT
 (13U)

	)

3543 
	#ENET_MAC_TIMESTAMP_CTRL_TSIPV4ENA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TIMESTAMP_CTRL_TSIPV4ENA_SHIFT
)Ë& 
ENET_MAC_TIMESTAMP_CTRL_TSIPV4ENA_MASK
)

	)

3544 
	#ENET_MAC_TIMESTAMP_CTRL_TSEVTENA_MASK
 (0x4000U)

	)

3545 
	#ENET_MAC_TIMESTAMP_CTRL_TSEVTENA_SHIFT
 (14U)

	)

3546 
	#ENET_MAC_TIMESTAMP_CTRL_TSEVTENA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TIMESTAMP_CTRL_TSEVTENA_SHIFT
)Ë& 
ENET_MAC_TIMESTAMP_CTRL_TSEVTENA_MASK
)

	)

3547 
	#ENET_MAC_TIMESTAMP_CTRL_TSMSTRENA_MASK
 (0x8000U)

	)

3548 
	#ENET_MAC_TIMESTAMP_CTRL_TSMSTRENA_SHIFT
 (15U)

	)

3549 
	#ENET_MAC_TIMESTAMP_CTRL_TSMSTRENA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TIMESTAMP_CTRL_TSMSTRENA_SHIFT
)Ë& 
ENET_MAC_TIMESTAMP_CTRL_TSMSTRENA_MASK
)

	)

3550 
	#ENET_MAC_TIMESTAMP_CTRL_SNAPTYPSEL_MASK
 (0x30000U)

	)

3551 
	#ENET_MAC_TIMESTAMP_CTRL_SNAPTYPSEL_SHIFT
 (16U)

	)

3552 
	#ENET_MAC_TIMESTAMP_CTRL_SNAPTYPSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TIMESTAMP_CTRL_SNAPTYPSEL_SHIFT
)Ë& 
ENET_MAC_TIMESTAMP_CTRL_SNAPTYPSEL_MASK
)

	)

3553 
	#ENET_MAC_TIMESTAMP_CTRL_TSENMACADDR_MASK
 (0x40000U)

	)

3554 
	#ENET_MAC_TIMESTAMP_CTRL_TSENMACADDR_SHIFT
 (18U)

	)

3555 
	#ENET_MAC_TIMESTAMP_CTRL_TSENMACADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TIMESTAMP_CTRL_TSENMACADDR_SHIFT
)Ë& 
ENET_MAC_TIMESTAMP_CTRL_TSENMACADDR_MASK
)

	)

3556 
	#ENET_MAC_TIMESTAMP_CTRL_TXTTSSTSM_MASK
 (0x1000000U)

	)

3557 
	#ENET_MAC_TIMESTAMP_CTRL_TXTTSSTSM_SHIFT
 (24U)

	)

3558 
	#ENET_MAC_TIMESTAMP_CTRL_TXTTSSTSM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TIMESTAMP_CTRL_TXTTSSTSM_SHIFT
)Ë& 
ENET_MAC_TIMESTAMP_CTRL_TXTTSSTSM_MASK
)

	)

3559 
	#ENET_MAC_TIMESTAMP_CTRL_AV8021ASMEN_MASK
 (0x10000000U)

	)

3560 
	#ENET_MAC_TIMESTAMP_CTRL_AV8021ASMEN_SHIFT
 (28U)

	)

3561 
	#ENET_MAC_TIMESTAMP_CTRL_AV8021ASMEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TIMESTAMP_CTRL_AV8021ASMEN_SHIFT
)Ë& 
ENET_MAC_TIMESTAMP_CTRL_AV8021ASMEN_MASK
)

	)

3564 
	#ENET_MAC_SUB_SCND_INCR_SSINC_MASK
 (0xFF0000U)

	)

3565 
	#ENET_MAC_SUB_SCND_INCR_SSINC_SHIFT
 (16U)

	)

3566 
	#ENET_MAC_SUB_SCND_INCR_SSINC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_SUB_SCND_INCR_SSINC_SHIFT
)Ë& 
ENET_MAC_SUB_SCND_INCR_SSINC_MASK
)

	)

3569 
	#ENET_MAC_SYS_TIME_SCND_TSS_MASK
 (0xFFFFFFFFU)

	)

3570 
	#ENET_MAC_SYS_TIME_SCND_TSS_SHIFT
 (0U)

	)

3571 
	#ENET_MAC_SYS_TIME_SCND_TSS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_SYS_TIME_SCND_TSS_SHIFT
)Ë& 
ENET_MAC_SYS_TIME_SCND_TSS_MASK
)

	)

3574 
	#ENET_MAC_SYS_TIME_NSCND_TSSS_MASK
 (0x7FFFFFFFU)

	)

3575 
	#ENET_MAC_SYS_TIME_NSCND_TSSS_SHIFT
 (0U)

	)

3576 
	#ENET_MAC_SYS_TIME_NSCND_TSSS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_SYS_TIME_NSCND_TSSS_SHIFT
)Ë& 
ENET_MAC_SYS_TIME_NSCND_TSSS_MASK
)

	)

3579 
	#ENET_MAC_SYS_TIME_SCND_UPD_TSS_MASK
 (0xFFFFFFFFU)

	)

3580 
	#ENET_MAC_SYS_TIME_SCND_UPD_TSS_SHIFT
 (0U)

	)

3581 
	#ENET_MAC_SYS_TIME_SCND_UPD_TSS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_SYS_TIME_SCND_UPD_TSS_SHIFT
)Ë& 
ENET_MAC_SYS_TIME_SCND_UPD_TSS_MASK
)

	)

3584 
	#ENET_MAC_SYS_TIME_NSCND_UPD_TSSS_MASK
 (0x7FFFFFFFU)

	)

3585 
	#ENET_MAC_SYS_TIME_NSCND_UPD_TSSS_SHIFT
 (0U)

	)

3586 
	#ENET_MAC_SYS_TIME_NSCND_UPD_TSSS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_SYS_TIME_NSCND_UPD_TSSS_SHIFT
)Ë& 
ENET_MAC_SYS_TIME_NSCND_UPD_TSSS_MASK
)

	)

3587 
	#ENET_MAC_SYS_TIME_NSCND_UPD_ADDSUB_MASK
 (0x80000000U)

	)

3588 
	#ENET_MAC_SYS_TIME_NSCND_UPD_ADDSUB_SHIFT
 (31U)

	)

3589 
	#ENET_MAC_SYS_TIME_NSCND_UPD_ADDSUB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_SYS_TIME_NSCND_UPD_ADDSUB_SHIFT
)Ë& 
ENET_MAC_SYS_TIME_NSCND_UPD_ADDSUB_MASK
)

	)

3592 
	#ENET_MAC_SYS_TIMESTMP_ADDEND_TSAR_MASK
 (0xFFFFFFFFU)

	)

3593 
	#ENET_MAC_SYS_TIMESTMP_ADDEND_TSAR_SHIFT
 (0U)

	)

3594 
	#ENET_MAC_SYS_TIMESTMP_ADDEND_TSAR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_SYS_TIMESTMP_ADDEND_TSAR_SHIFT
)Ë& 
ENET_MAC_SYS_TIMESTMP_ADDEND_TSAR_MASK
)

	)

3597 
	#ENET_MAC_SYS_TIME_HWORD_SCND_TSHWR_MASK
 (0xFFFFU)

	)

3598 
	#ENET_MAC_SYS_TIME_HWORD_SCND_TSHWR_SHIFT
 (0U)

	)

3599 
	#ENET_MAC_SYS_TIME_HWORD_SCND_TSHWR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_SYS_TIME_HWORD_SCND_TSHWR_SHIFT
)Ë& 
ENET_MAC_SYS_TIME_HWORD_SCND_TSHWR_MASK
)

	)

3602 
	#ENET_MAC_SYS_TIMESTMP_STAT_TSSOVF_MASK
 (0x1U)

	)

3603 
	#ENET_MAC_SYS_TIMESTMP_STAT_TSSOVF_SHIFT
 (0U)

	)

3604 
	#ENET_MAC_SYS_TIMESTMP_STAT_TSSOVF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_SYS_TIMESTMP_STAT_TSSOVF_SHIFT
)Ë& 
ENET_MAC_SYS_TIMESTMP_STAT_TSSOVF_MASK
)

	)

3607 
	#ENET_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_TXTSSTSLO_MASK
 (0x7FFFFFFFU)

	)

3608 
	#ENET_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_TXTSSTSLO_SHIFT
 (0U)

	)

3609 
	#ENET_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_TXTSSTSLO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_TXTSSTSLO_SHIFT
)Ë& 
ENET_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_TXTSSTSLO_MASK
)

	)

3610 
	#ENET_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_TXTSSTSMIS_MASK
 (0x80000000U)

	)

3611 
	#ENET_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_TXTSSTSMIS_SHIFT
 (31U)

	)

3612 
	#ENET_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_TXTSSTSMIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_TXTSSTSMIS_SHIFT
)Ë& 
ENET_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_TXTSSTSMIS_MASK
)

	)

3615 
	#ENET_MAC_TX_TIMESTAMP_STATUS_SECONDS_TXTSSTSHI_MASK
 (0xFFFFFFFFU)

	)

3616 
	#ENET_MAC_TX_TIMESTAMP_STATUS_SECONDS_TXTSSTSHI_SHIFT
 (0U)

	)

3617 
	#ENET_MAC_TX_TIMESTAMP_STATUS_SECONDS_TXTSSTSHI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TX_TIMESTAMP_STATUS_SECONDS_TXTSSTSHI_SHIFT
)Ë& 
ENET_MAC_TX_TIMESTAMP_STATUS_SECONDS_TXTSSTSHI_MASK
)

	)

3620 
	#ENET_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND_TSIC_MASK
 (0xFFFFFFFFU)

	)

3621 
	#ENET_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND_TSIC_SHIFT
 (0U)

	)

3622 
	#ENET_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND_TSIC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND_TSIC_SHIFT
)Ë& 
ENET_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND_TSIC_MASK
)

	)

3625 
	#ENET_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND_TSEC_MASK
 (0xFFFFFFFFU)

	)

3626 
	#ENET_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND_TSEC_SHIFT
 (0U)

	)

3627 
	#ENET_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND_TSEC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND_TSEC_SHIFT
)Ë& 
ENET_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND_TSEC_MASK
)

	)

3630 
	#ENET_MTL_OP_MODE_DTXSTS_MASK
 (0x2U)

	)

3631 
	#ENET_MTL_OP_MODE_DTXSTS_SHIFT
 (1U)

	)

3632 
	#ENET_MTL_OP_MODE_DTXSTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_OP_MODE_DTXSTS_SHIFT
)Ë& 
ENET_MTL_OP_MODE_DTXSTS_MASK
)

	)

3633 
	#ENET_MTL_OP_MODE_RAA_MASK
 (0x4U)

	)

3634 
	#ENET_MTL_OP_MODE_RAA_SHIFT
 (2U)

	)

3635 
	#ENET_MTL_OP_MODE_RAA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_OP_MODE_RAA_SHIFT
)Ë& 
ENET_MTL_OP_MODE_RAA_MASK
)

	)

3636 
	#ENET_MTL_OP_MODE_SCHALG_MASK
 (0x60U)

	)

3637 
	#ENET_MTL_OP_MODE_SCHALG_SHIFT
 (5U)

	)

3638 
	#ENET_MTL_OP_MODE_SCHALG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_OP_MODE_SCHALG_SHIFT
)Ë& 
ENET_MTL_OP_MODE_SCHALG_MASK
)

	)

3639 
	#ENET_MTL_OP_MODE_CNTPRST_MASK
 (0x100U)

	)

3640 
	#ENET_MTL_OP_MODE_CNTPRST_SHIFT
 (8U)

	)

3641 
	#ENET_MTL_OP_MODE_CNTPRST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_OP_MODE_CNTPRST_SHIFT
)Ë& 
ENET_MTL_OP_MODE_CNTPRST_MASK
)

	)

3642 
	#ENET_MTL_OP_MODE_CNTCLR_MASK
 (0x200U)

	)

3643 
	#ENET_MTL_OP_MODE_CNTCLR_SHIFT
 (9U)

	)

3644 
	#ENET_MTL_OP_MODE_CNTCLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_OP_MODE_CNTCLR_SHIFT
)Ë& 
ENET_MTL_OP_MODE_CNTCLR_MASK
)

	)

3647 
	#ENET_MTL_INTR_STAT_Q0IS_MASK
 (0x1U)

	)

3648 
	#ENET_MTL_INTR_STAT_Q0IS_SHIFT
 (0U)

	)

3649 
	#ENET_MTL_INTR_STAT_Q0IS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_INTR_STAT_Q0IS_SHIFT
)Ë& 
ENET_MTL_INTR_STAT_Q0IS_MASK
)

	)

3650 
	#ENET_MTL_INTR_STAT_Q1IS_MASK
 (0x2U)

	)

3651 
	#ENET_MTL_INTR_STAT_Q1IS_SHIFT
 (1U)

	)

3652 
	#ENET_MTL_INTR_STAT_Q1IS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_INTR_STAT_Q1IS_SHIFT
)Ë& 
ENET_MTL_INTR_STAT_Q1IS_MASK
)

	)

3655 
	#ENET_MTL_RXQ_DMA_MAP_Q0MDMACH_MASK
 (0x1U)

	)

3656 
	#ENET_MTL_RXQ_DMA_MAP_Q0MDMACH_SHIFT
 (0U)

	)

3657 
	#ENET_MTL_RXQ_DMA_MAP_Q0MDMACH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_RXQ_DMA_MAP_Q0MDMACH_SHIFT
)Ë& 
ENET_MTL_RXQ_DMA_MAP_Q0MDMACH_MASK
)

	)

3658 
	#ENET_MTL_RXQ_DMA_MAP_Q0DDMACH_MASK
 (0x10U)

	)

3659 
	#ENET_MTL_RXQ_DMA_MAP_Q0DDMACH_SHIFT
 (4U)

	)

3660 
	#ENET_MTL_RXQ_DMA_MAP_Q0DDMACH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_RXQ_DMA_MAP_Q0DDMACH_SHIFT
)Ë& 
ENET_MTL_RXQ_DMA_MAP_Q0DDMACH_MASK
)

	)

3661 
	#ENET_MTL_RXQ_DMA_MAP_Q1MDMACH_MASK
 (0x100U)

	)

3662 
	#ENET_MTL_RXQ_DMA_MAP_Q1MDMACH_SHIFT
 (8U)

	)

3663 
	#ENET_MTL_RXQ_DMA_MAP_Q1MDMACH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_RXQ_DMA_MAP_Q1MDMACH_SHIFT
)Ë& 
ENET_MTL_RXQ_DMA_MAP_Q1MDMACH_MASK
)

	)

3664 
	#ENET_MTL_RXQ_DMA_MAP_Q1DDMACH_MASK
 (0x1000U)

	)

3665 
	#ENET_MTL_RXQ_DMA_MAP_Q1DDMACH_SHIFT
 (12U)

	)

3666 
	#ENET_MTL_RXQ_DMA_MAP_Q1DDMACH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_RXQ_DMA_MAP_Q1DDMACH_SHIFT
)Ë& 
ENET_MTL_RXQ_DMA_MAP_Q1DDMACH_MASK
)

	)

3669 
	#ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_FTQ_MASK
 (0x1U)

	)

3670 
	#ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_FTQ_SHIFT
 (0U)

	)

3671 
	#ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_FTQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_FTQ_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_FTQ_MASK
)

	)

3672 
	#ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TSF_MASK
 (0x2U)

	)

3673 
	#ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TSF_SHIFT
 (1U)

	)

3674 
	#ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TSF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TSF_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TSF_MASK
)

	)

3675 
	#ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TXQEN_MASK
 (0xCU)

	)

3676 
	#ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TXQEN_SHIFT
 (2U)

	)

3677 
	#ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TXQEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TXQEN_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TXQEN_MASK
)

	)

3678 
	#ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TTC_MASK
 (0x70U)

	)

3679 
	#ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TTC_SHIFT
 (4U)

	)

3680 
	#ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TTC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TTC_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TTC_MASK
)

	)

3681 
	#ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TQS_MASK
 (0x70000U)

	)

3682 
	#ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TQS_SHIFT
 (16U)

	)

3683 
	#ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TQS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TQS_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TQS_MASK
)

	)

3686 
	#ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_COUNT
 (2U)

	)

3689 
	#ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW_UFFRMCNT_MASK
 (0x7FFU)

	)

3690 
	#ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW_UFFRMCNT_SHIFT
 (0U)

	)

3691 
	#ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW_UFFRMCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW_UFFRMCNT_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW_UFFRMCNT_MASK
)

	)

3692 
	#ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW_UFCNTOVF_MASK
 (0x800U)

	)

3693 
	#ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW_UFCNTOVF_SHIFT
 (11U)

	)

3694 
	#ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW_UFCNTOVF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW_UFCNTOVF_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW_UFCNTOVF_MASK
)

	)

3697 
	#ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW_COUNT
 (2U)

	)

3700 
	#ENET_MTL_QUEUE_MTL_TXQX_DBG_TXQPAUSED_MASK
 (0x1U)

	)

3701 
	#ENET_MTL_QUEUE_MTL_TXQX_DBG_TXQPAUSED_SHIFT
 (0U)

	)

3702 
	#ENET_MTL_QUEUE_MTL_TXQX_DBG_TXQPAUSED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_DBG_TXQPAUSED_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_DBG_TXQPAUSED_MASK
)

	)

3703 
	#ENET_MTL_QUEUE_MTL_TXQX_DBG_TRCSTS_MASK
 (0x6U)

	)

3704 
	#ENET_MTL_QUEUE_MTL_TXQX_DBG_TRCSTS_SHIFT
 (1U)

	)

3705 
	#ENET_MTL_QUEUE_MTL_TXQX_DBG_TRCSTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_DBG_TRCSTS_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_DBG_TRCSTS_MASK
)

	)

3706 
	#ENET_MTL_QUEUE_MTL_TXQX_DBG_TWCSTS_MASK
 (0x8U)

	)

3707 
	#ENET_MTL_QUEUE_MTL_TXQX_DBG_TWCSTS_SHIFT
 (3U)

	)

3708 
	#ENET_MTL_QUEUE_MTL_TXQX_DBG_TWCSTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_DBG_TWCSTS_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_DBG_TWCSTS_MASK
)

	)

3709 
	#ENET_MTL_QUEUE_MTL_TXQX_DBG_TXQSTS_MASK
 (0x10U)

	)

3710 
	#ENET_MTL_QUEUE_MTL_TXQX_DBG_TXQSTS_SHIFT
 (4U)

	)

3711 
	#ENET_MTL_QUEUE_MTL_TXQX_DBG_TXQSTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_DBG_TXQSTS_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_DBG_TXQSTS_MASK
)

	)

3712 
	#ENET_MTL_QUEUE_MTL_TXQX_DBG_TXSTSFSTS_MASK
 (0x20U)

	)

3713 
	#ENET_MTL_QUEUE_MTL_TXQX_DBG_TXSTSFSTS_SHIFT
 (5U)

	)

3714 
	#ENET_MTL_QUEUE_MTL_TXQX_DBG_TXSTSFSTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_DBG_TXSTSFSTS_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_DBG_TXSTSFSTS_MASK
)

	)

3715 
	#ENET_MTL_QUEUE_MTL_TXQX_DBG_PTXQ_MASK
 (0x70000U)

	)

3716 
	#ENET_MTL_QUEUE_MTL_TXQX_DBG_PTXQ_SHIFT
 (16U)

	)

3717 
	#ENET_MTL_QUEUE_MTL_TXQX_DBG_PTXQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_DBG_PTXQ_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_DBG_PTXQ_MASK
)

	)

3718 
	#ENET_MTL_QUEUE_MTL_TXQX_DBG_STSXSTSF_MASK
 (0x700000U)

	)

3719 
	#ENET_MTL_QUEUE_MTL_TXQX_DBG_STSXSTSF_SHIFT
 (20U)

	)

3720 
	#ENET_MTL_QUEUE_MTL_TXQX_DBG_STSXSTSF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_DBG_STSXSTSF_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_DBG_STSXSTSF_MASK
)

	)

3723 
	#ENET_MTL_QUEUE_MTL_TXQX_DBG_COUNT
 (2U)

	)

3726 
	#ENET_MTL_QUEUE_MTL_TXQX_ETS_CTRL_AVALG_MASK
 (0x4U)

	)

3727 
	#ENET_MTL_QUEUE_MTL_TXQX_ETS_CTRL_AVALG_SHIFT
 (2U)

	)

3728 
	#ENET_MTL_QUEUE_MTL_TXQX_ETS_CTRL_AVALG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_ETS_CTRL_AVALG_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_ETS_CTRL_AVALG_MASK
)

	)

3729 
	#ENET_MTL_QUEUE_MTL_TXQX_ETS_CTRL_CC_MASK
 (0x8U)

	)

3730 
	#ENET_MTL_QUEUE_MTL_TXQX_ETS_CTRL_CC_SHIFT
 (3U)

	)

3731 
	#ENET_MTL_QUEUE_MTL_TXQX_ETS_CTRL_CC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_ETS_CTRL_CC_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_ETS_CTRL_CC_MASK
)

	)

3732 
	#ENET_MTL_QUEUE_MTL_TXQX_ETS_CTRL_SLC_MASK
 (0x70U)

	)

3733 
	#ENET_MTL_QUEUE_MTL_TXQX_ETS_CTRL_SLC_SHIFT
 (4U)

	)

3734 
	#ENET_MTL_QUEUE_MTL_TXQX_ETS_CTRL_SLC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_ETS_CTRL_SLC_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_ETS_CTRL_SLC_MASK
)

	)

3737 
	#ENET_MTL_QUEUE_MTL_TXQX_ETS_CTRL_COUNT
 (2U)

	)

3740 
	#ENET_MTL_QUEUE_MTL_TXQX_ETS_STAT_ABS_MASK
 (0xFFFFFFU)

	)

3741 
	#ENET_MTL_QUEUE_MTL_TXQX_ETS_STAT_ABS_SHIFT
 (0U)

	)

3742 
	#ENET_MTL_QUEUE_MTL_TXQX_ETS_STAT_ABS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_ETS_STAT_ABS_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_ETS_STAT_ABS_MASK
)

	)

3745 
	#ENET_MTL_QUEUE_MTL_TXQX_ETS_STAT_COUNT
 (2U)

	)

3748 
	#ENET_MTL_QUEUE_MTL_TXQX_QNTM_WGHT_ISCQW_MASK
 (0x1FFFFFU)

	)

3749 
	#ENET_MTL_QUEUE_MTL_TXQX_QNTM_WGHT_ISCQW_SHIFT
 (0U)

	)

3750 
	#ENET_MTL_QUEUE_MTL_TXQX_QNTM_WGHT_ISCQW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_QNTM_WGHT_ISCQW_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_QNTM_WGHT_ISCQW_MASK
)

	)

3753 
	#ENET_MTL_QUEUE_MTL_TXQX_QNTM_WGHT_COUNT
 (2U)

	)

3756 
	#ENET_MTL_QUEUE_MTL_TXQX_SNDSLP_CRDT_SSC_MASK
 (0x3FFFU)

	)

3757 
	#ENET_MTL_QUEUE_MTL_TXQX_SNDSLP_CRDT_SSC_SHIFT
 (0U)

	)

3758 
	#ENET_MTL_QUEUE_MTL_TXQX_SNDSLP_CRDT_SSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_SNDSLP_CRDT_SSC_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_SNDSLP_CRDT_SSC_MASK
)

	)

3761 
	#ENET_MTL_QUEUE_MTL_TXQX_SNDSLP_CRDT_COUNT
 (2U)

	)

3764 
	#ENET_MTL_QUEUE_MTL_TXQX_HI_CRDT_HC_MASK
 (0x1FFFFFFFU)

	)

3765 
	#ENET_MTL_QUEUE_MTL_TXQX_HI_CRDT_HC_SHIFT
 (0U)

	)

3766 
	#ENET_MTL_QUEUE_MTL_TXQX_HI_CRDT_HC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_HI_CRDT_HC_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_HI_CRDT_HC_MASK
)

	)

3769 
	#ENET_MTL_QUEUE_MTL_TXQX_HI_CRDT_COUNT
 (2U)

	)

3772 
	#ENET_MTL_QUEUE_MTL_TXQX_LO_CRDT_LC_MASK
 (0x1FFFFFFFU)

	)

3773 
	#ENET_MTL_QUEUE_MTL_TXQX_LO_CRDT_LC_SHIFT
 (0U)

	)

3774 
	#ENET_MTL_QUEUE_MTL_TXQX_LO_CRDT_LC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_LO_CRDT_LC_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_LO_CRDT_LC_MASK
)

	)

3777 
	#ENET_MTL_QUEUE_MTL_TXQX_LO_CRDT_COUNT
 (2U)

	)

3780 
	#ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_TXUNFIS_MASK
 (0x1U)

	)

3781 
	#ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_TXUNFIS_SHIFT
 (0U)

	)

3782 
	#ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_TXUNFIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_TXUNFIS_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_TXUNFIS_MASK
)

	)

3783 
	#ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_ABPSIS_MASK
 (0x2U)

	)

3784 
	#ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_ABPSIS_SHIFT
 (1U)

	)

3785 
	#ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_ABPSIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_ABPSIS_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_ABPSIS_MASK
)

	)

3786 
	#ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_TXUIE_MASK
 (0x100U)

	)

3787 
	#ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_TXUIE_SHIFT
 (8U)

	)

3788 
	#ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_TXUIE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_TXUIE_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_TXUIE_MASK
)

	)

3789 
	#ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_ABPSIE_MASK
 (0x200U)

	)

3790 
	#ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_ABPSIE_SHIFT
 (9U)

	)

3791 
	#ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_ABPSIE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_ABPSIE_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_ABPSIE_MASK
)

	)

3792 
	#ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_RXOVFIS_MASK
 (0x10000U)

	)

3793 
	#ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_RXOVFIS_SHIFT
 (16U)

	)

3794 
	#ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_RXOVFIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_RXOVFIS_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_RXOVFIS_MASK
)

	)

3795 
	#ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_RXOIE_MASK
 (0x1000000U)

	)

3796 
	#ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_RXOIE_SHIFT
 (24U)

	)

3797 
	#ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_RXOIE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_RXOIE_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_RXOIE_MASK
)

	)

3800 
	#ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_COUNT
 (2U)

	)

3803 
	#ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RTC_MASK
 (0x3U)

	)

3804 
	#ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RTC_SHIFT
 (0U)

	)

3805 
	#ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RTC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RTC_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RTC_MASK
)

	)

3806 
	#ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_FUP_MASK
 (0x8U)

	)

3807 
	#ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_FUP_SHIFT
 (3U)

	)

3808 
	#ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_FUP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_FUP_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_FUP_MASK
)

	)

3809 
	#ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_FEP_MASK
 (0x10U)

	)

3810 
	#ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_FEP_SHIFT
 (4U)

	)

3811 
	#ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_FEP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_FEP_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_FEP_MASK
)

	)

3812 
	#ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RSF_MASK
 (0x20U)

	)

3813 
	#ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RSF_SHIFT
 (5U)

	)

3814 
	#ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RSF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RSF_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RSF_MASK
)

	)

3815 
	#ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_DIS_TCP_EF_MASK
 (0x40U)

	)

3816 
	#ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_DIS_TCP_EF_SHIFT
 (6U)

	)

3817 
	#ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_DIS_TCP_EF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_DIS_TCP_EF_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_DIS_TCP_EF_MASK
)

	)

3818 
	#ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RQS_MASK
 (0x700000U)

	)

3819 
	#ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RQS_SHIFT
 (20U)

	)

3820 
	#ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RQS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RQS_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RQS_MASK
)

	)

3823 
	#ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_COUNT
 (2U)

	)

3826 
	#ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT_OVFPKTCNT_MASK
 (0x7FFU)

	)

3827 
	#ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT_OVFPKTCNT_SHIFT
 (0U)

	)

3828 
	#ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT_OVFPKTCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT_OVFPKTCNT_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT_OVFPKTCNT_MASK
)

	)

3829 
	#ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT_OVFCNTOVF_MASK
 (0x800U)

	)

3830 
	#ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT_OVFCNTOVF_SHIFT
 (11U)

	)

3831 
	#ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT_OVFCNTOVF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT_OVFCNTOVF_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT_OVFCNTOVF_MASK
)

	)

3834 
	#ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT_COUNT
 (2U)

	)

3837 
	#ENET_MTL_QUEUE_MTL_RXQX_DBG_RWCSTS_MASK
 (0x1U)

	)

3838 
	#ENET_MTL_QUEUE_MTL_RXQX_DBG_RWCSTS_SHIFT
 (0U)

	)

3839 
	#ENET_MTL_QUEUE_MTL_RXQX_DBG_RWCSTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_RXQX_DBG_RWCSTS_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_RXQX_DBG_RWCSTS_MASK
)

	)

3840 
	#ENET_MTL_QUEUE_MTL_RXQX_DBG_RRCSTS_MASK
 (0x6U)

	)

3841 
	#ENET_MTL_QUEUE_MTL_RXQX_DBG_RRCSTS_SHIFT
 (1U)

	)

3842 
	#ENET_MTL_QUEUE_MTL_RXQX_DBG_RRCSTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_RXQX_DBG_RRCSTS_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_RXQX_DBG_RRCSTS_MASK
)

	)

3843 
	#ENET_MTL_QUEUE_MTL_RXQX_DBG_RXQSTS_MASK
 (0x30U)

	)

3844 
	#ENET_MTL_QUEUE_MTL_RXQX_DBG_RXQSTS_SHIFT
 (4U)

	)

3845 
	#ENET_MTL_QUEUE_MTL_RXQX_DBG_RXQSTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_RXQX_DBG_RXQSTS_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_RXQX_DBG_RXQSTS_MASK
)

	)

3846 
	#ENET_MTL_QUEUE_MTL_RXQX_DBG_PRXQ_MASK
 (0x3FFF0000U)

	)

3847 
	#ENET_MTL_QUEUE_MTL_RXQX_DBG_PRXQ_SHIFT
 (16U)

	)

3848 
	#ENET_MTL_QUEUE_MTL_RXQX_DBG_PRXQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_RXQX_DBG_PRXQ_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_RXQX_DBG_PRXQ_MASK
)

	)

3851 
	#ENET_MTL_QUEUE_MTL_RXQX_DBG_COUNT
 (2U)

	)

3854 
	#ENET_MTL_QUEUE_MTL_RXQX_CTRL_RXQ_WEGT_MASK
 (0x7U)

	)

3855 
	#ENET_MTL_QUEUE_MTL_RXQX_CTRL_RXQ_WEGT_SHIFT
 (0U)

	)

3856 
	#ENET_MTL_QUEUE_MTL_RXQX_CTRL_RXQ_WEGT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_RXQX_CTRL_RXQ_WEGT_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_RXQX_CTRL_RXQ_WEGT_MASK
)

	)

3857 
	#ENET_MTL_QUEUE_MTL_RXQX_CTRL_RXQ_FRM_ARBIT_MASK
 (0x8U)

	)

3858 
	#ENET_MTL_QUEUE_MTL_RXQX_CTRL_RXQ_FRM_ARBIT_SHIFT
 (3U)

	)

3859 
	#ENET_MTL_QUEUE_MTL_RXQX_CTRL_RXQ_FRM_ARBIT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_MTL_QUEUE_MTL_RXQX_CTRL_RXQ_FRM_ARBIT_SHIFT
)Ë& 
ENET_MTL_QUEUE_MTL_RXQX_CTRL_RXQ_FRM_ARBIT_MASK
)

	)

3862 
	#ENET_MTL_QUEUE_MTL_RXQX_CTRL_COUNT
 (2U)

	)

3865 
	#ENET_DMA_MODE_SWR_MASK
 (0x1U)

	)

3866 
	#ENET_DMA_MODE_SWR_SHIFT
 (0U)

	)

3867 
	#ENET_DMA_MODE_SWR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_MODE_SWR_SHIFT
)Ë& 
ENET_DMA_MODE_SWR_MASK
)

	)

3868 
	#ENET_DMA_MODE_DA_MASK
 (0x2U)

	)

3869 
	#ENET_DMA_MODE_DA_SHIFT
 (1U)

	)

3870 
	#ENET_DMA_MODE_DA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_MODE_DA_SHIFT
)Ë& 
ENET_DMA_MODE_DA_MASK
)

	)

3871 
	#ENET_DMA_MODE_TAA_MASK
 (0x1CU)

	)

3872 
	#ENET_DMA_MODE_TAA_SHIFT
 (2U)

	)

3873 
	#ENET_DMA_MODE_TAA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_MODE_TAA_SHIFT
)Ë& 
ENET_DMA_MODE_TAA_MASK
)

	)

3874 
	#ENET_DMA_MODE_TXPR_MASK
 (0x800U)

	)

3875 
	#ENET_DMA_MODE_TXPR_SHIFT
 (11U)

	)

3876 
	#ENET_DMA_MODE_TXPR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_MODE_TXPR_SHIFT
)Ë& 
ENET_DMA_MODE_TXPR_MASK
)

	)

3877 
	#ENET_DMA_MODE_PR_MASK
 (0x7000U)

	)

3878 
	#ENET_DMA_MODE_PR_SHIFT
 (12U)

	)

3879 
	#ENET_DMA_MODE_PR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_MODE_PR_SHIFT
)Ë& 
ENET_DMA_MODE_PR_MASK
)

	)

3882 
	#ENET_DMA_SYSBUS_MODE_FB_MASK
 (0x1U)

	)

3883 
	#ENET_DMA_SYSBUS_MODE_FB_SHIFT
 (0U)

	)

3884 
	#ENET_DMA_SYSBUS_MODE_FB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_SYSBUS_MODE_FB_SHIFT
)Ë& 
ENET_DMA_SYSBUS_MODE_FB_MASK
)

	)

3885 
	#ENET_DMA_SYSBUS_MODE_AAL_MASK
 (0x1000U)

	)

3886 
	#ENET_DMA_SYSBUS_MODE_AAL_SHIFT
 (12U)

	)

3887 
	#ENET_DMA_SYSBUS_MODE_AAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_SYSBUS_MODE_AAL_SHIFT
)Ë& 
ENET_DMA_SYSBUS_MODE_AAL_MASK
)

	)

3888 
	#ENET_DMA_SYSBUS_MODE_MB_MASK
 (0x4000U)

	)

3889 
	#ENET_DMA_SYSBUS_MODE_MB_SHIFT
 (14U)

	)

3890 
	#ENET_DMA_SYSBUS_MODE_MB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_SYSBUS_MODE_MB_SHIFT
)Ë& 
ENET_DMA_SYSBUS_MODE_MB_MASK
)

	)

3891 
	#ENET_DMA_SYSBUS_MODE_RB_MASK
 (0x8000U)

	)

3892 
	#ENET_DMA_SYSBUS_MODE_RB_SHIFT
 (15U)

	)

3893 
	#ENET_DMA_SYSBUS_MODE_RB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_SYSBUS_MODE_RB_SHIFT
)Ë& 
ENET_DMA_SYSBUS_MODE_RB_MASK
)

	)

3896 
	#ENET_DMA_INTR_STAT_DC0IS_MASK
 (0x1U)

	)

3897 
	#ENET_DMA_INTR_STAT_DC0IS_SHIFT
 (0U)

	)

3898 
	#ENET_DMA_INTR_STAT_DC0IS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_INTR_STAT_DC0IS_SHIFT
)Ë& 
ENET_DMA_INTR_STAT_DC0IS_MASK
)

	)

3899 
	#ENET_DMA_INTR_STAT_DC1IS_MASK
 (0x2U)

	)

3900 
	#ENET_DMA_INTR_STAT_DC1IS_SHIFT
 (1U)

	)

3901 
	#ENET_DMA_INTR_STAT_DC1IS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_INTR_STAT_DC1IS_SHIFT
)Ë& 
ENET_DMA_INTR_STAT_DC1IS_MASK
)

	)

3902 
	#ENET_DMA_INTR_STAT_MTLIS_MASK
 (0x10000U)

	)

3903 
	#ENET_DMA_INTR_STAT_MTLIS_SHIFT
 (16U)

	)

3904 
	#ENET_DMA_INTR_STAT_MTLIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_INTR_STAT_MTLIS_SHIFT
)Ë& 
ENET_DMA_INTR_STAT_MTLIS_MASK
)

	)

3905 
	#ENET_DMA_INTR_STAT_MACIS_MASK
 (0x20000U)

	)

3906 
	#ENET_DMA_INTR_STAT_MACIS_SHIFT
 (17U)

	)

3907 
	#ENET_DMA_INTR_STAT_MACIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_INTR_STAT_MACIS_SHIFT
)Ë& 
ENET_DMA_INTR_STAT_MACIS_MASK
)

	)

3910 
	#ENET_DMA_DBG_STAT_AHSTS_MASK
 (0x1U)

	)

3911 
	#ENET_DMA_DBG_STAT_AHSTS_SHIFT
 (0U)

	)

3912 
	#ENET_DMA_DBG_STAT_AHSTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_DBG_STAT_AHSTS_SHIFT
)Ë& 
ENET_DMA_DBG_STAT_AHSTS_MASK
)

	)

3913 
	#ENET_DMA_DBG_STAT_RPS0_MASK
 (0xF00U)

	)

3914 
	#ENET_DMA_DBG_STAT_RPS0_SHIFT
 (8U)

	)

3915 
	#ENET_DMA_DBG_STAT_RPS0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_DBG_STAT_RPS0_SHIFT
)Ë& 
ENET_DMA_DBG_STAT_RPS0_MASK
)

	)

3916 
	#ENET_DMA_DBG_STAT_TPS0_MASK
 (0xF000U)

	)

3917 
	#ENET_DMA_DBG_STAT_TPS0_SHIFT
 (12U)

	)

3918 
	#ENET_DMA_DBG_STAT_TPS0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_DBG_STAT_TPS0_SHIFT
)Ë& 
ENET_DMA_DBG_STAT_TPS0_MASK
)

	)

3919 
	#ENET_DMA_DBG_STAT_RPS1_MASK
 (0xF0000U)

	)

3920 
	#ENET_DMA_DBG_STAT_RPS1_SHIFT
 (16U)

	)

3921 
	#ENET_DMA_DBG_STAT_RPS1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_DBG_STAT_RPS1_SHIFT
)Ë& 
ENET_DMA_DBG_STAT_RPS1_MASK
)

	)

3922 
	#ENET_DMA_DBG_STAT_TPS1_MASK
 (0xF00000U)

	)

3923 
	#ENET_DMA_DBG_STAT_TPS1_SHIFT
 (20U)

	)

3924 
	#ENET_DMA_DBG_STAT_TPS1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_DBG_STAT_TPS1_SHIFT
)Ë& 
ENET_DMA_DBG_STAT_TPS1_MASK
)

	)

3927 
	#ENET_DMA_CH_DMA_CHX_CTRL_PBLx8_MASK
 (0x10000U)

	)

3928 
	#ENET_DMA_CH_DMA_CHX_CTRL_PBLx8_SHIFT
 (16U)

	)

3929 
	#ENET_DMA_CH_DMA_CHX_CTRL_PBLx8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_CTRL_PBLx8_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_CTRL_PBLx8_MASK
)

	)

3930 
	#ENET_DMA_CH_DMA_CHX_CTRL_DSL_MASK
 (0x1C0000U)

	)

3931 
	#ENET_DMA_CH_DMA_CHX_CTRL_DSL_SHIFT
 (18U)

	)

3932 
	#ENET_DMA_CH_DMA_CHX_CTRL_DSL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_CTRL_DSL_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_CTRL_DSL_MASK
)

	)

3935 
	#ENET_DMA_CH_DMA_CHX_CTRL_COUNT
 (2U)

	)

3938 
	#ENET_DMA_CH_DMA_CHX_TX_CTRL_ST_MASK
 (0x1U)

	)

3939 
	#ENET_DMA_CH_DMA_CHX_TX_CTRL_ST_SHIFT
 (0U)

	)

3940 
	#ENET_DMA_CH_DMA_CHX_TX_CTRL_ST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_TX_CTRL_ST_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_TX_CTRL_ST_MASK
)

	)

3941 
	#ENET_DMA_CH_DMA_CHX_TX_CTRL_TCW_MASK
 (0xEU)

	)

3942 
	#ENET_DMA_CH_DMA_CHX_TX_CTRL_TCW_SHIFT
 (1U)

	)

3943 
	#ENET_DMA_CH_DMA_CHX_TX_CTRL_TCW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_TX_CTRL_TCW_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_TX_CTRL_TCW_MASK
)

	)

3944 
	#ENET_DMA_CH_DMA_CHX_TX_CTRL_OSF_MASK
 (0x10U)

	)

3945 
	#ENET_DMA_CH_DMA_CHX_TX_CTRL_OSF_SHIFT
 (4U)

	)

3946 
	#ENET_DMA_CH_DMA_CHX_TX_CTRL_OSF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_TX_CTRL_OSF_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_TX_CTRL_OSF_MASK
)

	)

3947 
	#ENET_DMA_CH_DMA_CHX_TX_CTRL_TxPBL_MASK
 (0x3F0000U)

	)

3948 
	#ENET_DMA_CH_DMA_CHX_TX_CTRL_TxPBL_SHIFT
 (16U)

	)

3949 
	#ENET_DMA_CH_DMA_CHX_TX_CTRL_TxPBL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_TX_CTRL_TxPBL_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_TX_CTRL_TxPBL_MASK
)

	)

3952 
	#ENET_DMA_CH_DMA_CHX_TX_CTRL_COUNT
 (2U)

	)

3955 
	#ENET_DMA_CH_DMA_CHX_RX_CTRL_SR_MASK
 (0x1U)

	)

3956 
	#ENET_DMA_CH_DMA_CHX_RX_CTRL_SR_SHIFT
 (0U)

	)

3957 
	#ENET_DMA_CH_DMA_CHX_RX_CTRL_SR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_RX_CTRL_SR_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_RX_CTRL_SR_MASK
)

	)

3958 
	#ENET_DMA_CH_DMA_CHX_RX_CTRL_RBSZ_MASK
 (0x7FF8U)

	)

3959 
	#ENET_DMA_CH_DMA_CHX_RX_CTRL_RBSZ_SHIFT
 (3U)

	)

3960 
	#ENET_DMA_CH_DMA_CHX_RX_CTRL_RBSZ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_RX_CTRL_RBSZ_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_RX_CTRL_RBSZ_MASK
)

	)

3961 
	#ENET_DMA_CH_DMA_CHX_RX_CTRL_RxPBL_MASK
 (0x3F0000U)

	)

3962 
	#ENET_DMA_CH_DMA_CHX_RX_CTRL_RxPBL_SHIFT
 (16U)

	)

3963 
	#ENET_DMA_CH_DMA_CHX_RX_CTRL_RxPBL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_RX_CTRL_RxPBL_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_RX_CTRL_RxPBL_MASK
)

	)

3964 
	#ENET_DMA_CH_DMA_CHX_RX_CTRL_RPF_MASK
 (0x80000000U)

	)

3965 
	#ENET_DMA_CH_DMA_CHX_RX_CTRL_RPF_SHIFT
 (31U)

	)

3966 
	#ENET_DMA_CH_DMA_CHX_RX_CTRL_RPF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_RX_CTRL_RPF_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_RX_CTRL_RPF_MASK
)

	)

3969 
	#ENET_DMA_CH_DMA_CHX_RX_CTRL_COUNT
 (2U)

	)

3972 
	#ENET_DMA_CH_DMA_CHX_TXDESC_LIST_ADDR_STL_MASK
 (0xFFFFFFFCU)

	)

3973 
	#ENET_DMA_CH_DMA_CHX_TXDESC_LIST_ADDR_STL_SHIFT
 (2U)

	)

3974 
	#ENET_DMA_CH_DMA_CHX_TXDESC_LIST_ADDR_STL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_TXDESC_LIST_ADDR_STL_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_TXDESC_LIST_ADDR_STL_MASK
)

	)

3977 
	#ENET_DMA_CH_DMA_CHX_TXDESC_LIST_ADDR_COUNT
 (2U)

	)

3980 
	#ENET_DMA_CH_DMA_CHX_RXDESC_LIST_ADDR_SRL_MASK
 (0xFFFFFFFCU)

	)

3981 
	#ENET_DMA_CH_DMA_CHX_RXDESC_LIST_ADDR_SRL_SHIFT
 (2U)

	)

3982 
	#ENET_DMA_CH_DMA_CHX_RXDESC_LIST_ADDR_SRL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_RXDESC_LIST_ADDR_SRL_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_RXDESC_LIST_ADDR_SRL_MASK
)

	)

3985 
	#ENET_DMA_CH_DMA_CHX_RXDESC_LIST_ADDR_COUNT
 (2U)

	)

3988 
	#ENET_DMA_CH_DMA_CHX_TXDESC_TAIL_PTR_TDTP_MASK
 (0xFFFFFFFCU)

	)

3989 
	#ENET_DMA_CH_DMA_CHX_TXDESC_TAIL_PTR_TDTP_SHIFT
 (2U)

	)

3990 
	#ENET_DMA_CH_DMA_CHX_TXDESC_TAIL_PTR_TDTP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_TXDESC_TAIL_PTR_TDTP_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_TXDESC_TAIL_PTR_TDTP_MASK
)

	)

3993 
	#ENET_DMA_CH_DMA_CHX_TXDESC_TAIL_PTR_COUNT
 (2U)

	)

3996 
	#ENET_DMA_CH_DMA_CHX_RXDESC_TAIL_PTR_RDTP_MASK
 (0xFFFFFFFCU)

	)

3997 
	#ENET_DMA_CH_DMA_CHX_RXDESC_TAIL_PTR_RDTP_SHIFT
 (2U)

	)

3998 
	#ENET_DMA_CH_DMA_CHX_RXDESC_TAIL_PTR_RDTP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_RXDESC_TAIL_PTR_RDTP_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_RXDESC_TAIL_PTR_RDTP_MASK
)

	)

4001 
	#ENET_DMA_CH_DMA_CHX_RXDESC_TAIL_PTR_COUNT
 (2U)

	)

4004 
	#ENET_DMA_CH_DMA_CHX_TXDESC_RING_LENGTH_TDRL_MASK
 (0x3FFU)

	)

4005 
	#ENET_DMA_CH_DMA_CHX_TXDESC_RING_LENGTH_TDRL_SHIFT
 (0U)

	)

4006 
	#ENET_DMA_CH_DMA_CHX_TXDESC_RING_LENGTH_TDRL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_TXDESC_RING_LENGTH_TDRL_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_TXDESC_RING_LENGTH_TDRL_MASK
)

	)

4009 
	#ENET_DMA_CH_DMA_CHX_TXDESC_RING_LENGTH_COUNT
 (2U)

	)

4012 
	#ENET_DMA_CH_DMA_CHX_RXDESC_RING_LENGTH_RDRL_MASK
 (0x3FFU)

	)

4013 
	#ENET_DMA_CH_DMA_CHX_RXDESC_RING_LENGTH_RDRL_SHIFT
 (0U)

	)

4014 
	#ENET_DMA_CH_DMA_CHX_RXDESC_RING_LENGTH_RDRL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_RXDESC_RING_LENGTH_RDRL_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_RXDESC_RING_LENGTH_RDRL_MASK
)

	)

4017 
	#ENET_DMA_CH_DMA_CHX_RXDESC_RING_LENGTH_COUNT
 (2U)

	)

4020 
	#ENET_DMA_CH_DMA_CHX_INT_EN_TIE_MASK
 (0x1U)

	)

4021 
	#ENET_DMA_CH_DMA_CHX_INT_EN_TIE_SHIFT
 (0U)

	)

4022 
	#ENET_DMA_CH_DMA_CHX_INT_EN_TIE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_INT_EN_TIE_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_INT_EN_TIE_MASK
)

	)

4023 
	#ENET_DMA_CH_DMA_CHX_INT_EN_TSE_MASK
 (0x2U)

	)

4024 
	#ENET_DMA_CH_DMA_CHX_INT_EN_TSE_SHIFT
 (1U)

	)

4025 
	#ENET_DMA_CH_DMA_CHX_INT_EN_TSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_INT_EN_TSE_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_INT_EN_TSE_MASK
)

	)

4026 
	#ENET_DMA_CH_DMA_CHX_INT_EN_TBUE_MASK
 (0x4U)

	)

4027 
	#ENET_DMA_CH_DMA_CHX_INT_EN_TBUE_SHIFT
 (2U)

	)

4028 
	#ENET_DMA_CH_DMA_CHX_INT_EN_TBUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_INT_EN_TBUE_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_INT_EN_TBUE_MASK
)

	)

4029 
	#ENET_DMA_CH_DMA_CHX_INT_EN_RIE_MASK
 (0x40U)

	)

4030 
	#ENET_DMA_CH_DMA_CHX_INT_EN_RIE_SHIFT
 (6U)

	)

4031 
	#ENET_DMA_CH_DMA_CHX_INT_EN_RIE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_INT_EN_RIE_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_INT_EN_RIE_MASK
)

	)

4032 
	#ENET_DMA_CH_DMA_CHX_INT_EN_RBUE_MASK
 (0x80U)

	)

4033 
	#ENET_DMA_CH_DMA_CHX_INT_EN_RBUE_SHIFT
 (7U)

	)

4034 
	#ENET_DMA_CH_DMA_CHX_INT_EN_RBUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_INT_EN_RBUE_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_INT_EN_RBUE_MASK
)

	)

4035 
	#ENET_DMA_CH_DMA_CHX_INT_EN_RSE_MASK
 (0x100U)

	)

4036 
	#ENET_DMA_CH_DMA_CHX_INT_EN_RSE_SHIFT
 (8U)

	)

4037 
	#ENET_DMA_CH_DMA_CHX_INT_EN_RSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_INT_EN_RSE_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_INT_EN_RSE_MASK
)

	)

4038 
	#ENET_DMA_CH_DMA_CHX_INT_EN_RWTE_MASK
 (0x200U)

	)

4039 
	#ENET_DMA_CH_DMA_CHX_INT_EN_RWTE_SHIFT
 (9U)

	)

4040 
	#ENET_DMA_CH_DMA_CHX_INT_EN_RWTE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_INT_EN_RWTE_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_INT_EN_RWTE_MASK
)

	)

4041 
	#ENET_DMA_CH_DMA_CHX_INT_EN_ETIE_MASK
 (0x400U)

	)

4042 
	#ENET_DMA_CH_DMA_CHX_INT_EN_ETIE_SHIFT
 (10U)

	)

4043 
	#ENET_DMA_CH_DMA_CHX_INT_EN_ETIE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_INT_EN_ETIE_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_INT_EN_ETIE_MASK
)

	)

4044 
	#ENET_DMA_CH_DMA_CHX_INT_EN_ERIE_MASK
 (0x800U)

	)

4045 
	#ENET_DMA_CH_DMA_CHX_INT_EN_ERIE_SHIFT
 (11U)

	)

4046 
	#ENET_DMA_CH_DMA_CHX_INT_EN_ERIE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_INT_EN_ERIE_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_INT_EN_ERIE_MASK
)

	)

4047 
	#ENET_DMA_CH_DMA_CHX_INT_EN_FBEE_MASK
 (0x1000U)

	)

4048 
	#ENET_DMA_CH_DMA_CHX_INT_EN_FBEE_SHIFT
 (12U)

	)

4049 
	#ENET_DMA_CH_DMA_CHX_INT_EN_FBEE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_INT_EN_FBEE_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_INT_EN_FBEE_MASK
)

	)

4050 
	#ENET_DMA_CH_DMA_CHX_INT_EN_AIE_MASK
 (0x4000U)

	)

4051 
	#ENET_DMA_CH_DMA_CHX_INT_EN_AIE_SHIFT
 (14U)

	)

4052 
	#ENET_DMA_CH_DMA_CHX_INT_EN_AIE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_INT_EN_AIE_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_INT_EN_AIE_MASK
)

	)

4053 
	#ENET_DMA_CH_DMA_CHX_INT_EN_NIE_MASK
 (0x8000U)

	)

4054 
	#ENET_DMA_CH_DMA_CHX_INT_EN_NIE_SHIFT
 (15U)

	)

4055 
	#ENET_DMA_CH_DMA_CHX_INT_EN_NIE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_INT_EN_NIE_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_INT_EN_NIE_MASK
)

	)

4058 
	#ENET_DMA_CH_DMA_CHX_INT_EN_COUNT
 (2U)

	)

4061 
	#ENET_DMA_CH_DMA_CHX_RX_INT_WDTIMER_RIWT_MASK
 (0xFFU)

	)

4062 
	#ENET_DMA_CH_DMA_CHX_RX_INT_WDTIMER_RIWT_SHIFT
 (0U)

	)

4063 
	#ENET_DMA_CH_DMA_CHX_RX_INT_WDTIMER_RIWT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_RX_INT_WDTIMER_RIWT_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_RX_INT_WDTIMER_RIWT_MASK
)

	)

4066 
	#ENET_DMA_CH_DMA_CHX_RX_INT_WDTIMER_COUNT
 (2U)

	)

4069 
	#ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_ESC_MASK
 (0x1U)

	)

4070 
	#ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_ESC_SHIFT
 (0U)

	)

4071 
	#ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_ESC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_ESC_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_ESC_MASK
)

	)

4072 
	#ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_ASC_MASK
 (0x2U)

	)

4073 
	#ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_ASC_SHIFT
 (1U)

	)

4074 
	#ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_ASC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_ASC_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_ASC_MASK
)

	)

4075 
	#ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_RSN_MASK
 (0xF0000U)

	)

4076 
	#ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_RSN_SHIFT
 (16U)

	)

4077 
	#ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_RSN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_RSN_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_RSN_MASK
)

	)

4080 
	#ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_COUNT
 (2U)

	)

4083 
	#ENET_DMA_CH_DMA_CHX_CUR_HST_TXDESC_HTD_MASK
 (0xFFFFFFFFU)

	)

4084 
	#ENET_DMA_CH_DMA_CHX_CUR_HST_TXDESC_HTD_SHIFT
 (0U)

	)

4085 
	#ENET_DMA_CH_DMA_CHX_CUR_HST_TXDESC_HTD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_CUR_HST_TXDESC_HTD_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_CUR_HST_TXDESC_HTD_MASK
)

	)

4088 
	#ENET_DMA_CH_DMA_CHX_CUR_HST_TXDESC_COUNT
 (2U)

	)

4091 
	#ENET_DMA_CH_DMA_CHX_CUR_HST_RXDESC_HRD_MASK
 (0xFFFFFFFFU)

	)

4092 
	#ENET_DMA_CH_DMA_CHX_CUR_HST_RXDESC_HRD_SHIFT
 (0U)

	)

4093 
	#ENET_DMA_CH_DMA_CHX_CUR_HST_RXDESC_HRD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_CUR_HST_RXDESC_HRD_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_CUR_HST_RXDESC_HRD_MASK
)

	)

4096 
	#ENET_DMA_CH_DMA_CHX_CUR_HST_RXDESC_COUNT
 (2U)

	)

4099 
	#ENET_DMA_CH_DMA_CHX_CUR_HST_TXBUF_HTB_MASK
 (0xFFFFFFFFU)

	)

4100 
	#ENET_DMA_CH_DMA_CHX_CUR_HST_TXBUF_HTB_SHIFT
 (0U)

	)

4101 
	#ENET_DMA_CH_DMA_CHX_CUR_HST_TXBUF_HTB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_CUR_HST_TXBUF_HTB_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_CUR_HST_TXBUF_HTB_MASK
)

	)

4104 
	#ENET_DMA_CH_DMA_CHX_CUR_HST_TXBUF_COUNT
 (2U)

	)

4107 
	#ENET_DMA_CH_DMA_CHX_CUR_HST_RXBUF_HRB_MASK
 (0xFFFFFFFFU)

	)

4108 
	#ENET_DMA_CH_DMA_CHX_CUR_HST_RXBUF_HRB_SHIFT
 (0U)

	)

4109 
	#ENET_DMA_CH_DMA_CHX_CUR_HST_RXBUF_HRB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_CUR_HST_RXBUF_HRB_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_CUR_HST_RXBUF_HRB_MASK
)

	)

4112 
	#ENET_DMA_CH_DMA_CHX_CUR_HST_RXBUF_COUNT
 (2U)

	)

4115 
	#ENET_DMA_CH_DMA_CHX_STAT_TI_MASK
 (0x1U)

	)

4116 
	#ENET_DMA_CH_DMA_CHX_STAT_TI_SHIFT
 (0U)

	)

4117 
	#ENET_DMA_CH_DMA_CHX_STAT_TI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_STAT_TI_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_STAT_TI_MASK
)

	)

4118 
	#ENET_DMA_CH_DMA_CHX_STAT_TPS_MASK
 (0x2U)

	)

4119 
	#ENET_DMA_CH_DMA_CHX_STAT_TPS_SHIFT
 (1U)

	)

4120 
	#ENET_DMA_CH_DMA_CHX_STAT_TPS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_STAT_TPS_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_STAT_TPS_MASK
)

	)

4121 
	#ENET_DMA_CH_DMA_CHX_STAT_TBU_MASK
 (0x4U)

	)

4122 
	#ENET_DMA_CH_DMA_CHX_STAT_TBU_SHIFT
 (2U)

	)

4123 
	#ENET_DMA_CH_DMA_CHX_STAT_TBU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_STAT_TBU_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_STAT_TBU_MASK
)

	)

4124 
	#ENET_DMA_CH_DMA_CHX_STAT_RI_MASK
 (0x40U)

	)

4125 
	#ENET_DMA_CH_DMA_CHX_STAT_RI_SHIFT
 (6U)

	)

4126 
	#ENET_DMA_CH_DMA_CHX_STAT_RI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_STAT_RI_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_STAT_RI_MASK
)

	)

4127 
	#ENET_DMA_CH_DMA_CHX_STAT_RBU_MASK
 (0x80U)

	)

4128 
	#ENET_DMA_CH_DMA_CHX_STAT_RBU_SHIFT
 (7U)

	)

4129 
	#ENET_DMA_CH_DMA_CHX_STAT_RBU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_STAT_RBU_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_STAT_RBU_MASK
)

	)

4130 
	#ENET_DMA_CH_DMA_CHX_STAT_RPS_MASK
 (0x100U)

	)

4131 
	#ENET_DMA_CH_DMA_CHX_STAT_RPS_SHIFT
 (8U)

	)

4132 
	#ENET_DMA_CH_DMA_CHX_STAT_RPS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_STAT_RPS_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_STAT_RPS_MASK
)

	)

4133 
	#ENET_DMA_CH_DMA_CHX_STAT_RWT_MASK
 (0x200U)

	)

4134 
	#ENET_DMA_CH_DMA_CHX_STAT_RWT_SHIFT
 (9U)

	)

4135 
	#ENET_DMA_CH_DMA_CHX_STAT_RWT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_STAT_RWT_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_STAT_RWT_MASK
)

	)

4136 
	#ENET_DMA_CH_DMA_CHX_STAT_ETI_MASK
 (0x400U)

	)

4137 
	#ENET_DMA_CH_DMA_CHX_STAT_ETI_SHIFT
 (10U)

	)

4138 
	#ENET_DMA_CH_DMA_CHX_STAT_ETI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_STAT_ETI_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_STAT_ETI_MASK
)

	)

4139 
	#ENET_DMA_CH_DMA_CHX_STAT_ERI_MASK
 (0x800U)

	)

4140 
	#ENET_DMA_CH_DMA_CHX_STAT_ERI_SHIFT
 (11U)

	)

4141 
	#ENET_DMA_CH_DMA_CHX_STAT_ERI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_STAT_ERI_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_STAT_ERI_MASK
)

	)

4142 
	#ENET_DMA_CH_DMA_CHX_STAT_FBE_MASK
 (0x1000U)

	)

4143 
	#ENET_DMA_CH_DMA_CHX_STAT_FBE_SHIFT
 (12U)

	)

4144 
	#ENET_DMA_CH_DMA_CHX_STAT_FBE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_STAT_FBE_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_STAT_FBE_MASK
)

	)

4145 
	#ENET_DMA_CH_DMA_CHX_STAT_AIS_MASK
 (0x4000U)

	)

4146 
	#ENET_DMA_CH_DMA_CHX_STAT_AIS_SHIFT
 (14U)

	)

4147 
	#ENET_DMA_CH_DMA_CHX_STAT_AIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_STAT_AIS_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_STAT_AIS_MASK
)

	)

4148 
	#ENET_DMA_CH_DMA_CHX_STAT_NIS_MASK
 (0x8000U)

	)

4149 
	#ENET_DMA_CH_DMA_CHX_STAT_NIS_SHIFT
 (15U)

	)

4150 
	#ENET_DMA_CH_DMA_CHX_STAT_NIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_STAT_NIS_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_STAT_NIS_MASK
)

	)

4151 
	#ENET_DMA_CH_DMA_CHX_STAT_EB_MASK
 (0x70000U)

	)

4152 
	#ENET_DMA_CH_DMA_CHX_STAT_EB_SHIFT
 (16U)

	)

4153 
	#ENET_DMA_CH_DMA_CHX_STAT_EB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
ENET_DMA_CH_DMA_CHX_STAT_EB_SHIFT
)Ë& 
ENET_DMA_CH_DMA_CHX_STAT_EB_MASK
)

	)

4156 
	#ENET_DMA_CH_DMA_CHX_STAT_COUNT
 (2U)

	)

4166 
	#ENET_BASE
 (0x40092000u)

	)

4168 
	#ENET
 ((
ENET_Ty≥
 *)
ENET_BASE
)

	)

4170 
	#ENET_BASE_ADDRS
 { 
ENET_BASE
 }

	)

4172 
	#ENET_BASE_PTRS
 { 
ENET
 }

	)

4174 
	#ENET_IRQS
 { 
ETHERNET_IRQn
 }

	)

4175 
	#ENET_PMT_IRQS
 { 
ETHERNET_PMT_IRQn
 }

	)

4176 
	#ENET_MACLP_IRQS
 { 
ETHERNET_MACLP_IRQn
 }

	)

4194 
uöt8_t
 
	mRESERVED_0
[4088];

4195 
__IO
 
uöt32_t
 
	mPSELID
;

4196 
__IO
 
uöt32_t
 
	mPID
;

4197 } 
	tFLEXCOMM_Ty≥
;

4209 
	#FLEXCOMM_PSELID_PERSEL_MASK
 (0x7U)

	)

4210 
	#FLEXCOMM_PSELID_PERSEL_SHIFT
 (0U)

	)

4211 
	#FLEXCOMM_PSELID_PERSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
FLEXCOMM_PSELID_PERSEL_SHIFT
)Ë& 
FLEXCOMM_PSELID_PERSEL_MASK
)

	)

4212 
	#FLEXCOMM_PSELID_LOCK_MASK
 (0x8U)

	)

4213 
	#FLEXCOMM_PSELID_LOCK_SHIFT
 (3U)

	)

4214 
	#FLEXCOMM_PSELID_LOCK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
FLEXCOMM_PSELID_LOCK_SHIFT
)Ë& 
FLEXCOMM_PSELID_LOCK_MASK
)

	)

4215 
	#FLEXCOMM_PSELID_USARTPRESENT_MASK
 (0x10U)

	)

4216 
	#FLEXCOMM_PSELID_USARTPRESENT_SHIFT
 (4U)

	)

4217 
	#FLEXCOMM_PSELID_USARTPRESENT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
FLEXCOMM_PSELID_USARTPRESENT_SHIFT
)Ë& 
FLEXCOMM_PSELID_USARTPRESENT_MASK
)

	)

4218 
	#FLEXCOMM_PSELID_SPIPRESENT_MASK
 (0x20U)

	)

4219 
	#FLEXCOMM_PSELID_SPIPRESENT_SHIFT
 (5U)

	)

4220 
	#FLEXCOMM_PSELID_SPIPRESENT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
FLEXCOMM_PSELID_SPIPRESENT_SHIFT
)Ë& 
FLEXCOMM_PSELID_SPIPRESENT_MASK
)

	)

4221 
	#FLEXCOMM_PSELID_I2CPRESENT_MASK
 (0x40U)

	)

4222 
	#FLEXCOMM_PSELID_I2CPRESENT_SHIFT
 (6U)

	)

4223 
	#FLEXCOMM_PSELID_I2CPRESENT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
FLEXCOMM_PSELID_I2CPRESENT_SHIFT
)Ë& 
FLEXCOMM_PSELID_I2CPRESENT_MASK
)

	)

4224 
	#FLEXCOMM_PSELID_I2SPRESENT_MASK
 (0x80U)

	)

4225 
	#FLEXCOMM_PSELID_I2SPRESENT_SHIFT
 (7U)

	)

4226 
	#FLEXCOMM_PSELID_I2SPRESENT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
FLEXCOMM_PSELID_I2SPRESENT_SHIFT
)Ë& 
FLEXCOMM_PSELID_I2SPRESENT_MASK
)

	)

4227 
	#FLEXCOMM_PSELID_ID_MASK
 (0xFFFFF000U)

	)

4228 
	#FLEXCOMM_PSELID_ID_SHIFT
 (12U)

	)

4229 
	#FLEXCOMM_PSELID_ID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
FLEXCOMM_PSELID_ID_SHIFT
)Ë& 
FLEXCOMM_PSELID_ID_MASK
)

	)

4232 
	#FLEXCOMM_PID_Mö‹_Rev_MASK
 (0xF00U)

	)

4233 
	#FLEXCOMM_PID_Mö‹_Rev_SHIFT
 (8U)

	)

4234 
	#FLEXCOMM_PID_Mö‹_Rev
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
FLEXCOMM_PID_Mö‹_Rev_SHIFT
)Ë& 
FLEXCOMM_PID_Mö‹_Rev_MASK
)

	)

4235 
	#FLEXCOMM_PID_Maj‹_Rev_MASK
 (0xF000U)

	)

4236 
	#FLEXCOMM_PID_Maj‹_Rev_SHIFT
 (12U)

	)

4237 
	#FLEXCOMM_PID_Maj‹_Rev
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
FLEXCOMM_PID_Maj‹_Rev_SHIFT
)Ë& 
FLEXCOMM_PID_Maj‹_Rev_MASK
)

	)

4238 
	#FLEXCOMM_PID_ID_MASK
 (0xFFFF0000U)

	)

4239 
	#FLEXCOMM_PID_ID_SHIFT
 (16U)

	)

4240 
	#FLEXCOMM_PID_ID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
FLEXCOMM_PID_ID_SHIFT
)Ë& 
FLEXCOMM_PID_ID_MASK
)

	)

4250 
	#FLEXCOMM0_BASE
 (0x40086000u)

	)

4252 
	#FLEXCOMM0
 ((
FLEXCOMM_Ty≥
 *)
FLEXCOMM0_BASE
)

	)

4254 
	#FLEXCOMM1_BASE
 (0x40087000u)

	)

4256 
	#FLEXCOMM1
 ((
FLEXCOMM_Ty≥
 *)
FLEXCOMM1_BASE
)

	)

4258 
	#FLEXCOMM2_BASE
 (0x40088000u)

	)

4260 
	#FLEXCOMM2
 ((
FLEXCOMM_Ty≥
 *)
FLEXCOMM2_BASE
)

	)

4262 
	#FLEXCOMM3_BASE
 (0x40089000u)

	)

4264 
	#FLEXCOMM3
 ((
FLEXCOMM_Ty≥
 *)
FLEXCOMM3_BASE
)

	)

4266 
	#FLEXCOMM4_BASE
 (0x4008A000u)

	)

4268 
	#FLEXCOMM4
 ((
FLEXCOMM_Ty≥
 *)
FLEXCOMM4_BASE
)

	)

4270 
	#FLEXCOMM5_BASE
 (0x40096000u)

	)

4272 
	#FLEXCOMM5
 ((
FLEXCOMM_Ty≥
 *)
FLEXCOMM5_BASE
)

	)

4274 
	#FLEXCOMM6_BASE
 (0x40097000u)

	)

4276 
	#FLEXCOMM6
 ((
FLEXCOMM_Ty≥
 *)
FLEXCOMM6_BASE
)

	)

4278 
	#FLEXCOMM7_BASE
 (0x40098000u)

	)

4280 
	#FLEXCOMM7
 ((
FLEXCOMM_Ty≥
 *)
FLEXCOMM7_BASE
)

	)

4282 
	#FLEXCOMM8_BASE
 (0x40099000u)

	)

4284 
	#FLEXCOMM8
 ((
FLEXCOMM_Ty≥
 *)
FLEXCOMM8_BASE
)

	)

4286 
	#FLEXCOMM9_BASE
 (0x4009A000u)

	)

4288 
	#FLEXCOMM9
 ((
FLEXCOMM_Ty≥
 *)
FLEXCOMM9_BASE
)

	)

4290 
	#FLEXCOMM_BASE_ADDRS
 { 
FLEXCOMM0_BASE
, 
FLEXCOMM1_BASE
, 
FLEXCOMM2_BASE
, 
FLEXCOMM3_BASE
, 
FLEXCOMM4_BASE
, 
FLEXCOMM5_BASE
, 
FLEXCOMM6_BASE
, 
FLEXCOMM7_BASE
, 
FLEXCOMM8_BASE
, 
FLEXCOMM9_BASE
 }

	)

4292 
	#FLEXCOMM_BASE_PTRS
 { 
FLEXCOMM0
, 
FLEXCOMM1
, 
FLEXCOMM2
, 
FLEXCOMM3
, 
FLEXCOMM4
, 
FLEXCOMM5
, 
FLEXCOMM6
, 
FLEXCOMM7
, 
FLEXCOMM8
, 
FLEXCOMM9
 }

	)

4294 
	#FLEXCOMM_IRQS
 { 
FLEXCOMM0_IRQn
, 
FLEXCOMM1_IRQn
, 
FLEXCOMM2_IRQn
, 
FLEXCOMM3_IRQn
, 
FLEXCOMM4_IRQn
, 
FLEXCOMM5_IRQn
, 
FLEXCOMM6_IRQn
, 
FLEXCOMM7_IRQn
, 
FLEXCOMM8_IRQn
, 
FLEXCOMM9_IRQn
 }

	)

4312 
__IO
 
uöt32_t
 
	mFCTR
;

4313 
uöt8_t
 
	mRESERVED_0
[12];

4314 
__IO
 
uöt32_t
 
	mFBWST
;

4315 
uöt8_t
 
	mRESERVED_1
[12];

4316 
__IO
 
uöt32_t
 
	mFMSSTART
;

4317 
__IO
 
uöt32_t
 
	mFMSSTOP
;

4318 
uöt8_t
 
	mRESERVED_2
[4];

4319 
__I
 
uöt32_t
 
	mFMSW
[4];

4320 
uöt8_t
 
	mRESERVED_3
[4004];

4321 
__I
 
uöt32_t
 
	mFMSTAT
;

4322 
uöt8_t
 
	mRESERVED_4
[4];

4323 
__O
 
uöt32_t
 
	mFMSTATCLR
;

4324 } 
	tFMC_Ty≥
;

4336 
	#FMC_FCTR_FS_RD0_MASK
 (0x8U)

	)

4337 
	#FMC_FCTR_FS_RD0_SHIFT
 (3U)

	)

4338 
	#FMC_FCTR_FS_RD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
FMC_FCTR_FS_RD0_SHIFT
)Ë& 
FMC_FCTR_FS_RD0_MASK
)

	)

4339 
	#FMC_FCTR_FS_RD1_MASK
 (0x10U)

	)

4340 
	#FMC_FCTR_FS_RD1_SHIFT
 (4U)

	)

4341 
	#FMC_FCTR_FS_RD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
FMC_FCTR_FS_RD1_SHIFT
)Ë& 
FMC_FCTR_FS_RD1_MASK
)

	)

4344 
	#FMC_FBWST_WAITSTATES_MASK
 (0xFFU)

	)

4345 
	#FMC_FBWST_WAITSTATES_SHIFT
 (0U)

	)

4346 
	#FMC_FBWST_WAITSTATES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
FMC_FBWST_WAITSTATES_SHIFT
)Ë& 
FMC_FBWST_WAITSTATES_MASK
)

	)

4349 
	#FMC_FMSSTART_START_MASK
 (0x1FFFFU)

	)

4350 
	#FMC_FMSSTART_START_SHIFT
 (0U)

	)

4351 
	#FMC_FMSSTART_START
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
FMC_FMSSTART_START_SHIFT
)Ë& 
FMC_FMSSTART_START_MASK
)

	)

4354 
	#FMC_FMSSTOP_STOP_MASK
 (0x1FFFFU)

	)

4355 
	#FMC_FMSSTOP_STOP_SHIFT
 (0U)

	)

4356 
	#FMC_FMSSTOP_STOP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
FMC_FMSSTOP_STOP_SHIFT
)Ë& 
FMC_FMSSTOP_STOP_MASK
)

	)

4357 
	#FMC_FMSSTOP_SIG_START_MASK
 (0x20000U)

	)

4358 
	#FMC_FMSSTOP_SIG_START_SHIFT
 (17U)

	)

4359 
	#FMC_FMSSTOP_SIG_START
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
FMC_FMSSTOP_SIG_START_SHIFT
)Ë& 
FMC_FMSSTOP_SIG_START_MASK
)

	)

4362 
	#FMC_FMSW_SW_MASK
 (0xFFFFFFFFU)

	)

4363 
	#FMC_FMSW_SW_SHIFT
 (0U)

	)

4364 
	#FMC_FMSW_SW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
FMC_FMSW_SW_SHIFT
)Ë& 
FMC_FMSW_SW_MASK
)

	)

4367 
	#FMC_FMSW_COUNT
 (4U)

	)

4370 
	#FMC_FMSTAT_SIG_DONE_MASK
 (0x4U)

	)

4371 
	#FMC_FMSTAT_SIG_DONE_SHIFT
 (2U)

	)

4372 
	#FMC_FMSTAT_SIG_DONE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
FMC_FMSTAT_SIG_DONE_SHIFT
)Ë& 
FMC_FMSTAT_SIG_DONE_MASK
)

	)

4375 
	#FMC_FMSTATCLR_SIG_DONE_CLR_MASK
 (0x4U)

	)

4376 
	#FMC_FMSTATCLR_SIG_DONE_CLR_SHIFT
 (2U)

	)

4377 
	#FMC_FMSTATCLR_SIG_DONE_CLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
FMC_FMSTATCLR_SIG_DONE_CLR_SHIFT
)Ë& 
FMC_FMSTATCLR_SIG_DONE_CLR_MASK
)

	)

4387 
	#FMC_BASE
 (0x40034000u)

	)

4389 
	#FMC
 ((
FMC_Ty≥
 *)
FMC_BASE
)

	)

4391 
	#FMC_BASE_ADDRS
 { 
FMC_BASE
 }

	)

4393 
	#FMC_BASE_PTRS
 { 
FMC
 }

	)

4411 
__IO
 
uöt32_t
 
	mCTRL
;

4412 
uöt8_t
 
	mRESERVED_0
[28];

4413 
__IO
 
uöt32_t
 
	mPORT_POL
[2];

4414 
uöt8_t
 
	mRESERVED_1
[24];

4415 
__IO
 
uöt32_t
 
	mPORT_ENA
[2];

4416 } 
	tGINT_Ty≥
;

4428 
	#GINT_CTRL_INT_MASK
 (0x1U)

	)

4429 
	#GINT_CTRL_INT_SHIFT
 (0U)

	)

4430 
	#GINT_CTRL_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
GINT_CTRL_INT_SHIFT
)Ë& 
GINT_CTRL_INT_MASK
)

	)

4431 
	#GINT_CTRL_COMB_MASK
 (0x2U)

	)

4432 
	#GINT_CTRL_COMB_SHIFT
 (1U)

	)

4433 
	#GINT_CTRL_COMB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
GINT_CTRL_COMB_SHIFT
)Ë& 
GINT_CTRL_COMB_MASK
)

	)

4434 
	#GINT_CTRL_TRIG_MASK
 (0x4U)

	)

4435 
	#GINT_CTRL_TRIG_SHIFT
 (2U)

	)

4436 
	#GINT_CTRL_TRIG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
GINT_CTRL_TRIG_SHIFT
)Ë& 
GINT_CTRL_TRIG_MASK
)

	)

4439 
	#GINT_PORT_POL_POL_MASK
 (0xFFFFFFFFU)

	)

4440 
	#GINT_PORT_POL_POL_SHIFT
 (0U)

	)

4441 
	#GINT_PORT_POL_POL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
GINT_PORT_POL_POL_SHIFT
)Ë& 
GINT_PORT_POL_POL_MASK
)

	)

4444 
	#GINT_PORT_POL_COUNT
 (2U)

	)

4447 
	#GINT_PORT_ENA_ENA_MASK
 (0xFFFFFFFFU)

	)

4448 
	#GINT_PORT_ENA_ENA_SHIFT
 (0U)

	)

4449 
	#GINT_PORT_ENA_ENA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
GINT_PORT_ENA_ENA_SHIFT
)Ë& 
GINT_PORT_ENA_ENA_MASK
)

	)

4452 
	#GINT_PORT_ENA_COUNT
 (2U)

	)

4462 
	#GINT0_BASE
 (0x40002000u)

	)

4464 
	#GINT0
 ((
GINT_Ty≥
 *)
GINT0_BASE
)

	)

4466 
	#GINT1_BASE
 (0x40003000u)

	)

4468 
	#GINT1
 ((
GINT_Ty≥
 *)
GINT1_BASE
)

	)

4470 
	#GINT_BASE_ADDRS
 { 
GINT0_BASE
, 
GINT1_BASE
 }

	)

4472 
	#GINT_BASE_PTRS
 { 
GINT0
, 
GINT1
 }

	)

4474 
	#GINT_IRQS
 { 
GINT0_IRQn
, 
GINT1_IRQn
 }

	)

4492 
__IO
 
uöt8_t
 
	mB
[6][32];

4493 
uöt8_t
 
	mRESERVED_0
[3904];

4494 
__IO
 
uöt32_t
 
	mW
[6][32];

4495 
uöt8_t
 
	mRESERVED_1
[3328];

4496 
__IO
 
uöt32_t
 
	mDIR
[6];

4497 
uöt8_t
 
	mRESERVED_2
[104];

4498 
__IO
 
uöt32_t
 
	mMASK
[6];

4499 
uöt8_t
 
	mRESERVED_3
[104];

4500 
__IO
 
uöt32_t
 
	mPIN
[6];

4501 
uöt8_t
 
	mRESERVED_4
[104];

4502 
__IO
 
uöt32_t
 
	mMPIN
[6];

4503 
uöt8_t
 
	mRESERVED_5
[104];

4504 
__IO
 
uöt32_t
 
	mSET
[6];

4505 
uöt8_t
 
	mRESERVED_6
[104];

4506 
__O
 
uöt32_t
 
	mCLR
[6];

4507 
uöt8_t
 
	mRESERVED_7
[104];

4508 
__O
 
uöt32_t
 
	mNOT
[6];

4509 
uöt8_t
 
	mRESERVED_8
[104];

4510 
__O
 
uöt32_t
 
	mDIRSET
[6];

4511 
uöt8_t
 
	mRESERVED_9
[104];

4512 
__O
 
uöt32_t
 
	mDIRCLR
[6];

4513 
uöt8_t
 
	mRESERVED_10
[104];

4514 
__O
 
uöt32_t
 
	mDIRNOT
[6];

4515 } 
	tGPIO_Ty≥
;

4527 
	#GPIO_B_PBYTE_MASK
 (0x1U)

	)

4528 
	#GPIO_B_PBYTE_SHIFT
 (0U)

	)

4529 
	#GPIO_B_PBYTE
(
x
Ë(((
uöt8_t
)(((uöt8_t)(x)Ë<< 
GPIO_B_PBYTE_SHIFT
)Ë& 
GPIO_B_PBYTE_MASK
)

	)

4532 
	#GPIO_B_COUNT
 (6U)

	)

4535 
	#GPIO_B_COUNT2
 (32U)

	)

4538 
	#GPIO_W_PWORD_MASK
 (0xFFFFFFFFU)

	)

4539 
	#GPIO_W_PWORD_SHIFT
 (0U)

	)

4540 
	#GPIO_W_PWORD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
GPIO_W_PWORD_SHIFT
)Ë& 
GPIO_W_PWORD_MASK
)

	)

4543 
	#GPIO_W_COUNT
 (6U)

	)

4546 
	#GPIO_W_COUNT2
 (32U)

	)

4549 
	#GPIO_DIR_DIRP_MASK
 (0xFFFFFFFFU)

	)

4550 
	#GPIO_DIR_DIRP_SHIFT
 (0U)

	)

4551 
	#GPIO_DIR_DIRP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
GPIO_DIR_DIRP_SHIFT
)Ë& 
GPIO_DIR_DIRP_MASK
)

	)

4554 
	#GPIO_DIR_COUNT
 (6U)

	)

4557 
	#GPIO_MASK_MASKP_MASK
 (0xFFFFFFFFU)

	)

4558 
	#GPIO_MASK_MASKP_SHIFT
 (0U)

	)

4559 
	#GPIO_MASK_MASKP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
GPIO_MASK_MASKP_SHIFT
)Ë& 
GPIO_MASK_MASKP_MASK
)

	)

4562 
	#GPIO_MASK_COUNT
 (6U)

	)

4565 
	#GPIO_PIN_PORT_MASK
 (0xFFFFFFFFU)

	)

4566 
	#GPIO_PIN_PORT_SHIFT
 (0U)

	)

4567 
	#GPIO_PIN_PORT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
GPIO_PIN_PORT_SHIFT
)Ë& 
GPIO_PIN_PORT_MASK
)

	)

4570 
	#GPIO_PIN_COUNT
 (6U)

	)

4573 
	#GPIO_MPIN_MPORTP_MASK
 (0xFFFFFFFFU)

	)

4574 
	#GPIO_MPIN_MPORTP_SHIFT
 (0U)

	)

4575 
	#GPIO_MPIN_MPORTP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
GPIO_MPIN_MPORTP_SHIFT
)Ë& 
GPIO_MPIN_MPORTP_MASK
)

	)

4578 
	#GPIO_MPIN_COUNT
 (6U)

	)

4581 
	#GPIO_SET_SETP_MASK
 (0xFFFFFFFFU)

	)

4582 
	#GPIO_SET_SETP_SHIFT
 (0U)

	)

4583 
	#GPIO_SET_SETP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
GPIO_SET_SETP_SHIFT
)Ë& 
GPIO_SET_SETP_MASK
)

	)

4586 
	#GPIO_SET_COUNT
 (6U)

	)

4589 
	#GPIO_CLR_CLRP_MASK
 (0xFFFFFFFFU)

	)

4590 
	#GPIO_CLR_CLRP_SHIFT
 (0U)

	)

4591 
	#GPIO_CLR_CLRP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
GPIO_CLR_CLRP_SHIFT
)Ë& 
GPIO_CLR_CLRP_MASK
)

	)

4594 
	#GPIO_CLR_COUNT
 (6U)

	)

4597 
	#GPIO_NOT_NOTP_MASK
 (0xFFFFFFFFU)

	)

4598 
	#GPIO_NOT_NOTP_SHIFT
 (0U)

	)

4599 
	#GPIO_NOT_NOTP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
GPIO_NOT_NOTP_SHIFT
)Ë& 
GPIO_NOT_NOTP_MASK
)

	)

4602 
	#GPIO_NOT_COUNT
 (6U)

	)

4605 
	#GPIO_DIRSET_DIRSETP_MASK
 (0x1FFFFFFFU)

	)

4606 
	#GPIO_DIRSET_DIRSETP_SHIFT
 (0U)

	)

4607 
	#GPIO_DIRSET_DIRSETP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
GPIO_DIRSET_DIRSETP_SHIFT
)Ë& 
GPIO_DIRSET_DIRSETP_MASK
)

	)

4610 
	#GPIO_DIRSET_COUNT
 (6U)

	)

4613 
	#GPIO_DIRCLR_DIRCLRP_MASK
 (0x1FFFFFFFU)

	)

4614 
	#GPIO_DIRCLR_DIRCLRP_SHIFT
 (0U)

	)

4615 
	#GPIO_DIRCLR_DIRCLRP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
GPIO_DIRCLR_DIRCLRP_SHIFT
)Ë& 
GPIO_DIRCLR_DIRCLRP_MASK
)

	)

4618 
	#GPIO_DIRCLR_COUNT
 (6U)

	)

4621 
	#GPIO_DIRNOT_DIRNOTP_MASK
 (0x1FFFFFFFU)

	)

4622 
	#GPIO_DIRNOT_DIRNOTP_SHIFT
 (0U)

	)

4623 
	#GPIO_DIRNOT_DIRNOTP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
GPIO_DIRNOT_DIRNOTP_SHIFT
)Ë& 
GPIO_DIRNOT_DIRNOTP_MASK
)

	)

4626 
	#GPIO_DIRNOT_COUNT
 (6U)

	)

4636 
	#GPIO_BASE
 (0x4008C000u)

	)

4638 
	#GPIO
 ((
GPIO_Ty≥
 *)
GPIO_BASE
)

	)

4640 
	#GPIO_BASE_ADDRS
 { 
GPIO_BASE
 }

	)

4642 
	#GPIO_BASE_PTRS
 { 
GPIO
 }

	)

4660 
uöt8_t
 
	mRESERVED_0
[2048];

4661 
__IO
 
uöt32_t
 
	mCFG
;

4662 
__IO
 
uöt32_t
 
	mSTAT
;

4663 
__IO
 
uöt32_t
 
	mINTENSET
;

4664 
__O
 
uöt32_t
 
	mINTENCLR
;

4665 
__IO
 
uöt32_t
 
	mTIMEOUT
;

4666 
__IO
 
uöt32_t
 
	mCLKDIV
;

4667 
__I
 
uöt32_t
 
	mINTSTAT
;

4668 
uöt8_t
 
	mRESERVED_1
[4];

4669 
__IO
 
uöt32_t
 
	mMSTCTL
;

4670 
__IO
 
uöt32_t
 
	mMSTTIME
;

4671 
__IO
 
uöt32_t
 
	mMSTDAT
;

4672 
uöt8_t
 
	mRESERVED_2
[20];

4673 
__IO
 
uöt32_t
 
	mSLVCTL
;

4674 
__IO
 
uöt32_t
 
	mSLVDAT
;

4675 
__IO
 
uöt32_t
 
	mSLVADR
[4];

4676 
__IO
 
uöt32_t
 
	mSLVQUAL0
;

4677 
uöt8_t
 
	mRESERVED_3
[36];

4678 
__I
 
uöt32_t
 
	mMONRXDAT
;

4679 
uöt8_t
 
	mRESERVED_4
[1912];

4680 
__I
 
uöt32_t
 
	mID
;

4681 } 
	tI2C_Ty≥
;

4693 
	#I2C_CFG_MSTEN_MASK
 (0x1U)

	)

4694 
	#I2C_CFG_MSTEN_SHIFT
 (0U)

	)

4695 
	#I2C_CFG_MSTEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_CFG_MSTEN_SHIFT
)Ë& 
I2C_CFG_MSTEN_MASK
)

	)

4696 
	#I2C_CFG_SLVEN_MASK
 (0x2U)

	)

4697 
	#I2C_CFG_SLVEN_SHIFT
 (1U)

	)

4698 
	#I2C_CFG_SLVEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_CFG_SLVEN_SHIFT
)Ë& 
I2C_CFG_SLVEN_MASK
)

	)

4699 
	#I2C_CFG_MONEN_MASK
 (0x4U)

	)

4700 
	#I2C_CFG_MONEN_SHIFT
 (2U)

	)

4701 
	#I2C_CFG_MONEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_CFG_MONEN_SHIFT
)Ë& 
I2C_CFG_MONEN_MASK
)

	)

4702 
	#I2C_CFG_TIMEOUTEN_MASK
 (0x8U)

	)

4703 
	#I2C_CFG_TIMEOUTEN_SHIFT
 (3U)

	)

4704 
	#I2C_CFG_TIMEOUTEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_CFG_TIMEOUTEN_SHIFT
)Ë& 
I2C_CFG_TIMEOUTEN_MASK
)

	)

4705 
	#I2C_CFG_MONCLKSTR_MASK
 (0x10U)

	)

4706 
	#I2C_CFG_MONCLKSTR_SHIFT
 (4U)

	)

4707 
	#I2C_CFG_MONCLKSTR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_CFG_MONCLKSTR_SHIFT
)Ë& 
I2C_CFG_MONCLKSTR_MASK
)

	)

4708 
	#I2C_CFG_HSCAPABLE_MASK
 (0x20U)

	)

4709 
	#I2C_CFG_HSCAPABLE_SHIFT
 (5U)

	)

4710 
	#I2C_CFG_HSCAPABLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_CFG_HSCAPABLE_SHIFT
)Ë& 
I2C_CFG_HSCAPABLE_MASK
)

	)

4713 
	#I2C_STAT_MSTPENDING_MASK
 (0x1U)

	)

4714 
	#I2C_STAT_MSTPENDING_SHIFT
 (0U)

	)

4715 
	#I2C_STAT_MSTPENDING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_STAT_MSTPENDING_SHIFT
)Ë& 
I2C_STAT_MSTPENDING_MASK
)

	)

4716 
	#I2C_STAT_MSTSTATE_MASK
 (0xEU)

	)

4717 
	#I2C_STAT_MSTSTATE_SHIFT
 (1U)

	)

4718 
	#I2C_STAT_MSTSTATE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_STAT_MSTSTATE_SHIFT
)Ë& 
I2C_STAT_MSTSTATE_MASK
)

	)

4719 
	#I2C_STAT_MSTARBLOSS_MASK
 (0x10U)

	)

4720 
	#I2C_STAT_MSTARBLOSS_SHIFT
 (4U)

	)

4721 
	#I2C_STAT_MSTARBLOSS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_STAT_MSTARBLOSS_SHIFT
)Ë& 
I2C_STAT_MSTARBLOSS_MASK
)

	)

4722 
	#I2C_STAT_MSTSTSTPERR_MASK
 (0x40U)

	)

4723 
	#I2C_STAT_MSTSTSTPERR_SHIFT
 (6U)

	)

4724 
	#I2C_STAT_MSTSTSTPERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_STAT_MSTSTSTPERR_SHIFT
)Ë& 
I2C_STAT_MSTSTSTPERR_MASK
)

	)

4725 
	#I2C_STAT_SLVPENDING_MASK
 (0x100U)

	)

4726 
	#I2C_STAT_SLVPENDING_SHIFT
 (8U)

	)

4727 
	#I2C_STAT_SLVPENDING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_STAT_SLVPENDING_SHIFT
)Ë& 
I2C_STAT_SLVPENDING_MASK
)

	)

4728 
	#I2C_STAT_SLVSTATE_MASK
 (0x600U)

	)

4729 
	#I2C_STAT_SLVSTATE_SHIFT
 (9U)

	)

4730 
	#I2C_STAT_SLVSTATE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_STAT_SLVSTATE_SHIFT
)Ë& 
I2C_STAT_SLVSTATE_MASK
)

	)

4731 
	#I2C_STAT_SLVNOTSTR_MASK
 (0x800U)

	)

4732 
	#I2C_STAT_SLVNOTSTR_SHIFT
 (11U)

	)

4733 
	#I2C_STAT_SLVNOTSTR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_STAT_SLVNOTSTR_SHIFT
)Ë& 
I2C_STAT_SLVNOTSTR_MASK
)

	)

4734 
	#I2C_STAT_SLVIDX_MASK
 (0x3000U)

	)

4735 
	#I2C_STAT_SLVIDX_SHIFT
 (12U)

	)

4736 
	#I2C_STAT_SLVIDX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_STAT_SLVIDX_SHIFT
)Ë& 
I2C_STAT_SLVIDX_MASK
)

	)

4737 
	#I2C_STAT_SLVSEL_MASK
 (0x4000U)

	)

4738 
	#I2C_STAT_SLVSEL_SHIFT
 (14U)

	)

4739 
	#I2C_STAT_SLVSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_STAT_SLVSEL_SHIFT
)Ë& 
I2C_STAT_SLVSEL_MASK
)

	)

4740 
	#I2C_STAT_SLVDESEL_MASK
 (0x8000U)

	)

4741 
	#I2C_STAT_SLVDESEL_SHIFT
 (15U)

	)

4742 
	#I2C_STAT_SLVDESEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_STAT_SLVDESEL_SHIFT
)Ë& 
I2C_STAT_SLVDESEL_MASK
)

	)

4743 
	#I2C_STAT_MONRDY_MASK
 (0x10000U)

	)

4744 
	#I2C_STAT_MONRDY_SHIFT
 (16U)

	)

4745 
	#I2C_STAT_MONRDY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_STAT_MONRDY_SHIFT
)Ë& 
I2C_STAT_MONRDY_MASK
)

	)

4746 
	#I2C_STAT_MONOV_MASK
 (0x20000U)

	)

4747 
	#I2C_STAT_MONOV_SHIFT
 (17U)

	)

4748 
	#I2C_STAT_MONOV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_STAT_MONOV_SHIFT
)Ë& 
I2C_STAT_MONOV_MASK
)

	)

4749 
	#I2C_STAT_MONACTIVE_MASK
 (0x40000U)

	)

4750 
	#I2C_STAT_MONACTIVE_SHIFT
 (18U)

	)

4751 
	#I2C_STAT_MONACTIVE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_STAT_MONACTIVE_SHIFT
)Ë& 
I2C_STAT_MONACTIVE_MASK
)

	)

4752 
	#I2C_STAT_MONIDLE_MASK
 (0x80000U)

	)

4753 
	#I2C_STAT_MONIDLE_SHIFT
 (19U)

	)

4754 
	#I2C_STAT_MONIDLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_STAT_MONIDLE_SHIFT
)Ë& 
I2C_STAT_MONIDLE_MASK
)

	)

4755 
	#I2C_STAT_EVENTTIMEOUT_MASK
 (0x1000000U)

	)

4756 
	#I2C_STAT_EVENTTIMEOUT_SHIFT
 (24U)

	)

4757 
	#I2C_STAT_EVENTTIMEOUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_STAT_EVENTTIMEOUT_SHIFT
)Ë& 
I2C_STAT_EVENTTIMEOUT_MASK
)

	)

4758 
	#I2C_STAT_SCLTIMEOUT_MASK
 (0x2000000U)

	)

4759 
	#I2C_STAT_SCLTIMEOUT_SHIFT
 (25U)

	)

4760 
	#I2C_STAT_SCLTIMEOUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_STAT_SCLTIMEOUT_SHIFT
)Ë& 
I2C_STAT_SCLTIMEOUT_MASK
)

	)

4763 
	#I2C_INTENSET_MSTPENDINGEN_MASK
 (0x1U)

	)

4764 
	#I2C_INTENSET_MSTPENDINGEN_SHIFT
 (0U)

	)

4765 
	#I2C_INTENSET_MSTPENDINGEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTENSET_MSTPENDINGEN_SHIFT
)Ë& 
I2C_INTENSET_MSTPENDINGEN_MASK
)

	)

4766 
	#I2C_INTENSET_MSTARBLOSSEN_MASK
 (0x10U)

	)

4767 
	#I2C_INTENSET_MSTARBLOSSEN_SHIFT
 (4U)

	)

4768 
	#I2C_INTENSET_MSTARBLOSSEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTENSET_MSTARBLOSSEN_SHIFT
)Ë& 
I2C_INTENSET_MSTARBLOSSEN_MASK
)

	)

4769 
	#I2C_INTENSET_MSTSTSTPERREN_MASK
 (0x40U)

	)

4770 
	#I2C_INTENSET_MSTSTSTPERREN_SHIFT
 (6U)

	)

4771 
	#I2C_INTENSET_MSTSTSTPERREN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTENSET_MSTSTSTPERREN_SHIFT
)Ë& 
I2C_INTENSET_MSTSTSTPERREN_MASK
)

	)

4772 
	#I2C_INTENSET_SLVPENDINGEN_MASK
 (0x100U)

	)

4773 
	#I2C_INTENSET_SLVPENDINGEN_SHIFT
 (8U)

	)

4774 
	#I2C_INTENSET_SLVPENDINGEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTENSET_SLVPENDINGEN_SHIFT
)Ë& 
I2C_INTENSET_SLVPENDINGEN_MASK
)

	)

4775 
	#I2C_INTENSET_SLVNOTSTREN_MASK
 (0x800U)

	)

4776 
	#I2C_INTENSET_SLVNOTSTREN_SHIFT
 (11U)

	)

4777 
	#I2C_INTENSET_SLVNOTSTREN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTENSET_SLVNOTSTREN_SHIFT
)Ë& 
I2C_INTENSET_SLVNOTSTREN_MASK
)

	)

4778 
	#I2C_INTENSET_SLVDESELEN_MASK
 (0x8000U)

	)

4779 
	#I2C_INTENSET_SLVDESELEN_SHIFT
 (15U)

	)

4780 
	#I2C_INTENSET_SLVDESELEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTENSET_SLVDESELEN_SHIFT
)Ë& 
I2C_INTENSET_SLVDESELEN_MASK
)

	)

4781 
	#I2C_INTENSET_MONRDYEN_MASK
 (0x10000U)

	)

4782 
	#I2C_INTENSET_MONRDYEN_SHIFT
 (16U)

	)

4783 
	#I2C_INTENSET_MONRDYEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTENSET_MONRDYEN_SHIFT
)Ë& 
I2C_INTENSET_MONRDYEN_MASK
)

	)

4784 
	#I2C_INTENSET_MONOVEN_MASK
 (0x20000U)

	)

4785 
	#I2C_INTENSET_MONOVEN_SHIFT
 (17U)

	)

4786 
	#I2C_INTENSET_MONOVEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTENSET_MONOVEN_SHIFT
)Ë& 
I2C_INTENSET_MONOVEN_MASK
)

	)

4787 
	#I2C_INTENSET_MONIDLEEN_MASK
 (0x80000U)

	)

4788 
	#I2C_INTENSET_MONIDLEEN_SHIFT
 (19U)

	)

4789 
	#I2C_INTENSET_MONIDLEEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTENSET_MONIDLEEN_SHIFT
)Ë& 
I2C_INTENSET_MONIDLEEN_MASK
)

	)

4790 
	#I2C_INTENSET_EVENTTIMEOUTEN_MASK
 (0x1000000U)

	)

4791 
	#I2C_INTENSET_EVENTTIMEOUTEN_SHIFT
 (24U)

	)

4792 
	#I2C_INTENSET_EVENTTIMEOUTEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTENSET_EVENTTIMEOUTEN_SHIFT
)Ë& 
I2C_INTENSET_EVENTTIMEOUTEN_MASK
)

	)

4793 
	#I2C_INTENSET_SCLTIMEOUTEN_MASK
 (0x2000000U)

	)

4794 
	#I2C_INTENSET_SCLTIMEOUTEN_SHIFT
 (25U)

	)

4795 
	#I2C_INTENSET_SCLTIMEOUTEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTENSET_SCLTIMEOUTEN_SHIFT
)Ë& 
I2C_INTENSET_SCLTIMEOUTEN_MASK
)

	)

4798 
	#I2C_INTENCLR_MSTPENDINGCLR_MASK
 (0x1U)

	)

4799 
	#I2C_INTENCLR_MSTPENDINGCLR_SHIFT
 (0U)

	)

4800 
	#I2C_INTENCLR_MSTPENDINGCLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTENCLR_MSTPENDINGCLR_SHIFT
)Ë& 
I2C_INTENCLR_MSTPENDINGCLR_MASK
)

	)

4801 
	#I2C_INTENCLR_MSTARBLOSSCLR_MASK
 (0x10U)

	)

4802 
	#I2C_INTENCLR_MSTARBLOSSCLR_SHIFT
 (4U)

	)

4803 
	#I2C_INTENCLR_MSTARBLOSSCLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTENCLR_MSTARBLOSSCLR_SHIFT
)Ë& 
I2C_INTENCLR_MSTARBLOSSCLR_MASK
)

	)

4804 
	#I2C_INTENCLR_MSTSTSTPERRCLR_MASK
 (0x40U)

	)

4805 
	#I2C_INTENCLR_MSTSTSTPERRCLR_SHIFT
 (6U)

	)

4806 
	#I2C_INTENCLR_MSTSTSTPERRCLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTENCLR_MSTSTSTPERRCLR_SHIFT
)Ë& 
I2C_INTENCLR_MSTSTSTPERRCLR_MASK
)

	)

4807 
	#I2C_INTENCLR_SLVPENDINGCLR_MASK
 (0x100U)

	)

4808 
	#I2C_INTENCLR_SLVPENDINGCLR_SHIFT
 (8U)

	)

4809 
	#I2C_INTENCLR_SLVPENDINGCLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTENCLR_SLVPENDINGCLR_SHIFT
)Ë& 
I2C_INTENCLR_SLVPENDINGCLR_MASK
)

	)

4810 
	#I2C_INTENCLR_SLVNOTSTRCLR_MASK
 (0x800U)

	)

4811 
	#I2C_INTENCLR_SLVNOTSTRCLR_SHIFT
 (11U)

	)

4812 
	#I2C_INTENCLR_SLVNOTSTRCLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTENCLR_SLVNOTSTRCLR_SHIFT
)Ë& 
I2C_INTENCLR_SLVNOTSTRCLR_MASK
)

	)

4813 
	#I2C_INTENCLR_SLVDESELCLR_MASK
 (0x8000U)

	)

4814 
	#I2C_INTENCLR_SLVDESELCLR_SHIFT
 (15U)

	)

4815 
	#I2C_INTENCLR_SLVDESELCLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTENCLR_SLVDESELCLR_SHIFT
)Ë& 
I2C_INTENCLR_SLVDESELCLR_MASK
)

	)

4816 
	#I2C_INTENCLR_MONRDYCLR_MASK
 (0x10000U)

	)

4817 
	#I2C_INTENCLR_MONRDYCLR_SHIFT
 (16U)

	)

4818 
	#I2C_INTENCLR_MONRDYCLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTENCLR_MONRDYCLR_SHIFT
)Ë& 
I2C_INTENCLR_MONRDYCLR_MASK
)

	)

4819 
	#I2C_INTENCLR_MONOVCLR_MASK
 (0x20000U)

	)

4820 
	#I2C_INTENCLR_MONOVCLR_SHIFT
 (17U)

	)

4821 
	#I2C_INTENCLR_MONOVCLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTENCLR_MONOVCLR_SHIFT
)Ë& 
I2C_INTENCLR_MONOVCLR_MASK
)

	)

4822 
	#I2C_INTENCLR_MONIDLECLR_MASK
 (0x80000U)

	)

4823 
	#I2C_INTENCLR_MONIDLECLR_SHIFT
 (19U)

	)

4824 
	#I2C_INTENCLR_MONIDLECLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTENCLR_MONIDLECLR_SHIFT
)Ë& 
I2C_INTENCLR_MONIDLECLR_MASK
)

	)

4825 
	#I2C_INTENCLR_EVENTTIMEOUTCLR_MASK
 (0x1000000U)

	)

4826 
	#I2C_INTENCLR_EVENTTIMEOUTCLR_SHIFT
 (24U)

	)

4827 
	#I2C_INTENCLR_EVENTTIMEOUTCLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTENCLR_EVENTTIMEOUTCLR_SHIFT
)Ë& 
I2C_INTENCLR_EVENTTIMEOUTCLR_MASK
)

	)

4828 
	#I2C_INTENCLR_SCLTIMEOUTCLR_MASK
 (0x2000000U)

	)

4829 
	#I2C_INTENCLR_SCLTIMEOUTCLR_SHIFT
 (25U)

	)

4830 
	#I2C_INTENCLR_SCLTIMEOUTCLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTENCLR_SCLTIMEOUTCLR_SHIFT
)Ë& 
I2C_INTENCLR_SCLTIMEOUTCLR_MASK
)

	)

4833 
	#I2C_TIMEOUT_TOMIN_MASK
 (0xFU)

	)

4834 
	#I2C_TIMEOUT_TOMIN_SHIFT
 (0U)

	)

4835 
	#I2C_TIMEOUT_TOMIN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_TIMEOUT_TOMIN_SHIFT
)Ë& 
I2C_TIMEOUT_TOMIN_MASK
)

	)

4836 
	#I2C_TIMEOUT_TO_MASK
 (0xFFF0U)

	)

4837 
	#I2C_TIMEOUT_TO_SHIFT
 (4U)

	)

4838 
	#I2C_TIMEOUT_TO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_TIMEOUT_TO_SHIFT
)Ë& 
I2C_TIMEOUT_TO_MASK
)

	)

4841 
	#I2C_CLKDIV_DIVVAL_MASK
 (0xFFFFU)

	)

4842 
	#I2C_CLKDIV_DIVVAL_SHIFT
 (0U)

	)

4843 
	#I2C_CLKDIV_DIVVAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_CLKDIV_DIVVAL_SHIFT
)Ë& 
I2C_CLKDIV_DIVVAL_MASK
)

	)

4846 
	#I2C_INTSTAT_MSTPENDING_MASK
 (0x1U)

	)

4847 
	#I2C_INTSTAT_MSTPENDING_SHIFT
 (0U)

	)

4848 
	#I2C_INTSTAT_MSTPENDING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTSTAT_MSTPENDING_SHIFT
)Ë& 
I2C_INTSTAT_MSTPENDING_MASK
)

	)

4849 
	#I2C_INTSTAT_MSTARBLOSS_MASK
 (0x10U)

	)

4850 
	#I2C_INTSTAT_MSTARBLOSS_SHIFT
 (4U)

	)

4851 
	#I2C_INTSTAT_MSTARBLOSS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTSTAT_MSTARBLOSS_SHIFT
)Ë& 
I2C_INTSTAT_MSTARBLOSS_MASK
)

	)

4852 
	#I2C_INTSTAT_MSTSTSTPERR_MASK
 (0x40U)

	)

4853 
	#I2C_INTSTAT_MSTSTSTPERR_SHIFT
 (6U)

	)

4854 
	#I2C_INTSTAT_MSTSTSTPERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTSTAT_MSTSTSTPERR_SHIFT
)Ë& 
I2C_INTSTAT_MSTSTSTPERR_MASK
)

	)

4855 
	#I2C_INTSTAT_SLVPENDING_MASK
 (0x100U)

	)

4856 
	#I2C_INTSTAT_SLVPENDING_SHIFT
 (8U)

	)

4857 
	#I2C_INTSTAT_SLVPENDING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTSTAT_SLVPENDING_SHIFT
)Ë& 
I2C_INTSTAT_SLVPENDING_MASK
)

	)

4858 
	#I2C_INTSTAT_SLVNOTSTR_MASK
 (0x800U)

	)

4859 
	#I2C_INTSTAT_SLVNOTSTR_SHIFT
 (11U)

	)

4860 
	#I2C_INTSTAT_SLVNOTSTR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTSTAT_SLVNOTSTR_SHIFT
)Ë& 
I2C_INTSTAT_SLVNOTSTR_MASK
)

	)

4861 
	#I2C_INTSTAT_SLVDESEL_MASK
 (0x8000U)

	)

4862 
	#I2C_INTSTAT_SLVDESEL_SHIFT
 (15U)

	)

4863 
	#I2C_INTSTAT_SLVDESEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTSTAT_SLVDESEL_SHIFT
)Ë& 
I2C_INTSTAT_SLVDESEL_MASK
)

	)

4864 
	#I2C_INTSTAT_MONRDY_MASK
 (0x10000U)

	)

4865 
	#I2C_INTSTAT_MONRDY_SHIFT
 (16U)

	)

4866 
	#I2C_INTSTAT_MONRDY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTSTAT_MONRDY_SHIFT
)Ë& 
I2C_INTSTAT_MONRDY_MASK
)

	)

4867 
	#I2C_INTSTAT_MONOV_MASK
 (0x20000U)

	)

4868 
	#I2C_INTSTAT_MONOV_SHIFT
 (17U)

	)

4869 
	#I2C_INTSTAT_MONOV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTSTAT_MONOV_SHIFT
)Ë& 
I2C_INTSTAT_MONOV_MASK
)

	)

4870 
	#I2C_INTSTAT_MONIDLE_MASK
 (0x80000U)

	)

4871 
	#I2C_INTSTAT_MONIDLE_SHIFT
 (19U)

	)

4872 
	#I2C_INTSTAT_MONIDLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTSTAT_MONIDLE_SHIFT
)Ë& 
I2C_INTSTAT_MONIDLE_MASK
)

	)

4873 
	#I2C_INTSTAT_EVENTTIMEOUT_MASK
 (0x1000000U)

	)

4874 
	#I2C_INTSTAT_EVENTTIMEOUT_SHIFT
 (24U)

	)

4875 
	#I2C_INTSTAT_EVENTTIMEOUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTSTAT_EVENTTIMEOUT_SHIFT
)Ë& 
I2C_INTSTAT_EVENTTIMEOUT_MASK
)

	)

4876 
	#I2C_INTSTAT_SCLTIMEOUT_MASK
 (0x2000000U)

	)

4877 
	#I2C_INTSTAT_SCLTIMEOUT_SHIFT
 (25U)

	)

4878 
	#I2C_INTSTAT_SCLTIMEOUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_INTSTAT_SCLTIMEOUT_SHIFT
)Ë& 
I2C_INTSTAT_SCLTIMEOUT_MASK
)

	)

4881 
	#I2C_MSTCTL_MSTCONTINUE_MASK
 (0x1U)

	)

4882 
	#I2C_MSTCTL_MSTCONTINUE_SHIFT
 (0U)

	)

4883 
	#I2C_MSTCTL_MSTCONTINUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_MSTCTL_MSTCONTINUE_SHIFT
)Ë& 
I2C_MSTCTL_MSTCONTINUE_MASK
)

	)

4884 
	#I2C_MSTCTL_MSTSTART_MASK
 (0x2U)

	)

4885 
	#I2C_MSTCTL_MSTSTART_SHIFT
 (1U)

	)

4886 
	#I2C_MSTCTL_MSTSTART
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_MSTCTL_MSTSTART_SHIFT
)Ë& 
I2C_MSTCTL_MSTSTART_MASK
)

	)

4887 
	#I2C_MSTCTL_MSTSTOP_MASK
 (0x4U)

	)

4888 
	#I2C_MSTCTL_MSTSTOP_SHIFT
 (2U)

	)

4889 
	#I2C_MSTCTL_MSTSTOP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_MSTCTL_MSTSTOP_SHIFT
)Ë& 
I2C_MSTCTL_MSTSTOP_MASK
)

	)

4890 
	#I2C_MSTCTL_MSTDMA_MASK
 (0x8U)

	)

4891 
	#I2C_MSTCTL_MSTDMA_SHIFT
 (3U)

	)

4892 
	#I2C_MSTCTL_MSTDMA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_MSTCTL_MSTDMA_SHIFT
)Ë& 
I2C_MSTCTL_MSTDMA_MASK
)

	)

4895 
	#I2C_MSTTIME_MSTSCLLOW_MASK
 (0x7U)

	)

4896 
	#I2C_MSTTIME_MSTSCLLOW_SHIFT
 (0U)

	)

4897 
	#I2C_MSTTIME_MSTSCLLOW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_MSTTIME_MSTSCLLOW_SHIFT
)Ë& 
I2C_MSTTIME_MSTSCLLOW_MASK
)

	)

4898 
	#I2C_MSTTIME_MSTSCLHIGH_MASK
 (0x70U)

	)

4899 
	#I2C_MSTTIME_MSTSCLHIGH_SHIFT
 (4U)

	)

4900 
	#I2C_MSTTIME_MSTSCLHIGH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_MSTTIME_MSTSCLHIGH_SHIFT
)Ë& 
I2C_MSTTIME_MSTSCLHIGH_MASK
)

	)

4903 
	#I2C_MSTDAT_DATA_MASK
 (0xFFU)

	)

4904 
	#I2C_MSTDAT_DATA_SHIFT
 (0U)

	)

4905 
	#I2C_MSTDAT_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_MSTDAT_DATA_SHIFT
)Ë& 
I2C_MSTDAT_DATA_MASK
)

	)

4908 
	#I2C_SLVCTL_SLVCONTINUE_MASK
 (0x1U)

	)

4909 
	#I2C_SLVCTL_SLVCONTINUE_SHIFT
 (0U)

	)

4910 
	#I2C_SLVCTL_SLVCONTINUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_SLVCTL_SLVCONTINUE_SHIFT
)Ë& 
I2C_SLVCTL_SLVCONTINUE_MASK
)

	)

4911 
	#I2C_SLVCTL_SLVNACK_MASK
 (0x2U)

	)

4912 
	#I2C_SLVCTL_SLVNACK_SHIFT
 (1U)

	)

4913 
	#I2C_SLVCTL_SLVNACK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_SLVCTL_SLVNACK_SHIFT
)Ë& 
I2C_SLVCTL_SLVNACK_MASK
)

	)

4914 
	#I2C_SLVCTL_SLVDMA_MASK
 (0x8U)

	)

4915 
	#I2C_SLVCTL_SLVDMA_SHIFT
 (3U)

	)

4916 
	#I2C_SLVCTL_SLVDMA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_SLVCTL_SLVDMA_SHIFT
)Ë& 
I2C_SLVCTL_SLVDMA_MASK
)

	)

4917 
	#I2C_SLVCTL_AUTOACK_MASK
 (0x100U)

	)

4918 
	#I2C_SLVCTL_AUTOACK_SHIFT
 (8U)

	)

4919 
	#I2C_SLVCTL_AUTOACK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_SLVCTL_AUTOACK_SHIFT
)Ë& 
I2C_SLVCTL_AUTOACK_MASK
)

	)

4920 
	#I2C_SLVCTL_AUTOMATCHREAD_MASK
 (0x200U)

	)

4921 
	#I2C_SLVCTL_AUTOMATCHREAD_SHIFT
 (9U)

	)

4922 
	#I2C_SLVCTL_AUTOMATCHREAD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_SLVCTL_AUTOMATCHREAD_SHIFT
)Ë& 
I2C_SLVCTL_AUTOMATCHREAD_MASK
)

	)

4925 
	#I2C_SLVDAT_DATA_MASK
 (0xFFU)

	)

4926 
	#I2C_SLVDAT_DATA_SHIFT
 (0U)

	)

4927 
	#I2C_SLVDAT_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_SLVDAT_DATA_SHIFT
)Ë& 
I2C_SLVDAT_DATA_MASK
)

	)

4930 
	#I2C_SLVADR_SADISABLE_MASK
 (0x1U)

	)

4931 
	#I2C_SLVADR_SADISABLE_SHIFT
 (0U)

	)

4932 
	#I2C_SLVADR_SADISABLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_SLVADR_SADISABLE_SHIFT
)Ë& 
I2C_SLVADR_SADISABLE_MASK
)

	)

4933 
	#I2C_SLVADR_SLVADR_MASK
 (0xFEU)

	)

4934 
	#I2C_SLVADR_SLVADR_SHIFT
 (1U)

	)

4935 
	#I2C_SLVADR_SLVADR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_SLVADR_SLVADR_SHIFT
)Ë& 
I2C_SLVADR_SLVADR_MASK
)

	)

4936 
	#I2C_SLVADR_AUTONACK_MASK
 (0x8000U)

	)

4937 
	#I2C_SLVADR_AUTONACK_SHIFT
 (15U)

	)

4938 
	#I2C_SLVADR_AUTONACK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_SLVADR_AUTONACK_SHIFT
)Ë& 
I2C_SLVADR_AUTONACK_MASK
)

	)

4941 
	#I2C_SLVADR_COUNT
 (4U)

	)

4944 
	#I2C_SLVQUAL0_QUALMODE0_MASK
 (0x1U)

	)

4945 
	#I2C_SLVQUAL0_QUALMODE0_SHIFT
 (0U)

	)

4946 
	#I2C_SLVQUAL0_QUALMODE0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_SLVQUAL0_QUALMODE0_SHIFT
)Ë& 
I2C_SLVQUAL0_QUALMODE0_MASK
)

	)

4947 
	#I2C_SLVQUAL0_SLVQUAL0_MASK
 (0xFEU)

	)

4948 
	#I2C_SLVQUAL0_SLVQUAL0_SHIFT
 (1U)

	)

4949 
	#I2C_SLVQUAL0_SLVQUAL0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_SLVQUAL0_SLVQUAL0_SHIFT
)Ë& 
I2C_SLVQUAL0_SLVQUAL0_MASK
)

	)

4952 
	#I2C_MONRXDAT_MONRXDAT_MASK
 (0xFFU)

	)

4953 
	#I2C_MONRXDAT_MONRXDAT_SHIFT
 (0U)

	)

4954 
	#I2C_MONRXDAT_MONRXDAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_MONRXDAT_MONRXDAT_SHIFT
)Ë& 
I2C_MONRXDAT_MONRXDAT_MASK
)

	)

4955 
	#I2C_MONRXDAT_MONSTART_MASK
 (0x100U)

	)

4956 
	#I2C_MONRXDAT_MONSTART_SHIFT
 (8U)

	)

4957 
	#I2C_MONRXDAT_MONSTART
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_MONRXDAT_MONSTART_SHIFT
)Ë& 
I2C_MONRXDAT_MONSTART_MASK
)

	)

4958 
	#I2C_MONRXDAT_MONRESTART_MASK
 (0x200U)

	)

4959 
	#I2C_MONRXDAT_MONRESTART_SHIFT
 (9U)

	)

4960 
	#I2C_MONRXDAT_MONRESTART
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_MONRXDAT_MONRESTART_SHIFT
)Ë& 
I2C_MONRXDAT_MONRESTART_MASK
)

	)

4961 
	#I2C_MONRXDAT_MONNACK_MASK
 (0x400U)

	)

4962 
	#I2C_MONRXDAT_MONNACK_SHIFT
 (10U)

	)

4963 
	#I2C_MONRXDAT_MONNACK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_MONRXDAT_MONNACK_SHIFT
)Ë& 
I2C_MONRXDAT_MONNACK_MASK
)

	)

4966 
	#I2C_ID_APERTURE_MASK
 (0xFFU)

	)

4967 
	#I2C_ID_APERTURE_SHIFT
 (0U)

	)

4968 
	#I2C_ID_APERTURE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_ID_APERTURE_SHIFT
)Ë& 
I2C_ID_APERTURE_MASK
)

	)

4969 
	#I2C_ID_MINOR_REV_MASK
 (0xF00U)

	)

4970 
	#I2C_ID_MINOR_REV_SHIFT
 (8U)

	)

4971 
	#I2C_ID_MINOR_REV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_ID_MINOR_REV_SHIFT
)Ë& 
I2C_ID_MINOR_REV_MASK
)

	)

4972 
	#I2C_ID_MAJOR_REV_MASK
 (0xF000U)

	)

4973 
	#I2C_ID_MAJOR_REV_SHIFT
 (12U)

	)

4974 
	#I2C_ID_MAJOR_REV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_ID_MAJOR_REV_SHIFT
)Ë& 
I2C_ID_MAJOR_REV_MASK
)

	)

4975 
	#I2C_ID_ID_MASK
 (0xFFFF0000U)

	)

4976 
	#I2C_ID_ID_SHIFT
 (16U)

	)

4977 
	#I2C_ID_ID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2C_ID_ID_SHIFT
)Ë& 
I2C_ID_ID_MASK
)

	)

4987 
	#I2C0_BASE
 (0x40086000u)

	)

4989 
	#I2C0
 ((
I2C_Ty≥
 *)
I2C0_BASE
)

	)

4991 
	#I2C1_BASE
 (0x40087000u)

	)

4993 
	#I2C1
 ((
I2C_Ty≥
 *)
I2C1_BASE
)

	)

4995 
	#I2C2_BASE
 (0x40088000u)

	)

4997 
	#I2C2
 ((
I2C_Ty≥
 *)
I2C2_BASE
)

	)

4999 
	#I2C3_BASE
 (0x40089000u)

	)

5001 
	#I2C3
 ((
I2C_Ty≥
 *)
I2C3_BASE
)

	)

5003 
	#I2C4_BASE
 (0x4008A000u)

	)

5005 
	#I2C4
 ((
I2C_Ty≥
 *)
I2C4_BASE
)

	)

5007 
	#I2C5_BASE
 (0x40096000u)

	)

5009 
	#I2C5
 ((
I2C_Ty≥
 *)
I2C5_BASE
)

	)

5011 
	#I2C6_BASE
 (0x40097000u)

	)

5013 
	#I2C6
 ((
I2C_Ty≥
 *)
I2C6_BASE
)

	)

5015 
	#I2C7_BASE
 (0x40098000u)

	)

5017 
	#I2C7
 ((
I2C_Ty≥
 *)
I2C7_BASE
)

	)

5019 
	#I2C8_BASE
 (0x40099000u)

	)

5021 
	#I2C8
 ((
I2C_Ty≥
 *)
I2C8_BASE
)

	)

5023 
	#I2C9_BASE
 (0x4009A000u)

	)

5025 
	#I2C9
 ((
I2C_Ty≥
 *)
I2C9_BASE
)

	)

5027 
	#I2C_BASE_ADDRS
 { 
I2C0_BASE
, 
I2C1_BASE
, 
I2C2_BASE
, 
I2C3_BASE
, 
I2C4_BASE
, 
I2C5_BASE
, 
I2C6_BASE
, 
I2C7_BASE
, 
I2C8_BASE
, 
I2C9_BASE
 }

	)

5029 
	#I2C_BASE_PTRS
 { 
I2C0
, 
I2C1
, 
I2C2
, 
I2C3
, 
I2C4
, 
I2C5
, 
I2C6
, 
I2C7
, 
I2C8
, 
I2C9
 }

	)

5031 
	#I2C_IRQS
 { 
FLEXCOMM0_IRQn
, 
FLEXCOMM1_IRQn
, 
FLEXCOMM2_IRQn
, 
FLEXCOMM3_IRQn
, 
FLEXCOMM4_IRQn
, 
FLEXCOMM5_IRQn
, 
FLEXCOMM6_IRQn
, 
FLEXCOMM7_IRQn
, 
FLEXCOMM8_IRQn
, 
FLEXCOMM9_IRQn
 }

	)

5049 
uöt8_t
 
	mRESERVED_0
[32];

5051 
__IO
 
uöt32_t
 
	mPCFG1
;

5052 
__IO
 
uöt32_t
 
	mPCFG2
;

5053 
__IO
 
uöt32_t
 
	mPSTAT
;

5054 
uöt8_t
 
	mRESERVED_0
[20];

5055 } 
	mSECCHANNEL
[3];

5056 
uöt8_t
 
	mRESERVED_1
[2944];

5057 
__IO
 
uöt32_t
 
	mCFG1
;

5058 
__IO
 
uöt32_t
 
	mCFG2
;

5059 
__IO
 
uöt32_t
 
	mSTAT
;

5060 
uöt8_t
 
	mRESERVED_2
[16];

5061 
__IO
 
uöt32_t
 
	mDIV
;

5062 
uöt8_t
 
	mRESERVED_3
[480];

5063 
__IO
 
uöt32_t
 
	mFIFOCFG
;

5064 
__IO
 
uöt32_t
 
	mFIFOSTAT
;

5065 
__IO
 
uöt32_t
 
	mFIFOTRIG
;

5066 
uöt8_t
 
	mRESERVED_4
[4];

5067 
__IO
 
uöt32_t
 
	mFIFOINTENSET
;

5068 
__IO
 
uöt32_t
 
	mFIFOINTENCLR
;

5069 
__I
 
uöt32_t
 
	mFIFOINTSTAT
;

5070 
uöt8_t
 
	mRESERVED_5
[4];

5071 
__O
 
uöt32_t
 
	mFIFOWR
;

5072 
__O
 
uöt32_t
 
	mFIFOWR48H
;

5073 
uöt8_t
 
	mRESERVED_6
[8];

5074 
__I
 
uöt32_t
 
	mFIFORD
;

5075 
__I
 
uöt32_t
 
	mFIFORD48H
;

5076 
uöt8_t
 
	mRESERVED_7
[8];

5077 
__I
 
uöt32_t
 
	mFIFORDNOPOP
;

5078 
__I
 
uöt32_t
 
	mFIFORD48HNOPOP
;

5079 
uöt8_t
 
	mRESERVED_8
[4020];

5080 
__I
 
uöt32_t
 
	mID
;

5081 } 
	tI2S_Ty≥
;

5093 
	#I2S_SECCHANNEL_PCFG1_PAIRENABLE_MASK
 (0x1U)

	)

5094 
	#I2S_SECCHANNEL_PCFG1_PAIRENABLE_SHIFT
 (0U)

	)

5095 
	#I2S_SECCHANNEL_PCFG1_PAIRENABLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_SECCHANNEL_PCFG1_PAIRENABLE_SHIFT
)Ë& 
I2S_SECCHANNEL_PCFG1_PAIRENABLE_MASK
)

	)

5096 
	#I2S_SECCHANNEL_PCFG1_ONECHANNEL_MASK
 (0x400U)

	)

5097 
	#I2S_SECCHANNEL_PCFG1_ONECHANNEL_SHIFT
 (10U)

	)

5098 
	#I2S_SECCHANNEL_PCFG1_ONECHANNEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_SECCHANNEL_PCFG1_ONECHANNEL_SHIFT
)Ë& 
I2S_SECCHANNEL_PCFG1_ONECHANNEL_MASK
)

	)

5101 
	#I2S_SECCHANNEL_PCFG1_COUNT
 (3U)

	)

5104 
	#I2S_SECCHANNEL_PCFG2_POSITION_MASK
 (0x1FF0000U)

	)

5105 
	#I2S_SECCHANNEL_PCFG2_POSITION_SHIFT
 (16U)

	)

5106 
	#I2S_SECCHANNEL_PCFG2_POSITION
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_SECCHANNEL_PCFG2_POSITION_SHIFT
)Ë& 
I2S_SECCHANNEL_PCFG2_POSITION_MASK
)

	)

5109 
	#I2S_SECCHANNEL_PCFG2_COUNT
 (3U)

	)

5112 
	#I2S_SECCHANNEL_PSTAT_BUSY_MASK
 (0x1U)

	)

5113 
	#I2S_SECCHANNEL_PSTAT_BUSY_SHIFT
 (0U)

	)

5114 
	#I2S_SECCHANNEL_PSTAT_BUSY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_SECCHANNEL_PSTAT_BUSY_SHIFT
)Ë& 
I2S_SECCHANNEL_PSTAT_BUSY_MASK
)

	)

5115 
	#I2S_SECCHANNEL_PSTAT_SLVFRMERR_MASK
 (0x2U)

	)

5116 
	#I2S_SECCHANNEL_PSTAT_SLVFRMERR_SHIFT
 (1U)

	)

5117 
	#I2S_SECCHANNEL_PSTAT_SLVFRMERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_SECCHANNEL_PSTAT_SLVFRMERR_SHIFT
)Ë& 
I2S_SECCHANNEL_PSTAT_SLVFRMERR_MASK
)

	)

5118 
	#I2S_SECCHANNEL_PSTAT_LR_MASK
 (0x4U)

	)

5119 
	#I2S_SECCHANNEL_PSTAT_LR_SHIFT
 (2U)

	)

5120 
	#I2S_SECCHANNEL_PSTAT_LR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_SECCHANNEL_PSTAT_LR_SHIFT
)Ë& 
I2S_SECCHANNEL_PSTAT_LR_MASK
)

	)

5121 
	#I2S_SECCHANNEL_PSTAT_DATAPAUSED_MASK
 (0x8U)

	)

5122 
	#I2S_SECCHANNEL_PSTAT_DATAPAUSED_SHIFT
 (3U)

	)

5123 
	#I2S_SECCHANNEL_PSTAT_DATAPAUSED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_SECCHANNEL_PSTAT_DATAPAUSED_SHIFT
)Ë& 
I2S_SECCHANNEL_PSTAT_DATAPAUSED_MASK
)

	)

5126 
	#I2S_SECCHANNEL_PSTAT_COUNT
 (3U)

	)

5129 
	#I2S_CFG1_MAINENABLE_MASK
 (0x1U)

	)

5130 
	#I2S_CFG1_MAINENABLE_SHIFT
 (0U)

	)

5131 
	#I2S_CFG1_MAINENABLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_CFG1_MAINENABLE_SHIFT
)Ë& 
I2S_CFG1_MAINENABLE_MASK
)

	)

5132 
	#I2S_CFG1_DATAPAUSE_MASK
 (0x2U)

	)

5133 
	#I2S_CFG1_DATAPAUSE_SHIFT
 (1U)

	)

5134 
	#I2S_CFG1_DATAPAUSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_CFG1_DATAPAUSE_SHIFT
)Ë& 
I2S_CFG1_DATAPAUSE_MASK
)

	)

5135 
	#I2S_CFG1_PAIRCOUNT_MASK
 (0xCU)

	)

5136 
	#I2S_CFG1_PAIRCOUNT_SHIFT
 (2U)

	)

5137 
	#I2S_CFG1_PAIRCOUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_CFG1_PAIRCOUNT_SHIFT
)Ë& 
I2S_CFG1_PAIRCOUNT_MASK
)

	)

5138 
	#I2S_CFG1_MSTSLVCFG_MASK
 (0x30U)

	)

5139 
	#I2S_CFG1_MSTSLVCFG_SHIFT
 (4U)

	)

5140 
	#I2S_CFG1_MSTSLVCFG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_CFG1_MSTSLVCFG_SHIFT
)Ë& 
I2S_CFG1_MSTSLVCFG_MASK
)

	)

5141 
	#I2S_CFG1_MODE_MASK
 (0xC0U)

	)

5142 
	#I2S_CFG1_MODE_SHIFT
 (6U)

	)

5143 
	#I2S_CFG1_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_CFG1_MODE_SHIFT
)Ë& 
I2S_CFG1_MODE_MASK
)

	)

5144 
	#I2S_CFG1_RIGHTLOW_MASK
 (0x100U)

	)

5145 
	#I2S_CFG1_RIGHTLOW_SHIFT
 (8U)

	)

5146 
	#I2S_CFG1_RIGHTLOW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_CFG1_RIGHTLOW_SHIFT
)Ë& 
I2S_CFG1_RIGHTLOW_MASK
)

	)

5147 
	#I2S_CFG1_LEFTJUST_MASK
 (0x200U)

	)

5148 
	#I2S_CFG1_LEFTJUST_SHIFT
 (9U)

	)

5149 
	#I2S_CFG1_LEFTJUST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_CFG1_LEFTJUST_SHIFT
)Ë& 
I2S_CFG1_LEFTJUST_MASK
)

	)

5150 
	#I2S_CFG1_ONECHANNEL_MASK
 (0x400U)

	)

5151 
	#I2S_CFG1_ONECHANNEL_SHIFT
 (10U)

	)

5152 
	#I2S_CFG1_ONECHANNEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_CFG1_ONECHANNEL_SHIFT
)Ë& 
I2S_CFG1_ONECHANNEL_MASK
)

	)

5153 
	#I2S_CFG1_PDMDATA_MASK
 (0x800U)

	)

5154 
	#I2S_CFG1_PDMDATA_SHIFT
 (11U)

	)

5155 
	#I2S_CFG1_PDMDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_CFG1_PDMDATA_SHIFT
)Ë& 
I2S_CFG1_PDMDATA_MASK
)

	)

5156 
	#I2S_CFG1_SCK_POL_MASK
 (0x1000U)

	)

5157 
	#I2S_CFG1_SCK_POL_SHIFT
 (12U)

	)

5158 
	#I2S_CFG1_SCK_POL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_CFG1_SCK_POL_SHIFT
)Ë& 
I2S_CFG1_SCK_POL_MASK
)

	)

5159 
	#I2S_CFG1_WS_POL_MASK
 (0x2000U)

	)

5160 
	#I2S_CFG1_WS_POL_SHIFT
 (13U)

	)

5161 
	#I2S_CFG1_WS_POL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_CFG1_WS_POL_SHIFT
)Ë& 
I2S_CFG1_WS_POL_MASK
)

	)

5162 
	#I2S_CFG1_DATALEN_MASK
 (0x1F0000U)

	)

5163 
	#I2S_CFG1_DATALEN_SHIFT
 (16U)

	)

5164 
	#I2S_CFG1_DATALEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_CFG1_DATALEN_SHIFT
)Ë& 
I2S_CFG1_DATALEN_MASK
)

	)

5167 
	#I2S_CFG2_FRAMELEN_MASK
 (0x1FFU)

	)

5168 
	#I2S_CFG2_FRAMELEN_SHIFT
 (0U)

	)

5169 
	#I2S_CFG2_FRAMELEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_CFG2_FRAMELEN_SHIFT
)Ë& 
I2S_CFG2_FRAMELEN_MASK
)

	)

5170 
	#I2S_CFG2_POSITION_MASK
 (0x1FF0000U)

	)

5171 
	#I2S_CFG2_POSITION_SHIFT
 (16U)

	)

5172 
	#I2S_CFG2_POSITION
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_CFG2_POSITION_SHIFT
)Ë& 
I2S_CFG2_POSITION_MASK
)

	)

5175 
	#I2S_STAT_BUSY_MASK
 (0x1U)

	)

5176 
	#I2S_STAT_BUSY_SHIFT
 (0U)

	)

5177 
	#I2S_STAT_BUSY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_STAT_BUSY_SHIFT
)Ë& 
I2S_STAT_BUSY_MASK
)

	)

5178 
	#I2S_STAT_SLVFRMERR_MASK
 (0x2U)

	)

5179 
	#I2S_STAT_SLVFRMERR_SHIFT
 (1U)

	)

5180 
	#I2S_STAT_SLVFRMERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_STAT_SLVFRMERR_SHIFT
)Ë& 
I2S_STAT_SLVFRMERR_MASK
)

	)

5181 
	#I2S_STAT_LR_MASK
 (0x4U)

	)

5182 
	#I2S_STAT_LR_SHIFT
 (2U)

	)

5183 
	#I2S_STAT_LR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_STAT_LR_SHIFT
)Ë& 
I2S_STAT_LR_MASK
)

	)

5184 
	#I2S_STAT_DATAPAUSED_MASK
 (0x8U)

	)

5185 
	#I2S_STAT_DATAPAUSED_SHIFT
 (3U)

	)

5186 
	#I2S_STAT_DATAPAUSED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_STAT_DATAPAUSED_SHIFT
)Ë& 
I2S_STAT_DATAPAUSED_MASK
)

	)

5189 
	#I2S_DIV_DIV_MASK
 (0xFFFU)

	)

5190 
	#I2S_DIV_DIV_SHIFT
 (0U)

	)

5191 
	#I2S_DIV_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_DIV_DIV_SHIFT
)Ë& 
I2S_DIV_DIV_MASK
)

	)

5194 
	#I2S_FIFOCFG_ENABLETX_MASK
 (0x1U)

	)

5195 
	#I2S_FIFOCFG_ENABLETX_SHIFT
 (0U)

	)

5196 
	#I2S_FIFOCFG_ENABLETX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOCFG_ENABLETX_SHIFT
)Ë& 
I2S_FIFOCFG_ENABLETX_MASK
)

	)

5197 
	#I2S_FIFOCFG_ENABLERX_MASK
 (0x2U)

	)

5198 
	#I2S_FIFOCFG_ENABLERX_SHIFT
 (1U)

	)

5199 
	#I2S_FIFOCFG_ENABLERX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOCFG_ENABLERX_SHIFT
)Ë& 
I2S_FIFOCFG_ENABLERX_MASK
)

	)

5200 
	#I2S_FIFOCFG_TXI2SE0_MASK
 (0x4U)

	)

5201 
	#I2S_FIFOCFG_TXI2SE0_SHIFT
 (2U)

	)

5202 
	#I2S_FIFOCFG_TXI2SE0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOCFG_TXI2SE0_SHIFT
)Ë& 
I2S_FIFOCFG_TXI2SE0_MASK
)

	)

5203 
	#I2S_FIFOCFG_PACK48_MASK
 (0x8U)

	)

5204 
	#I2S_FIFOCFG_PACK48_SHIFT
 (3U)

	)

5205 
	#I2S_FIFOCFG_PACK48
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOCFG_PACK48_SHIFT
)Ë& 
I2S_FIFOCFG_PACK48_MASK
)

	)

5206 
	#I2S_FIFOCFG_SIZE_MASK
 (0x30U)

	)

5207 
	#I2S_FIFOCFG_SIZE_SHIFT
 (4U)

	)

5208 
	#I2S_FIFOCFG_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOCFG_SIZE_SHIFT
)Ë& 
I2S_FIFOCFG_SIZE_MASK
)

	)

5209 
	#I2S_FIFOCFG_DMATX_MASK
 (0x1000U)

	)

5210 
	#I2S_FIFOCFG_DMATX_SHIFT
 (12U)

	)

5211 
	#I2S_FIFOCFG_DMATX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOCFG_DMATX_SHIFT
)Ë& 
I2S_FIFOCFG_DMATX_MASK
)

	)

5212 
	#I2S_FIFOCFG_DMARX_MASK
 (0x2000U)

	)

5213 
	#I2S_FIFOCFG_DMARX_SHIFT
 (13U)

	)

5214 
	#I2S_FIFOCFG_DMARX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOCFG_DMARX_SHIFT
)Ë& 
I2S_FIFOCFG_DMARX_MASK
)

	)

5215 
	#I2S_FIFOCFG_WAKETX_MASK
 (0x4000U)

	)

5216 
	#I2S_FIFOCFG_WAKETX_SHIFT
 (14U)

	)

5217 
	#I2S_FIFOCFG_WAKETX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOCFG_WAKETX_SHIFT
)Ë& 
I2S_FIFOCFG_WAKETX_MASK
)

	)

5218 
	#I2S_FIFOCFG_WAKERX_MASK
 (0x8000U)

	)

5219 
	#I2S_FIFOCFG_WAKERX_SHIFT
 (15U)

	)

5220 
	#I2S_FIFOCFG_WAKERX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOCFG_WAKERX_SHIFT
)Ë& 
I2S_FIFOCFG_WAKERX_MASK
)

	)

5221 
	#I2S_FIFOCFG_EMPTYTX_MASK
 (0x10000U)

	)

5222 
	#I2S_FIFOCFG_EMPTYTX_SHIFT
 (16U)

	)

5223 
	#I2S_FIFOCFG_EMPTYTX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOCFG_EMPTYTX_SHIFT
)Ë& 
I2S_FIFOCFG_EMPTYTX_MASK
)

	)

5224 
	#I2S_FIFOCFG_EMPTYRX_MASK
 (0x20000U)

	)

5225 
	#I2S_FIFOCFG_EMPTYRX_SHIFT
 (17U)

	)

5226 
	#I2S_FIFOCFG_EMPTYRX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOCFG_EMPTYRX_SHIFT
)Ë& 
I2S_FIFOCFG_EMPTYRX_MASK
)

	)

5227 
	#I2S_FIFOCFG_POPDBG_MASK
 (0x40000U)

	)

5228 
	#I2S_FIFOCFG_POPDBG_SHIFT
 (18U)

	)

5229 
	#I2S_FIFOCFG_POPDBG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOCFG_POPDBG_SHIFT
)Ë& 
I2S_FIFOCFG_POPDBG_MASK
)

	)

5232 
	#I2S_FIFOSTAT_TXERR_MASK
 (0x1U)

	)

5233 
	#I2S_FIFOSTAT_TXERR_SHIFT
 (0U)

	)

5234 
	#I2S_FIFOSTAT_TXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOSTAT_TXERR_SHIFT
)Ë& 
I2S_FIFOSTAT_TXERR_MASK
)

	)

5235 
	#I2S_FIFOSTAT_RXERR_MASK
 (0x2U)

	)

5236 
	#I2S_FIFOSTAT_RXERR_SHIFT
 (1U)

	)

5237 
	#I2S_FIFOSTAT_RXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOSTAT_RXERR_SHIFT
)Ë& 
I2S_FIFOSTAT_RXERR_MASK
)

	)

5238 
	#I2S_FIFOSTAT_PERINT_MASK
 (0x8U)

	)

5239 
	#I2S_FIFOSTAT_PERINT_SHIFT
 (3U)

	)

5240 
	#I2S_FIFOSTAT_PERINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOSTAT_PERINT_SHIFT
)Ë& 
I2S_FIFOSTAT_PERINT_MASK
)

	)

5241 
	#I2S_FIFOSTAT_TXEMPTY_MASK
 (0x10U)

	)

5242 
	#I2S_FIFOSTAT_TXEMPTY_SHIFT
 (4U)

	)

5243 
	#I2S_FIFOSTAT_TXEMPTY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOSTAT_TXEMPTY_SHIFT
)Ë& 
I2S_FIFOSTAT_TXEMPTY_MASK
)

	)

5244 
	#I2S_FIFOSTAT_TXNOTFULL_MASK
 (0x20U)

	)

5245 
	#I2S_FIFOSTAT_TXNOTFULL_SHIFT
 (5U)

	)

5246 
	#I2S_FIFOSTAT_TXNOTFULL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOSTAT_TXNOTFULL_SHIFT
)Ë& 
I2S_FIFOSTAT_TXNOTFULL_MASK
)

	)

5247 
	#I2S_FIFOSTAT_RXNOTEMPTY_MASK
 (0x40U)

	)

5248 
	#I2S_FIFOSTAT_RXNOTEMPTY_SHIFT
 (6U)

	)

5249 
	#I2S_FIFOSTAT_RXNOTEMPTY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOSTAT_RXNOTEMPTY_SHIFT
)Ë& 
I2S_FIFOSTAT_RXNOTEMPTY_MASK
)

	)

5250 
	#I2S_FIFOSTAT_RXFULL_MASK
 (0x80U)

	)

5251 
	#I2S_FIFOSTAT_RXFULL_SHIFT
 (7U)

	)

5252 
	#I2S_FIFOSTAT_RXFULL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOSTAT_RXFULL_SHIFT
)Ë& 
I2S_FIFOSTAT_RXFULL_MASK
)

	)

5253 
	#I2S_FIFOSTAT_TXLVL_MASK
 (0x1F00U)

	)

5254 
	#I2S_FIFOSTAT_TXLVL_SHIFT
 (8U)

	)

5255 
	#I2S_FIFOSTAT_TXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOSTAT_TXLVL_SHIFT
)Ë& 
I2S_FIFOSTAT_TXLVL_MASK
)

	)

5256 
	#I2S_FIFOSTAT_RXLVL_MASK
 (0x1F0000U)

	)

5257 
	#I2S_FIFOSTAT_RXLVL_SHIFT
 (16U)

	)

5258 
	#I2S_FIFOSTAT_RXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOSTAT_RXLVL_SHIFT
)Ë& 
I2S_FIFOSTAT_RXLVL_MASK
)

	)

5261 
	#I2S_FIFOTRIG_TXLVLENA_MASK
 (0x1U)

	)

5262 
	#I2S_FIFOTRIG_TXLVLENA_SHIFT
 (0U)

	)

5263 
	#I2S_FIFOTRIG_TXLVLENA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOTRIG_TXLVLENA_SHIFT
)Ë& 
I2S_FIFOTRIG_TXLVLENA_MASK
)

	)

5264 
	#I2S_FIFOTRIG_RXLVLENA_MASK
 (0x2U)

	)

5265 
	#I2S_FIFOTRIG_RXLVLENA_SHIFT
 (1U)

	)

5266 
	#I2S_FIFOTRIG_RXLVLENA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOTRIG_RXLVLENA_SHIFT
)Ë& 
I2S_FIFOTRIG_RXLVLENA_MASK
)

	)

5267 
	#I2S_FIFOTRIG_TXLVL_MASK
 (0xF00U)

	)

5268 
	#I2S_FIFOTRIG_TXLVL_SHIFT
 (8U)

	)

5269 
	#I2S_FIFOTRIG_TXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOTRIG_TXLVL_SHIFT
)Ë& 
I2S_FIFOTRIG_TXLVL_MASK
)

	)

5270 
	#I2S_FIFOTRIG_RXLVL_MASK
 (0xF0000U)

	)

5271 
	#I2S_FIFOTRIG_RXLVL_SHIFT
 (16U)

	)

5272 
	#I2S_FIFOTRIG_RXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOTRIG_RXLVL_SHIFT
)Ë& 
I2S_FIFOTRIG_RXLVL_MASK
)

	)

5275 
	#I2S_FIFOINTENSET_TXERR_MASK
 (0x1U)

	)

5276 
	#I2S_FIFOINTENSET_TXERR_SHIFT
 (0U)

	)

5277 
	#I2S_FIFOINTENSET_TXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOINTENSET_TXERR_SHIFT
)Ë& 
I2S_FIFOINTENSET_TXERR_MASK
)

	)

5278 
	#I2S_FIFOINTENSET_RXERR_MASK
 (0x2U)

	)

5279 
	#I2S_FIFOINTENSET_RXERR_SHIFT
 (1U)

	)

5280 
	#I2S_FIFOINTENSET_RXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOINTENSET_RXERR_SHIFT
)Ë& 
I2S_FIFOINTENSET_RXERR_MASK
)

	)

5281 
	#I2S_FIFOINTENSET_TXLVL_MASK
 (0x4U)

	)

5282 
	#I2S_FIFOINTENSET_TXLVL_SHIFT
 (2U)

	)

5283 
	#I2S_FIFOINTENSET_TXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOINTENSET_TXLVL_SHIFT
)Ë& 
I2S_FIFOINTENSET_TXLVL_MASK
)

	)

5284 
	#I2S_FIFOINTENSET_RXLVL_MASK
 (0x8U)

	)

5285 
	#I2S_FIFOINTENSET_RXLVL_SHIFT
 (3U)

	)

5286 
	#I2S_FIFOINTENSET_RXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOINTENSET_RXLVL_SHIFT
)Ë& 
I2S_FIFOINTENSET_RXLVL_MASK
)

	)

5289 
	#I2S_FIFOINTENCLR_TXERR_MASK
 (0x1U)

	)

5290 
	#I2S_FIFOINTENCLR_TXERR_SHIFT
 (0U)

	)

5291 
	#I2S_FIFOINTENCLR_TXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOINTENCLR_TXERR_SHIFT
)Ë& 
I2S_FIFOINTENCLR_TXERR_MASK
)

	)

5292 
	#I2S_FIFOINTENCLR_RXERR_MASK
 (0x2U)

	)

5293 
	#I2S_FIFOINTENCLR_RXERR_SHIFT
 (1U)

	)

5294 
	#I2S_FIFOINTENCLR_RXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOINTENCLR_RXERR_SHIFT
)Ë& 
I2S_FIFOINTENCLR_RXERR_MASK
)

	)

5295 
	#I2S_FIFOINTENCLR_TXLVL_MASK
 (0x4U)

	)

5296 
	#I2S_FIFOINTENCLR_TXLVL_SHIFT
 (2U)

	)

5297 
	#I2S_FIFOINTENCLR_TXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOINTENCLR_TXLVL_SHIFT
)Ë& 
I2S_FIFOINTENCLR_TXLVL_MASK
)

	)

5298 
	#I2S_FIFOINTENCLR_RXLVL_MASK
 (0x8U)

	)

5299 
	#I2S_FIFOINTENCLR_RXLVL_SHIFT
 (3U)

	)

5300 
	#I2S_FIFOINTENCLR_RXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOINTENCLR_RXLVL_SHIFT
)Ë& 
I2S_FIFOINTENCLR_RXLVL_MASK
)

	)

5303 
	#I2S_FIFOINTSTAT_TXERR_MASK
 (0x1U)

	)

5304 
	#I2S_FIFOINTSTAT_TXERR_SHIFT
 (0U)

	)

5305 
	#I2S_FIFOINTSTAT_TXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOINTSTAT_TXERR_SHIFT
)Ë& 
I2S_FIFOINTSTAT_TXERR_MASK
)

	)

5306 
	#I2S_FIFOINTSTAT_RXERR_MASK
 (0x2U)

	)

5307 
	#I2S_FIFOINTSTAT_RXERR_SHIFT
 (1U)

	)

5308 
	#I2S_FIFOINTSTAT_RXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOINTSTAT_RXERR_SHIFT
)Ë& 
I2S_FIFOINTSTAT_RXERR_MASK
)

	)

5309 
	#I2S_FIFOINTSTAT_TXLVL_MASK
 (0x4U)

	)

5310 
	#I2S_FIFOINTSTAT_TXLVL_SHIFT
 (2U)

	)

5311 
	#I2S_FIFOINTSTAT_TXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOINTSTAT_TXLVL_SHIFT
)Ë& 
I2S_FIFOINTSTAT_TXLVL_MASK
)

	)

5312 
	#I2S_FIFOINTSTAT_RXLVL_MASK
 (0x8U)

	)

5313 
	#I2S_FIFOINTSTAT_RXLVL_SHIFT
 (3U)

	)

5314 
	#I2S_FIFOINTSTAT_RXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOINTSTAT_RXLVL_SHIFT
)Ë& 
I2S_FIFOINTSTAT_RXLVL_MASK
)

	)

5315 
	#I2S_FIFOINTSTAT_PERINT_MASK
 (0x10U)

	)

5316 
	#I2S_FIFOINTSTAT_PERINT_SHIFT
 (4U)

	)

5317 
	#I2S_FIFOINTSTAT_PERINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOINTSTAT_PERINT_SHIFT
)Ë& 
I2S_FIFOINTSTAT_PERINT_MASK
)

	)

5320 
	#I2S_FIFOWR_TXDATA_MASK
 (0xFFFFFFFFU)

	)

5321 
	#I2S_FIFOWR_TXDATA_SHIFT
 (0U)

	)

5322 
	#I2S_FIFOWR_TXDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOWR_TXDATA_SHIFT
)Ë& 
I2S_FIFOWR_TXDATA_MASK
)

	)

5325 
	#I2S_FIFOWR48H_TXDATA_MASK
 (0xFFFFFFU)

	)

5326 
	#I2S_FIFOWR48H_TXDATA_SHIFT
 (0U)

	)

5327 
	#I2S_FIFOWR48H_TXDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFOWR48H_TXDATA_SHIFT
)Ë& 
I2S_FIFOWR48H_TXDATA_MASK
)

	)

5330 
	#I2S_FIFORD_RXDATA_MASK
 (0xFFFFFFFFU)

	)

5331 
	#I2S_FIFORD_RXDATA_SHIFT
 (0U)

	)

5332 
	#I2S_FIFORD_RXDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFORD_RXDATA_SHIFT
)Ë& 
I2S_FIFORD_RXDATA_MASK
)

	)

5335 
	#I2S_FIFORD48H_RXDATA_MASK
 (0xFFFFFFU)

	)

5336 
	#I2S_FIFORD48H_RXDATA_SHIFT
 (0U)

	)

5337 
	#I2S_FIFORD48H_RXDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFORD48H_RXDATA_SHIFT
)Ë& 
I2S_FIFORD48H_RXDATA_MASK
)

	)

5340 
	#I2S_FIFORDNOPOP_RXDATA_MASK
 (0xFFFFFFFFU)

	)

5341 
	#I2S_FIFORDNOPOP_RXDATA_SHIFT
 (0U)

	)

5342 
	#I2S_FIFORDNOPOP_RXDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFORDNOPOP_RXDATA_SHIFT
)Ë& 
I2S_FIFORDNOPOP_RXDATA_MASK
)

	)

5345 
	#I2S_FIFORD48HNOPOP_RXDATA_MASK
 (0xFFFFFFU)

	)

5346 
	#I2S_FIFORD48HNOPOP_RXDATA_SHIFT
 (0U)

	)

5347 
	#I2S_FIFORD48HNOPOP_RXDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_FIFORD48HNOPOP_RXDATA_SHIFT
)Ë& 
I2S_FIFORD48HNOPOP_RXDATA_MASK
)

	)

5350 
	#I2S_ID_A≥πuª_MASK
 (0xFFU)

	)

5351 
	#I2S_ID_A≥πuª_SHIFT
 (0U)

	)

5352 
	#I2S_ID_A≥πuª
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_ID_A≥πuª_SHIFT
)Ë& 
I2S_ID_A≥πuª_MASK
)

	)

5353 
	#I2S_ID_Mö‹_Rev_MASK
 (0xF00U)

	)

5354 
	#I2S_ID_Mö‹_Rev_SHIFT
 (8U)

	)

5355 
	#I2S_ID_Mö‹_Rev
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_ID_Mö‹_Rev_SHIFT
)Ë& 
I2S_ID_Mö‹_Rev_MASK
)

	)

5356 
	#I2S_ID_Maj‹_Rev_MASK
 (0xF000U)

	)

5357 
	#I2S_ID_Maj‹_Rev_SHIFT
 (12U)

	)

5358 
	#I2S_ID_Maj‹_Rev
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_ID_Maj‹_Rev_SHIFT
)Ë& 
I2S_ID_Maj‹_Rev_MASK
)

	)

5359 
	#I2S_ID_ID_MASK
 (0xFFFF0000U)

	)

5360 
	#I2S_ID_ID_SHIFT
 (16U)

	)

5361 
	#I2S_ID_ID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
I2S_ID_ID_SHIFT
)Ë& 
I2S_ID_ID_MASK
)

	)

5371 
	#I2S0_BASE
 (0x40097000u)

	)

5373 
	#I2S0
 ((
I2S_Ty≥
 *)
I2S0_BASE
)

	)

5375 
	#I2S1_BASE
 (0x40098000u)

	)

5377 
	#I2S1
 ((
I2S_Ty≥
 *)
I2S1_BASE
)

	)

5379 
	#I2S_BASE_ADDRS
 { 
I2S0_BASE
, 
I2S1_BASE
 }

	)

5381 
	#I2S_BASE_PTRS
 { 
I2S0
, 
I2S1
 }

	)

5383 
	#I2S_IRQS
 { 
FLEXCOMM6_IRQn
, 
FLEXCOMM7_IRQn
 }

	)

5401 
__IO
 
uöt32_t
 
	mSCT0_INMUX
[7];

5402 
uöt8_t
 
	mRESERVED_0
[164];

5403 
__IO
 
uöt32_t
 
	mPINTSEL
[8];

5404 
__IO
 
uöt32_t
 
	mDMA_ITRIG_INMUX
[30];

5405 
uöt8_t
 
	mRESERVED_1
[8];

5406 
__IO
 
uöt32_t
 
	mDMA_OTRIG_INMUX
[4];

5407 
uöt8_t
 
	mRESERVED_2
[16];

5408 
__IO
 
uöt32_t
 
	mFREQMEAS_REF
;

5409 
__IO
 
uöt32_t
 
	mFREQMEAS_TARGET
;

5410 } 
	tINPUTMUX_Ty≥
;

5422 
	#INPUTMUX_SCT0_INMUX_INP_N_MASK
 (0x1FU)

	)

5423 
	#INPUTMUX_SCT0_INMUX_INP_N_SHIFT
 (0U)

	)

5424 
	#INPUTMUX_SCT0_INMUX_INP_N
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
INPUTMUX_SCT0_INMUX_INP_N_SHIFT
)Ë& 
INPUTMUX_SCT0_INMUX_INP_N_MASK
)

	)

5427 
	#INPUTMUX_SCT0_INMUX_COUNT
 (7U)

	)

5430 
	#INPUTMUX_PINTSEL_INTPIN_MASK
 (0xFFU)

	)

5431 
	#INPUTMUX_PINTSEL_INTPIN_SHIFT
 (0U)

	)

5432 
	#INPUTMUX_PINTSEL_INTPIN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
INPUTMUX_PINTSEL_INTPIN_SHIFT
)Ë& 
INPUTMUX_PINTSEL_INTPIN_MASK
)

	)

5435 
	#INPUTMUX_PINTSEL_COUNT
 (8U)

	)

5438 
	#INPUTMUX_DMA_ITRIG_INMUX_INP_MASK
 (0x1FU)

	)

5439 
	#INPUTMUX_DMA_ITRIG_INMUX_INP_SHIFT
 (0U)

	)

5440 
	#INPUTMUX_DMA_ITRIG_INMUX_INP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
INPUTMUX_DMA_ITRIG_INMUX_INP_SHIFT
)Ë& 
INPUTMUX_DMA_ITRIG_INMUX_INP_MASK
)

	)

5443 
	#INPUTMUX_DMA_ITRIG_INMUX_COUNT
 (30U)

	)

5446 
	#INPUTMUX_DMA_OTRIG_INMUX_INP_MASK
 (0x1FU)

	)

5447 
	#INPUTMUX_DMA_OTRIG_INMUX_INP_SHIFT
 (0U)

	)

5448 
	#INPUTMUX_DMA_OTRIG_INMUX_INP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
INPUTMUX_DMA_OTRIG_INMUX_INP_SHIFT
)Ë& 
INPUTMUX_DMA_OTRIG_INMUX_INP_MASK
)

	)

5451 
	#INPUTMUX_DMA_OTRIG_INMUX_COUNT
 (4U)

	)

5454 
	#INPUTMUX_FREQMEAS_REF_CLKIN_MASK
 (0x1FU)

	)

5455 
	#INPUTMUX_FREQMEAS_REF_CLKIN_SHIFT
 (0U)

	)

5456 
	#INPUTMUX_FREQMEAS_REF_CLKIN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
INPUTMUX_FREQMEAS_REF_CLKIN_SHIFT
)Ë& 
INPUTMUX_FREQMEAS_REF_CLKIN_MASK
)

	)

5459 
	#INPUTMUX_FREQMEAS_TARGET_CLKIN_MASK
 (0x1FU)

	)

5460 
	#INPUTMUX_FREQMEAS_TARGET_CLKIN_SHIFT
 (0U)

	)

5461 
	#INPUTMUX_FREQMEAS_TARGET_CLKIN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
INPUTMUX_FREQMEAS_TARGET_CLKIN_SHIFT
)Ë& 
INPUTMUX_FREQMEAS_TARGET_CLKIN_MASK
)

	)

5471 
	#INPUTMUX_BASE
 (0x40005000u)

	)

5473 
	#INPUTMUX
 ((
INPUTMUX_Ty≥
 *)
INPUTMUX_BASE
)

	)

5475 
	#INPUTMUX_BASE_ADDRS
 { 
INPUTMUX_BASE
 }

	)

5477 
	#INPUTMUX_BASE_PTRS
 { 
INPUTMUX
 }

	)

5495 
__IO
 
uöt32_t
 
	mPIO
[6][32];

5496 } 
	tIOCON_Ty≥
;

5508 
	#IOCON_PIO_FUNC_MASK
 (0xFU)

	)

5509 
	#IOCON_PIO_FUNC_SHIFT
 (0U)

	)

5510 
	#IOCON_PIO_FUNC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
IOCON_PIO_FUNC_SHIFT
)Ë& 
IOCON_PIO_FUNC_MASK
)

	)

5511 
	#IOCON_PIO_MODE_MASK
 (0x30U)

	)

5512 
	#IOCON_PIO_MODE_SHIFT
 (4U)

	)

5513 
	#IOCON_PIO_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
IOCON_PIO_MODE_SHIFT
)Ë& 
IOCON_PIO_MODE_MASK
)

	)

5514 
	#IOCON_PIO_I2CSLEW_MASK
 (0x40U)

	)

5515 
	#IOCON_PIO_I2CSLEW_SHIFT
 (6U)

	)

5516 
	#IOCON_PIO_I2CSLEW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
IOCON_PIO_I2CSLEW_SHIFT
)Ë& 
IOCON_PIO_I2CSLEW_MASK
)

	)

5517 
	#IOCON_PIO_INVERT_MASK
 (0x80U)

	)

5518 
	#IOCON_PIO_INVERT_SHIFT
 (7U)

	)

5519 
	#IOCON_PIO_INVERT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
IOCON_PIO_INVERT_SHIFT
)Ë& 
IOCON_PIO_INVERT_MASK
)

	)

5520 
	#IOCON_PIO_DIGIMODE_MASK
 (0x100U)

	)

5521 
	#IOCON_PIO_DIGIMODE_SHIFT
 (8U)

	)

5522 
	#IOCON_PIO_DIGIMODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
IOCON_PIO_DIGIMODE_SHIFT
)Ë& 
IOCON_PIO_DIGIMODE_MASK
)

	)

5523 
	#IOCON_PIO_FILTEROFF_MASK
 (0x200U)

	)

5524 
	#IOCON_PIO_FILTEROFF_SHIFT
 (9U)

	)

5525 
	#IOCON_PIO_FILTEROFF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
IOCON_PIO_FILTEROFF_SHIFT
)Ë& 
IOCON_PIO_FILTEROFF_MASK
)

	)

5526 
	#IOCON_PIO_I2CDRIVE_MASK
 (0x400U)

	)

5527 
	#IOCON_PIO_I2CDRIVE_SHIFT
 (10U)

	)

5528 
	#IOCON_PIO_I2CDRIVE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
IOCON_PIO_I2CDRIVE_SHIFT
)Ë& 
IOCON_PIO_I2CDRIVE_MASK
)

	)

5529 
	#IOCON_PIO_SLEW_MASK
 (0x400U)

	)

5530 
	#IOCON_PIO_SLEW_SHIFT
 (10U)

	)

5531 
	#IOCON_PIO_SLEW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
IOCON_PIO_SLEW_SHIFT
)Ë& 
IOCON_PIO_SLEW_MASK
)

	)

5532 
	#IOCON_PIO_OD_MASK
 (0x800U)

	)

5533 
	#IOCON_PIO_OD_SHIFT
 (11U)

	)

5534 
	#IOCON_PIO_OD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
IOCON_PIO_OD_SHIFT
)Ë& 
IOCON_PIO_OD_MASK
)

	)

5535 
	#IOCON_PIO_I2CFILTER_MASK
 (0x800U)

	)

5536 
	#IOCON_PIO_I2CFILTER_SHIFT
 (11U)

	)

5537 
	#IOCON_PIO_I2CFILTER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
IOCON_PIO_I2CFILTER_SHIFT
)Ë& 
IOCON_PIO_I2CFILTER_MASK
)

	)

5540 
	#IOCON_PIO_COUNT
 (6U)

	)

5543 
	#IOCON_PIO_COUNT2
 (32U)

	)

5553 
	#IOCON_BASE
 (0x40001000u)

	)

5555 
	#IOCON
 ((
IOCON_Ty≥
 *)
IOCON_BASE
)

	)

5557 
	#IOCON_BASE_ADDRS
 { 
IOCON_BASE
 }

	)

5559 
	#IOCON_BASE_PTRS
 { 
IOCON
 }

	)

5577 
__IO
 
uöt32_t
 
	mTIMH
;

5578 
__IO
 
uöt32_t
 
	mTIMV
;

5579 
__IO
 
uöt32_t
 
	mPOL
;

5580 
__IO
 
uöt32_t
 
	mLE
;

5581 
__IO
 
uöt32_t
 
	mUPBASE
;

5582 
__IO
 
uöt32_t
 
	mLPBASE
;

5583 
__IO
 
uöt32_t
 
	mCTRL
;

5584 
__IO
 
uöt32_t
 
	mINTMSK
;

5585 
__I
 
uöt32_t
 
	mINTRAW
;

5586 
__I
 
uöt32_t
 
	mINTSTAT
;

5587 
__IO
 
uöt32_t
 
	mINTCLR
;

5588 
__I
 
uöt32_t
 
	mUPCURR
;

5589 
__I
 
uöt32_t
 
	mLPCURR
;

5590 
uöt8_t
 
	mRESERVED_0
[460];

5591 
__IO
 
uöt32_t
 
	mPAL
[128];

5592 
uöt8_t
 
	mRESERVED_1
[1024];

5593 
__IO
 
uöt32_t
 
	mCRSR_IMG
[256];

5594 
__IO
 
uöt32_t
 
	mCRSR_CTRL
;

5595 
__IO
 
uöt32_t
 
	mCRSR_CFG
;

5596 
__IO
 
uöt32_t
 
	mCRSR_PAL0
;

5597 
__IO
 
uöt32_t
 
	mCRSR_PAL1
;

5598 
__IO
 
uöt32_t
 
	mCRSR_XY
;

5599 
__IO
 
uöt32_t
 
	mCRSR_CLIP
;

5600 
uöt8_t
 
	mRESERVED_2
[8];

5601 
__IO
 
uöt32_t
 
	mCRSR_INTMSK
;

5602 
__O
 
uöt32_t
 
	mCRSR_INTCLR
;

5603 
__I
 
uöt32_t
 
	mCRSR_INTRAW
;

5604 
__I
 
uöt32_t
 
	mCRSR_INTSTAT
;

5605 } 
	tLCD_Ty≥
;

5617 
	#LCD_TIMH_PPL_MASK
 (0xFCU)

	)

5618 
	#LCD_TIMH_PPL_SHIFT
 (2U)

	)

5619 
	#LCD_TIMH_PPL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_TIMH_PPL_SHIFT
)Ë& 
LCD_TIMH_PPL_MASK
)

	)

5620 
	#LCD_TIMH_HSW_MASK
 (0xFF00U)

	)

5621 
	#LCD_TIMH_HSW_SHIFT
 (8U)

	)

5622 
	#LCD_TIMH_HSW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_TIMH_HSW_SHIFT
)Ë& 
LCD_TIMH_HSW_MASK
)

	)

5623 
	#LCD_TIMH_HFP_MASK
 (0xFF0000U)

	)

5624 
	#LCD_TIMH_HFP_SHIFT
 (16U)

	)

5625 
	#LCD_TIMH_HFP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_TIMH_HFP_SHIFT
)Ë& 
LCD_TIMH_HFP_MASK
)

	)

5626 
	#LCD_TIMH_HBP_MASK
 (0xFF000000U)

	)

5627 
	#LCD_TIMH_HBP_SHIFT
 (24U)

	)

5628 
	#LCD_TIMH_HBP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_TIMH_HBP_SHIFT
)Ë& 
LCD_TIMH_HBP_MASK
)

	)

5631 
	#LCD_TIMV_LPP_MASK
 (0x3FFU)

	)

5632 
	#LCD_TIMV_LPP_SHIFT
 (0U)

	)

5633 
	#LCD_TIMV_LPP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_TIMV_LPP_SHIFT
)Ë& 
LCD_TIMV_LPP_MASK
)

	)

5634 
	#LCD_TIMV_VSW_MASK
 (0xFC00U)

	)

5635 
	#LCD_TIMV_VSW_SHIFT
 (10U)

	)

5636 
	#LCD_TIMV_VSW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_TIMV_VSW_SHIFT
)Ë& 
LCD_TIMV_VSW_MASK
)

	)

5637 
	#LCD_TIMV_VFP_MASK
 (0xFF0000U)

	)

5638 
	#LCD_TIMV_VFP_SHIFT
 (16U)

	)

5639 
	#LCD_TIMV_VFP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_TIMV_VFP_SHIFT
)Ë& 
LCD_TIMV_VFP_MASK
)

	)

5640 
	#LCD_TIMV_VBP_MASK
 (0xFF000000U)

	)

5641 
	#LCD_TIMV_VBP_SHIFT
 (24U)

	)

5642 
	#LCD_TIMV_VBP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_TIMV_VBP_SHIFT
)Ë& 
LCD_TIMV_VBP_MASK
)

	)

5645 
	#LCD_POL_PCD_LO_MASK
 (0x1FU)

	)

5646 
	#LCD_POL_PCD_LO_SHIFT
 (0U)

	)

5647 
	#LCD_POL_PCD_LO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_POL_PCD_LO_SHIFT
)Ë& 
LCD_POL_PCD_LO_MASK
)

	)

5648 
	#LCD_POL_ACB_MASK
 (0x7C0U)

	)

5649 
	#LCD_POL_ACB_SHIFT
 (6U)

	)

5650 
	#LCD_POL_ACB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_POL_ACB_SHIFT
)Ë& 
LCD_POL_ACB_MASK
)

	)

5651 
	#LCD_POL_IVS_MASK
 (0x800U)

	)

5652 
	#LCD_POL_IVS_SHIFT
 (11U)

	)

5653 
	#LCD_POL_IVS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_POL_IVS_SHIFT
)Ë& 
LCD_POL_IVS_MASK
)

	)

5654 
	#LCD_POL_IHS_MASK
 (0x1000U)

	)

5655 
	#LCD_POL_IHS_SHIFT
 (12U)

	)

5656 
	#LCD_POL_IHS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_POL_IHS_SHIFT
)Ë& 
LCD_POL_IHS_MASK
)

	)

5657 
	#LCD_POL_IPC_MASK
 (0x2000U)

	)

5658 
	#LCD_POL_IPC_SHIFT
 (13U)

	)

5659 
	#LCD_POL_IPC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_POL_IPC_SHIFT
)Ë& 
LCD_POL_IPC_MASK
)

	)

5660 
	#LCD_POL_IOE_MASK
 (0x4000U)

	)

5661 
	#LCD_POL_IOE_SHIFT
 (14U)

	)

5662 
	#LCD_POL_IOE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_POL_IOE_SHIFT
)Ë& 
LCD_POL_IOE_MASK
)

	)

5663 
	#LCD_POL_CPL_MASK
 (0x3FF0000U)

	)

5664 
	#LCD_POL_CPL_SHIFT
 (16U)

	)

5665 
	#LCD_POL_CPL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_POL_CPL_SHIFT
)Ë& 
LCD_POL_CPL_MASK
)

	)

5666 
	#LCD_POL_BCD_MASK
 (0x4000000U)

	)

5667 
	#LCD_POL_BCD_SHIFT
 (26U)

	)

5668 
	#LCD_POL_BCD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_POL_BCD_SHIFT
)Ë& 
LCD_POL_BCD_MASK
)

	)

5669 
	#LCD_POL_PCD_HI_MASK
 (0xF8000000U)

	)

5670 
	#LCD_POL_PCD_HI_SHIFT
 (27U)

	)

5671 
	#LCD_POL_PCD_HI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_POL_PCD_HI_SHIFT
)Ë& 
LCD_POL_PCD_HI_MASK
)

	)

5674 
	#LCD_LE_LED_MASK
 (0x7FU)

	)

5675 
	#LCD_LE_LED_SHIFT
 (0U)

	)

5676 
	#LCD_LE_LED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_LE_LED_SHIFT
)Ë& 
LCD_LE_LED_MASK
)

	)

5677 
	#LCD_LE_LEE_MASK
 (0x10000U)

	)

5678 
	#LCD_LE_LEE_SHIFT
 (16U)

	)

5679 
	#LCD_LE_LEE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_LE_LEE_SHIFT
)Ë& 
LCD_LE_LEE_MASK
)

	)

5682 
	#LCD_UPBASE_LCDUPBASE_MASK
 (0xFFFFFFF8U)

	)

5683 
	#LCD_UPBASE_LCDUPBASE_SHIFT
 (3U)

	)

5684 
	#LCD_UPBASE_LCDUPBASE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_UPBASE_LCDUPBASE_SHIFT
)Ë& 
LCD_UPBASE_LCDUPBASE_MASK
)

	)

5687 
	#LCD_LPBASE_LCDLPBASE_MASK
 (0xFFFFFFF8U)

	)

5688 
	#LCD_LPBASE_LCDLPBASE_SHIFT
 (3U)

	)

5689 
	#LCD_LPBASE_LCDLPBASE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_LPBASE_LCDLPBASE_SHIFT
)Ë& 
LCD_LPBASE_LCDLPBASE_MASK
)

	)

5692 
	#LCD_CTRL_LCDEN_MASK
 (0x1U)

	)

5693 
	#LCD_CTRL_LCDEN_SHIFT
 (0U)

	)

5694 
	#LCD_CTRL_LCDEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CTRL_LCDEN_SHIFT
)Ë& 
LCD_CTRL_LCDEN_MASK
)

	)

5695 
	#LCD_CTRL_LCDBPP_MASK
 (0xEU)

	)

5696 
	#LCD_CTRL_LCDBPP_SHIFT
 (1U)

	)

5697 
	#LCD_CTRL_LCDBPP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CTRL_LCDBPP_SHIFT
)Ë& 
LCD_CTRL_LCDBPP_MASK
)

	)

5698 
	#LCD_CTRL_LCDBW_MASK
 (0x10U)

	)

5699 
	#LCD_CTRL_LCDBW_SHIFT
 (4U)

	)

5700 
	#LCD_CTRL_LCDBW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CTRL_LCDBW_SHIFT
)Ë& 
LCD_CTRL_LCDBW_MASK
)

	)

5701 
	#LCD_CTRL_LCDTFT_MASK
 (0x20U)

	)

5702 
	#LCD_CTRL_LCDTFT_SHIFT
 (5U)

	)

5703 
	#LCD_CTRL_LCDTFT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CTRL_LCDTFT_SHIFT
)Ë& 
LCD_CTRL_LCDTFT_MASK
)

	)

5704 
	#LCD_CTRL_LCDMONO8_MASK
 (0x40U)

	)

5705 
	#LCD_CTRL_LCDMONO8_SHIFT
 (6U)

	)

5706 
	#LCD_CTRL_LCDMONO8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CTRL_LCDMONO8_SHIFT
)Ë& 
LCD_CTRL_LCDMONO8_MASK
)

	)

5707 
	#LCD_CTRL_LCDDUAL_MASK
 (0x80U)

	)

5708 
	#LCD_CTRL_LCDDUAL_SHIFT
 (7U)

	)

5709 
	#LCD_CTRL_LCDDUAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CTRL_LCDDUAL_SHIFT
)Ë& 
LCD_CTRL_LCDDUAL_MASK
)

	)

5710 
	#LCD_CTRL_BGR_MASK
 (0x100U)

	)

5711 
	#LCD_CTRL_BGR_SHIFT
 (8U)

	)

5712 
	#LCD_CTRL_BGR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CTRL_BGR_SHIFT
)Ë& 
LCD_CTRL_BGR_MASK
)

	)

5713 
	#LCD_CTRL_BEBO_MASK
 (0x200U)

	)

5714 
	#LCD_CTRL_BEBO_SHIFT
 (9U)

	)

5715 
	#LCD_CTRL_BEBO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CTRL_BEBO_SHIFT
)Ë& 
LCD_CTRL_BEBO_MASK
)

	)

5716 
	#LCD_CTRL_BEPO_MASK
 (0x400U)

	)

5717 
	#LCD_CTRL_BEPO_SHIFT
 (10U)

	)

5718 
	#LCD_CTRL_BEPO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CTRL_BEPO_SHIFT
)Ë& 
LCD_CTRL_BEPO_MASK
)

	)

5719 
	#LCD_CTRL_LCDPWR_MASK
 (0x800U)

	)

5720 
	#LCD_CTRL_LCDPWR_SHIFT
 (11U)

	)

5721 
	#LCD_CTRL_LCDPWR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CTRL_LCDPWR_SHIFT
)Ë& 
LCD_CTRL_LCDPWR_MASK
)

	)

5722 
	#LCD_CTRL_LCDVCOMP_MASK
 (0x3000U)

	)

5723 
	#LCD_CTRL_LCDVCOMP_SHIFT
 (12U)

	)

5724 
	#LCD_CTRL_LCDVCOMP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CTRL_LCDVCOMP_SHIFT
)Ë& 
LCD_CTRL_LCDVCOMP_MASK
)

	)

5725 
	#LCD_CTRL_WATERMARK_MASK
 (0x10000U)

	)

5726 
	#LCD_CTRL_WATERMARK_SHIFT
 (16U)

	)

5727 
	#LCD_CTRL_WATERMARK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CTRL_WATERMARK_SHIFT
)Ë& 
LCD_CTRL_WATERMARK_MASK
)

	)

5730 
	#LCD_INTMSK_FUFIM_MASK
 (0x2U)

	)

5731 
	#LCD_INTMSK_FUFIM_SHIFT
 (1U)

	)

5732 
	#LCD_INTMSK_FUFIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_INTMSK_FUFIM_SHIFT
)Ë& 
LCD_INTMSK_FUFIM_MASK
)

	)

5733 
	#LCD_INTMSK_LNBUIM_MASK
 (0x4U)

	)

5734 
	#LCD_INTMSK_LNBUIM_SHIFT
 (2U)

	)

5735 
	#LCD_INTMSK_LNBUIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_INTMSK_LNBUIM_SHIFT
)Ë& 
LCD_INTMSK_LNBUIM_MASK
)

	)

5736 
	#LCD_INTMSK_VCOMPIM_MASK
 (0x8U)

	)

5737 
	#LCD_INTMSK_VCOMPIM_SHIFT
 (3U)

	)

5738 
	#LCD_INTMSK_VCOMPIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_INTMSK_VCOMPIM_SHIFT
)Ë& 
LCD_INTMSK_VCOMPIM_MASK
)

	)

5739 
	#LCD_INTMSK_BERIM_MASK
 (0x10U)

	)

5740 
	#LCD_INTMSK_BERIM_SHIFT
 (4U)

	)

5741 
	#LCD_INTMSK_BERIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_INTMSK_BERIM_SHIFT
)Ë& 
LCD_INTMSK_BERIM_MASK
)

	)

5744 
	#LCD_INTRAW_FUFRIS_MASK
 (0x2U)

	)

5745 
	#LCD_INTRAW_FUFRIS_SHIFT
 (1U)

	)

5746 
	#LCD_INTRAW_FUFRIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_INTRAW_FUFRIS_SHIFT
)Ë& 
LCD_INTRAW_FUFRIS_MASK
)

	)

5747 
	#LCD_INTRAW_LNBURIS_MASK
 (0x4U)

	)

5748 
	#LCD_INTRAW_LNBURIS_SHIFT
 (2U)

	)

5749 
	#LCD_INTRAW_LNBURIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_INTRAW_LNBURIS_SHIFT
)Ë& 
LCD_INTRAW_LNBURIS_MASK
)

	)

5750 
	#LCD_INTRAW_VCOMPRIS_MASK
 (0x8U)

	)

5751 
	#LCD_INTRAW_VCOMPRIS_SHIFT
 (3U)

	)

5752 
	#LCD_INTRAW_VCOMPRIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_INTRAW_VCOMPRIS_SHIFT
)Ë& 
LCD_INTRAW_VCOMPRIS_MASK
)

	)

5753 
	#LCD_INTRAW_BERRAW_MASK
 (0x10U)

	)

5754 
	#LCD_INTRAW_BERRAW_SHIFT
 (4U)

	)

5755 
	#LCD_INTRAW_BERRAW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_INTRAW_BERRAW_SHIFT
)Ë& 
LCD_INTRAW_BERRAW_MASK
)

	)

5758 
	#LCD_INTSTAT_FUFMIS_MASK
 (0x2U)

	)

5759 
	#LCD_INTSTAT_FUFMIS_SHIFT
 (1U)

	)

5760 
	#LCD_INTSTAT_FUFMIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_INTSTAT_FUFMIS_SHIFT
)Ë& 
LCD_INTSTAT_FUFMIS_MASK
)

	)

5761 
	#LCD_INTSTAT_LNBUMIS_MASK
 (0x4U)

	)

5762 
	#LCD_INTSTAT_LNBUMIS_SHIFT
 (2U)

	)

5763 
	#LCD_INTSTAT_LNBUMIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_INTSTAT_LNBUMIS_SHIFT
)Ë& 
LCD_INTSTAT_LNBUMIS_MASK
)

	)

5764 
	#LCD_INTSTAT_VCOMPMIS_MASK
 (0x8U)

	)

5765 
	#LCD_INTSTAT_VCOMPMIS_SHIFT
 (3U)

	)

5766 
	#LCD_INTSTAT_VCOMPMIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_INTSTAT_VCOMPMIS_SHIFT
)Ë& 
LCD_INTSTAT_VCOMPMIS_MASK
)

	)

5767 
	#LCD_INTSTAT_BERMIS_MASK
 (0x10U)

	)

5768 
	#LCD_INTSTAT_BERMIS_SHIFT
 (4U)

	)

5769 
	#LCD_INTSTAT_BERMIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_INTSTAT_BERMIS_SHIFT
)Ë& 
LCD_INTSTAT_BERMIS_MASK
)

	)

5772 
	#LCD_INTCLR_FUFIC_MASK
 (0x2U)

	)

5773 
	#LCD_INTCLR_FUFIC_SHIFT
 (1U)

	)

5774 
	#LCD_INTCLR_FUFIC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_INTCLR_FUFIC_SHIFT
)Ë& 
LCD_INTCLR_FUFIC_MASK
)

	)

5775 
	#LCD_INTCLR_LNBUIC_MASK
 (0x4U)

	)

5776 
	#LCD_INTCLR_LNBUIC_SHIFT
 (2U)

	)

5777 
	#LCD_INTCLR_LNBUIC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_INTCLR_LNBUIC_SHIFT
)Ë& 
LCD_INTCLR_LNBUIC_MASK
)

	)

5778 
	#LCD_INTCLR_VCOMPIC_MASK
 (0x8U)

	)

5779 
	#LCD_INTCLR_VCOMPIC_SHIFT
 (3U)

	)

5780 
	#LCD_INTCLR_VCOMPIC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_INTCLR_VCOMPIC_SHIFT
)Ë& 
LCD_INTCLR_VCOMPIC_MASK
)

	)

5781 
	#LCD_INTCLR_BERIC_MASK
 (0x10U)

	)

5782 
	#LCD_INTCLR_BERIC_SHIFT
 (4U)

	)

5783 
	#LCD_INTCLR_BERIC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_INTCLR_BERIC_SHIFT
)Ë& 
LCD_INTCLR_BERIC_MASK
)

	)

5786 
	#LCD_UPCURR_LCDUPCURR_MASK
 (0xFFFFFFFFU)

	)

5787 
	#LCD_UPCURR_LCDUPCURR_SHIFT
 (0U)

	)

5788 
	#LCD_UPCURR_LCDUPCURR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_UPCURR_LCDUPCURR_SHIFT
)Ë& 
LCD_UPCURR_LCDUPCURR_MASK
)

	)

5791 
	#LCD_LPCURR_LCDLPCURR_MASK
 (0xFFFFFFFFU)

	)

5792 
	#LCD_LPCURR_LCDLPCURR_SHIFT
 (0U)

	)

5793 
	#LCD_LPCURR_LCDLPCURR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_LPCURR_LCDLPCURR_SHIFT
)Ë& 
LCD_LPCURR_LCDLPCURR_MASK
)

	)

5796 
	#LCD_PAL_R04_0_MASK
 (0x1FU)

	)

5797 
	#LCD_PAL_R04_0_SHIFT
 (0U)

	)

5798 
	#LCD_PAL_R04_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_PAL_R04_0_SHIFT
)Ë& 
LCD_PAL_R04_0_MASK
)

	)

5799 
	#LCD_PAL_G04_0_MASK
 (0x3E0U)

	)

5800 
	#LCD_PAL_G04_0_SHIFT
 (5U)

	)

5801 
	#LCD_PAL_G04_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_PAL_G04_0_SHIFT
)Ë& 
LCD_PAL_G04_0_MASK
)

	)

5802 
	#LCD_PAL_B04_0_MASK
 (0x7C00U)

	)

5803 
	#LCD_PAL_B04_0_SHIFT
 (10U)

	)

5804 
	#LCD_PAL_B04_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_PAL_B04_0_SHIFT
)Ë& 
LCD_PAL_B04_0_MASK
)

	)

5805 
	#LCD_PAL_I0_MASK
 (0x8000U)

	)

5806 
	#LCD_PAL_I0_SHIFT
 (15U)

	)

5807 
	#LCD_PAL_I0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_PAL_I0_SHIFT
)Ë& 
LCD_PAL_I0_MASK
)

	)

5808 
	#LCD_PAL_R14_0_MASK
 (0x1F0000U)

	)

5809 
	#LCD_PAL_R14_0_SHIFT
 (16U)

	)

5810 
	#LCD_PAL_R14_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_PAL_R14_0_SHIFT
)Ë& 
LCD_PAL_R14_0_MASK
)

	)

5811 
	#LCD_PAL_G14_0_MASK
 (0x3E00000U)

	)

5812 
	#LCD_PAL_G14_0_SHIFT
 (21U)

	)

5813 
	#LCD_PAL_G14_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_PAL_G14_0_SHIFT
)Ë& 
LCD_PAL_G14_0_MASK
)

	)

5814 
	#LCD_PAL_B14_0_MASK
 (0x7C000000U)

	)

5815 
	#LCD_PAL_B14_0_SHIFT
 (26U)

	)

5816 
	#LCD_PAL_B14_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_PAL_B14_0_SHIFT
)Ë& 
LCD_PAL_B14_0_MASK
)

	)

5817 
	#LCD_PAL_I1_MASK
 (0x80000000U)

	)

5818 
	#LCD_PAL_I1_SHIFT
 (31U)

	)

5819 
	#LCD_PAL_I1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_PAL_I1_SHIFT
)Ë& 
LCD_PAL_I1_MASK
)

	)

5822 
	#LCD_PAL_COUNT
 (128U)

	)

5825 
	#LCD_CRSR_IMG_CRSR_IMG_MASK
 (0xFFFFFFFFU)

	)

5826 
	#LCD_CRSR_IMG_CRSR_IMG_SHIFT
 (0U)

	)

5827 
	#LCD_CRSR_IMG_CRSR_IMG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CRSR_IMG_CRSR_IMG_SHIFT
)Ë& 
LCD_CRSR_IMG_CRSR_IMG_MASK
)

	)

5830 
	#LCD_CRSR_IMG_COUNT
 (256U)

	)

5833 
	#LCD_CRSR_CTRL_CRSRON_MASK
 (0x1U)

	)

5834 
	#LCD_CRSR_CTRL_CRSRON_SHIFT
 (0U)

	)

5835 
	#LCD_CRSR_CTRL_CRSRON
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CRSR_CTRL_CRSRON_SHIFT
)Ë& 
LCD_CRSR_CTRL_CRSRON_MASK
)

	)

5836 
	#LCD_CRSR_CTRL_CRSRNUM1_0_MASK
 (0x30U)

	)

5837 
	#LCD_CRSR_CTRL_CRSRNUM1_0_SHIFT
 (4U)

	)

5838 
	#LCD_CRSR_CTRL_CRSRNUM1_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CRSR_CTRL_CRSRNUM1_0_SHIFT
)Ë& 
LCD_CRSR_CTRL_CRSRNUM1_0_MASK
)

	)

5841 
	#LCD_CRSR_CFG_CRSRSIZE_MASK
 (0x1U)

	)

5842 
	#LCD_CRSR_CFG_CRSRSIZE_SHIFT
 (0U)

	)

5843 
	#LCD_CRSR_CFG_CRSRSIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CRSR_CFG_CRSRSIZE_SHIFT
)Ë& 
LCD_CRSR_CFG_CRSRSIZE_MASK
)

	)

5844 
	#LCD_CRSR_CFG_FRAMESYNC_MASK
 (0x2U)

	)

5845 
	#LCD_CRSR_CFG_FRAMESYNC_SHIFT
 (1U)

	)

5846 
	#LCD_CRSR_CFG_FRAMESYNC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CRSR_CFG_FRAMESYNC_SHIFT
)Ë& 
LCD_CRSR_CFG_FRAMESYNC_MASK
)

	)

5849 
	#LCD_CRSR_PAL0_RED_MASK
 (0xFFU)

	)

5850 
	#LCD_CRSR_PAL0_RED_SHIFT
 (0U)

	)

5851 
	#LCD_CRSR_PAL0_RED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CRSR_PAL0_RED_SHIFT
)Ë& 
LCD_CRSR_PAL0_RED_MASK
)

	)

5852 
	#LCD_CRSR_PAL0_GREEN_MASK
 (0xFF00U)

	)

5853 
	#LCD_CRSR_PAL0_GREEN_SHIFT
 (8U)

	)

5854 
	#LCD_CRSR_PAL0_GREEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CRSR_PAL0_GREEN_SHIFT
)Ë& 
LCD_CRSR_PAL0_GREEN_MASK
)

	)

5855 
	#LCD_CRSR_PAL0_BLUE_MASK
 (0xFF0000U)

	)

5856 
	#LCD_CRSR_PAL0_BLUE_SHIFT
 (16U)

	)

5857 
	#LCD_CRSR_PAL0_BLUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CRSR_PAL0_BLUE_SHIFT
)Ë& 
LCD_CRSR_PAL0_BLUE_MASK
)

	)

5860 
	#LCD_CRSR_PAL1_RED_MASK
 (0xFFU)

	)

5861 
	#LCD_CRSR_PAL1_RED_SHIFT
 (0U)

	)

5862 
	#LCD_CRSR_PAL1_RED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CRSR_PAL1_RED_SHIFT
)Ë& 
LCD_CRSR_PAL1_RED_MASK
)

	)

5863 
	#LCD_CRSR_PAL1_GREEN_MASK
 (0xFF00U)

	)

5864 
	#LCD_CRSR_PAL1_GREEN_SHIFT
 (8U)

	)

5865 
	#LCD_CRSR_PAL1_GREEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CRSR_PAL1_GREEN_SHIFT
)Ë& 
LCD_CRSR_PAL1_GREEN_MASK
)

	)

5866 
	#LCD_CRSR_PAL1_BLUE_MASK
 (0xFF0000U)

	)

5867 
	#LCD_CRSR_PAL1_BLUE_SHIFT
 (16U)

	)

5868 
	#LCD_CRSR_PAL1_BLUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CRSR_PAL1_BLUE_SHIFT
)Ë& 
LCD_CRSR_PAL1_BLUE_MASK
)

	)

5871 
	#LCD_CRSR_XY_CRSRX_MASK
 (0x3FFU)

	)

5872 
	#LCD_CRSR_XY_CRSRX_SHIFT
 (0U)

	)

5873 
	#LCD_CRSR_XY_CRSRX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CRSR_XY_CRSRX_SHIFT
)Ë& 
LCD_CRSR_XY_CRSRX_MASK
)

	)

5874 
	#LCD_CRSR_XY_CRSRY_MASK
 (0x3FF0000U)

	)

5875 
	#LCD_CRSR_XY_CRSRY_SHIFT
 (16U)

	)

5876 
	#LCD_CRSR_XY_CRSRY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CRSR_XY_CRSRY_SHIFT
)Ë& 
LCD_CRSR_XY_CRSRY_MASK
)

	)

5879 
	#LCD_CRSR_CLIP_CRSRCLIPX_MASK
 (0x3FU)

	)

5880 
	#LCD_CRSR_CLIP_CRSRCLIPX_SHIFT
 (0U)

	)

5881 
	#LCD_CRSR_CLIP_CRSRCLIPX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CRSR_CLIP_CRSRCLIPX_SHIFT
)Ë& 
LCD_CRSR_CLIP_CRSRCLIPX_MASK
)

	)

5882 
	#LCD_CRSR_CLIP_CRSRCLIPY_MASK
 (0x3F00U)

	)

5883 
	#LCD_CRSR_CLIP_CRSRCLIPY_SHIFT
 (8U)

	)

5884 
	#LCD_CRSR_CLIP_CRSRCLIPY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CRSR_CLIP_CRSRCLIPY_SHIFT
)Ë& 
LCD_CRSR_CLIP_CRSRCLIPY_MASK
)

	)

5887 
	#LCD_CRSR_INTMSK_CRSRIM_MASK
 (0x1U)

	)

5888 
	#LCD_CRSR_INTMSK_CRSRIM_SHIFT
 (0U)

	)

5889 
	#LCD_CRSR_INTMSK_CRSRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CRSR_INTMSK_CRSRIM_SHIFT
)Ë& 
LCD_CRSR_INTMSK_CRSRIM_MASK
)

	)

5892 
	#LCD_CRSR_INTCLR_CRSRIC_MASK
 (0x1U)

	)

5893 
	#LCD_CRSR_INTCLR_CRSRIC_SHIFT
 (0U)

	)

5894 
	#LCD_CRSR_INTCLR_CRSRIC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CRSR_INTCLR_CRSRIC_SHIFT
)Ë& 
LCD_CRSR_INTCLR_CRSRIC_MASK
)

	)

5897 
	#LCD_CRSR_INTRAW_CRSRRIS_MASK
 (0x1U)

	)

5898 
	#LCD_CRSR_INTRAW_CRSRRIS_SHIFT
 (0U)

	)

5899 
	#LCD_CRSR_INTRAW_CRSRRIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CRSR_INTRAW_CRSRRIS_SHIFT
)Ë& 
LCD_CRSR_INTRAW_CRSRRIS_MASK
)

	)

5902 
	#LCD_CRSR_INTSTAT_CRSRMIS_MASK
 (0x1U)

	)

5903 
	#LCD_CRSR_INTSTAT_CRSRMIS_SHIFT
 (0U)

	)

5904 
	#LCD_CRSR_INTSTAT_CRSRMIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
LCD_CRSR_INTSTAT_CRSRMIS_SHIFT
)Ë& 
LCD_CRSR_INTSTAT_CRSRMIS_MASK
)

	)

5914 
	#LCD_BASE
 (0x40083000u)

	)

5916 
	#LCD
 ((
LCD_Ty≥
 *)
LCD_BASE
)

	)

5918 
	#LCD_BASE_ADDRS
 { 
LCD_BASE
 }

	)

5920 
	#LCD_BASE_PTRS
 { 
LCD
 }

	)

5922 
	#LCD_IRQS
 { 
LCD_IRQn
 }

	)

5941 
__IO
 
uöt32_t
 
	mINTVAL
;

5942 
__I
 
uöt32_t
 
	mTIMER
;

5943 
__IO
 
uöt32_t
 
	mCTRL
;

5944 
__IO
 
uöt32_t
 
	mSTAT
;

5945 } 
	mCHANNEL
[4];

5946 
uöt8_t
 
	mRESERVED_0
[176];

5947 
__IO
 
uöt32_t
 
	mMODCFG
;

5948 
__I
 
uöt32_t
 
	mIDLE_CH
;

5949 
__IO
 
uöt32_t
 
	mIRQ_FLAG
;

5950 } 
	tMRT_Ty≥
;

5962 
	#MRT_CHANNEL_INTVAL_IVALUE_MASK
 (0xFFFFFFU)

	)

5963 
	#MRT_CHANNEL_INTVAL_IVALUE_SHIFT
 (0U)

	)

5964 
	#MRT_CHANNEL_INTVAL_IVALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
MRT_CHANNEL_INTVAL_IVALUE_SHIFT
)Ë& 
MRT_CHANNEL_INTVAL_IVALUE_MASK
)

	)

5965 
	#MRT_CHANNEL_INTVAL_LOAD_MASK
 (0x80000000U)

	)

5966 
	#MRT_CHANNEL_INTVAL_LOAD_SHIFT
 (31U)

	)

5967 
	#MRT_CHANNEL_INTVAL_LOAD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
MRT_CHANNEL_INTVAL_LOAD_SHIFT
)Ë& 
MRT_CHANNEL_INTVAL_LOAD_MASK
)

	)

5970 
	#MRT_CHANNEL_INTVAL_COUNT
 (4U)

	)

5973 
	#MRT_CHANNEL_TIMER_VALUE_MASK
 (0xFFFFFFU)

	)

5974 
	#MRT_CHANNEL_TIMER_VALUE_SHIFT
 (0U)

	)

5975 
	#MRT_CHANNEL_TIMER_VALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
MRT_CHANNEL_TIMER_VALUE_SHIFT
)Ë& 
MRT_CHANNEL_TIMER_VALUE_MASK
)

	)

5978 
	#MRT_CHANNEL_TIMER_COUNT
 (4U)

	)

5981 
	#MRT_CHANNEL_CTRL_INTEN_MASK
 (0x1U)

	)

5982 
	#MRT_CHANNEL_CTRL_INTEN_SHIFT
 (0U)

	)

5983 
	#MRT_CHANNEL_CTRL_INTEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
MRT_CHANNEL_CTRL_INTEN_SHIFT
)Ë& 
MRT_CHANNEL_CTRL_INTEN_MASK
)

	)

5984 
	#MRT_CHANNEL_CTRL_MODE_MASK
 (0x6U)

	)

5985 
	#MRT_CHANNEL_CTRL_MODE_SHIFT
 (1U)

	)

5986 
	#MRT_CHANNEL_CTRL_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
MRT_CHANNEL_CTRL_MODE_SHIFT
)Ë& 
MRT_CHANNEL_CTRL_MODE_MASK
)

	)

5989 
	#MRT_CHANNEL_CTRL_COUNT
 (4U)

	)

5992 
	#MRT_CHANNEL_STAT_INTFLAG_MASK
 (0x1U)

	)

5993 
	#MRT_CHANNEL_STAT_INTFLAG_SHIFT
 (0U)

	)

5994 
	#MRT_CHANNEL_STAT_INTFLAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
MRT_CHANNEL_STAT_INTFLAG_SHIFT
)Ë& 
MRT_CHANNEL_STAT_INTFLAG_MASK
)

	)

5995 
	#MRT_CHANNEL_STAT_RUN_MASK
 (0x2U)

	)

5996 
	#MRT_CHANNEL_STAT_RUN_SHIFT
 (1U)

	)

5997 
	#MRT_CHANNEL_STAT_RUN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
MRT_CHANNEL_STAT_RUN_SHIFT
)Ë& 
MRT_CHANNEL_STAT_RUN_MASK
)

	)

5998 
	#MRT_CHANNEL_STAT_INUSE_MASK
 (0x4U)

	)

5999 
	#MRT_CHANNEL_STAT_INUSE_SHIFT
 (2U)

	)

6000 
	#MRT_CHANNEL_STAT_INUSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
MRT_CHANNEL_STAT_INUSE_SHIFT
)Ë& 
MRT_CHANNEL_STAT_INUSE_MASK
)

	)

6003 
	#MRT_CHANNEL_STAT_COUNT
 (4U)

	)

6006 
	#MRT_MODCFG_NOC_MASK
 (0xFU)

	)

6007 
	#MRT_MODCFG_NOC_SHIFT
 (0U)

	)

6008 
	#MRT_MODCFG_NOC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
MRT_MODCFG_NOC_SHIFT
)Ë& 
MRT_MODCFG_NOC_MASK
)

	)

6009 
	#MRT_MODCFG_NOB_MASK
 (0x1F0U)

	)

6010 
	#MRT_MODCFG_NOB_SHIFT
 (4U)

	)

6011 
	#MRT_MODCFG_NOB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
MRT_MODCFG_NOB_SHIFT
)Ë& 
MRT_MODCFG_NOB_MASK
)

	)

6012 
	#MRT_MODCFG_MULTITASK_MASK
 (0x80000000U)

	)

6013 
	#MRT_MODCFG_MULTITASK_SHIFT
 (31U)

	)

6014 
	#MRT_MODCFG_MULTITASK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
MRT_MODCFG_MULTITASK_SHIFT
)Ë& 
MRT_MODCFG_MULTITASK_MASK
)

	)

6017 
	#MRT_IDLE_CH_CHAN_MASK
 (0xF0U)

	)

6018 
	#MRT_IDLE_CH_CHAN_SHIFT
 (4U)

	)

6019 
	#MRT_IDLE_CH_CHAN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
MRT_IDLE_CH_CHAN_SHIFT
)Ë& 
MRT_IDLE_CH_CHAN_MASK
)

	)

6022 
	#MRT_IRQ_FLAG_GFLAG0_MASK
 (0x1U)

	)

6023 
	#MRT_IRQ_FLAG_GFLAG0_SHIFT
 (0U)

	)

6024 
	#MRT_IRQ_FLAG_GFLAG0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
MRT_IRQ_FLAG_GFLAG0_SHIFT
)Ë& 
MRT_IRQ_FLAG_GFLAG0_MASK
)

	)

6025 
	#MRT_IRQ_FLAG_GFLAG1_MASK
 (0x2U)

	)

6026 
	#MRT_IRQ_FLAG_GFLAG1_SHIFT
 (1U)

	)

6027 
	#MRT_IRQ_FLAG_GFLAG1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
MRT_IRQ_FLAG_GFLAG1_SHIFT
)Ë& 
MRT_IRQ_FLAG_GFLAG1_MASK
)

	)

6028 
	#MRT_IRQ_FLAG_GFLAG2_MASK
 (0x4U)

	)

6029 
	#MRT_IRQ_FLAG_GFLAG2_SHIFT
 (2U)

	)

6030 
	#MRT_IRQ_FLAG_GFLAG2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
MRT_IRQ_FLAG_GFLAG2_SHIFT
)Ë& 
MRT_IRQ_FLAG_GFLAG2_MASK
)

	)

6031 
	#MRT_IRQ_FLAG_GFLAG3_MASK
 (0x8U)

	)

6032 
	#MRT_IRQ_FLAG_GFLAG3_SHIFT
 (3U)

	)

6033 
	#MRT_IRQ_FLAG_GFLAG3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
MRT_IRQ_FLAG_GFLAG3_SHIFT
)Ë& 
MRT_IRQ_FLAG_GFLAG3_MASK
)

	)

6043 
	#MRT0_BASE
 (0x4000D000u)

	)

6045 
	#MRT0
 ((
MRT_Ty≥
 *)
MRT0_BASE
)

	)

6047 
	#MRT_BASE_ADDRS
 { 
MRT0_BASE
 }

	)

6049 
	#MRT_BASE_PTRS
 { 
MRT0
 }

	)

6051 
	#MRT_IRQS
 { 
MRT0_IRQn
 }

	)

6069 
uöt8_t
 
	mRESERVED_0
[16];

6070 
__I
 
uöt32_t
 
	mAESKEY
[8];

6071 
__I
 
uöt32_t
 
	mECRP
;

6072 
uöt8_t
 
	mRESERVED_1
[4];

6073 
__I
 
uöt32_t
 
	mUSER0
;

6074 
__I
 
uöt32_t
 
	mUSER1
;

6075 } 
	tOTPC_Ty≥
;

6087 
	#OTPC_AESKEY_KEY_MASK
 (0xFFFFFFFFU)

	)

6088 
	#OTPC_AESKEY_KEY_SHIFT
 (0U)

	)

6089 
	#OTPC_AESKEY_KEY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
OTPC_AESKEY_KEY_SHIFT
)Ë& 
OTPC_AESKEY_KEY_MASK
)

	)

6092 
	#OTPC_AESKEY_COUNT
 (8U)

	)

6095 
	#OTPC_ECRP_CRP_MASS_ERASE_DISABLE_MASK
 (0x10U)

	)

6096 
	#OTPC_ECRP_CRP_MASS_ERASE_DISABLE_SHIFT
 (4U)

	)

6097 
	#OTPC_ECRP_CRP_MASS_ERASE_DISABLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
OTPC_ECRP_CRP_MASS_ERASE_DISABLE_SHIFT
)Ë& 
OTPC_ECRP_CRP_MASS_ERASE_DISABLE_MASK
)

	)

6098 
	#OTPC_ECRP_IAP_PROTECTION_ENABLE_MASK
 (0x20U)

	)

6099 
	#OTPC_ECRP_IAP_PROTECTION_ENABLE_SHIFT
 (5U)

	)

6100 
	#OTPC_ECRP_IAP_PROTECTION_ENABLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
OTPC_ECRP_IAP_PROTECTION_ENABLE_SHIFT
)Ë& 
OTPC_ECRP_IAP_PROTECTION_ENABLE_MASK
)

	)

6101 
	#OTPC_ECRP_CRP_ISP_DISABLE_PIN_MASK
 (0x40U)

	)

6102 
	#OTPC_ECRP_CRP_ISP_DISABLE_PIN_SHIFT
 (6U)

	)

6103 
	#OTPC_ECRP_CRP_ISP_DISABLE_PIN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
OTPC_ECRP_CRP_ISP_DISABLE_PIN_SHIFT
)Ë& 
OTPC_ECRP_CRP_ISP_DISABLE_PIN_MASK
)

	)

6104 
	#OTPC_ECRP_CRP_ISP_DISABLE_IAP_MASK
 (0x80U)

	)

6105 
	#OTPC_ECRP_CRP_ISP_DISABLE_IAP_SHIFT
 (7U)

	)

6106 
	#OTPC_ECRP_CRP_ISP_DISABLE_IAP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
OTPC_ECRP_CRP_ISP_DISABLE_IAP_SHIFT
)Ë& 
OTPC_ECRP_CRP_ISP_DISABLE_IAP_MASK
)

	)

6107 
	#OTPC_ECRP_CRP_ALLOW_ZERO_MASK
 (0x200U)

	)

6108 
	#OTPC_ECRP_CRP_ALLOW_ZERO_SHIFT
 (9U)

	)

6109 
	#OTPC_ECRP_CRP_ALLOW_ZERO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
OTPC_ECRP_CRP_ALLOW_ZERO_SHIFT
)Ë& 
OTPC_ECRP_CRP_ALLOW_ZERO_MASK
)

	)

6110 
	#OTPC_ECRP_JTAG_DISABLE_MASK
 (0x80000000U)

	)

6111 
	#OTPC_ECRP_JTAG_DISABLE_SHIFT
 (31U)

	)

6112 
	#OTPC_ECRP_JTAG_DISABLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
OTPC_ECRP_JTAG_DISABLE_SHIFT
)Ë& 
OTPC_ECRP_JTAG_DISABLE_MASK
)

	)

6115 
	#OTPC_USER0_USER0_MASK
 (0xFFFFFFFFU)

	)

6116 
	#OTPC_USER0_USER0_SHIFT
 (0U)

	)

6117 
	#OTPC_USER0_USER0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
OTPC_USER0_USER0_SHIFT
)Ë& 
OTPC_USER0_USER0_MASK
)

	)

6120 
	#OTPC_USER1_USER1_MASK
 (0xFFFFFFFFU)

	)

6121 
	#OTPC_USER1_USER1_SHIFT
 (0U)

	)

6122 
	#OTPC_USER1_USER1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
OTPC_USER1_USER1_SHIFT
)Ë& 
OTPC_USER1_USER1_MASK
)

	)

6132 
	#OTPC_BASE
 (0x40015000u)

	)

6134 
	#OTPC
 ((
OTPC_Ty≥
 *)
OTPC_BASE
)

	)

6136 
	#OTPC_BASE_ADDRS
 { 
OTPC_BASE
 }

	)

6138 
	#OTPC_BASE_PTRS
 { 
OTPC
 }

	)

6156 
__IO
 
uöt32_t
 
	mISEL
;

6157 
__IO
 
uöt32_t
 
	mIENR
;

6158 
__O
 
uöt32_t
 
	mSIENR
;

6159 
__O
 
uöt32_t
 
	mCIENR
;

6160 
__IO
 
uöt32_t
 
	mIENF
;

6161 
__O
 
uöt32_t
 
	mSIENF
;

6162 
__O
 
uöt32_t
 
	mCIENF
;

6163 
__IO
 
uöt32_t
 
	mRISE
;

6164 
__IO
 
uöt32_t
 
	mFALL
;

6165 
__IO
 
uöt32_t
 
	mIST
;

6166 
__IO
 
uöt32_t
 
	mPMCTRL
;

6167 
__IO
 
uöt32_t
 
	mPMSRC
;

6168 
__IO
 
uöt32_t
 
	mPMCFG
;

6169 } 
	tPINT_Ty≥
;

6181 
	#PINT_ISEL_PMODE_MASK
 (0xFFU)

	)

6182 
	#PINT_ISEL_PMODE_SHIFT
 (0U)

	)

6183 
	#PINT_ISEL_PMODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_ISEL_PMODE_SHIFT
)Ë& 
PINT_ISEL_PMODE_MASK
)

	)

6186 
	#PINT_IENR_ENRL_MASK
 (0xFFU)

	)

6187 
	#PINT_IENR_ENRL_SHIFT
 (0U)

	)

6188 
	#PINT_IENR_ENRL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_IENR_ENRL_SHIFT
)Ë& 
PINT_IENR_ENRL_MASK
)

	)

6191 
	#PINT_SIENR_SETENRL_MASK
 (0xFFU)

	)

6192 
	#PINT_SIENR_SETENRL_SHIFT
 (0U)

	)

6193 
	#PINT_SIENR_SETENRL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_SIENR_SETENRL_SHIFT
)Ë& 
PINT_SIENR_SETENRL_MASK
)

	)

6196 
	#PINT_CIENR_CENRL_MASK
 (0xFFU)

	)

6197 
	#PINT_CIENR_CENRL_SHIFT
 (0U)

	)

6198 
	#PINT_CIENR_CENRL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_CIENR_CENRL_SHIFT
)Ë& 
PINT_CIENR_CENRL_MASK
)

	)

6201 
	#PINT_IENF_ENAF_MASK
 (0xFFU)

	)

6202 
	#PINT_IENF_ENAF_SHIFT
 (0U)

	)

6203 
	#PINT_IENF_ENAF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_IENF_ENAF_SHIFT
)Ë& 
PINT_IENF_ENAF_MASK
)

	)

6206 
	#PINT_SIENF_SETENAF_MASK
 (0xFFU)

	)

6207 
	#PINT_SIENF_SETENAF_SHIFT
 (0U)

	)

6208 
	#PINT_SIENF_SETENAF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_SIENF_SETENAF_SHIFT
)Ë& 
PINT_SIENF_SETENAF_MASK
)

	)

6211 
	#PINT_CIENF_CENAF_MASK
 (0xFFU)

	)

6212 
	#PINT_CIENF_CENAF_SHIFT
 (0U)

	)

6213 
	#PINT_CIENF_CENAF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_CIENF_CENAF_SHIFT
)Ë& 
PINT_CIENF_CENAF_MASK
)

	)

6216 
	#PINT_RISE_RDET_MASK
 (0xFFU)

	)

6217 
	#PINT_RISE_RDET_SHIFT
 (0U)

	)

6218 
	#PINT_RISE_RDET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_RISE_RDET_SHIFT
)Ë& 
PINT_RISE_RDET_MASK
)

	)

6221 
	#PINT_FALL_FDET_MASK
 (0xFFU)

	)

6222 
	#PINT_FALL_FDET_SHIFT
 (0U)

	)

6223 
	#PINT_FALL_FDET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_FALL_FDET_SHIFT
)Ë& 
PINT_FALL_FDET_MASK
)

	)

6226 
	#PINT_IST_PSTAT_MASK
 (0xFFU)

	)

6227 
	#PINT_IST_PSTAT_SHIFT
 (0U)

	)

6228 
	#PINT_IST_PSTAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_IST_PSTAT_SHIFT
)Ë& 
PINT_IST_PSTAT_MASK
)

	)

6231 
	#PINT_PMCTRL_SEL_PMATCH_MASK
 (0x1U)

	)

6232 
	#PINT_PMCTRL_SEL_PMATCH_SHIFT
 (0U)

	)

6233 
	#PINT_PMCTRL_SEL_PMATCH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMCTRL_SEL_PMATCH_SHIFT
)Ë& 
PINT_PMCTRL_SEL_PMATCH_MASK
)

	)

6234 
	#PINT_PMCTRL_ENA_RXEV_MASK
 (0x2U)

	)

6235 
	#PINT_PMCTRL_ENA_RXEV_SHIFT
 (1U)

	)

6236 
	#PINT_PMCTRL_ENA_RXEV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMCTRL_ENA_RXEV_SHIFT
)Ë& 
PINT_PMCTRL_ENA_RXEV_MASK
)

	)

6237 
	#PINT_PMCTRL_PMAT_MASK
 (0xFF000000U)

	)

6238 
	#PINT_PMCTRL_PMAT_SHIFT
 (24U)

	)

6239 
	#PINT_PMCTRL_PMAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMCTRL_PMAT_SHIFT
)Ë& 
PINT_PMCTRL_PMAT_MASK
)

	)

6242 
	#PINT_PMSRC_SRC0_MASK
 (0x700U)

	)

6243 
	#PINT_PMSRC_SRC0_SHIFT
 (8U)

	)

6244 
	#PINT_PMSRC_SRC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMSRC_SRC0_SHIFT
)Ë& 
PINT_PMSRC_SRC0_MASK
)

	)

6245 
	#PINT_PMSRC_SRC1_MASK
 (0x3800U)

	)

6246 
	#PINT_PMSRC_SRC1_SHIFT
 (11U)

	)

6247 
	#PINT_PMSRC_SRC1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMSRC_SRC1_SHIFT
)Ë& 
PINT_PMSRC_SRC1_MASK
)

	)

6248 
	#PINT_PMSRC_SRC2_MASK
 (0x1C000U)

	)

6249 
	#PINT_PMSRC_SRC2_SHIFT
 (14U)

	)

6250 
	#PINT_PMSRC_SRC2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMSRC_SRC2_SHIFT
)Ë& 
PINT_PMSRC_SRC2_MASK
)

	)

6251 
	#PINT_PMSRC_SRC3_MASK
 (0xE0000U)

	)

6252 
	#PINT_PMSRC_SRC3_SHIFT
 (17U)

	)

6253 
	#PINT_PMSRC_SRC3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMSRC_SRC3_SHIFT
)Ë& 
PINT_PMSRC_SRC3_MASK
)

	)

6254 
	#PINT_PMSRC_SRC4_MASK
 (0x700000U)

	)

6255 
	#PINT_PMSRC_SRC4_SHIFT
 (20U)

	)

6256 
	#PINT_PMSRC_SRC4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMSRC_SRC4_SHIFT
)Ë& 
PINT_PMSRC_SRC4_MASK
)

	)

6257 
	#PINT_PMSRC_SRC5_MASK
 (0x3800000U)

	)

6258 
	#PINT_PMSRC_SRC5_SHIFT
 (23U)

	)

6259 
	#PINT_PMSRC_SRC5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMSRC_SRC5_SHIFT
)Ë& 
PINT_PMSRC_SRC5_MASK
)

	)

6260 
	#PINT_PMSRC_SRC6_MASK
 (0x1C000000U)

	)

6261 
	#PINT_PMSRC_SRC6_SHIFT
 (26U)

	)

6262 
	#PINT_PMSRC_SRC6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMSRC_SRC6_SHIFT
)Ë& 
PINT_PMSRC_SRC6_MASK
)

	)

6263 
	#PINT_PMSRC_SRC7_MASK
 (0xE0000000U)

	)

6264 
	#PINT_PMSRC_SRC7_SHIFT
 (29U)

	)

6265 
	#PINT_PMSRC_SRC7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMSRC_SRC7_SHIFT
)Ë& 
PINT_PMSRC_SRC7_MASK
)

	)

6268 
	#PINT_PMCFG_PROD_ENDPTS0_MASK
 (0x1U)

	)

6269 
	#PINT_PMCFG_PROD_ENDPTS0_SHIFT
 (0U)

	)

6270 
	#PINT_PMCFG_PROD_ENDPTS0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMCFG_PROD_ENDPTS0_SHIFT
)Ë& 
PINT_PMCFG_PROD_ENDPTS0_MASK
)

	)

6271 
	#PINT_PMCFG_PROD_ENDPTS1_MASK
 (0x2U)

	)

6272 
	#PINT_PMCFG_PROD_ENDPTS1_SHIFT
 (1U)

	)

6273 
	#PINT_PMCFG_PROD_ENDPTS1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMCFG_PROD_ENDPTS1_SHIFT
)Ë& 
PINT_PMCFG_PROD_ENDPTS1_MASK
)

	)

6274 
	#PINT_PMCFG_PROD_ENDPTS2_MASK
 (0x4U)

	)

6275 
	#PINT_PMCFG_PROD_ENDPTS2_SHIFT
 (2U)

	)

6276 
	#PINT_PMCFG_PROD_ENDPTS2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMCFG_PROD_ENDPTS2_SHIFT
)Ë& 
PINT_PMCFG_PROD_ENDPTS2_MASK
)

	)

6277 
	#PINT_PMCFG_PROD_ENDPTS3_MASK
 (0x8U)

	)

6278 
	#PINT_PMCFG_PROD_ENDPTS3_SHIFT
 (3U)

	)

6279 
	#PINT_PMCFG_PROD_ENDPTS3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMCFG_PROD_ENDPTS3_SHIFT
)Ë& 
PINT_PMCFG_PROD_ENDPTS3_MASK
)

	)

6280 
	#PINT_PMCFG_PROD_ENDPTS4_MASK
 (0x10U)

	)

6281 
	#PINT_PMCFG_PROD_ENDPTS4_SHIFT
 (4U)

	)

6282 
	#PINT_PMCFG_PROD_ENDPTS4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMCFG_PROD_ENDPTS4_SHIFT
)Ë& 
PINT_PMCFG_PROD_ENDPTS4_MASK
)

	)

6283 
	#PINT_PMCFG_PROD_ENDPTS5_MASK
 (0x20U)

	)

6284 
	#PINT_PMCFG_PROD_ENDPTS5_SHIFT
 (5U)

	)

6285 
	#PINT_PMCFG_PROD_ENDPTS5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMCFG_PROD_ENDPTS5_SHIFT
)Ë& 
PINT_PMCFG_PROD_ENDPTS5_MASK
)

	)

6286 
	#PINT_PMCFG_PROD_ENDPTS6_MASK
 (0x40U)

	)

6287 
	#PINT_PMCFG_PROD_ENDPTS6_SHIFT
 (6U)

	)

6288 
	#PINT_PMCFG_PROD_ENDPTS6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMCFG_PROD_ENDPTS6_SHIFT
)Ë& 
PINT_PMCFG_PROD_ENDPTS6_MASK
)

	)

6289 
	#PINT_PMCFG_CFG0_MASK
 (0x700U)

	)

6290 
	#PINT_PMCFG_CFG0_SHIFT
 (8U)

	)

6291 
	#PINT_PMCFG_CFG0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMCFG_CFG0_SHIFT
)Ë& 
PINT_PMCFG_CFG0_MASK
)

	)

6292 
	#PINT_PMCFG_CFG1_MASK
 (0x3800U)

	)

6293 
	#PINT_PMCFG_CFG1_SHIFT
 (11U)

	)

6294 
	#PINT_PMCFG_CFG1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMCFG_CFG1_SHIFT
)Ë& 
PINT_PMCFG_CFG1_MASK
)

	)

6295 
	#PINT_PMCFG_CFG2_MASK
 (0x1C000U)

	)

6296 
	#PINT_PMCFG_CFG2_SHIFT
 (14U)

	)

6297 
	#PINT_PMCFG_CFG2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMCFG_CFG2_SHIFT
)Ë& 
PINT_PMCFG_CFG2_MASK
)

	)

6298 
	#PINT_PMCFG_CFG3_MASK
 (0xE0000U)

	)

6299 
	#PINT_PMCFG_CFG3_SHIFT
 (17U)

	)

6300 
	#PINT_PMCFG_CFG3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMCFG_CFG3_SHIFT
)Ë& 
PINT_PMCFG_CFG3_MASK
)

	)

6301 
	#PINT_PMCFG_CFG4_MASK
 (0x700000U)

	)

6302 
	#PINT_PMCFG_CFG4_SHIFT
 (20U)

	)

6303 
	#PINT_PMCFG_CFG4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMCFG_CFG4_SHIFT
)Ë& 
PINT_PMCFG_CFG4_MASK
)

	)

6304 
	#PINT_PMCFG_CFG5_MASK
 (0x3800000U)

	)

6305 
	#PINT_PMCFG_CFG5_SHIFT
 (23U)

	)

6306 
	#PINT_PMCFG_CFG5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMCFG_CFG5_SHIFT
)Ë& 
PINT_PMCFG_CFG5_MASK
)

	)

6307 
	#PINT_PMCFG_CFG6_MASK
 (0x1C000000U)

	)

6308 
	#PINT_PMCFG_CFG6_SHIFT
 (26U)

	)

6309 
	#PINT_PMCFG_CFG6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMCFG_CFG6_SHIFT
)Ë& 
PINT_PMCFG_CFG6_MASK
)

	)

6310 
	#PINT_PMCFG_CFG7_MASK
 (0xE0000000U)

	)

6311 
	#PINT_PMCFG_CFG7_SHIFT
 (29U)

	)

6312 
	#PINT_PMCFG_CFG7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
PINT_PMCFG_CFG7_SHIFT
)Ë& 
PINT_PMCFG_CFG7_MASK
)

	)

6322 
	#PINT_BASE
 (0x40004000u)

	)

6324 
	#PINT
 ((
PINT_Ty≥
 *)
PINT_BASE
)

	)

6326 
	#PINT_BASE_ADDRS
 { 
PINT_BASE
 }

	)

6328 
	#PINT_BASE_PTRS
 { 
PINT
 }

	)

6330 
	#PINT_IRQS
 { 
PIN_INT0_IRQn
, 
PIN_INT1_IRQn
, 
PIN_INT2_IRQn
, 
PIN_INT3_IRQn
, 
PIN_INT4_IRQn
, 
PIN_INT5_IRQn
, 
PIN_INT6_IRQn
, 
PIN_INT7_IRQn
 }

	)

6348 
__IO
 
uöt32_t
 
	mCOMPVAL
;

6349 
__IO
 
uöt32_t
 
	mMASK
;

6350 
__IO
 
uöt32_t
 
	mCTRL
;

6351 
__IO
 
uöt32_t
 
	mCOUNTER
;

6352 
__IO
 
uöt32_t
 
	mCOMPVAL_H
;

6353 
__IO
 
uöt32_t
 
	mMASK_H
;

6354 
uöt8_t
 
	mRESERVED_0
[4];

6355 
__IO
 
uöt32_t
 
	mCOUNTER_H
;

6356 } 
	tRIT_Ty≥
;

6368 
	#RIT_COMPVAL_RICOMP_MASK
 (0xFFFFFFFFU)

	)

6369 
	#RIT_COMPVAL_RICOMP_SHIFT
 (0U)

	)

6370 
	#RIT_COMPVAL_RICOMP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
RIT_COMPVAL_RICOMP_SHIFT
)Ë& 
RIT_COMPVAL_RICOMP_MASK
)

	)

6373 
	#RIT_MASK_RIMASK_MASK
 (0xFFFFFFFFU)

	)

6374 
	#RIT_MASK_RIMASK_SHIFT
 (0U)

	)

6375 
	#RIT_MASK_RIMASK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
RIT_MASK_RIMASK_SHIFT
)Ë& 
RIT_MASK_RIMASK_MASK
)

	)

6378 
	#RIT_CTRL_RITINT_MASK
 (0x1U)

	)

6379 
	#RIT_CTRL_RITINT_SHIFT
 (0U)

	)

6380 
	#RIT_CTRL_RITINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
RIT_CTRL_RITINT_SHIFT
)Ë& 
RIT_CTRL_RITINT_MASK
)

	)

6381 
	#RIT_CTRL_RITENCLR_MASK
 (0x2U)

	)

6382 
	#RIT_CTRL_RITENCLR_SHIFT
 (1U)

	)

6383 
	#RIT_CTRL_RITENCLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
RIT_CTRL_RITENCLR_SHIFT
)Ë& 
RIT_CTRL_RITENCLR_MASK
)

	)

6384 
	#RIT_CTRL_RITENBR_MASK
 (0x4U)

	)

6385 
	#RIT_CTRL_RITENBR_SHIFT
 (2U)

	)

6386 
	#RIT_CTRL_RITENBR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
RIT_CTRL_RITENBR_SHIFT
)Ë& 
RIT_CTRL_RITENBR_MASK
)

	)

6387 
	#RIT_CTRL_RITEN_MASK
 (0x8U)

	)

6388 
	#RIT_CTRL_RITEN_SHIFT
 (3U)

	)

6389 
	#RIT_CTRL_RITEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
RIT_CTRL_RITEN_SHIFT
)Ë& 
RIT_CTRL_RITEN_MASK
)

	)

6392 
	#RIT_COUNTER_RICOUNTER_MASK
 (0xFFFFFFFFU)

	)

6393 
	#RIT_COUNTER_RICOUNTER_SHIFT
 (0U)

	)

6394 
	#RIT_COUNTER_RICOUNTER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
RIT_COUNTER_RICOUNTER_SHIFT
)Ë& 
RIT_COUNTER_RICOUNTER_MASK
)

	)

6397 
	#RIT_COMPVAL_H_RICOMP_MASK
 (0xFFFFU)

	)

6398 
	#RIT_COMPVAL_H_RICOMP_SHIFT
 (0U)

	)

6399 
	#RIT_COMPVAL_H_RICOMP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
RIT_COMPVAL_H_RICOMP_SHIFT
)Ë& 
RIT_COMPVAL_H_RICOMP_MASK
)

	)

6402 
	#RIT_MASK_H_RIMASK_MASK
 (0xFFFFU)

	)

6403 
	#RIT_MASK_H_RIMASK_SHIFT
 (0U)

	)

6404 
	#RIT_MASK_H_RIMASK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
RIT_MASK_H_RIMASK_SHIFT
)Ë& 
RIT_MASK_H_RIMASK_MASK
)

	)

6407 
	#RIT_COUNTER_H_RICOUNTER_MASK
 (0xFFFFU)

	)

6408 
	#RIT_COUNTER_H_RICOUNTER_SHIFT
 (0U)

	)

6409 
	#RIT_COUNTER_H_RICOUNTER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
RIT_COUNTER_H_RICOUNTER_SHIFT
)Ë& 
RIT_COUNTER_H_RICOUNTER_MASK
)

	)

6419 
	#RIT_BASE
 (0x4002D000u)

	)

6421 
	#RIT
 ((
RIT_Ty≥
 *)
RIT_BASE
)

	)

6423 
	#RIT_BASE_ADDRS
 { 
RIT_BASE
 }

	)

6425 
	#RIT_BASE_PTRS
 { 
RIT
 }

	)

6427 
	#RIT_IRQS
 { 
RIT_IRQn
 }

	)

6445 
__IO
 
uöt32_t
 
	mCTRL
;

6446 
__IO
 
uöt32_t
 
	mMATCH
;

6447 
__IO
 
uöt32_t
 
	mCOUNT
;

6448 
__IO
 
uöt32_t
 
	mWAKE
;

6449 
uöt8_t
 
	mRESERVED_0
[48];

6450 
__IO
 
uöt32_t
 
	mGPREG
[8];

6451 } 
	tRTC_Ty≥
;

6463 
	#RTC_CTRL_SWRESET_MASK
 (0x1U)

	)

6464 
	#RTC_CTRL_SWRESET_SHIFT
 (0U)

	)

6465 
	#RTC_CTRL_SWRESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
RTC_CTRL_SWRESET_SHIFT
)Ë& 
RTC_CTRL_SWRESET_MASK
)

	)

6466 
	#RTC_CTRL_ALARM1HZ_MASK
 (0x4U)

	)

6467 
	#RTC_CTRL_ALARM1HZ_SHIFT
 (2U)

	)

6468 
	#RTC_CTRL_ALARM1HZ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
RTC_CTRL_ALARM1HZ_SHIFT
)Ë& 
RTC_CTRL_ALARM1HZ_MASK
)

	)

6469 
	#RTC_CTRL_WAKE1KHZ_MASK
 (0x8U)

	)

6470 
	#RTC_CTRL_WAKE1KHZ_SHIFT
 (3U)

	)

6471 
	#RTC_CTRL_WAKE1KHZ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
RTC_CTRL_WAKE1KHZ_SHIFT
)Ë& 
RTC_CTRL_WAKE1KHZ_MASK
)

	)

6472 
	#RTC_CTRL_ALARMDPD_EN_MASK
 (0x10U)

	)

6473 
	#RTC_CTRL_ALARMDPD_EN_SHIFT
 (4U)

	)

6474 
	#RTC_CTRL_ALARMDPD_EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
RTC_CTRL_ALARMDPD_EN_SHIFT
)Ë& 
RTC_CTRL_ALARMDPD_EN_MASK
)

	)

6475 
	#RTC_CTRL_WAKEDPD_EN_MASK
 (0x20U)

	)

6476 
	#RTC_CTRL_WAKEDPD_EN_SHIFT
 (5U)

	)

6477 
	#RTC_CTRL_WAKEDPD_EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
RTC_CTRL_WAKEDPD_EN_SHIFT
)Ë& 
RTC_CTRL_WAKEDPD_EN_MASK
)

	)

6478 
	#RTC_CTRL_RTC1KHZ_EN_MASK
 (0x40U)

	)

6479 
	#RTC_CTRL_RTC1KHZ_EN_SHIFT
 (6U)

	)

6480 
	#RTC_CTRL_RTC1KHZ_EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
RTC_CTRL_RTC1KHZ_EN_SHIFT
)Ë& 
RTC_CTRL_RTC1KHZ_EN_MASK
)

	)

6481 
	#RTC_CTRL_RTC_EN_MASK
 (0x80U)

	)

6482 
	#RTC_CTRL_RTC_EN_SHIFT
 (7U)

	)

6483 
	#RTC_CTRL_RTC_EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
RTC_CTRL_RTC_EN_SHIFT
)Ë& 
RTC_CTRL_RTC_EN_MASK
)

	)

6484 
	#RTC_CTRL_RTC_OSC_PD_MASK
 (0x100U)

	)

6485 
	#RTC_CTRL_RTC_OSC_PD_SHIFT
 (8U)

	)

6486 
	#RTC_CTRL_RTC_OSC_PD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
RTC_CTRL_RTC_OSC_PD_SHIFT
)Ë& 
RTC_CTRL_RTC_OSC_PD_MASK
)

	)

6489 
	#RTC_MATCH_MATVAL_MASK
 (0xFFFFFFFFU)

	)

6490 
	#RTC_MATCH_MATVAL_SHIFT
 (0U)

	)

6491 
	#RTC_MATCH_MATVAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
RTC_MATCH_MATVAL_SHIFT
)Ë& 
RTC_MATCH_MATVAL_MASK
)

	)

6494 
	#RTC_COUNT_VAL_MASK
 (0xFFFFFFFFU)

	)

6495 
	#RTC_COUNT_VAL_SHIFT
 (0U)

	)

6496 
	#RTC_COUNT_VAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
RTC_COUNT_VAL_SHIFT
)Ë& 
RTC_COUNT_VAL_MASK
)

	)

6499 
	#RTC_WAKE_VAL_MASK
 (0xFFFFU)

	)

6500 
	#RTC_WAKE_VAL_SHIFT
 (0U)

	)

6501 
	#RTC_WAKE_VAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
RTC_WAKE_VAL_SHIFT
)Ë& 
RTC_WAKE_VAL_MASK
)

	)

6504 
	#RTC_GPREG_GPDATA_MASK
 (0xFFFFFFFFU)

	)

6505 
	#RTC_GPREG_GPDATA_SHIFT
 (0U)

	)

6506 
	#RTC_GPREG_GPDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
RTC_GPREG_GPDATA_SHIFT
)Ë& 
RTC_GPREG_GPDATA_MASK
)

	)

6509 
	#RTC_GPREG_COUNT
 (8U)

	)

6519 
	#RTC_BASE
 (0x4002C000u)

	)

6521 
	#RTC
 ((
RTC_Ty≥
 *)
RTC_BASE
)

	)

6523 
	#RTC_BASE_ADDRS
 { 
RTC_BASE
 }

	)

6525 
	#RTC_BASE_PTRS
 { 
RTC
 }

	)

6527 
	#RTC_IRQS
 { 
RTC_IRQn
 }

	)

6545 
__IO
 
uöt32_t
 
	mCONFIG
;

6546 
__IO
 
uöt32_t
 
	mCTRL
;

6547 
__IO
 
uöt32_t
 
	mLIMIT
;

6548 
__IO
 
uöt32_t
 
	mHALT
;

6549 
__IO
 
uöt32_t
 
	mSTOP
;

6550 
__IO
 
uöt32_t
 
	mSTART
;

6551 
uöt8_t
 
	mRESERVED_0
[40];

6552 
__IO
 
uöt32_t
 
	mCOUNT
;

6553 
__IO
 
uöt32_t
 
	mSTATE
;

6554 
__I
 
uöt32_t
 
	mINPUT
;

6555 
__IO
 
uöt32_t
 
	mREGMODE
;

6556 
__IO
 
uöt32_t
 
	mOUTPUT
;

6557 
__IO
 
uöt32_t
 
	mOUTPUTDIRCTRL
;

6558 
__IO
 
uöt32_t
 
	mRES
;

6559 
__IO
 
uöt32_t
 
	mDMA0REQUEST
;

6560 
__IO
 
uöt32_t
 
	mDMA1REQUEST
;

6561 
uöt8_t
 
	mRESERVED_1
[140];

6562 
__IO
 
uöt32_t
 
	mEVEN
;

6563 
__IO
 
uöt32_t
 
	mEVFLAG
;

6564 
__IO
 
uöt32_t
 
	mCONEN
;

6565 
__IO
 
uöt32_t
 
	mCONFLAG
;

6567 
__IO
 
uöt32_t
 
	mSCTCAP
[10];

6568 
__IO
 
uöt32_t
 
	mSCTMATCH
[10];

6570 
uöt8_t
 
	mRESERVED_2
[216];

6572 
__IO
 
uöt32_t
 
	mSCTCAPCTRL
[10];

6573 
__IO
 
uöt32_t
 
	mSCTMATCHREL
[10];

6575 
uöt8_t
 
	mRESERVED_3
[216];

6577 
__IO
 
uöt32_t
 
	mSTATE
;

6578 
__IO
 
uöt32_t
 
	mCTRL
;

6579 } 
	mEVENT
[10];

6580 
uöt8_t
 
	mRESERVED_4
[432];

6582 
__IO
 
uöt32_t
 
	mSET
;

6583 
__IO
 
uöt32_t
 
	mCLR
;

6584 } 
	mOUT
[10];

6585 } 
	tSCT_Ty≥
;

6597 
	#SCT_CONFIG_UNIFY_MASK
 (0x1U)

	)

6598 
	#SCT_CONFIG_UNIFY_SHIFT
 (0U)

	)

6599 
	#SCT_CONFIG_UNIFY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CONFIG_UNIFY_SHIFT
)Ë& 
SCT_CONFIG_UNIFY_MASK
)

	)

6600 
	#SCT_CONFIG_CLKMODE_MASK
 (0x6U)

	)

6601 
	#SCT_CONFIG_CLKMODE_SHIFT
 (1U)

	)

6602 
	#SCT_CONFIG_CLKMODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CONFIG_CLKMODE_SHIFT
)Ë& 
SCT_CONFIG_CLKMODE_MASK
)

	)

6603 
	#SCT_CONFIG_CKSEL_MASK
 (0x78U)

	)

6604 
	#SCT_CONFIG_CKSEL_SHIFT
 (3U)

	)

6605 
	#SCT_CONFIG_CKSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CONFIG_CKSEL_SHIFT
)Ë& 
SCT_CONFIG_CKSEL_MASK
)

	)

6606 
	#SCT_CONFIG_NORELAOD_L_MASK
 (0x80U)

	)

6607 
	#SCT_CONFIG_NORELAOD_L_SHIFT
 (7U)

	)

6608 
	#SCT_CONFIG_NORELAOD_L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CONFIG_NORELAOD_L_SHIFT
)Ë& 
SCT_CONFIG_NORELAOD_L_MASK
)

	)

6609 
	#SCT_CONFIG_NORELOAD_H_MASK
 (0x100U)

	)

6610 
	#SCT_CONFIG_NORELOAD_H_SHIFT
 (8U)

	)

6611 
	#SCT_CONFIG_NORELOAD_H
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CONFIG_NORELOAD_H_SHIFT
)Ë& 
SCT_CONFIG_NORELOAD_H_MASK
)

	)

6612 
	#SCT_CONFIG_INSYNC_MASK
 (0x1E00U)

	)

6613 
	#SCT_CONFIG_INSYNC_SHIFT
 (9U)

	)

6614 
	#SCT_CONFIG_INSYNC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CONFIG_INSYNC_SHIFT
)Ë& 
SCT_CONFIG_INSYNC_MASK
)

	)

6615 
	#SCT_CONFIG_AUTOLIMIT_L_MASK
 (0x20000U)

	)

6616 
	#SCT_CONFIG_AUTOLIMIT_L_SHIFT
 (17U)

	)

6617 
	#SCT_CONFIG_AUTOLIMIT_L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CONFIG_AUTOLIMIT_L_SHIFT
)Ë& 
SCT_CONFIG_AUTOLIMIT_L_MASK
)

	)

6618 
	#SCT_CONFIG_AUTOLIMIT_H_MASK
 (0x40000U)

	)

6619 
	#SCT_CONFIG_AUTOLIMIT_H_SHIFT
 (18U)

	)

6620 
	#SCT_CONFIG_AUTOLIMIT_H
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CONFIG_AUTOLIMIT_H_SHIFT
)Ë& 
SCT_CONFIG_AUTOLIMIT_H_MASK
)

	)

6623 
	#SCT_CTRL_DOWN_L_MASK
 (0x1U)

	)

6624 
	#SCT_CTRL_DOWN_L_SHIFT
 (0U)

	)

6625 
	#SCT_CTRL_DOWN_L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CTRL_DOWN_L_SHIFT
)Ë& 
SCT_CTRL_DOWN_L_MASK
)

	)

6626 
	#SCT_CTRL_STOP_L_MASK
 (0x2U)

	)

6627 
	#SCT_CTRL_STOP_L_SHIFT
 (1U)

	)

6628 
	#SCT_CTRL_STOP_L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CTRL_STOP_L_SHIFT
)Ë& 
SCT_CTRL_STOP_L_MASK
)

	)

6629 
	#SCT_CTRL_HALT_L_MASK
 (0x4U)

	)

6630 
	#SCT_CTRL_HALT_L_SHIFT
 (2U)

	)

6631 
	#SCT_CTRL_HALT_L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CTRL_HALT_L_SHIFT
)Ë& 
SCT_CTRL_HALT_L_MASK
)

	)

6632 
	#SCT_CTRL_CLRCTR_L_MASK
 (0x8U)

	)

6633 
	#SCT_CTRL_CLRCTR_L_SHIFT
 (3U)

	)

6634 
	#SCT_CTRL_CLRCTR_L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CTRL_CLRCTR_L_SHIFT
)Ë& 
SCT_CTRL_CLRCTR_L_MASK
)

	)

6635 
	#SCT_CTRL_BIDIR_L_MASK
 (0x10U)

	)

6636 
	#SCT_CTRL_BIDIR_L_SHIFT
 (4U)

	)

6637 
	#SCT_CTRL_BIDIR_L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CTRL_BIDIR_L_SHIFT
)Ë& 
SCT_CTRL_BIDIR_L_MASK
)

	)

6638 
	#SCT_CTRL_PRE_L_MASK
 (0x1FE0U)

	)

6639 
	#SCT_CTRL_PRE_L_SHIFT
 (5U)

	)

6640 
	#SCT_CTRL_PRE_L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CTRL_PRE_L_SHIFT
)Ë& 
SCT_CTRL_PRE_L_MASK
)

	)

6641 
	#SCT_CTRL_DOWN_H_MASK
 (0x10000U)

	)

6642 
	#SCT_CTRL_DOWN_H_SHIFT
 (16U)

	)

6643 
	#SCT_CTRL_DOWN_H
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CTRL_DOWN_H_SHIFT
)Ë& 
SCT_CTRL_DOWN_H_MASK
)

	)

6644 
	#SCT_CTRL_STOP_H_MASK
 (0x20000U)

	)

6645 
	#SCT_CTRL_STOP_H_SHIFT
 (17U)

	)

6646 
	#SCT_CTRL_STOP_H
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CTRL_STOP_H_SHIFT
)Ë& 
SCT_CTRL_STOP_H_MASK
)

	)

6647 
	#SCT_CTRL_HALT_H_MASK
 (0x40000U)

	)

6648 
	#SCT_CTRL_HALT_H_SHIFT
 (18U)

	)

6649 
	#SCT_CTRL_HALT_H
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CTRL_HALT_H_SHIFT
)Ë& 
SCT_CTRL_HALT_H_MASK
)

	)

6650 
	#SCT_CTRL_CLRCTR_H_MASK
 (0x80000U)

	)

6651 
	#SCT_CTRL_CLRCTR_H_SHIFT
 (19U)

	)

6652 
	#SCT_CTRL_CLRCTR_H
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CTRL_CLRCTR_H_SHIFT
)Ë& 
SCT_CTRL_CLRCTR_H_MASK
)

	)

6653 
	#SCT_CTRL_BIDIR_H_MASK
 (0x100000U)

	)

6654 
	#SCT_CTRL_BIDIR_H_SHIFT
 (20U)

	)

6655 
	#SCT_CTRL_BIDIR_H
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CTRL_BIDIR_H_SHIFT
)Ë& 
SCT_CTRL_BIDIR_H_MASK
)

	)

6656 
	#SCT_CTRL_PRE_H_MASK
 (0x1FE00000U)

	)

6657 
	#SCT_CTRL_PRE_H_SHIFT
 (21U)

	)

6658 
	#SCT_CTRL_PRE_H
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CTRL_PRE_H_SHIFT
)Ë& 
SCT_CTRL_PRE_H_MASK
)

	)

6661 
	#SCT_LIMIT_LIMMSK_L_MASK
 (0xFFFFU)

	)

6662 
	#SCT_LIMIT_LIMMSK_L_SHIFT
 (0U)

	)

6663 
	#SCT_LIMIT_LIMMSK_L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_LIMIT_LIMMSK_L_SHIFT
)Ë& 
SCT_LIMIT_LIMMSK_L_MASK
)

	)

6664 
	#SCT_LIMIT_LIMMSK_H_MASK
 (0xFFFF0000U)

	)

6665 
	#SCT_LIMIT_LIMMSK_H_SHIFT
 (16U)

	)

6666 
	#SCT_LIMIT_LIMMSK_H
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_LIMIT_LIMMSK_H_SHIFT
)Ë& 
SCT_LIMIT_LIMMSK_H_MASK
)

	)

6669 
	#SCT_HALT_HALTMSK_L_MASK
 (0xFFFFU)

	)

6670 
	#SCT_HALT_HALTMSK_L_SHIFT
 (0U)

	)

6671 
	#SCT_HALT_HALTMSK_L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_HALT_HALTMSK_L_SHIFT
)Ë& 
SCT_HALT_HALTMSK_L_MASK
)

	)

6672 
	#SCT_HALT_HALTMSK_H_MASK
 (0xFFFF0000U)

	)

6673 
	#SCT_HALT_HALTMSK_H_SHIFT
 (16U)

	)

6674 
	#SCT_HALT_HALTMSK_H
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_HALT_HALTMSK_H_SHIFT
)Ë& 
SCT_HALT_HALTMSK_H_MASK
)

	)

6677 
	#SCT_STOP_STOPMSK_L_MASK
 (0xFFFFU)

	)

6678 
	#SCT_STOP_STOPMSK_L_SHIFT
 (0U)

	)

6679 
	#SCT_STOP_STOPMSK_L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_STOP_STOPMSK_L_SHIFT
)Ë& 
SCT_STOP_STOPMSK_L_MASK
)

	)

6680 
	#SCT_STOP_STOPMSK_H_MASK
 (0xFFFF0000U)

	)

6681 
	#SCT_STOP_STOPMSK_H_SHIFT
 (16U)

	)

6682 
	#SCT_STOP_STOPMSK_H
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_STOP_STOPMSK_H_SHIFT
)Ë& 
SCT_STOP_STOPMSK_H_MASK
)

	)

6685 
	#SCT_START_STARTMSK_L_MASK
 (0xFFFFU)

	)

6686 
	#SCT_START_STARTMSK_L_SHIFT
 (0U)

	)

6687 
	#SCT_START_STARTMSK_L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_START_STARTMSK_L_SHIFT
)Ë& 
SCT_START_STARTMSK_L_MASK
)

	)

6688 
	#SCT_START_STARTMSK_H_MASK
 (0xFFFF0000U)

	)

6689 
	#SCT_START_STARTMSK_H_SHIFT
 (16U)

	)

6690 
	#SCT_START_STARTMSK_H
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_START_STARTMSK_H_SHIFT
)Ë& 
SCT_START_STARTMSK_H_MASK
)

	)

6693 
	#SCT_COUNT_CTR_L_MASK
 (0xFFFFU)

	)

6694 
	#SCT_COUNT_CTR_L_SHIFT
 (0U)

	)

6695 
	#SCT_COUNT_CTR_L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_COUNT_CTR_L_SHIFT
)Ë& 
SCT_COUNT_CTR_L_MASK
)

	)

6696 
	#SCT_COUNT_CTR_H_MASK
 (0xFFFF0000U)

	)

6697 
	#SCT_COUNT_CTR_H_SHIFT
 (16U)

	)

6698 
	#SCT_COUNT_CTR_H
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_COUNT_CTR_H_SHIFT
)Ë& 
SCT_COUNT_CTR_H_MASK
)

	)

6701 
	#SCT_STATE_STATE_L_MASK
 (0x1FU)

	)

6702 
	#SCT_STATE_STATE_L_SHIFT
 (0U)

	)

6703 
	#SCT_STATE_STATE_L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_STATE_STATE_L_SHIFT
)Ë& 
SCT_STATE_STATE_L_MASK
)

	)

6704 
	#SCT_STATE_STATE_H_MASK
 (0x1F0000U)

	)

6705 
	#SCT_STATE_STATE_H_SHIFT
 (16U)

	)

6706 
	#SCT_STATE_STATE_H
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_STATE_STATE_H_SHIFT
)Ë& 
SCT_STATE_STATE_H_MASK
)

	)

6709 
	#SCT_INPUT_AIN0_MASK
 (0x1U)

	)

6710 
	#SCT_INPUT_AIN0_SHIFT
 (0U)

	)

6711 
	#SCT_INPUT_AIN0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_AIN0_SHIFT
)Ë& 
SCT_INPUT_AIN0_MASK
)

	)

6712 
	#SCT_INPUT_AIN1_MASK
 (0x2U)

	)

6713 
	#SCT_INPUT_AIN1_SHIFT
 (1U)

	)

6714 
	#SCT_INPUT_AIN1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_AIN1_SHIFT
)Ë& 
SCT_INPUT_AIN1_MASK
)

	)

6715 
	#SCT_INPUT_AIN2_MASK
 (0x4U)

	)

6716 
	#SCT_INPUT_AIN2_SHIFT
 (2U)

	)

6717 
	#SCT_INPUT_AIN2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_AIN2_SHIFT
)Ë& 
SCT_INPUT_AIN2_MASK
)

	)

6718 
	#SCT_INPUT_AIN3_MASK
 (0x8U)

	)

6719 
	#SCT_INPUT_AIN3_SHIFT
 (3U)

	)

6720 
	#SCT_INPUT_AIN3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_AIN3_SHIFT
)Ë& 
SCT_INPUT_AIN3_MASK
)

	)

6721 
	#SCT_INPUT_AIN4_MASK
 (0x10U)

	)

6722 
	#SCT_INPUT_AIN4_SHIFT
 (4U)

	)

6723 
	#SCT_INPUT_AIN4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_AIN4_SHIFT
)Ë& 
SCT_INPUT_AIN4_MASK
)

	)

6724 
	#SCT_INPUT_AIN5_MASK
 (0x20U)

	)

6725 
	#SCT_INPUT_AIN5_SHIFT
 (5U)

	)

6726 
	#SCT_INPUT_AIN5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_AIN5_SHIFT
)Ë& 
SCT_INPUT_AIN5_MASK
)

	)

6727 
	#SCT_INPUT_AIN6_MASK
 (0x40U)

	)

6728 
	#SCT_INPUT_AIN6_SHIFT
 (6U)

	)

6729 
	#SCT_INPUT_AIN6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_AIN6_SHIFT
)Ë& 
SCT_INPUT_AIN6_MASK
)

	)

6730 
	#SCT_INPUT_AIN7_MASK
 (0x80U)

	)

6731 
	#SCT_INPUT_AIN7_SHIFT
 (7U)

	)

6732 
	#SCT_INPUT_AIN7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_AIN7_SHIFT
)Ë& 
SCT_INPUT_AIN7_MASK
)

	)

6733 
	#SCT_INPUT_AIN8_MASK
 (0x100U)

	)

6734 
	#SCT_INPUT_AIN8_SHIFT
 (8U)

	)

6735 
	#SCT_INPUT_AIN8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_AIN8_SHIFT
)Ë& 
SCT_INPUT_AIN8_MASK
)

	)

6736 
	#SCT_INPUT_AIN9_MASK
 (0x200U)

	)

6737 
	#SCT_INPUT_AIN9_SHIFT
 (9U)

	)

6738 
	#SCT_INPUT_AIN9
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_AIN9_SHIFT
)Ë& 
SCT_INPUT_AIN9_MASK
)

	)

6739 
	#SCT_INPUT_AIN10_MASK
 (0x400U)

	)

6740 
	#SCT_INPUT_AIN10_SHIFT
 (10U)

	)

6741 
	#SCT_INPUT_AIN10
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_AIN10_SHIFT
)Ë& 
SCT_INPUT_AIN10_MASK
)

	)

6742 
	#SCT_INPUT_AIN11_MASK
 (0x800U)

	)

6743 
	#SCT_INPUT_AIN11_SHIFT
 (11U)

	)

6744 
	#SCT_INPUT_AIN11
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_AIN11_SHIFT
)Ë& 
SCT_INPUT_AIN11_MASK
)

	)

6745 
	#SCT_INPUT_AIN12_MASK
 (0x1000U)

	)

6746 
	#SCT_INPUT_AIN12_SHIFT
 (12U)

	)

6747 
	#SCT_INPUT_AIN12
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_AIN12_SHIFT
)Ë& 
SCT_INPUT_AIN12_MASK
)

	)

6748 
	#SCT_INPUT_AIN13_MASK
 (0x2000U)

	)

6749 
	#SCT_INPUT_AIN13_SHIFT
 (13U)

	)

6750 
	#SCT_INPUT_AIN13
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_AIN13_SHIFT
)Ë& 
SCT_INPUT_AIN13_MASK
)

	)

6751 
	#SCT_INPUT_AIN14_MASK
 (0x4000U)

	)

6752 
	#SCT_INPUT_AIN14_SHIFT
 (14U)

	)

6753 
	#SCT_INPUT_AIN14
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_AIN14_SHIFT
)Ë& 
SCT_INPUT_AIN14_MASK
)

	)

6754 
	#SCT_INPUT_AIN15_MASK
 (0x8000U)

	)

6755 
	#SCT_INPUT_AIN15_SHIFT
 (15U)

	)

6756 
	#SCT_INPUT_AIN15
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_AIN15_SHIFT
)Ë& 
SCT_INPUT_AIN15_MASK
)

	)

6757 
	#SCT_INPUT_SIN0_MASK
 (0x10000U)

	)

6758 
	#SCT_INPUT_SIN0_SHIFT
 (16U)

	)

6759 
	#SCT_INPUT_SIN0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_SIN0_SHIFT
)Ë& 
SCT_INPUT_SIN0_MASK
)

	)

6760 
	#SCT_INPUT_SIN1_MASK
 (0x20000U)

	)

6761 
	#SCT_INPUT_SIN1_SHIFT
 (17U)

	)

6762 
	#SCT_INPUT_SIN1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_SIN1_SHIFT
)Ë& 
SCT_INPUT_SIN1_MASK
)

	)

6763 
	#SCT_INPUT_SIN2_MASK
 (0x40000U)

	)

6764 
	#SCT_INPUT_SIN2_SHIFT
 (18U)

	)

6765 
	#SCT_INPUT_SIN2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_SIN2_SHIFT
)Ë& 
SCT_INPUT_SIN2_MASK
)

	)

6766 
	#SCT_INPUT_SIN3_MASK
 (0x80000U)

	)

6767 
	#SCT_INPUT_SIN3_SHIFT
 (19U)

	)

6768 
	#SCT_INPUT_SIN3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_SIN3_SHIFT
)Ë& 
SCT_INPUT_SIN3_MASK
)

	)

6769 
	#SCT_INPUT_SIN4_MASK
 (0x100000U)

	)

6770 
	#SCT_INPUT_SIN4_SHIFT
 (20U)

	)

6771 
	#SCT_INPUT_SIN4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_SIN4_SHIFT
)Ë& 
SCT_INPUT_SIN4_MASK
)

	)

6772 
	#SCT_INPUT_SIN5_MASK
 (0x200000U)

	)

6773 
	#SCT_INPUT_SIN5_SHIFT
 (21U)

	)

6774 
	#SCT_INPUT_SIN5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_SIN5_SHIFT
)Ë& 
SCT_INPUT_SIN5_MASK
)

	)

6775 
	#SCT_INPUT_SIN6_MASK
 (0x400000U)

	)

6776 
	#SCT_INPUT_SIN6_SHIFT
 (22U)

	)

6777 
	#SCT_INPUT_SIN6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_SIN6_SHIFT
)Ë& 
SCT_INPUT_SIN6_MASK
)

	)

6778 
	#SCT_INPUT_SIN7_MASK
 (0x800000U)

	)

6779 
	#SCT_INPUT_SIN7_SHIFT
 (23U)

	)

6780 
	#SCT_INPUT_SIN7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_SIN7_SHIFT
)Ë& 
SCT_INPUT_SIN7_MASK
)

	)

6781 
	#SCT_INPUT_SIN8_MASK
 (0x1000000U)

	)

6782 
	#SCT_INPUT_SIN8_SHIFT
 (24U)

	)

6783 
	#SCT_INPUT_SIN8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_SIN8_SHIFT
)Ë& 
SCT_INPUT_SIN8_MASK
)

	)

6784 
	#SCT_INPUT_SIN9_MASK
 (0x2000000U)

	)

6785 
	#SCT_INPUT_SIN9_SHIFT
 (25U)

	)

6786 
	#SCT_INPUT_SIN9
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_SIN9_SHIFT
)Ë& 
SCT_INPUT_SIN9_MASK
)

	)

6787 
	#SCT_INPUT_SIN10_MASK
 (0x4000000U)

	)

6788 
	#SCT_INPUT_SIN10_SHIFT
 (26U)

	)

6789 
	#SCT_INPUT_SIN10
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_SIN10_SHIFT
)Ë& 
SCT_INPUT_SIN10_MASK
)

	)

6790 
	#SCT_INPUT_SIN11_MASK
 (0x8000000U)

	)

6791 
	#SCT_INPUT_SIN11_SHIFT
 (27U)

	)

6792 
	#SCT_INPUT_SIN11
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_SIN11_SHIFT
)Ë& 
SCT_INPUT_SIN11_MASK
)

	)

6793 
	#SCT_INPUT_SIN12_MASK
 (0x10000000U)

	)

6794 
	#SCT_INPUT_SIN12_SHIFT
 (28U)

	)

6795 
	#SCT_INPUT_SIN12
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_SIN12_SHIFT
)Ë& 
SCT_INPUT_SIN12_MASK
)

	)

6796 
	#SCT_INPUT_SIN13_MASK
 (0x20000000U)

	)

6797 
	#SCT_INPUT_SIN13_SHIFT
 (29U)

	)

6798 
	#SCT_INPUT_SIN13
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_SIN13_SHIFT
)Ë& 
SCT_INPUT_SIN13_MASK
)

	)

6799 
	#SCT_INPUT_SIN14_MASK
 (0x40000000U)

	)

6800 
	#SCT_INPUT_SIN14_SHIFT
 (30U)

	)

6801 
	#SCT_INPUT_SIN14
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_SIN14_SHIFT
)Ë& 
SCT_INPUT_SIN14_MASK
)

	)

6802 
	#SCT_INPUT_SIN15_MASK
 (0x80000000U)

	)

6803 
	#SCT_INPUT_SIN15_SHIFT
 (31U)

	)

6804 
	#SCT_INPUT_SIN15
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_INPUT_SIN15_SHIFT
)Ë& 
SCT_INPUT_SIN15_MASK
)

	)

6807 
	#SCT_REGMODE_REGMOD_L_MASK
 (0xFFFFU)

	)

6808 
	#SCT_REGMODE_REGMOD_L_SHIFT
 (0U)

	)

6809 
	#SCT_REGMODE_REGMOD_L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_REGMODE_REGMOD_L_SHIFT
)Ë& 
SCT_REGMODE_REGMOD_L_MASK
)

	)

6810 
	#SCT_REGMODE_REGMOD_H_MASK
 (0xFFFF0000U)

	)

6811 
	#SCT_REGMODE_REGMOD_H_SHIFT
 (16U)

	)

6812 
	#SCT_REGMODE_REGMOD_H
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_REGMODE_REGMOD_H_SHIFT
)Ë& 
SCT_REGMODE_REGMOD_H_MASK
)

	)

6815 
	#SCT_OUTPUT_OUT_MASK
 (0xFFFFU)

	)

6816 
	#SCT_OUTPUT_OUT_SHIFT
 (0U)

	)

6817 
	#SCT_OUTPUT_OUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_OUTPUT_OUT_SHIFT
)Ë& 
SCT_OUTPUT_OUT_MASK
)

	)

6820 
	#SCT_OUTPUTDIRCTRL_SETCLR0_MASK
 (0x3U)

	)

6821 
	#SCT_OUTPUTDIRCTRL_SETCLR0_SHIFT
 (0U)

	)

6822 
	#SCT_OUTPUTDIRCTRL_SETCLR0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_OUTPUTDIRCTRL_SETCLR0_SHIFT
)Ë& 
SCT_OUTPUTDIRCTRL_SETCLR0_MASK
)

	)

6823 
	#SCT_OUTPUTDIRCTRL_SETCLR1_MASK
 (0xCU)

	)

6824 
	#SCT_OUTPUTDIRCTRL_SETCLR1_SHIFT
 (2U)

	)

6825 
	#SCT_OUTPUTDIRCTRL_SETCLR1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_OUTPUTDIRCTRL_SETCLR1_SHIFT
)Ë& 
SCT_OUTPUTDIRCTRL_SETCLR1_MASK
)

	)

6826 
	#SCT_OUTPUTDIRCTRL_SETCLR2_MASK
 (0x30U)

	)

6827 
	#SCT_OUTPUTDIRCTRL_SETCLR2_SHIFT
 (4U)

	)

6828 
	#SCT_OUTPUTDIRCTRL_SETCLR2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_OUTPUTDIRCTRL_SETCLR2_SHIFT
)Ë& 
SCT_OUTPUTDIRCTRL_SETCLR2_MASK
)

	)

6829 
	#SCT_OUTPUTDIRCTRL_SETCLR3_MASK
 (0xC0U)

	)

6830 
	#SCT_OUTPUTDIRCTRL_SETCLR3_SHIFT
 (6U)

	)

6831 
	#SCT_OUTPUTDIRCTRL_SETCLR3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_OUTPUTDIRCTRL_SETCLR3_SHIFT
)Ë& 
SCT_OUTPUTDIRCTRL_SETCLR3_MASK
)

	)

6832 
	#SCT_OUTPUTDIRCTRL_SETCLR4_MASK
 (0x300U)

	)

6833 
	#SCT_OUTPUTDIRCTRL_SETCLR4_SHIFT
 (8U)

	)

6834 
	#SCT_OUTPUTDIRCTRL_SETCLR4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_OUTPUTDIRCTRL_SETCLR4_SHIFT
)Ë& 
SCT_OUTPUTDIRCTRL_SETCLR4_MASK
)

	)

6835 
	#SCT_OUTPUTDIRCTRL_SETCLR5_MASK
 (0xC00U)

	)

6836 
	#SCT_OUTPUTDIRCTRL_SETCLR5_SHIFT
 (10U)

	)

6837 
	#SCT_OUTPUTDIRCTRL_SETCLR5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_OUTPUTDIRCTRL_SETCLR5_SHIFT
)Ë& 
SCT_OUTPUTDIRCTRL_SETCLR5_MASK
)

	)

6838 
	#SCT_OUTPUTDIRCTRL_SETCLR6_MASK
 (0x3000U)

	)

6839 
	#SCT_OUTPUTDIRCTRL_SETCLR6_SHIFT
 (12U)

	)

6840 
	#SCT_OUTPUTDIRCTRL_SETCLR6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_OUTPUTDIRCTRL_SETCLR6_SHIFT
)Ë& 
SCT_OUTPUTDIRCTRL_SETCLR6_MASK
)

	)

6841 
	#SCT_OUTPUTDIRCTRL_SETCLR7_MASK
 (0xC000U)

	)

6842 
	#SCT_OUTPUTDIRCTRL_SETCLR7_SHIFT
 (14U)

	)

6843 
	#SCT_OUTPUTDIRCTRL_SETCLR7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_OUTPUTDIRCTRL_SETCLR7_SHIFT
)Ë& 
SCT_OUTPUTDIRCTRL_SETCLR7_MASK
)

	)

6844 
	#SCT_OUTPUTDIRCTRL_SETCLR8_MASK
 (0x30000U)

	)

6845 
	#SCT_OUTPUTDIRCTRL_SETCLR8_SHIFT
 (16U)

	)

6846 
	#SCT_OUTPUTDIRCTRL_SETCLR8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_OUTPUTDIRCTRL_SETCLR8_SHIFT
)Ë& 
SCT_OUTPUTDIRCTRL_SETCLR8_MASK
)

	)

6847 
	#SCT_OUTPUTDIRCTRL_SETCLR9_MASK
 (0xC0000U)

	)

6848 
	#SCT_OUTPUTDIRCTRL_SETCLR9_SHIFT
 (18U)

	)

6849 
	#SCT_OUTPUTDIRCTRL_SETCLR9
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_OUTPUTDIRCTRL_SETCLR9_SHIFT
)Ë& 
SCT_OUTPUTDIRCTRL_SETCLR9_MASK
)

	)

6850 
	#SCT_OUTPUTDIRCTRL_SETCLR10_MASK
 (0x300000U)

	)

6851 
	#SCT_OUTPUTDIRCTRL_SETCLR10_SHIFT
 (20U)

	)

6852 
	#SCT_OUTPUTDIRCTRL_SETCLR10
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_OUTPUTDIRCTRL_SETCLR10_SHIFT
)Ë& 
SCT_OUTPUTDIRCTRL_SETCLR10_MASK
)

	)

6853 
	#SCT_OUTPUTDIRCTRL_SETCLR11_MASK
 (0xC00000U)

	)

6854 
	#SCT_OUTPUTDIRCTRL_SETCLR11_SHIFT
 (22U)

	)

6855 
	#SCT_OUTPUTDIRCTRL_SETCLR11
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_OUTPUTDIRCTRL_SETCLR11_SHIFT
)Ë& 
SCT_OUTPUTDIRCTRL_SETCLR11_MASK
)

	)

6856 
	#SCT_OUTPUTDIRCTRL_SETCLR12_MASK
 (0x3000000U)

	)

6857 
	#SCT_OUTPUTDIRCTRL_SETCLR12_SHIFT
 (24U)

	)

6858 
	#SCT_OUTPUTDIRCTRL_SETCLR12
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_OUTPUTDIRCTRL_SETCLR12_SHIFT
)Ë& 
SCT_OUTPUTDIRCTRL_SETCLR12_MASK
)

	)

6859 
	#SCT_OUTPUTDIRCTRL_SETCLR13_MASK
 (0xC000000U)

	)

6860 
	#SCT_OUTPUTDIRCTRL_SETCLR13_SHIFT
 (26U)

	)

6861 
	#SCT_OUTPUTDIRCTRL_SETCLR13
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_OUTPUTDIRCTRL_SETCLR13_SHIFT
)Ë& 
SCT_OUTPUTDIRCTRL_SETCLR13_MASK
)

	)

6862 
	#SCT_OUTPUTDIRCTRL_SETCLR14_MASK
 (0x30000000U)

	)

6863 
	#SCT_OUTPUTDIRCTRL_SETCLR14_SHIFT
 (28U)

	)

6864 
	#SCT_OUTPUTDIRCTRL_SETCLR14
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_OUTPUTDIRCTRL_SETCLR14_SHIFT
)Ë& 
SCT_OUTPUTDIRCTRL_SETCLR14_MASK
)

	)

6865 
	#SCT_OUTPUTDIRCTRL_SETCLR15_MASK
 (0xC0000000U)

	)

6866 
	#SCT_OUTPUTDIRCTRL_SETCLR15_SHIFT
 (30U)

	)

6867 
	#SCT_OUTPUTDIRCTRL_SETCLR15
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_OUTPUTDIRCTRL_SETCLR15_SHIFT
)Ë& 
SCT_OUTPUTDIRCTRL_SETCLR15_MASK
)

	)

6870 
	#SCT_RES_O0RES_MASK
 (0x3U)

	)

6871 
	#SCT_RES_O0RES_SHIFT
 (0U)

	)

6872 
	#SCT_RES_O0RES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_RES_O0RES_SHIFT
)Ë& 
SCT_RES_O0RES_MASK
)

	)

6873 
	#SCT_RES_O1RES_MASK
 (0xCU)

	)

6874 
	#SCT_RES_O1RES_SHIFT
 (2U)

	)

6875 
	#SCT_RES_O1RES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_RES_O1RES_SHIFT
)Ë& 
SCT_RES_O1RES_MASK
)

	)

6876 
	#SCT_RES_O2RES_MASK
 (0x30U)

	)

6877 
	#SCT_RES_O2RES_SHIFT
 (4U)

	)

6878 
	#SCT_RES_O2RES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_RES_O2RES_SHIFT
)Ë& 
SCT_RES_O2RES_MASK
)

	)

6879 
	#SCT_RES_O3RES_MASK
 (0xC0U)

	)

6880 
	#SCT_RES_O3RES_SHIFT
 (6U)

	)

6881 
	#SCT_RES_O3RES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_RES_O3RES_SHIFT
)Ë& 
SCT_RES_O3RES_MASK
)

	)

6882 
	#SCT_RES_O4RES_MASK
 (0x300U)

	)

6883 
	#SCT_RES_O4RES_SHIFT
 (8U)

	)

6884 
	#SCT_RES_O4RES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_RES_O4RES_SHIFT
)Ë& 
SCT_RES_O4RES_MASK
)

	)

6885 
	#SCT_RES_O5RES_MASK
 (0xC00U)

	)

6886 
	#SCT_RES_O5RES_SHIFT
 (10U)

	)

6887 
	#SCT_RES_O5RES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_RES_O5RES_SHIFT
)Ë& 
SCT_RES_O5RES_MASK
)

	)

6888 
	#SCT_RES_O6RES_MASK
 (0x3000U)

	)

6889 
	#SCT_RES_O6RES_SHIFT
 (12U)

	)

6890 
	#SCT_RES_O6RES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_RES_O6RES_SHIFT
)Ë& 
SCT_RES_O6RES_MASK
)

	)

6891 
	#SCT_RES_O7RES_MASK
 (0xC000U)

	)

6892 
	#SCT_RES_O7RES_SHIFT
 (14U)

	)

6893 
	#SCT_RES_O7RES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_RES_O7RES_SHIFT
)Ë& 
SCT_RES_O7RES_MASK
)

	)

6894 
	#SCT_RES_O8RES_MASK
 (0x30000U)

	)

6895 
	#SCT_RES_O8RES_SHIFT
 (16U)

	)

6896 
	#SCT_RES_O8RES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_RES_O8RES_SHIFT
)Ë& 
SCT_RES_O8RES_MASK
)

	)

6897 
	#SCT_RES_O9RES_MASK
 (0xC0000U)

	)

6898 
	#SCT_RES_O9RES_SHIFT
 (18U)

	)

6899 
	#SCT_RES_O9RES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_RES_O9RES_SHIFT
)Ë& 
SCT_RES_O9RES_MASK
)

	)

6900 
	#SCT_RES_O10RES_MASK
 (0x300000U)

	)

6901 
	#SCT_RES_O10RES_SHIFT
 (20U)

	)

6902 
	#SCT_RES_O10RES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_RES_O10RES_SHIFT
)Ë& 
SCT_RES_O10RES_MASK
)

	)

6903 
	#SCT_RES_O11RES_MASK
 (0xC00000U)

	)

6904 
	#SCT_RES_O11RES_SHIFT
 (22U)

	)

6905 
	#SCT_RES_O11RES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_RES_O11RES_SHIFT
)Ë& 
SCT_RES_O11RES_MASK
)

	)

6906 
	#SCT_RES_O12RES_MASK
 (0x3000000U)

	)

6907 
	#SCT_RES_O12RES_SHIFT
 (24U)

	)

6908 
	#SCT_RES_O12RES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_RES_O12RES_SHIFT
)Ë& 
SCT_RES_O12RES_MASK
)

	)

6909 
	#SCT_RES_O13RES_MASK
 (0xC000000U)

	)

6910 
	#SCT_RES_O13RES_SHIFT
 (26U)

	)

6911 
	#SCT_RES_O13RES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_RES_O13RES_SHIFT
)Ë& 
SCT_RES_O13RES_MASK
)

	)

6912 
	#SCT_RES_O14RES_MASK
 (0x30000000U)

	)

6913 
	#SCT_RES_O14RES_SHIFT
 (28U)

	)

6914 
	#SCT_RES_O14RES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_RES_O14RES_SHIFT
)Ë& 
SCT_RES_O14RES_MASK
)

	)

6915 
	#SCT_RES_O15RES_MASK
 (0xC0000000U)

	)

6916 
	#SCT_RES_O15RES_SHIFT
 (30U)

	)

6917 
	#SCT_RES_O15RES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_RES_O15RES_SHIFT
)Ë& 
SCT_RES_O15RES_MASK
)

	)

6920 
	#SCT_DMA0REQUEST_DEV_0_MASK
 (0xFFFFU)

	)

6921 
	#SCT_DMA0REQUEST_DEV_0_SHIFT
 (0U)

	)

6922 
	#SCT_DMA0REQUEST_DEV_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_DMA0REQUEST_DEV_0_SHIFT
)Ë& 
SCT_DMA0REQUEST_DEV_0_MASK
)

	)

6923 
	#SCT_DMA0REQUEST_DRL0_MASK
 (0x40000000U)

	)

6924 
	#SCT_DMA0REQUEST_DRL0_SHIFT
 (30U)

	)

6925 
	#SCT_DMA0REQUEST_DRL0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_DMA0REQUEST_DRL0_SHIFT
)Ë& 
SCT_DMA0REQUEST_DRL0_MASK
)

	)

6926 
	#SCT_DMA0REQUEST_DRQ0_MASK
 (0x80000000U)

	)

6927 
	#SCT_DMA0REQUEST_DRQ0_SHIFT
 (31U)

	)

6928 
	#SCT_DMA0REQUEST_DRQ0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_DMA0REQUEST_DRQ0_SHIFT
)Ë& 
SCT_DMA0REQUEST_DRQ0_MASK
)

	)

6931 
	#SCT_DMA1REQUEST_DEV_1_MASK
 (0xFFFFU)

	)

6932 
	#SCT_DMA1REQUEST_DEV_1_SHIFT
 (0U)

	)

6933 
	#SCT_DMA1REQUEST_DEV_1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_DMA1REQUEST_DEV_1_SHIFT
)Ë& 
SCT_DMA1REQUEST_DEV_1_MASK
)

	)

6934 
	#SCT_DMA1REQUEST_DRL1_MASK
 (0x40000000U)

	)

6935 
	#SCT_DMA1REQUEST_DRL1_SHIFT
 (30U)

	)

6936 
	#SCT_DMA1REQUEST_DRL1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_DMA1REQUEST_DRL1_SHIFT
)Ë& 
SCT_DMA1REQUEST_DRL1_MASK
)

	)

6937 
	#SCT_DMA1REQUEST_DRQ1_MASK
 (0x80000000U)

	)

6938 
	#SCT_DMA1REQUEST_DRQ1_SHIFT
 (31U)

	)

6939 
	#SCT_DMA1REQUEST_DRQ1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_DMA1REQUEST_DRQ1_SHIFT
)Ë& 
SCT_DMA1REQUEST_DRQ1_MASK
)

	)

6942 
	#SCT_EVEN_IEN_MASK
 (0xFFFFU)

	)

6943 
	#SCT_EVEN_IEN_SHIFT
 (0U)

	)

6944 
	#SCT_EVEN_IEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_EVEN_IEN_SHIFT
)Ë& 
SCT_EVEN_IEN_MASK
)

	)

6947 
	#SCT_EVFLAG_FLAG_MASK
 (0xFFFFU)

	)

6948 
	#SCT_EVFLAG_FLAG_SHIFT
 (0U)

	)

6949 
	#SCT_EVFLAG_FLAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_EVFLAG_FLAG_SHIFT
)Ë& 
SCT_EVFLAG_FLAG_MASK
)

	)

6952 
	#SCT_CONEN_NCEN_MASK
 (0xFFFFU)

	)

6953 
	#SCT_CONEN_NCEN_SHIFT
 (0U)

	)

6954 
	#SCT_CONEN_NCEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CONEN_NCEN_SHIFT
)Ë& 
SCT_CONEN_NCEN_MASK
)

	)

6957 
	#SCT_CONFLAG_NCFLAG_MASK
 (0xFFFFU)

	)

6958 
	#SCT_CONFLAG_NCFLAG_SHIFT
 (0U)

	)

6959 
	#SCT_CONFLAG_NCFLAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CONFLAG_NCFLAG_SHIFT
)Ë& 
SCT_CONFLAG_NCFLAG_MASK
)

	)

6960 
	#SCT_CONFLAG_BUSERRL_MASK
 (0x40000000U)

	)

6961 
	#SCT_CONFLAG_BUSERRL_SHIFT
 (30U)

	)

6962 
	#SCT_CONFLAG_BUSERRL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CONFLAG_BUSERRL_SHIFT
)Ë& 
SCT_CONFLAG_BUSERRL_MASK
)

	)

6963 
	#SCT_CONFLAG_BUSERRH_MASK
 (0x80000000U)

	)

6964 
	#SCT_CONFLAG_BUSERRH_SHIFT
 (31U)

	)

6965 
	#SCT_CONFLAG_BUSERRH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_CONFLAG_BUSERRH_SHIFT
)Ë& 
SCT_CONFLAG_BUSERRH_MASK
)

	)

6968 
	#SCT_SCTCAP_CAPn_L_MASK
 (0xFFFFU)

	)

6969 
	#SCT_SCTCAP_CAPn_L_SHIFT
 (0U)

	)

6970 
	#SCT_SCTCAP_CAPn_L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_SCTCAP_CAPn_L_SHIFT
)Ë& 
SCT_SCTCAP_CAPn_L_MASK
)

	)

6971 
	#SCT_SCTCAP_CAPn_H_MASK
 (0xFFFF0000U)

	)

6972 
	#SCT_SCTCAP_CAPn_H_SHIFT
 (16U)

	)

6973 
	#SCT_SCTCAP_CAPn_H
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_SCTCAP_CAPn_H_SHIFT
)Ë& 
SCT_SCTCAP_CAPn_H_MASK
)

	)

6976 
	#SCT_SCTCAP_COUNT
 (10U)

	)

6979 
	#SCT_SCTMATCH_MATCHn_L_MASK
 (0xFFFFU)

	)

6980 
	#SCT_SCTMATCH_MATCHn_L_SHIFT
 (0U)

	)

6981 
	#SCT_SCTMATCH_MATCHn_L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_SCTMATCH_MATCHn_L_SHIFT
)Ë& 
SCT_SCTMATCH_MATCHn_L_MASK
)

	)

6982 
	#SCT_SCTMATCH_MATCHn_H_MASK
 (0xFFFF0000U)

	)

6983 
	#SCT_SCTMATCH_MATCHn_H_SHIFT
 (16U)

	)

6984 
	#SCT_SCTMATCH_MATCHn_H
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_SCTMATCH_MATCHn_H_SHIFT
)Ë& 
SCT_SCTMATCH_MATCHn_H_MASK
)

	)

6987 
	#SCT_SCTMATCH_COUNT
 (10U)

	)

6990 
	#SCT_SCTCAPCTRL_CAPCONn_L_MASK
 (0xFFFFU)

	)

6991 
	#SCT_SCTCAPCTRL_CAPCONn_L_SHIFT
 (0U)

	)

6992 
	#SCT_SCTCAPCTRL_CAPCONn_L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_SCTCAPCTRL_CAPCONn_L_SHIFT
)Ë& 
SCT_SCTCAPCTRL_CAPCONn_L_MASK
)

	)

6993 
	#SCT_SCTCAPCTRL_CAPCONn_H_MASK
 (0xFFFF0000U)

	)

6994 
	#SCT_SCTCAPCTRL_CAPCONn_H_SHIFT
 (16U)

	)

6995 
	#SCT_SCTCAPCTRL_CAPCONn_H
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_SCTCAPCTRL_CAPCONn_H_SHIFT
)Ë& 
SCT_SCTCAPCTRL_CAPCONn_H_MASK
)

	)

6998 
	#SCT_SCTCAPCTRL_COUNT
 (10U)

	)

7001 
	#SCT_SCTMATCHREL_RELOADn_L_MASK
 (0xFFFFU)

	)

7002 
	#SCT_SCTMATCHREL_RELOADn_L_SHIFT
 (0U)

	)

7003 
	#SCT_SCTMATCHREL_RELOADn_L
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_SCTMATCHREL_RELOADn_L_SHIFT
)Ë& 
SCT_SCTMATCHREL_RELOADn_L_MASK
)

	)

7004 
	#SCT_SCTMATCHREL_RELOADn_H_MASK
 (0xFFFF0000U)

	)

7005 
	#SCT_SCTMATCHREL_RELOADn_H_SHIFT
 (16U)

	)

7006 
	#SCT_SCTMATCHREL_RELOADn_H
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_SCTMATCHREL_RELOADn_H_SHIFT
)Ë& 
SCT_SCTMATCHREL_RELOADn_H_MASK
)

	)

7009 
	#SCT_SCTMATCHREL_COUNT
 (10U)

	)

7012 
	#SCT_EVENT_STATE_STATEMSKn_MASK
 (0xFFFFU)

	)

7013 
	#SCT_EVENT_STATE_STATEMSKn_SHIFT
 (0U)

	)

7014 
	#SCT_EVENT_STATE_STATEMSKn
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_EVENT_STATE_STATEMSKn_SHIFT
)Ë& 
SCT_EVENT_STATE_STATEMSKn_MASK
)

	)

7017 
	#SCT_EVENT_STATE_COUNT
 (10U)

	)

7020 
	#SCT_EVENT_CTRL_MATCHSEL_MASK
 (0xFU)

	)

7021 
	#SCT_EVENT_CTRL_MATCHSEL_SHIFT
 (0U)

	)

7022 
	#SCT_EVENT_CTRL_MATCHSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_EVENT_CTRL_MATCHSEL_SHIFT
)Ë& 
SCT_EVENT_CTRL_MATCHSEL_MASK
)

	)

7023 
	#SCT_EVENT_CTRL_HEVENT_MASK
 (0x10U)

	)

7024 
	#SCT_EVENT_CTRL_HEVENT_SHIFT
 (4U)

	)

7025 
	#SCT_EVENT_CTRL_HEVENT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_EVENT_CTRL_HEVENT_SHIFT
)Ë& 
SCT_EVENT_CTRL_HEVENT_MASK
)

	)

7026 
	#SCT_EVENT_CTRL_OUTSEL_MASK
 (0x20U)

	)

7027 
	#SCT_EVENT_CTRL_OUTSEL_SHIFT
 (5U)

	)

7028 
	#SCT_EVENT_CTRL_OUTSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_EVENT_CTRL_OUTSEL_SHIFT
)Ë& 
SCT_EVENT_CTRL_OUTSEL_MASK
)

	)

7029 
	#SCT_EVENT_CTRL_IOSEL_MASK
 (0x3C0U)

	)

7030 
	#SCT_EVENT_CTRL_IOSEL_SHIFT
 (6U)

	)

7031 
	#SCT_EVENT_CTRL_IOSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_EVENT_CTRL_IOSEL_SHIFT
)Ë& 
SCT_EVENT_CTRL_IOSEL_MASK
)

	)

7032 
	#SCT_EVENT_CTRL_IOCOND_MASK
 (0xC00U)

	)

7033 
	#SCT_EVENT_CTRL_IOCOND_SHIFT
 (10U)

	)

7034 
	#SCT_EVENT_CTRL_IOCOND
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_EVENT_CTRL_IOCOND_SHIFT
)Ë& 
SCT_EVENT_CTRL_IOCOND_MASK
)

	)

7035 
	#SCT_EVENT_CTRL_COMBMODE_MASK
 (0x3000U)

	)

7036 
	#SCT_EVENT_CTRL_COMBMODE_SHIFT
 (12U)

	)

7037 
	#SCT_EVENT_CTRL_COMBMODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_EVENT_CTRL_COMBMODE_SHIFT
)Ë& 
SCT_EVENT_CTRL_COMBMODE_MASK
)

	)

7038 
	#SCT_EVENT_CTRL_STATELD_MASK
 (0x4000U)

	)

7039 
	#SCT_EVENT_CTRL_STATELD_SHIFT
 (14U)

	)

7040 
	#SCT_EVENT_CTRL_STATELD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_EVENT_CTRL_STATELD_SHIFT
)Ë& 
SCT_EVENT_CTRL_STATELD_MASK
)

	)

7041 
	#SCT_EVENT_CTRL_STATEV_MASK
 (0xF8000U)

	)

7042 
	#SCT_EVENT_CTRL_STATEV_SHIFT
 (15U)

	)

7043 
	#SCT_EVENT_CTRL_STATEV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_EVENT_CTRL_STATEV_SHIFT
)Ë& 
SCT_EVENT_CTRL_STATEV_MASK
)

	)

7044 
	#SCT_EVENT_CTRL_MATCHMEM_MASK
 (0x100000U)

	)

7045 
	#SCT_EVENT_CTRL_MATCHMEM_SHIFT
 (20U)

	)

7046 
	#SCT_EVENT_CTRL_MATCHMEM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_EVENT_CTRL_MATCHMEM_SHIFT
)Ë& 
SCT_EVENT_CTRL_MATCHMEM_MASK
)

	)

7047 
	#SCT_EVENT_CTRL_DIRECTION_MASK
 (0x600000U)

	)

7048 
	#SCT_EVENT_CTRL_DIRECTION_SHIFT
 (21U)

	)

7049 
	#SCT_EVENT_CTRL_DIRECTION
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_EVENT_CTRL_DIRECTION_SHIFT
)Ë& 
SCT_EVENT_CTRL_DIRECTION_MASK
)

	)

7052 
	#SCT_EVENT_CTRL_COUNT
 (10U)

	)

7055 
	#SCT_OUT_SET_SET_MASK
 (0xFFFFU)

	)

7056 
	#SCT_OUT_SET_SET_SHIFT
 (0U)

	)

7057 
	#SCT_OUT_SET_SET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_OUT_SET_SET_SHIFT
)Ë& 
SCT_OUT_SET_SET_MASK
)

	)

7060 
	#SCT_OUT_SET_COUNT
 (10U)

	)

7063 
	#SCT_OUT_CLR_CLR_MASK
 (0xFFFFU)

	)

7064 
	#SCT_OUT_CLR_CLR_SHIFT
 (0U)

	)

7065 
	#SCT_OUT_CLR_CLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SCT_OUT_CLR_CLR_SHIFT
)Ë& 
SCT_OUT_CLR_CLR_MASK
)

	)

7068 
	#SCT_OUT_CLR_COUNT
 (10U)

	)

7078 
	#SCT0_BASE
 (0x40085000u)

	)

7080 
	#SCT0
 ((
SCT_Ty≥
 *)
SCT0_BASE
)

	)

7082 
	#SCT_BASE_ADDRS
 { 
SCT0_BASE
 }

	)

7084 
	#SCT_BASE_PTRS
 { 
SCT0
 }

	)

7086 
	#SCT_IRQS
 { 
SCT0_IRQn
 }

	)

7104 
__IO
 
uöt32_t
 
	mCTRL
;

7105 
__IO
 
uöt32_t
 
	mPWREN
;

7106 
__IO
 
uöt32_t
 
	mCLKDIV
;

7107 
uöt8_t
 
	mRESERVED_0
[4];

7108 
__IO
 
uöt32_t
 
	mCLKENA
;

7109 
__IO
 
uöt32_t
 
	mTMOUT
;

7110 
__IO
 
uöt32_t
 
	mCTYPE
;

7111 
__IO
 
uöt32_t
 
	mBLKSIZ
;

7112 
__IO
 
uöt32_t
 
	mBYTCNT
;

7113 
__IO
 
uöt32_t
 
	mINTMASK
;

7114 
__IO
 
uöt32_t
 
	mCMDARG
;

7115 
__IO
 
uöt32_t
 
	mCMD
;

7116 
__IO
 
uöt32_t
 
	mRESP
[4];

7117 
__IO
 
uöt32_t
 
	mMINTSTS
;

7118 
__IO
 
uöt32_t
 
	mRINTSTS
;

7119 
__IO
 
uöt32_t
 
	mSTATUS
;

7120 
__IO
 
uöt32_t
 
	mFIFOTH
;

7121 
__IO
 
uöt32_t
 
	mCDETECT
;

7122 
__IO
 
uöt32_t
 
	mWRTPRT
;

7123 
uöt8_t
 
	mRESERVED_1
[4];

7124 
__IO
 
uöt32_t
 
	mTCBCNT
;

7125 
__IO
 
uöt32_t
 
	mTBBCNT
;

7126 
__IO
 
uöt32_t
 
	mDEBNCE
;

7127 
uöt8_t
 
	mRESERVED_2
[16];

7128 
__IO
 
uöt32_t
 
	mRST_N
;

7129 
uöt8_t
 
	mRESERVED_3
[4];

7130 
__IO
 
uöt32_t
 
	mBMOD
;

7131 
__IO
 
uöt32_t
 
	mPLDMND
;

7132 
__IO
 
uöt32_t
 
	mDBADDR
;

7133 
__IO
 
uöt32_t
 
	mIDSTS
;

7134 
__IO
 
uöt32_t
 
	mIDINTEN
;

7135 
__IO
 
uöt32_t
 
	mDSCADDR
;

7136 
__IO
 
uöt32_t
 
	mBUFADDR
;

7137 
uöt8_t
 
	mRESERVED_4
[100];

7138 
__IO
 
uöt32_t
 
	mCARDTHRCTL
;

7139 
__IO
 
uöt32_t
 
	mBACKENDPWR
;

7140 
uöt8_t
 
	mRESERVED_5
[248];

7141 
__IO
 
uöt32_t
 
	mFIFO
[64];

7142 } 
	tSDIF_Ty≥
;

7154 
	#SDIF_CTRL_CONTROLLER_RESET_MASK
 (0x1U)

	)

7155 
	#SDIF_CTRL_CONTROLLER_RESET_SHIFT
 (0U)

	)

7156 
	#SDIF_CTRL_CONTROLLER_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CTRL_CONTROLLER_RESET_SHIFT
)Ë& 
SDIF_CTRL_CONTROLLER_RESET_MASK
)

	)

7157 
	#SDIF_CTRL_FIFO_RESET_MASK
 (0x2U)

	)

7158 
	#SDIF_CTRL_FIFO_RESET_SHIFT
 (1U)

	)

7159 
	#SDIF_CTRL_FIFO_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CTRL_FIFO_RESET_SHIFT
)Ë& 
SDIF_CTRL_FIFO_RESET_MASK
)

	)

7160 
	#SDIF_CTRL_DMA_RESET_MASK
 (0x4U)

	)

7161 
	#SDIF_CTRL_DMA_RESET_SHIFT
 (2U)

	)

7162 
	#SDIF_CTRL_DMA_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CTRL_DMA_RESET_SHIFT
)Ë& 
SDIF_CTRL_DMA_RESET_MASK
)

	)

7163 
	#SDIF_CTRL_INT_ENABLE_MASK
 (0x10U)

	)

7164 
	#SDIF_CTRL_INT_ENABLE_SHIFT
 (4U)

	)

7165 
	#SDIF_CTRL_INT_ENABLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CTRL_INT_ENABLE_SHIFT
)Ë& 
SDIF_CTRL_INT_ENABLE_MASK
)

	)

7166 
	#SDIF_CTRL_READ_WAIT_MASK
 (0x40U)

	)

7167 
	#SDIF_CTRL_READ_WAIT_SHIFT
 (6U)

	)

7168 
	#SDIF_CTRL_READ_WAIT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CTRL_READ_WAIT_SHIFT
)Ë& 
SDIF_CTRL_READ_WAIT_MASK
)

	)

7169 
	#SDIF_CTRL_SEND_IRQ_RESPONSE_MASK
 (0x80U)

	)

7170 
	#SDIF_CTRL_SEND_IRQ_RESPONSE_SHIFT
 (7U)

	)

7171 
	#SDIF_CTRL_SEND_IRQ_RESPONSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CTRL_SEND_IRQ_RESPONSE_SHIFT
)Ë& 
SDIF_CTRL_SEND_IRQ_RESPONSE_MASK
)

	)

7172 
	#SDIF_CTRL_ABORT_READ_DATA_MASK
 (0x100U)

	)

7173 
	#SDIF_CTRL_ABORT_READ_DATA_SHIFT
 (8U)

	)

7174 
	#SDIF_CTRL_ABORT_READ_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CTRL_ABORT_READ_DATA_SHIFT
)Ë& 
SDIF_CTRL_ABORT_READ_DATA_MASK
)

	)

7175 
	#SDIF_CTRL_SEND_CCSD_MASK
 (0x200U)

	)

7176 
	#SDIF_CTRL_SEND_CCSD_SHIFT
 (9U)

	)

7177 
	#SDIF_CTRL_SEND_CCSD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CTRL_SEND_CCSD_SHIFT
)Ë& 
SDIF_CTRL_SEND_CCSD_MASK
)

	)

7178 
	#SDIF_CTRL_SEND_AUTO_STOP_CCSD_MASK
 (0x400U)

	)

7179 
	#SDIF_CTRL_SEND_AUTO_STOP_CCSD_SHIFT
 (10U)

	)

7180 
	#SDIF_CTRL_SEND_AUTO_STOP_CCSD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CTRL_SEND_AUTO_STOP_CCSD_SHIFT
)Ë& 
SDIF_CTRL_SEND_AUTO_STOP_CCSD_MASK
)

	)

7181 
	#SDIF_CTRL_CEATA_DEVICE_INTERRUPT_STATUS_MASK
 (0x800U)

	)

7182 
	#SDIF_CTRL_CEATA_DEVICE_INTERRUPT_STATUS_SHIFT
 (11U)

	)

7183 
	#SDIF_CTRL_CEATA_DEVICE_INTERRUPT_STATUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CTRL_CEATA_DEVICE_INTERRUPT_STATUS_SHIFT
)Ë& 
SDIF_CTRL_CEATA_DEVICE_INTERRUPT_STATUS_MASK
)

	)

7184 
	#SDIF_CTRL_CARD_VOLTAGE_A0_MASK
 (0x10000U)

	)

7185 
	#SDIF_CTRL_CARD_VOLTAGE_A0_SHIFT
 (16U)

	)

7186 
	#SDIF_CTRL_CARD_VOLTAGE_A0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CTRL_CARD_VOLTAGE_A0_SHIFT
)Ë& 
SDIF_CTRL_CARD_VOLTAGE_A0_MASK
)

	)

7187 
	#SDIF_CTRL_CARD_VOLTAGE_A1_MASK
 (0x20000U)

	)

7188 
	#SDIF_CTRL_CARD_VOLTAGE_A1_SHIFT
 (17U)

	)

7189 
	#SDIF_CTRL_CARD_VOLTAGE_A1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CTRL_CARD_VOLTAGE_A1_SHIFT
)Ë& 
SDIF_CTRL_CARD_VOLTAGE_A1_MASK
)

	)

7190 
	#SDIF_CTRL_CARD_VOLTAGE_A2_MASK
 (0x40000U)

	)

7191 
	#SDIF_CTRL_CARD_VOLTAGE_A2_SHIFT
 (18U)

	)

7192 
	#SDIF_CTRL_CARD_VOLTAGE_A2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CTRL_CARD_VOLTAGE_A2_SHIFT
)Ë& 
SDIF_CTRL_CARD_VOLTAGE_A2_MASK
)

	)

7193 
	#SDIF_CTRL_USE_INTERNAL_DMAC_MASK
 (0x2000000U)

	)

7194 
	#SDIF_CTRL_USE_INTERNAL_DMAC_SHIFT
 (25U)

	)

7195 
	#SDIF_CTRL_USE_INTERNAL_DMAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CTRL_USE_INTERNAL_DMAC_SHIFT
)Ë& 
SDIF_CTRL_USE_INTERNAL_DMAC_MASK
)

	)

7198 
	#SDIF_PWREN_POWER_ENABLE_MASK
 (0x1U)

	)

7199 
	#SDIF_PWREN_POWER_ENABLE_SHIFT
 (0U)

	)

7200 
	#SDIF_PWREN_POWER_ENABLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_PWREN_POWER_ENABLE_SHIFT
)Ë& 
SDIF_PWREN_POWER_ENABLE_MASK
)

	)

7203 
	#SDIF_CLKDIV_CLK_DIVIDER0_MASK
 (0xFFU)

	)

7204 
	#SDIF_CLKDIV_CLK_DIVIDER0_SHIFT
 (0U)

	)

7205 
	#SDIF_CLKDIV_CLK_DIVIDER0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CLKDIV_CLK_DIVIDER0_SHIFT
)Ë& 
SDIF_CLKDIV_CLK_DIVIDER0_MASK
)

	)

7208 
	#SDIF_CLKENA_CCLK_ENABLE_MASK
 (0x1U)

	)

7209 
	#SDIF_CLKENA_CCLK_ENABLE_SHIFT
 (0U)

	)

7210 
	#SDIF_CLKENA_CCLK_ENABLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CLKENA_CCLK_ENABLE_SHIFT
)Ë& 
SDIF_CLKENA_CCLK_ENABLE_MASK
)

	)

7211 
	#SDIF_CLKENA_CCLK_LOW_POWER_MASK
 (0x10000U)

	)

7212 
	#SDIF_CLKENA_CCLK_LOW_POWER_SHIFT
 (16U)

	)

7213 
	#SDIF_CLKENA_CCLK_LOW_POWER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CLKENA_CCLK_LOW_POWER_SHIFT
)Ë& 
SDIF_CLKENA_CCLK_LOW_POWER_MASK
)

	)

7216 
	#SDIF_TMOUT_RESPONSE_TIMEOUT_MASK
 (0xFFU)

	)

7217 
	#SDIF_TMOUT_RESPONSE_TIMEOUT_SHIFT
 (0U)

	)

7218 
	#SDIF_TMOUT_RESPONSE_TIMEOUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_TMOUT_RESPONSE_TIMEOUT_SHIFT
)Ë& 
SDIF_TMOUT_RESPONSE_TIMEOUT_MASK
)

	)

7219 
	#SDIF_TMOUT_DATA_TIMEOUT_MASK
 (0xFFFFFF00U)

	)

7220 
	#SDIF_TMOUT_DATA_TIMEOUT_SHIFT
 (8U)

	)

7221 
	#SDIF_TMOUT_DATA_TIMEOUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_TMOUT_DATA_TIMEOUT_SHIFT
)Ë& 
SDIF_TMOUT_DATA_TIMEOUT_MASK
)

	)

7224 
	#SDIF_CTYPE_CARD_WIDTH0_MASK
 (0x1U)

	)

7225 
	#SDIF_CTYPE_CARD_WIDTH0_SHIFT
 (0U)

	)

7226 
	#SDIF_CTYPE_CARD_WIDTH0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CTYPE_CARD_WIDTH0_SHIFT
)Ë& 
SDIF_CTYPE_CARD_WIDTH0_MASK
)

	)

7227 
	#SDIF_CTYPE_CARD_WIDTH1_MASK
 (0x10000U)

	)

7228 
	#SDIF_CTYPE_CARD_WIDTH1_SHIFT
 (16U)

	)

7229 
	#SDIF_CTYPE_CARD_WIDTH1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CTYPE_CARD_WIDTH1_SHIFT
)Ë& 
SDIF_CTYPE_CARD_WIDTH1_MASK
)

	)

7232 
	#SDIF_BLKSIZ_BLOCK_SIZE_MASK
 (0xFFFFU)

	)

7233 
	#SDIF_BLKSIZ_BLOCK_SIZE_SHIFT
 (0U)

	)

7234 
	#SDIF_BLKSIZ_BLOCK_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_BLKSIZ_BLOCK_SIZE_SHIFT
)Ë& 
SDIF_BLKSIZ_BLOCK_SIZE_MASK
)

	)

7237 
	#SDIF_BYTCNT_BYTE_COUNT_MASK
 (0xFFFFFFFFU)

	)

7238 
	#SDIF_BYTCNT_BYTE_COUNT_SHIFT
 (0U)

	)

7239 
	#SDIF_BYTCNT_BYTE_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_BYTCNT_BYTE_COUNT_SHIFT
)Ë& 
SDIF_BYTCNT_BYTE_COUNT_MASK
)

	)

7242 
	#SDIF_INTMASK_CDET_MASK
 (0x1U)

	)

7243 
	#SDIF_INTMASK_CDET_SHIFT
 (0U)

	)

7244 
	#SDIF_INTMASK_CDET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_INTMASK_CDET_SHIFT
)Ë& 
SDIF_INTMASK_CDET_MASK
)

	)

7245 
	#SDIF_INTMASK_RE_MASK
 (0x2U)

	)

7246 
	#SDIF_INTMASK_RE_SHIFT
 (1U)

	)

7247 
	#SDIF_INTMASK_RE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_INTMASK_RE_SHIFT
)Ë& 
SDIF_INTMASK_RE_MASK
)

	)

7248 
	#SDIF_INTMASK_CDONE_MASK
 (0x4U)

	)

7249 
	#SDIF_INTMASK_CDONE_SHIFT
 (2U)

	)

7250 
	#SDIF_INTMASK_CDONE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_INTMASK_CDONE_SHIFT
)Ë& 
SDIF_INTMASK_CDONE_MASK
)

	)

7251 
	#SDIF_INTMASK_DTO_MASK
 (0x8U)

	)

7252 
	#SDIF_INTMASK_DTO_SHIFT
 (3U)

	)

7253 
	#SDIF_INTMASK_DTO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_INTMASK_DTO_SHIFT
)Ë& 
SDIF_INTMASK_DTO_MASK
)

	)

7254 
	#SDIF_INTMASK_TXDR_MASK
 (0x10U)

	)

7255 
	#SDIF_INTMASK_TXDR_SHIFT
 (4U)

	)

7256 
	#SDIF_INTMASK_TXDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_INTMASK_TXDR_SHIFT
)Ë& 
SDIF_INTMASK_TXDR_MASK
)

	)

7257 
	#SDIF_INTMASK_RXDR_MASK
 (0x20U)

	)

7258 
	#SDIF_INTMASK_RXDR_SHIFT
 (5U)

	)

7259 
	#SDIF_INTMASK_RXDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_INTMASK_RXDR_SHIFT
)Ë& 
SDIF_INTMASK_RXDR_MASK
)

	)

7260 
	#SDIF_INTMASK_RCRC_MASK
 (0x40U)

	)

7261 
	#SDIF_INTMASK_RCRC_SHIFT
 (6U)

	)

7262 
	#SDIF_INTMASK_RCRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_INTMASK_RCRC_SHIFT
)Ë& 
SDIF_INTMASK_RCRC_MASK
)

	)

7263 
	#SDIF_INTMASK_DCRC_MASK
 (0x80U)

	)

7264 
	#SDIF_INTMASK_DCRC_SHIFT
 (7U)

	)

7265 
	#SDIF_INTMASK_DCRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_INTMASK_DCRC_SHIFT
)Ë& 
SDIF_INTMASK_DCRC_MASK
)

	)

7266 
	#SDIF_INTMASK_RTO_MASK
 (0x100U)

	)

7267 
	#SDIF_INTMASK_RTO_SHIFT
 (8U)

	)

7268 
	#SDIF_INTMASK_RTO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_INTMASK_RTO_SHIFT
)Ë& 
SDIF_INTMASK_RTO_MASK
)

	)

7269 
	#SDIF_INTMASK_DRTO_MASK
 (0x200U)

	)

7270 
	#SDIF_INTMASK_DRTO_SHIFT
 (9U)

	)

7271 
	#SDIF_INTMASK_DRTO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_INTMASK_DRTO_SHIFT
)Ë& 
SDIF_INTMASK_DRTO_MASK
)

	)

7272 
	#SDIF_INTMASK_HTO_MASK
 (0x400U)

	)

7273 
	#SDIF_INTMASK_HTO_SHIFT
 (10U)

	)

7274 
	#SDIF_INTMASK_HTO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_INTMASK_HTO_SHIFT
)Ë& 
SDIF_INTMASK_HTO_MASK
)

	)

7275 
	#SDIF_INTMASK_FRUN_MASK
 (0x800U)

	)

7276 
	#SDIF_INTMASK_FRUN_SHIFT
 (11U)

	)

7277 
	#SDIF_INTMASK_FRUN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_INTMASK_FRUN_SHIFT
)Ë& 
SDIF_INTMASK_FRUN_MASK
)

	)

7278 
	#SDIF_INTMASK_HLE_MASK
 (0x1000U)

	)

7279 
	#SDIF_INTMASK_HLE_SHIFT
 (12U)

	)

7280 
	#SDIF_INTMASK_HLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_INTMASK_HLE_SHIFT
)Ë& 
SDIF_INTMASK_HLE_MASK
)

	)

7281 
	#SDIF_INTMASK_SBE_MASK
 (0x2000U)

	)

7282 
	#SDIF_INTMASK_SBE_SHIFT
 (13U)

	)

7283 
	#SDIF_INTMASK_SBE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_INTMASK_SBE_SHIFT
)Ë& 
SDIF_INTMASK_SBE_MASK
)

	)

7284 
	#SDIF_INTMASK_ACD_MASK
 (0x4000U)

	)

7285 
	#SDIF_INTMASK_ACD_SHIFT
 (14U)

	)

7286 
	#SDIF_INTMASK_ACD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_INTMASK_ACD_SHIFT
)Ë& 
SDIF_INTMASK_ACD_MASK
)

	)

7287 
	#SDIF_INTMASK_EBE_MASK
 (0x8000U)

	)

7288 
	#SDIF_INTMASK_EBE_SHIFT
 (15U)

	)

7289 
	#SDIF_INTMASK_EBE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_INTMASK_EBE_SHIFT
)Ë& 
SDIF_INTMASK_EBE_MASK
)

	)

7290 
	#SDIF_INTMASK_SDIO_INT_MASK_MASK
 (0x10000U)

	)

7291 
	#SDIF_INTMASK_SDIO_INT_MASK_SHIFT
 (16U)

	)

7292 
	#SDIF_INTMASK_SDIO_INT_MASK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_INTMASK_SDIO_INT_MASK_SHIFT
)Ë& 
SDIF_INTMASK_SDIO_INT_MASK_MASK
)

	)

7295 
	#SDIF_CMDARG_CMD_ARG_MASK
 (0xFFFFFFFFU)

	)

7296 
	#SDIF_CMDARG_CMD_ARG_SHIFT
 (0U)

	)

7297 
	#SDIF_CMDARG_CMD_ARG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CMDARG_CMD_ARG_SHIFT
)Ë& 
SDIF_CMDARG_CMD_ARG_MASK
)

	)

7300 
	#SDIF_CMD_CMD_INDEX_MASK
 (0x3FU)

	)

7301 
	#SDIF_CMD_CMD_INDEX_SHIFT
 (0U)

	)

7302 
	#SDIF_CMD_CMD_INDEX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CMD_CMD_INDEX_SHIFT
)Ë& 
SDIF_CMD_CMD_INDEX_MASK
)

	)

7303 
	#SDIF_CMD_RESPONSE_EXPECT_MASK
 (0x40U)

	)

7304 
	#SDIF_CMD_RESPONSE_EXPECT_SHIFT
 (6U)

	)

7305 
	#SDIF_CMD_RESPONSE_EXPECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CMD_RESPONSE_EXPECT_SHIFT
)Ë& 
SDIF_CMD_RESPONSE_EXPECT_MASK
)

	)

7306 
	#SDIF_CMD_RESPONSE_LENGTH_MASK
 (0x80U)

	)

7307 
	#SDIF_CMD_RESPONSE_LENGTH_SHIFT
 (7U)

	)

7308 
	#SDIF_CMD_RESPONSE_LENGTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CMD_RESPONSE_LENGTH_SHIFT
)Ë& 
SDIF_CMD_RESPONSE_LENGTH_MASK
)

	)

7309 
	#SDIF_CMD_CHECK_RESPONSE_CRC_MASK
 (0x100U)

	)

7310 
	#SDIF_CMD_CHECK_RESPONSE_CRC_SHIFT
 (8U)

	)

7311 
	#SDIF_CMD_CHECK_RESPONSE_CRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CMD_CHECK_RESPONSE_CRC_SHIFT
)Ë& 
SDIF_CMD_CHECK_RESPONSE_CRC_MASK
)

	)

7312 
	#SDIF_CMD_DATA_EXPECTED_MASK
 (0x200U)

	)

7313 
	#SDIF_CMD_DATA_EXPECTED_SHIFT
 (9U)

	)

7314 
	#SDIF_CMD_DATA_EXPECTED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CMD_DATA_EXPECTED_SHIFT
)Ë& 
SDIF_CMD_DATA_EXPECTED_MASK
)

	)

7315 
	#SDIF_CMD_READ_WRITE_MASK
 (0x400U)

	)

7316 
	#SDIF_CMD_READ_WRITE_SHIFT
 (10U)

	)

7317 
	#SDIF_CMD_READ_WRITE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CMD_READ_WRITE_SHIFT
)Ë& 
SDIF_CMD_READ_WRITE_MASK
)

	)

7318 
	#SDIF_CMD_TRANSFER_MODE_MASK
 (0x800U)

	)

7319 
	#SDIF_CMD_TRANSFER_MODE_SHIFT
 (11U)

	)

7320 
	#SDIF_CMD_TRANSFER_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CMD_TRANSFER_MODE_SHIFT
)Ë& 
SDIF_CMD_TRANSFER_MODE_MASK
)

	)

7321 
	#SDIF_CMD_SEND_AUTO_STOP_MASK
 (0x1000U)

	)

7322 
	#SDIF_CMD_SEND_AUTO_STOP_SHIFT
 (12U)

	)

7323 
	#SDIF_CMD_SEND_AUTO_STOP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CMD_SEND_AUTO_STOP_SHIFT
)Ë& 
SDIF_CMD_SEND_AUTO_STOP_MASK
)

	)

7324 
	#SDIF_CMD_WAIT_PRVDATA_COMPLETE_MASK
 (0x2000U)

	)

7325 
	#SDIF_CMD_WAIT_PRVDATA_COMPLETE_SHIFT
 (13U)

	)

7326 
	#SDIF_CMD_WAIT_PRVDATA_COMPLETE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CMD_WAIT_PRVDATA_COMPLETE_SHIFT
)Ë& 
SDIF_CMD_WAIT_PRVDATA_COMPLETE_MASK
)

	)

7327 
	#SDIF_CMD_STOP_ABORT_CMD_MASK
 (0x4000U)

	)

7328 
	#SDIF_CMD_STOP_ABORT_CMD_SHIFT
 (14U)

	)

7329 
	#SDIF_CMD_STOP_ABORT_CMD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CMD_STOP_ABORT_CMD_SHIFT
)Ë& 
SDIF_CMD_STOP_ABORT_CMD_MASK
)

	)

7330 
	#SDIF_CMD_SEND_INITIALIZATION_MASK
 (0x8000U)

	)

7331 
	#SDIF_CMD_SEND_INITIALIZATION_SHIFT
 (15U)

	)

7332 
	#SDIF_CMD_SEND_INITIALIZATION
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CMD_SEND_INITIALIZATION_SHIFT
)Ë& 
SDIF_CMD_SEND_INITIALIZATION_MASK
)

	)

7333 
	#SDIF_CMD_UPDATE_CLOCK_REGISTERS_ONLY_MASK
 (0x200000U)

	)

7334 
	#SDIF_CMD_UPDATE_CLOCK_REGISTERS_ONLY_SHIFT
 (21U)

	)

7335 
	#SDIF_CMD_UPDATE_CLOCK_REGISTERS_ONLY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CMD_UPDATE_CLOCK_REGISTERS_ONLY_SHIFT
)Ë& 
SDIF_CMD_UPDATE_CLOCK_REGISTERS_ONLY_MASK
)

	)

7336 
	#SDIF_CMD_READ_CEATA_DEVICE_MASK
 (0x400000U)

	)

7337 
	#SDIF_CMD_READ_CEATA_DEVICE_SHIFT
 (22U)

	)

7338 
	#SDIF_CMD_READ_CEATA_DEVICE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CMD_READ_CEATA_DEVICE_SHIFT
)Ë& 
SDIF_CMD_READ_CEATA_DEVICE_MASK
)

	)

7339 
	#SDIF_CMD_CCS_EXPECTED_MASK
 (0x800000U)

	)

7340 
	#SDIF_CMD_CCS_EXPECTED_SHIFT
 (23U)

	)

7341 
	#SDIF_CMD_CCS_EXPECTED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CMD_CCS_EXPECTED_SHIFT
)Ë& 
SDIF_CMD_CCS_EXPECTED_MASK
)

	)

7342 
	#SDIF_CMD_ENABLE_BOOT_MASK
 (0x1000000U)

	)

7343 
	#SDIF_CMD_ENABLE_BOOT_SHIFT
 (24U)

	)

7344 
	#SDIF_CMD_ENABLE_BOOT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CMD_ENABLE_BOOT_SHIFT
)Ë& 
SDIF_CMD_ENABLE_BOOT_MASK
)

	)

7345 
	#SDIF_CMD_EXPECT_BOOT_ACK_MASK
 (0x2000000U)

	)

7346 
	#SDIF_CMD_EXPECT_BOOT_ACK_SHIFT
 (25U)

	)

7347 
	#SDIF_CMD_EXPECT_BOOT_ACK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CMD_EXPECT_BOOT_ACK_SHIFT
)Ë& 
SDIF_CMD_EXPECT_BOOT_ACK_MASK
)

	)

7348 
	#SDIF_CMD_DISABLE_BOOT_MASK
 (0x4000000U)

	)

7349 
	#SDIF_CMD_DISABLE_BOOT_SHIFT
 (26U)

	)

7350 
	#SDIF_CMD_DISABLE_BOOT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CMD_DISABLE_BOOT_SHIFT
)Ë& 
SDIF_CMD_DISABLE_BOOT_MASK
)

	)

7351 
	#SDIF_CMD_BOOT_MODE_MASK
 (0x8000000U)

	)

7352 
	#SDIF_CMD_BOOT_MODE_SHIFT
 (27U)

	)

7353 
	#SDIF_CMD_BOOT_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CMD_BOOT_MODE_SHIFT
)Ë& 
SDIF_CMD_BOOT_MODE_MASK
)

	)

7354 
	#SDIF_CMD_VOLT_SWITCH_MASK
 (0x10000000U)

	)

7355 
	#SDIF_CMD_VOLT_SWITCH_SHIFT
 (28U)

	)

7356 
	#SDIF_CMD_VOLT_SWITCH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CMD_VOLT_SWITCH_SHIFT
)Ë& 
SDIF_CMD_VOLT_SWITCH_MASK
)

	)

7357 
	#SDIF_CMD_USE_HOLD_REG_MASK
 (0x20000000U)

	)

7358 
	#SDIF_CMD_USE_HOLD_REG_SHIFT
 (29U)

	)

7359 
	#SDIF_CMD_USE_HOLD_REG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CMD_USE_HOLD_REG_SHIFT
)Ë& 
SDIF_CMD_USE_HOLD_REG_MASK
)

	)

7360 
	#SDIF_CMD_START_CMD_MASK
 (0x80000000U)

	)

7361 
	#SDIF_CMD_START_CMD_SHIFT
 (31U)

	)

7362 
	#SDIF_CMD_START_CMD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CMD_START_CMD_SHIFT
)Ë& 
SDIF_CMD_START_CMD_MASK
)

	)

7365 
	#SDIF_RESP_RESPONSE_MASK
 (0xFFFFFFFFU)

	)

7366 
	#SDIF_RESP_RESPONSE_SHIFT
 (0U)

	)

7367 
	#SDIF_RESP_RESPONSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_RESP_RESPONSE_SHIFT
)Ë& 
SDIF_RESP_RESPONSE_MASK
)

	)

7370 
	#SDIF_RESP_COUNT
 (4U)

	)

7373 
	#SDIF_MINTSTS_CDET_MASK
 (0x1U)

	)

7374 
	#SDIF_MINTSTS_CDET_SHIFT
 (0U)

	)

7375 
	#SDIF_MINTSTS_CDET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_MINTSTS_CDET_SHIFT
)Ë& 
SDIF_MINTSTS_CDET_MASK
)

	)

7376 
	#SDIF_MINTSTS_RE_MASK
 (0x2U)

	)

7377 
	#SDIF_MINTSTS_RE_SHIFT
 (1U)

	)

7378 
	#SDIF_MINTSTS_RE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_MINTSTS_RE_SHIFT
)Ë& 
SDIF_MINTSTS_RE_MASK
)

	)

7379 
	#SDIF_MINTSTS_CDONE_MASK
 (0x4U)

	)

7380 
	#SDIF_MINTSTS_CDONE_SHIFT
 (2U)

	)

7381 
	#SDIF_MINTSTS_CDONE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_MINTSTS_CDONE_SHIFT
)Ë& 
SDIF_MINTSTS_CDONE_MASK
)

	)

7382 
	#SDIF_MINTSTS_DTO_MASK
 (0x8U)

	)

7383 
	#SDIF_MINTSTS_DTO_SHIFT
 (3U)

	)

7384 
	#SDIF_MINTSTS_DTO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_MINTSTS_DTO_SHIFT
)Ë& 
SDIF_MINTSTS_DTO_MASK
)

	)

7385 
	#SDIF_MINTSTS_TXDR_MASK
 (0x10U)

	)

7386 
	#SDIF_MINTSTS_TXDR_SHIFT
 (4U)

	)

7387 
	#SDIF_MINTSTS_TXDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_MINTSTS_TXDR_SHIFT
)Ë& 
SDIF_MINTSTS_TXDR_MASK
)

	)

7388 
	#SDIF_MINTSTS_RXDR_MASK
 (0x20U)

	)

7389 
	#SDIF_MINTSTS_RXDR_SHIFT
 (5U)

	)

7390 
	#SDIF_MINTSTS_RXDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_MINTSTS_RXDR_SHIFT
)Ë& 
SDIF_MINTSTS_RXDR_MASK
)

	)

7391 
	#SDIF_MINTSTS_RCRC_MASK
 (0x40U)

	)

7392 
	#SDIF_MINTSTS_RCRC_SHIFT
 (6U)

	)

7393 
	#SDIF_MINTSTS_RCRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_MINTSTS_RCRC_SHIFT
)Ë& 
SDIF_MINTSTS_RCRC_MASK
)

	)

7394 
	#SDIF_MINTSTS_DCRC_MASK
 (0x80U)

	)

7395 
	#SDIF_MINTSTS_DCRC_SHIFT
 (7U)

	)

7396 
	#SDIF_MINTSTS_DCRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_MINTSTS_DCRC_SHIFT
)Ë& 
SDIF_MINTSTS_DCRC_MASK
)

	)

7397 
	#SDIF_MINTSTS_RTO_MASK
 (0x100U)

	)

7398 
	#SDIF_MINTSTS_RTO_SHIFT
 (8U)

	)

7399 
	#SDIF_MINTSTS_RTO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_MINTSTS_RTO_SHIFT
)Ë& 
SDIF_MINTSTS_RTO_MASK
)

	)

7400 
	#SDIF_MINTSTS_DRTO_MASK
 (0x200U)

	)

7401 
	#SDIF_MINTSTS_DRTO_SHIFT
 (9U)

	)

7402 
	#SDIF_MINTSTS_DRTO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_MINTSTS_DRTO_SHIFT
)Ë& 
SDIF_MINTSTS_DRTO_MASK
)

	)

7403 
	#SDIF_MINTSTS_HTO_MASK
 (0x400U)

	)

7404 
	#SDIF_MINTSTS_HTO_SHIFT
 (10U)

	)

7405 
	#SDIF_MINTSTS_HTO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_MINTSTS_HTO_SHIFT
)Ë& 
SDIF_MINTSTS_HTO_MASK
)

	)

7406 
	#SDIF_MINTSTS_FRUN_MASK
 (0x800U)

	)

7407 
	#SDIF_MINTSTS_FRUN_SHIFT
 (11U)

	)

7408 
	#SDIF_MINTSTS_FRUN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_MINTSTS_FRUN_SHIFT
)Ë& 
SDIF_MINTSTS_FRUN_MASK
)

	)

7409 
	#SDIF_MINTSTS_HLE_MASK
 (0x1000U)

	)

7410 
	#SDIF_MINTSTS_HLE_SHIFT
 (12U)

	)

7411 
	#SDIF_MINTSTS_HLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_MINTSTS_HLE_SHIFT
)Ë& 
SDIF_MINTSTS_HLE_MASK
)

	)

7412 
	#SDIF_MINTSTS_SBE_MASK
 (0x2000U)

	)

7413 
	#SDIF_MINTSTS_SBE_SHIFT
 (13U)

	)

7414 
	#SDIF_MINTSTS_SBE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_MINTSTS_SBE_SHIFT
)Ë& 
SDIF_MINTSTS_SBE_MASK
)

	)

7415 
	#SDIF_MINTSTS_ACD_MASK
 (0x4000U)

	)

7416 
	#SDIF_MINTSTS_ACD_SHIFT
 (14U)

	)

7417 
	#SDIF_MINTSTS_ACD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_MINTSTS_ACD_SHIFT
)Ë& 
SDIF_MINTSTS_ACD_MASK
)

	)

7418 
	#SDIF_MINTSTS_EBE_MASK
 (0x8000U)

	)

7419 
	#SDIF_MINTSTS_EBE_SHIFT
 (15U)

	)

7420 
	#SDIF_MINTSTS_EBE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_MINTSTS_EBE_SHIFT
)Ë& 
SDIF_MINTSTS_EBE_MASK
)

	)

7421 
	#SDIF_MINTSTS_SDIO_INTERRUPT_MASK
 (0x10000U)

	)

7422 
	#SDIF_MINTSTS_SDIO_INTERRUPT_SHIFT
 (16U)

	)

7423 
	#SDIF_MINTSTS_SDIO_INTERRUPT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_MINTSTS_SDIO_INTERRUPT_SHIFT
)Ë& 
SDIF_MINTSTS_SDIO_INTERRUPT_MASK
)

	)

7426 
	#SDIF_RINTSTS_CDET_MASK
 (0x1U)

	)

7427 
	#SDIF_RINTSTS_CDET_SHIFT
 (0U)

	)

7428 
	#SDIF_RINTSTS_CDET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_RINTSTS_CDET_SHIFT
)Ë& 
SDIF_RINTSTS_CDET_MASK
)

	)

7429 
	#SDIF_RINTSTS_RE_MASK
 (0x2U)

	)

7430 
	#SDIF_RINTSTS_RE_SHIFT
 (1U)

	)

7431 
	#SDIF_RINTSTS_RE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_RINTSTS_RE_SHIFT
)Ë& 
SDIF_RINTSTS_RE_MASK
)

	)

7432 
	#SDIF_RINTSTS_CDONE_MASK
 (0x4U)

	)

7433 
	#SDIF_RINTSTS_CDONE_SHIFT
 (2U)

	)

7434 
	#SDIF_RINTSTS_CDONE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_RINTSTS_CDONE_SHIFT
)Ë& 
SDIF_RINTSTS_CDONE_MASK
)

	)

7435 
	#SDIF_RINTSTS_DTO_MASK
 (0x8U)

	)

7436 
	#SDIF_RINTSTS_DTO_SHIFT
 (3U)

	)

7437 
	#SDIF_RINTSTS_DTO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_RINTSTS_DTO_SHIFT
)Ë& 
SDIF_RINTSTS_DTO_MASK
)

	)

7438 
	#SDIF_RINTSTS_TXDR_MASK
 (0x10U)

	)

7439 
	#SDIF_RINTSTS_TXDR_SHIFT
 (4U)

	)

7440 
	#SDIF_RINTSTS_TXDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_RINTSTS_TXDR_SHIFT
)Ë& 
SDIF_RINTSTS_TXDR_MASK
)

	)

7441 
	#SDIF_RINTSTS_RXDR_MASK
 (0x20U)

	)

7442 
	#SDIF_RINTSTS_RXDR_SHIFT
 (5U)

	)

7443 
	#SDIF_RINTSTS_RXDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_RINTSTS_RXDR_SHIFT
)Ë& 
SDIF_RINTSTS_RXDR_MASK
)

	)

7444 
	#SDIF_RINTSTS_RCRC_MASK
 (0x40U)

	)

7445 
	#SDIF_RINTSTS_RCRC_SHIFT
 (6U)

	)

7446 
	#SDIF_RINTSTS_RCRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_RINTSTS_RCRC_SHIFT
)Ë& 
SDIF_RINTSTS_RCRC_MASK
)

	)

7447 
	#SDIF_RINTSTS_DCRC_MASK
 (0x80U)

	)

7448 
	#SDIF_RINTSTS_DCRC_SHIFT
 (7U)

	)

7449 
	#SDIF_RINTSTS_DCRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_RINTSTS_DCRC_SHIFT
)Ë& 
SDIF_RINTSTS_DCRC_MASK
)

	)

7450 
	#SDIF_RINTSTS_RTO_BAR_MASK
 (0x100U)

	)

7451 
	#SDIF_RINTSTS_RTO_BAR_SHIFT
 (8U)

	)

7452 
	#SDIF_RINTSTS_RTO_BAR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_RINTSTS_RTO_BAR_SHIFT
)Ë& 
SDIF_RINTSTS_RTO_BAR_MASK
)

	)

7453 
	#SDIF_RINTSTS_DRTO_BDS_MASK
 (0x200U)

	)

7454 
	#SDIF_RINTSTS_DRTO_BDS_SHIFT
 (9U)

	)

7455 
	#SDIF_RINTSTS_DRTO_BDS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_RINTSTS_DRTO_BDS_SHIFT
)Ë& 
SDIF_RINTSTS_DRTO_BDS_MASK
)

	)

7456 
	#SDIF_RINTSTS_HTO_MASK
 (0x400U)

	)

7457 
	#SDIF_RINTSTS_HTO_SHIFT
 (10U)

	)

7458 
	#SDIF_RINTSTS_HTO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_RINTSTS_HTO_SHIFT
)Ë& 
SDIF_RINTSTS_HTO_MASK
)

	)

7459 
	#SDIF_RINTSTS_FRUN_MASK
 (0x800U)

	)

7460 
	#SDIF_RINTSTS_FRUN_SHIFT
 (11U)

	)

7461 
	#SDIF_RINTSTS_FRUN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_RINTSTS_FRUN_SHIFT
)Ë& 
SDIF_RINTSTS_FRUN_MASK
)

	)

7462 
	#SDIF_RINTSTS_HLE_MASK
 (0x1000U)

	)

7463 
	#SDIF_RINTSTS_HLE_SHIFT
 (12U)

	)

7464 
	#SDIF_RINTSTS_HLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_RINTSTS_HLE_SHIFT
)Ë& 
SDIF_RINTSTS_HLE_MASK
)

	)

7465 
	#SDIF_RINTSTS_SBE_MASK
 (0x2000U)

	)

7466 
	#SDIF_RINTSTS_SBE_SHIFT
 (13U)

	)

7467 
	#SDIF_RINTSTS_SBE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_RINTSTS_SBE_SHIFT
)Ë& 
SDIF_RINTSTS_SBE_MASK
)

	)

7468 
	#SDIF_RINTSTS_ACD_MASK
 (0x4000U)

	)

7469 
	#SDIF_RINTSTS_ACD_SHIFT
 (14U)

	)

7470 
	#SDIF_RINTSTS_ACD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_RINTSTS_ACD_SHIFT
)Ë& 
SDIF_RINTSTS_ACD_MASK
)

	)

7471 
	#SDIF_RINTSTS_EBE_MASK
 (0x8000U)

	)

7472 
	#SDIF_RINTSTS_EBE_SHIFT
 (15U)

	)

7473 
	#SDIF_RINTSTS_EBE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_RINTSTS_EBE_SHIFT
)Ë& 
SDIF_RINTSTS_EBE_MASK
)

	)

7474 
	#SDIF_RINTSTS_SDIO_INTERRUPT_MASK
 (0x10000U)

	)

7475 
	#SDIF_RINTSTS_SDIO_INTERRUPT_SHIFT
 (16U)

	)

7476 
	#SDIF_RINTSTS_SDIO_INTERRUPT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_RINTSTS_SDIO_INTERRUPT_SHIFT
)Ë& 
SDIF_RINTSTS_SDIO_INTERRUPT_MASK
)

	)

7479 
	#SDIF_STATUS_FIFO_RX_WATERMARK_MASK
 (0x1U)

	)

7480 
	#SDIF_STATUS_FIFO_RX_WATERMARK_SHIFT
 (0U)

	)

7481 
	#SDIF_STATUS_FIFO_RX_WATERMARK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_STATUS_FIFO_RX_WATERMARK_SHIFT
)Ë& 
SDIF_STATUS_FIFO_RX_WATERMARK_MASK
)

	)

7482 
	#SDIF_STATUS_FIFO_TX_WATERMARK_MASK
 (0x2U)

	)

7483 
	#SDIF_STATUS_FIFO_TX_WATERMARK_SHIFT
 (1U)

	)

7484 
	#SDIF_STATUS_FIFO_TX_WATERMARK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_STATUS_FIFO_TX_WATERMARK_SHIFT
)Ë& 
SDIF_STATUS_FIFO_TX_WATERMARK_MASK
)

	)

7485 
	#SDIF_STATUS_FIFO_EMPTY_MASK
 (0x4U)

	)

7486 
	#SDIF_STATUS_FIFO_EMPTY_SHIFT
 (2U)

	)

7487 
	#SDIF_STATUS_FIFO_EMPTY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_STATUS_FIFO_EMPTY_SHIFT
)Ë& 
SDIF_STATUS_FIFO_EMPTY_MASK
)

	)

7488 
	#SDIF_STATUS_FIFO_FULL_MASK
 (0x8U)

	)

7489 
	#SDIF_STATUS_FIFO_FULL_SHIFT
 (3U)

	)

7490 
	#SDIF_STATUS_FIFO_FULL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_STATUS_FIFO_FULL_SHIFT
)Ë& 
SDIF_STATUS_FIFO_FULL_MASK
)

	)

7491 
	#SDIF_STATUS_CMDFSMSTATES_MASK
 (0xF0U)

	)

7492 
	#SDIF_STATUS_CMDFSMSTATES_SHIFT
 (4U)

	)

7493 
	#SDIF_STATUS_CMDFSMSTATES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_STATUS_CMDFSMSTATES_SHIFT
)Ë& 
SDIF_STATUS_CMDFSMSTATES_MASK
)

	)

7494 
	#SDIF_STATUS_DATA_3_STATUS_MASK
 (0x100U)

	)

7495 
	#SDIF_STATUS_DATA_3_STATUS_SHIFT
 (8U)

	)

7496 
	#SDIF_STATUS_DATA_3_STATUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_STATUS_DATA_3_STATUS_SHIFT
)Ë& 
SDIF_STATUS_DATA_3_STATUS_MASK
)

	)

7497 
	#SDIF_STATUS_DATA_BUSY_MASK
 (0x200U)

	)

7498 
	#SDIF_STATUS_DATA_BUSY_SHIFT
 (9U)

	)

7499 
	#SDIF_STATUS_DATA_BUSY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_STATUS_DATA_BUSY_SHIFT
)Ë& 
SDIF_STATUS_DATA_BUSY_MASK
)

	)

7500 
	#SDIF_STATUS_DATA_STATE_MC_BUSY_MASK
 (0x400U)

	)

7501 
	#SDIF_STATUS_DATA_STATE_MC_BUSY_SHIFT
 (10U)

	)

7502 
	#SDIF_STATUS_DATA_STATE_MC_BUSY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_STATUS_DATA_STATE_MC_BUSY_SHIFT
)Ë& 
SDIF_STATUS_DATA_STATE_MC_BUSY_MASK
)

	)

7503 
	#SDIF_STATUS_RESPONSE_INDEX_MASK
 (0x1F800U)

	)

7504 
	#SDIF_STATUS_RESPONSE_INDEX_SHIFT
 (11U)

	)

7505 
	#SDIF_STATUS_RESPONSE_INDEX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_STATUS_RESPONSE_INDEX_SHIFT
)Ë& 
SDIF_STATUS_RESPONSE_INDEX_MASK
)

	)

7506 
	#SDIF_STATUS_FIFO_COUNT_MASK
 (0x3FFE0000U)

	)

7507 
	#SDIF_STATUS_FIFO_COUNT_SHIFT
 (17U)

	)

7508 
	#SDIF_STATUS_FIFO_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_STATUS_FIFO_COUNT_SHIFT
)Ë& 
SDIF_STATUS_FIFO_COUNT_MASK
)

	)

7509 
	#SDIF_STATUS_DMA_ACK_MASK
 (0x40000000U)

	)

7510 
	#SDIF_STATUS_DMA_ACK_SHIFT
 (30U)

	)

7511 
	#SDIF_STATUS_DMA_ACK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_STATUS_DMA_ACK_SHIFT
)Ë& 
SDIF_STATUS_DMA_ACK_MASK
)

	)

7512 
	#SDIF_STATUS_DMA_REQ_MASK
 (0x80000000U)

	)

7513 
	#SDIF_STATUS_DMA_REQ_SHIFT
 (31U)

	)

7514 
	#SDIF_STATUS_DMA_REQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_STATUS_DMA_REQ_SHIFT
)Ë& 
SDIF_STATUS_DMA_REQ_MASK
)

	)

7517 
	#SDIF_FIFOTH_TX_WMARK_MASK
 (0xFFFU)

	)

7518 
	#SDIF_FIFOTH_TX_WMARK_SHIFT
 (0U)

	)

7519 
	#SDIF_FIFOTH_TX_WMARK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_FIFOTH_TX_WMARK_SHIFT
)Ë& 
SDIF_FIFOTH_TX_WMARK_MASK
)

	)

7520 
	#SDIF_FIFOTH_RX_WMARK_MASK
 (0xFFF0000U)

	)

7521 
	#SDIF_FIFOTH_RX_WMARK_SHIFT
 (16U)

	)

7522 
	#SDIF_FIFOTH_RX_WMARK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_FIFOTH_RX_WMARK_SHIFT
)Ë& 
SDIF_FIFOTH_RX_WMARK_MASK
)

	)

7523 
	#SDIF_FIFOTH_DMA_MTS_MASK
 (0x70000000U)

	)

7524 
	#SDIF_FIFOTH_DMA_MTS_SHIFT
 (28U)

	)

7525 
	#SDIF_FIFOTH_DMA_MTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_FIFOTH_DMA_MTS_SHIFT
)Ë& 
SDIF_FIFOTH_DMA_MTS_MASK
)

	)

7528 
	#SDIF_CDETECT_CARD_DETECT_MASK
 (0x1U)

	)

7529 
	#SDIF_CDETECT_CARD_DETECT_SHIFT
 (0U)

	)

7530 
	#SDIF_CDETECT_CARD_DETECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CDETECT_CARD_DETECT_SHIFT
)Ë& 
SDIF_CDETECT_CARD_DETECT_MASK
)

	)

7533 
	#SDIF_WRTPRT_WRITE_PROTECT_MASK
 (0x1U)

	)

7534 
	#SDIF_WRTPRT_WRITE_PROTECT_SHIFT
 (0U)

	)

7535 
	#SDIF_WRTPRT_WRITE_PROTECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_WRTPRT_WRITE_PROTECT_SHIFT
)Ë& 
SDIF_WRTPRT_WRITE_PROTECT_MASK
)

	)

7538 
	#SDIF_TCBCNT_TRANS_CARD_BYTE_COUNT_MASK
 (0xFFFFFFFFU)

	)

7539 
	#SDIF_TCBCNT_TRANS_CARD_BYTE_COUNT_SHIFT
 (0U)

	)

7540 
	#SDIF_TCBCNT_TRANS_CARD_BYTE_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_TCBCNT_TRANS_CARD_BYTE_COUNT_SHIFT
)Ë& 
SDIF_TCBCNT_TRANS_CARD_BYTE_COUNT_MASK
)

	)

7543 
	#SDIF_TBBCNT_TRANS_FIFO_BYTE_COUNT_MASK
 (0xFFFFFFFFU)

	)

7544 
	#SDIF_TBBCNT_TRANS_FIFO_BYTE_COUNT_SHIFT
 (0U)

	)

7545 
	#SDIF_TBBCNT_TRANS_FIFO_BYTE_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_TBBCNT_TRANS_FIFO_BYTE_COUNT_SHIFT
)Ë& 
SDIF_TBBCNT_TRANS_FIFO_BYTE_COUNT_MASK
)

	)

7548 
	#SDIF_DEBNCE_DEBOUNCE_COUNT_MASK
 (0xFFFFFFU)

	)

7549 
	#SDIF_DEBNCE_DEBOUNCE_COUNT_SHIFT
 (0U)

	)

7550 
	#SDIF_DEBNCE_DEBOUNCE_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_DEBNCE_DEBOUNCE_COUNT_SHIFT
)Ë& 
SDIF_DEBNCE_DEBOUNCE_COUNT_MASK
)

	)

7553 
	#SDIF_RST_N_CARD_RESET_MASK
 (0x1U)

	)

7554 
	#SDIF_RST_N_CARD_RESET_SHIFT
 (0U)

	)

7555 
	#SDIF_RST_N_CARD_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_RST_N_CARD_RESET_SHIFT
)Ë& 
SDIF_RST_N_CARD_RESET_MASK
)

	)

7558 
	#SDIF_BMOD_SWR_MASK
 (0x1U)

	)

7559 
	#SDIF_BMOD_SWR_SHIFT
 (0U)

	)

7560 
	#SDIF_BMOD_SWR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_BMOD_SWR_SHIFT
)Ë& 
SDIF_BMOD_SWR_MASK
)

	)

7561 
	#SDIF_BMOD_FB_MASK
 (0x2U)

	)

7562 
	#SDIF_BMOD_FB_SHIFT
 (1U)

	)

7563 
	#SDIF_BMOD_FB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_BMOD_FB_SHIFT
)Ë& 
SDIF_BMOD_FB_MASK
)

	)

7564 
	#SDIF_BMOD_DSL_MASK
 (0x7CU)

	)

7565 
	#SDIF_BMOD_DSL_SHIFT
 (2U)

	)

7566 
	#SDIF_BMOD_DSL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_BMOD_DSL_SHIFT
)Ë& 
SDIF_BMOD_DSL_MASK
)

	)

7567 
	#SDIF_BMOD_DE_MASK
 (0x80U)

	)

7568 
	#SDIF_BMOD_DE_SHIFT
 (7U)

	)

7569 
	#SDIF_BMOD_DE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_BMOD_DE_SHIFT
)Ë& 
SDIF_BMOD_DE_MASK
)

	)

7570 
	#SDIF_BMOD_PBL_MASK
 (0x700U)

	)

7571 
	#SDIF_BMOD_PBL_SHIFT
 (8U)

	)

7572 
	#SDIF_BMOD_PBL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_BMOD_PBL_SHIFT
)Ë& 
SDIF_BMOD_PBL_MASK
)

	)

7575 
	#SDIF_PLDMND_PD_MASK
 (0xFFFFFFFFU)

	)

7576 
	#SDIF_PLDMND_PD_SHIFT
 (0U)

	)

7577 
	#SDIF_PLDMND_PD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_PLDMND_PD_SHIFT
)Ë& 
SDIF_PLDMND_PD_MASK
)

	)

7580 
	#SDIF_DBADDR_SDL_MASK
 (0xFFFFFFFFU)

	)

7581 
	#SDIF_DBADDR_SDL_SHIFT
 (0U)

	)

7582 
	#SDIF_DBADDR_SDL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_DBADDR_SDL_SHIFT
)Ë& 
SDIF_DBADDR_SDL_MASK
)

	)

7585 
	#SDIF_IDSTS_TI_MASK
 (0x1U)

	)

7586 
	#SDIF_IDSTS_TI_SHIFT
 (0U)

	)

7587 
	#SDIF_IDSTS_TI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_IDSTS_TI_SHIFT
)Ë& 
SDIF_IDSTS_TI_MASK
)

	)

7588 
	#SDIF_IDSTS_RI_MASK
 (0x2U)

	)

7589 
	#SDIF_IDSTS_RI_SHIFT
 (1U)

	)

7590 
	#SDIF_IDSTS_RI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_IDSTS_RI_SHIFT
)Ë& 
SDIF_IDSTS_RI_MASK
)

	)

7591 
	#SDIF_IDSTS_FBE_MASK
 (0x4U)

	)

7592 
	#SDIF_IDSTS_FBE_SHIFT
 (2U)

	)

7593 
	#SDIF_IDSTS_FBE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_IDSTS_FBE_SHIFT
)Ë& 
SDIF_IDSTS_FBE_MASK
)

	)

7594 
	#SDIF_IDSTS_DU_MASK
 (0x10U)

	)

7595 
	#SDIF_IDSTS_DU_SHIFT
 (4U)

	)

7596 
	#SDIF_IDSTS_DU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_IDSTS_DU_SHIFT
)Ë& 
SDIF_IDSTS_DU_MASK
)

	)

7597 
	#SDIF_IDSTS_CES_MASK
 (0x20U)

	)

7598 
	#SDIF_IDSTS_CES_SHIFT
 (5U)

	)

7599 
	#SDIF_IDSTS_CES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_IDSTS_CES_SHIFT
)Ë& 
SDIF_IDSTS_CES_MASK
)

	)

7600 
	#SDIF_IDSTS_NIS_MASK
 (0x100U)

	)

7601 
	#SDIF_IDSTS_NIS_SHIFT
 (8U)

	)

7602 
	#SDIF_IDSTS_NIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_IDSTS_NIS_SHIFT
)Ë& 
SDIF_IDSTS_NIS_MASK
)

	)

7603 
	#SDIF_IDSTS_AIS_MASK
 (0x200U)

	)

7604 
	#SDIF_IDSTS_AIS_SHIFT
 (9U)

	)

7605 
	#SDIF_IDSTS_AIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_IDSTS_AIS_SHIFT
)Ë& 
SDIF_IDSTS_AIS_MASK
)

	)

7606 
	#SDIF_IDSTS_EB_MASK
 (0x1C00U)

	)

7607 
	#SDIF_IDSTS_EB_SHIFT
 (10U)

	)

7608 
	#SDIF_IDSTS_EB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_IDSTS_EB_SHIFT
)Ë& 
SDIF_IDSTS_EB_MASK
)

	)

7609 
	#SDIF_IDSTS_FSM_MASK
 (0x1E000U)

	)

7610 
	#SDIF_IDSTS_FSM_SHIFT
 (13U)

	)

7611 
	#SDIF_IDSTS_FSM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_IDSTS_FSM_SHIFT
)Ë& 
SDIF_IDSTS_FSM_MASK
)

	)

7614 
	#SDIF_IDINTEN_TI_MASK
 (0x1U)

	)

7615 
	#SDIF_IDINTEN_TI_SHIFT
 (0U)

	)

7616 
	#SDIF_IDINTEN_TI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_IDINTEN_TI_SHIFT
)Ë& 
SDIF_IDINTEN_TI_MASK
)

	)

7617 
	#SDIF_IDINTEN_RI_MASK
 (0x2U)

	)

7618 
	#SDIF_IDINTEN_RI_SHIFT
 (1U)

	)

7619 
	#SDIF_IDINTEN_RI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_IDINTEN_RI_SHIFT
)Ë& 
SDIF_IDINTEN_RI_MASK
)

	)

7620 
	#SDIF_IDINTEN_FBE_MASK
 (0x4U)

	)

7621 
	#SDIF_IDINTEN_FBE_SHIFT
 (2U)

	)

7622 
	#SDIF_IDINTEN_FBE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_IDINTEN_FBE_SHIFT
)Ë& 
SDIF_IDINTEN_FBE_MASK
)

	)

7623 
	#SDIF_IDINTEN_DU_MASK
 (0x10U)

	)

7624 
	#SDIF_IDINTEN_DU_SHIFT
 (4U)

	)

7625 
	#SDIF_IDINTEN_DU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_IDINTEN_DU_SHIFT
)Ë& 
SDIF_IDINTEN_DU_MASK
)

	)

7626 
	#SDIF_IDINTEN_CES_MASK
 (0x20U)

	)

7627 
	#SDIF_IDINTEN_CES_SHIFT
 (5U)

	)

7628 
	#SDIF_IDINTEN_CES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_IDINTEN_CES_SHIFT
)Ë& 
SDIF_IDINTEN_CES_MASK
)

	)

7629 
	#SDIF_IDINTEN_NIS_MASK
 (0x100U)

	)

7630 
	#SDIF_IDINTEN_NIS_SHIFT
 (8U)

	)

7631 
	#SDIF_IDINTEN_NIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_IDINTEN_NIS_SHIFT
)Ë& 
SDIF_IDINTEN_NIS_MASK
)

	)

7632 
	#SDIF_IDINTEN_AIS_MASK
 (0x200U)

	)

7633 
	#SDIF_IDINTEN_AIS_SHIFT
 (9U)

	)

7634 
	#SDIF_IDINTEN_AIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_IDINTEN_AIS_SHIFT
)Ë& 
SDIF_IDINTEN_AIS_MASK
)

	)

7637 
	#SDIF_DSCADDR_HDA_MASK
 (0xFFFFFFFFU)

	)

7638 
	#SDIF_DSCADDR_HDA_SHIFT
 (0U)

	)

7639 
	#SDIF_DSCADDR_HDA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_DSCADDR_HDA_SHIFT
)Ë& 
SDIF_DSCADDR_HDA_MASK
)

	)

7642 
	#SDIF_BUFADDR_HBA_MASK
 (0xFFFFFFFFU)

	)

7643 
	#SDIF_BUFADDR_HBA_SHIFT
 (0U)

	)

7644 
	#SDIF_BUFADDR_HBA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_BUFADDR_HBA_SHIFT
)Ë& 
SDIF_BUFADDR_HBA_MASK
)

	)

7647 
	#SDIF_CARDTHRCTL_CARDRDTHREN_MASK
 (0x1U)

	)

7648 
	#SDIF_CARDTHRCTL_CARDRDTHREN_SHIFT
 (0U)

	)

7649 
	#SDIF_CARDTHRCTL_CARDRDTHREN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CARDTHRCTL_CARDRDTHREN_SHIFT
)Ë& 
SDIF_CARDTHRCTL_CARDRDTHREN_MASK
)

	)

7650 
	#SDIF_CARDTHRCTL_BSYCLRINTEN_MASK
 (0x2U)

	)

7651 
	#SDIF_CARDTHRCTL_BSYCLRINTEN_SHIFT
 (1U)

	)

7652 
	#SDIF_CARDTHRCTL_BSYCLRINTEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CARDTHRCTL_BSYCLRINTEN_SHIFT
)Ë& 
SDIF_CARDTHRCTL_BSYCLRINTEN_MASK
)

	)

7653 
	#SDIF_CARDTHRCTL_CARDTHRESHOLD_MASK
 (0xFF0000U)

	)

7654 
	#SDIF_CARDTHRCTL_CARDTHRESHOLD_SHIFT
 (16U)

	)

7655 
	#SDIF_CARDTHRCTL_CARDTHRESHOLD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_CARDTHRCTL_CARDTHRESHOLD_SHIFT
)Ë& 
SDIF_CARDTHRCTL_CARDTHRESHOLD_MASK
)

	)

7658 
	#SDIF_BACKENDPWR_BACKENDPWR_MASK
 (0x1U)

	)

7659 
	#SDIF_BACKENDPWR_BACKENDPWR_SHIFT
 (0U)

	)

7660 
	#SDIF_BACKENDPWR_BACKENDPWR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_BACKENDPWR_BACKENDPWR_SHIFT
)Ë& 
SDIF_BACKENDPWR_BACKENDPWR_MASK
)

	)

7663 
	#SDIF_FIFO_DATA_MASK
 (0xFFFFFFFFU)

	)

7664 
	#SDIF_FIFO_DATA_SHIFT
 (0U)

	)

7665 
	#SDIF_FIFO_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SDIF_FIFO_DATA_SHIFT
)Ë& 
SDIF_FIFO_DATA_MASK
)

	)

7668 
	#SDIF_FIFO_COUNT
 (64U)

	)

7678 
	#SDIF_BASE
 (0x4009B000u)

	)

7680 
	#SDIF
 ((
SDIF_Ty≥
 *)
SDIF_BASE
)

	)

7682 
	#SDIF_BASE_ADDRS
 { 
SDIF_BASE
 }

	)

7684 
	#SDIF_BASE_PTRS
 { 
SDIF
 }

	)

7686 
	#SDIF_IRQS
 { 
SDIO_IRQn
 }

	)

7705 
__IO
 
uöt32_t
 
	mDLL
;

7706 
__I
 
uöt32_t
 
	mRBR
;

7707 
__O
 
uöt32_t
 
	mTHR
;

7710 
__IO
 
uöt32_t
 
	mDLM
;

7711 
__IO
 
uöt32_t
 
	mIER
;

7714 
__O
 
uöt32_t
 
	mFCR
;

7715 
__I
 
uöt32_t
 
	mIIR
;

7717 
__IO
 
uöt32_t
 
	mLCR
;

7718 
uöt8_t
 
	mRESERVED_0
[4];

7719 
__I
 
uöt32_t
 
	mLSR
;

7720 
uöt8_t
 
	mRESERVED_1
[4];

7721 
__IO
 
uöt32_t
 
	mSCR
;

7722 
uöt8_t
 
	mRESERVED_2
[12];

7723 
__IO
 
uöt32_t
 
	mOSR
;

7724 
uöt8_t
 
	mRESERVED_3
[24];

7725 
__IO
 
uöt32_t
 
	mSCICTRL
;

7726 } 
	tSMARTCARD_Ty≥
;

7738 
	#SMARTCARD_DLL_DLLSB_MASK
 (0xFFU)

	)

7739 
	#SMARTCARD_DLL_DLLSB_SHIFT
 (0U)

	)

7740 
	#SMARTCARD_DLL_DLLSB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_DLL_DLLSB_SHIFT
)Ë& 
SMARTCARD_DLL_DLLSB_MASK
)

	)

7743 
	#SMARTCARD_RBR_RBR_MASK
 (0xFFU)

	)

7744 
	#SMARTCARD_RBR_RBR_SHIFT
 (0U)

	)

7745 
	#SMARTCARD_RBR_RBR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_RBR_RBR_SHIFT
)Ë& 
SMARTCARD_RBR_RBR_MASK
)

	)

7748 
	#SMARTCARD_THR_THR_MASK
 (0xFFU)

	)

7749 
	#SMARTCARD_THR_THR_SHIFT
 (0U)

	)

7750 
	#SMARTCARD_THR_THR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_THR_THR_SHIFT
)Ë& 
SMARTCARD_THR_THR_MASK
)

	)

7753 
	#SMARTCARD_DLM_DLMSB_MASK
 (0xFFU)

	)

7754 
	#SMARTCARD_DLM_DLMSB_SHIFT
 (0U)

	)

7755 
	#SMARTCARD_DLM_DLMSB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_DLM_DLMSB_SHIFT
)Ë& 
SMARTCARD_DLM_DLMSB_MASK
)

	)

7758 
	#SMARTCARD_IER_RBRIE_MASK
 (0x1U)

	)

7759 
	#SMARTCARD_IER_RBRIE_SHIFT
 (0U)

	)

7760 
	#SMARTCARD_IER_RBRIE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_IER_RBRIE_SHIFT
)Ë& 
SMARTCARD_IER_RBRIE_MASK
)

	)

7761 
	#SMARTCARD_IER_THREIE_MASK
 (0x2U)

	)

7762 
	#SMARTCARD_IER_THREIE_SHIFT
 (1U)

	)

7763 
	#SMARTCARD_IER_THREIE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_IER_THREIE_SHIFT
)Ë& 
SMARTCARD_IER_THREIE_MASK
)

	)

7764 
	#SMARTCARD_IER_RXIE_MASK
 (0x4U)

	)

7765 
	#SMARTCARD_IER_RXIE_SHIFT
 (2U)

	)

7766 
	#SMARTCARD_IER_RXIE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_IER_RXIE_SHIFT
)Ë& 
SMARTCARD_IER_RXIE_MASK
)

	)

7769 
	#SMARTCARD_FCR_FIFOEN_MASK
 (0x1U)

	)

7770 
	#SMARTCARD_FCR_FIFOEN_SHIFT
 (0U)

	)

7771 
	#SMARTCARD_FCR_FIFOEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_FCR_FIFOEN_SHIFT
)Ë& 
SMARTCARD_FCR_FIFOEN_MASK
)

	)

7772 
	#SMARTCARD_FCR_RXFIFORES_MASK
 (0x2U)

	)

7773 
	#SMARTCARD_FCR_RXFIFORES_SHIFT
 (1U)

	)

7774 
	#SMARTCARD_FCR_RXFIFORES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_FCR_RXFIFORES_SHIFT
)Ë& 
SMARTCARD_FCR_RXFIFORES_MASK
)

	)

7775 
	#SMARTCARD_FCR_TXFIFORES_MASK
 (0x4U)

	)

7776 
	#SMARTCARD_FCR_TXFIFORES_SHIFT
 (2U)

	)

7777 
	#SMARTCARD_FCR_TXFIFORES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_FCR_TXFIFORES_SHIFT
)Ë& 
SMARTCARD_FCR_TXFIFORES_MASK
)

	)

7778 
	#SMARTCARD_FCR_DMAMODE_MASK
 (0x8U)

	)

7779 
	#SMARTCARD_FCR_DMAMODE_SHIFT
 (3U)

	)

7780 
	#SMARTCARD_FCR_DMAMODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_FCR_DMAMODE_SHIFT
)Ë& 
SMARTCARD_FCR_DMAMODE_MASK
)

	)

7781 
	#SMARTCARD_FCR_RXTRIGLVL_MASK
 (0xC0U)

	)

7782 
	#SMARTCARD_FCR_RXTRIGLVL_SHIFT
 (6U)

	)

7783 
	#SMARTCARD_FCR_RXTRIGLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_FCR_RXTRIGLVL_SHIFT
)Ë& 
SMARTCARD_FCR_RXTRIGLVL_MASK
)

	)

7786 
	#SMARTCARD_IIR_INTSTATUS_MASK
 (0x1U)

	)

7787 
	#SMARTCARD_IIR_INTSTATUS_SHIFT
 (0U)

	)

7788 
	#SMARTCARD_IIR_INTSTATUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_IIR_INTSTATUS_SHIFT
)Ë& 
SMARTCARD_IIR_INTSTATUS_MASK
)

	)

7789 
	#SMARTCARD_IIR_INTID_MASK
 (0xEU)

	)

7790 
	#SMARTCARD_IIR_INTID_SHIFT
 (1U)

	)

7791 
	#SMARTCARD_IIR_INTID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_IIR_INTID_SHIFT
)Ë& 
SMARTCARD_IIR_INTID_MASK
)

	)

7792 
	#SMARTCARD_IIR_FIFOENABLE_MASK
 (0xC0U)

	)

7793 
	#SMARTCARD_IIR_FIFOENABLE_SHIFT
 (6U)

	)

7794 
	#SMARTCARD_IIR_FIFOENABLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_IIR_FIFOENABLE_SHIFT
)Ë& 
SMARTCARD_IIR_FIFOENABLE_MASK
)

	)

7797 
	#SMARTCARD_LCR_WLS_MASK
 (0x3U)

	)

7798 
	#SMARTCARD_LCR_WLS_SHIFT
 (0U)

	)

7799 
	#SMARTCARD_LCR_WLS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_LCR_WLS_SHIFT
)Ë& 
SMARTCARD_LCR_WLS_MASK
)

	)

7800 
	#SMARTCARD_LCR_SBS_MASK
 (0x4U)

	)

7801 
	#SMARTCARD_LCR_SBS_SHIFT
 (2U)

	)

7802 
	#SMARTCARD_LCR_SBS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_LCR_SBS_SHIFT
)Ë& 
SMARTCARD_LCR_SBS_MASK
)

	)

7803 
	#SMARTCARD_LCR_PE_MASK
 (0x8U)

	)

7804 
	#SMARTCARD_LCR_PE_SHIFT
 (3U)

	)

7805 
	#SMARTCARD_LCR_PE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_LCR_PE_SHIFT
)Ë& 
SMARTCARD_LCR_PE_MASK
)

	)

7806 
	#SMARTCARD_LCR_PS_MASK
 (0x30U)

	)

7807 
	#SMARTCARD_LCR_PS_SHIFT
 (4U)

	)

7808 
	#SMARTCARD_LCR_PS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_LCR_PS_SHIFT
)Ë& 
SMARTCARD_LCR_PS_MASK
)

	)

7809 
	#SMARTCARD_LCR_DLAB_MASK
 (0x80U)

	)

7810 
	#SMARTCARD_LCR_DLAB_SHIFT
 (7U)

	)

7811 
	#SMARTCARD_LCR_DLAB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_LCR_DLAB_SHIFT
)Ë& 
SMARTCARD_LCR_DLAB_MASK
)

	)

7814 
	#SMARTCARD_LSR_RDR_MASK
 (0x1U)

	)

7815 
	#SMARTCARD_LSR_RDR_SHIFT
 (0U)

	)

7816 
	#SMARTCARD_LSR_RDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_LSR_RDR_SHIFT
)Ë& 
SMARTCARD_LSR_RDR_MASK
)

	)

7817 
	#SMARTCARD_LSR_OE_MASK
 (0x2U)

	)

7818 
	#SMARTCARD_LSR_OE_SHIFT
 (1U)

	)

7819 
	#SMARTCARD_LSR_OE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_LSR_OE_SHIFT
)Ë& 
SMARTCARD_LSR_OE_MASK
)

	)

7820 
	#SMARTCARD_LSR_PE_MASK
 (0x4U)

	)

7821 
	#SMARTCARD_LSR_PE_SHIFT
 (2U)

	)

7822 
	#SMARTCARD_LSR_PE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_LSR_PE_SHIFT
)Ë& 
SMARTCARD_LSR_PE_MASK
)

	)

7823 
	#SMARTCARD_LSR_FE_MASK
 (0x8U)

	)

7824 
	#SMARTCARD_LSR_FE_SHIFT
 (3U)

	)

7825 
	#SMARTCARD_LSR_FE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_LSR_FE_SHIFT
)Ë& 
SMARTCARD_LSR_FE_MASK
)

	)

7826 
	#SMARTCARD_LSR_THRE_MASK
 (0x20U)

	)

7827 
	#SMARTCARD_LSR_THRE_SHIFT
 (5U)

	)

7828 
	#SMARTCARD_LSR_THRE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_LSR_THRE_SHIFT
)Ë& 
SMARTCARD_LSR_THRE_MASK
)

	)

7829 
	#SMARTCARD_LSR_TEMT_MASK
 (0x40U)

	)

7830 
	#SMARTCARD_LSR_TEMT_SHIFT
 (6U)

	)

7831 
	#SMARTCARD_LSR_TEMT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_LSR_TEMT_SHIFT
)Ë& 
SMARTCARD_LSR_TEMT_MASK
)

	)

7832 
	#SMARTCARD_LSR_RXFE_MASK
 (0x80U)

	)

7833 
	#SMARTCARD_LSR_RXFE_SHIFT
 (7U)

	)

7834 
	#SMARTCARD_LSR_RXFE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_LSR_RXFE_SHIFT
)Ë& 
SMARTCARD_LSR_RXFE_MASK
)

	)

7837 
	#SMARTCARD_SCR_PAD_MASK
 (0xFFU)

	)

7838 
	#SMARTCARD_SCR_PAD_SHIFT
 (0U)

	)

7839 
	#SMARTCARD_SCR_PAD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_SCR_PAD_SHIFT
)Ë& 
SMARTCARD_SCR_PAD_MASK
)

	)

7842 
	#SMARTCARD_OSR_OSFRAC_MASK
 (0xEU)

	)

7843 
	#SMARTCARD_OSR_OSFRAC_SHIFT
 (1U)

	)

7844 
	#SMARTCARD_OSR_OSFRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_OSR_OSFRAC_SHIFT
)Ë& 
SMARTCARD_OSR_OSFRAC_MASK
)

	)

7845 
	#SMARTCARD_OSR_OSINT_MASK
 (0xF0U)

	)

7846 
	#SMARTCARD_OSR_OSINT_SHIFT
 (4U)

	)

7847 
	#SMARTCARD_OSR_OSINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_OSR_OSINT_SHIFT
)Ë& 
SMARTCARD_OSR_OSINT_MASK
)

	)

7848 
	#SMARTCARD_OSR_FDINT_MASK
 (0x7F00U)

	)

7849 
	#SMARTCARD_OSR_FDINT_SHIFT
 (8U)

	)

7850 
	#SMARTCARD_OSR_FDINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_OSR_FDINT_SHIFT
)Ë& 
SMARTCARD_OSR_FDINT_MASK
)

	)

7853 
	#SMARTCARD_SCICTRL_SCIEN_MASK
 (0x1U)

	)

7854 
	#SMARTCARD_SCICTRL_SCIEN_SHIFT
 (0U)

	)

7855 
	#SMARTCARD_SCICTRL_SCIEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_SCICTRL_SCIEN_SHIFT
)Ë& 
SMARTCARD_SCICTRL_SCIEN_MASK
)

	)

7856 
	#SMARTCARD_SCICTRL_NACKDIS_MASK
 (0x2U)

	)

7857 
	#SMARTCARD_SCICTRL_NACKDIS_SHIFT
 (1U)

	)

7858 
	#SMARTCARD_SCICTRL_NACKDIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_SCICTRL_NACKDIS_SHIFT
)Ë& 
SMARTCARD_SCICTRL_NACKDIS_MASK
)

	)

7859 
	#SMARTCARD_SCICTRL_PROTSEL_MASK
 (0x4U)

	)

7860 
	#SMARTCARD_SCICTRL_PROTSEL_SHIFT
 (2U)

	)

7861 
	#SMARTCARD_SCICTRL_PROTSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_SCICTRL_PROTSEL_SHIFT
)Ë& 
SMARTCARD_SCICTRL_PROTSEL_MASK
)

	)

7862 
	#SMARTCARD_SCICTRL_TXRETRY_MASK
 (0xE0U)

	)

7863 
	#SMARTCARD_SCICTRL_TXRETRY_SHIFT
 (5U)

	)

7864 
	#SMARTCARD_SCICTRL_TXRETRY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_SCICTRL_TXRETRY_SHIFT
)Ë& 
SMARTCARD_SCICTRL_TXRETRY_MASK
)

	)

7865 
	#SMARTCARD_SCICTRL_GUARDTIME_MASK
 (0xFF00U)

	)

7866 
	#SMARTCARD_SCICTRL_GUARDTIME_SHIFT
 (8U)

	)

7867 
	#SMARTCARD_SCICTRL_GUARDTIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SMARTCARD_SCICTRL_GUARDTIME_SHIFT
)Ë& 
SMARTCARD_SCICTRL_GUARDTIME_MASK
)

	)

7877 
	#SMARTCARD0_BASE
 (0x40036000u)

	)

7879 
	#SMARTCARD0
 ((
SMARTCARD_Ty≥
 *)
SMARTCARD0_BASE
)

	)

7881 
	#SMARTCARD1_BASE
 (0x40037000u)

	)

7883 
	#SMARTCARD1
 ((
SMARTCARD_Ty≥
 *)
SMARTCARD1_BASE
)

	)

7885 
	#SMARTCARD_BASE_ADDRS
 { 
SMARTCARD0_BASE
, 
SMARTCARD1_BASE
 }

	)

7887 
	#SMARTCARD_BASE_PTRS
 { 
SMARTCARD0
, 
SMARTCARD1
 }

	)

7889 
	#SMARTCARD_IRQS
 { 
SMARTCARD0_IRQn
, 
SMARTCARD1_IRQn
 }

	)

7907 
uöt8_t
 
	mRESERVED_0
[1024];

7908 
__IO
 
uöt32_t
 
	mCFG
;

7909 
__IO
 
uöt32_t
 
	mDLY
;

7910 
__IO
 
uöt32_t
 
	mSTAT
;

7911 
__IO
 
uöt32_t
 
	mINTENSET
;

7912 
__O
 
uöt32_t
 
	mINTENCLR
;

7913 
uöt8_t
 
	mRESERVED_1
[16];

7914 
__IO
 
uöt32_t
 
	mDIV
;

7915 
__I
 
uöt32_t
 
	mINTSTAT
;

7916 
uöt8_t
 
	mRESERVED_2
[2516];

7917 
__IO
 
uöt32_t
 
	mFIFOCFG
;

7918 
__IO
 
uöt32_t
 
	mFIFOSTAT
;

7919 
__IO
 
uöt32_t
 
	mFIFOTRIG
;

7920 
uöt8_t
 
	mRESERVED_3
[4];

7921 
__IO
 
uöt32_t
 
	mFIFOINTENSET
;

7922 
__IO
 
uöt32_t
 
	mFIFOINTENCLR
;

7923 
__I
 
uöt32_t
 
	mFIFOINTSTAT
;

7924 
uöt8_t
 
	mRESERVED_4
[4];

7925 
__IO
 
uöt32_t
 
	mFIFOWR
;

7926 
uöt8_t
 
	mRESERVED_5
[12];

7927 
__I
 
uöt32_t
 
	mFIFORD
;

7928 
uöt8_t
 
	mRESERVED_6
[12];

7929 
__I
 
uöt32_t
 
	mFIFORDNOPOP
;

7930 
uöt8_t
 
	mRESERVED_7
[440];

7931 
__I
 
uöt32_t
 
	mID
;

7932 } 
	tSPI_Ty≥
;

7944 
	#SPI_CFG_ENABLE_MASK
 (0x1U)

	)

7945 
	#SPI_CFG_ENABLE_SHIFT
 (0U)

	)

7946 
	#SPI_CFG_ENABLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_CFG_ENABLE_SHIFT
)Ë& 
SPI_CFG_ENABLE_MASK
)

	)

7947 
	#SPI_CFG_MASTER_MASK
 (0x4U)

	)

7948 
	#SPI_CFG_MASTER_SHIFT
 (2U)

	)

7949 
	#SPI_CFG_MASTER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_CFG_MASTER_SHIFT
)Ë& 
SPI_CFG_MASTER_MASK
)

	)

7950 
	#SPI_CFG_LSBF_MASK
 (0x8U)

	)

7951 
	#SPI_CFG_LSBF_SHIFT
 (3U)

	)

7952 
	#SPI_CFG_LSBF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_CFG_LSBF_SHIFT
)Ë& 
SPI_CFG_LSBF_MASK
)

	)

7953 
	#SPI_CFG_CPHA_MASK
 (0x10U)

	)

7954 
	#SPI_CFG_CPHA_SHIFT
 (4U)

	)

7955 
	#SPI_CFG_CPHA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_CFG_CPHA_SHIFT
)Ë& 
SPI_CFG_CPHA_MASK
)

	)

7956 
	#SPI_CFG_CPOL_MASK
 (0x20U)

	)

7957 
	#SPI_CFG_CPOL_SHIFT
 (5U)

	)

7958 
	#SPI_CFG_CPOL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_CFG_CPOL_SHIFT
)Ë& 
SPI_CFG_CPOL_MASK
)

	)

7959 
	#SPI_CFG_LOOP_MASK
 (0x80U)

	)

7960 
	#SPI_CFG_LOOP_SHIFT
 (7U)

	)

7961 
	#SPI_CFG_LOOP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_CFG_LOOP_SHIFT
)Ë& 
SPI_CFG_LOOP_MASK
)

	)

7962 
	#SPI_CFG_SPOL0_MASK
 (0x100U)

	)

7963 
	#SPI_CFG_SPOL0_SHIFT
 (8U)

	)

7964 
	#SPI_CFG_SPOL0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_CFG_SPOL0_SHIFT
)Ë& 
SPI_CFG_SPOL0_MASK
)

	)

7965 
	#SPI_CFG_SPOL1_MASK
 (0x200U)

	)

7966 
	#SPI_CFG_SPOL1_SHIFT
 (9U)

	)

7967 
	#SPI_CFG_SPOL1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_CFG_SPOL1_SHIFT
)Ë& 
SPI_CFG_SPOL1_MASK
)

	)

7968 
	#SPI_CFG_SPOL2_MASK
 (0x400U)

	)

7969 
	#SPI_CFG_SPOL2_SHIFT
 (10U)

	)

7970 
	#SPI_CFG_SPOL2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_CFG_SPOL2_SHIFT
)Ë& 
SPI_CFG_SPOL2_MASK
)

	)

7971 
	#SPI_CFG_SPOL3_MASK
 (0x800U)

	)

7972 
	#SPI_CFG_SPOL3_SHIFT
 (11U)

	)

7973 
	#SPI_CFG_SPOL3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_CFG_SPOL3_SHIFT
)Ë& 
SPI_CFG_SPOL3_MASK
)

	)

7976 
	#SPI_DLY_PRE_DELAY_MASK
 (0xFU)

	)

7977 
	#SPI_DLY_PRE_DELAY_SHIFT
 (0U)

	)

7978 
	#SPI_DLY_PRE_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_DLY_PRE_DELAY_SHIFT
)Ë& 
SPI_DLY_PRE_DELAY_MASK
)

	)

7979 
	#SPI_DLY_POST_DELAY_MASK
 (0xF0U)

	)

7980 
	#SPI_DLY_POST_DELAY_SHIFT
 (4U)

	)

7981 
	#SPI_DLY_POST_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_DLY_POST_DELAY_SHIFT
)Ë& 
SPI_DLY_POST_DELAY_MASK
)

	)

7982 
	#SPI_DLY_FRAME_DELAY_MASK
 (0xF00U)

	)

7983 
	#SPI_DLY_FRAME_DELAY_SHIFT
 (8U)

	)

7984 
	#SPI_DLY_FRAME_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_DLY_FRAME_DELAY_SHIFT
)Ë& 
SPI_DLY_FRAME_DELAY_MASK
)

	)

7985 
	#SPI_DLY_TRANSFER_DELAY_MASK
 (0xF000U)

	)

7986 
	#SPI_DLY_TRANSFER_DELAY_SHIFT
 (12U)

	)

7987 
	#SPI_DLY_TRANSFER_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_DLY_TRANSFER_DELAY_SHIFT
)Ë& 
SPI_DLY_TRANSFER_DELAY_MASK
)

	)

7990 
	#SPI_STAT_SSA_MASK
 (0x10U)

	)

7991 
	#SPI_STAT_SSA_SHIFT
 (4U)

	)

7992 
	#SPI_STAT_SSA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_STAT_SSA_SHIFT
)Ë& 
SPI_STAT_SSA_MASK
)

	)

7993 
	#SPI_STAT_SSD_MASK
 (0x20U)

	)

7994 
	#SPI_STAT_SSD_SHIFT
 (5U)

	)

7995 
	#SPI_STAT_SSD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_STAT_SSD_SHIFT
)Ë& 
SPI_STAT_SSD_MASK
)

	)

7996 
	#SPI_STAT_STALLED_MASK
 (0x40U)

	)

7997 
	#SPI_STAT_STALLED_SHIFT
 (6U)

	)

7998 
	#SPI_STAT_STALLED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_STAT_STALLED_SHIFT
)Ë& 
SPI_STAT_STALLED_MASK
)

	)

7999 
	#SPI_STAT_ENDTRANSFER_MASK
 (0x80U)

	)

8000 
	#SPI_STAT_ENDTRANSFER_SHIFT
 (7U)

	)

8001 
	#SPI_STAT_ENDTRANSFER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_STAT_ENDTRANSFER_SHIFT
)Ë& 
SPI_STAT_ENDTRANSFER_MASK
)

	)

8002 
	#SPI_STAT_MSTIDLE_MASK
 (0x100U)

	)

8003 
	#SPI_STAT_MSTIDLE_SHIFT
 (8U)

	)

8004 
	#SPI_STAT_MSTIDLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_STAT_MSTIDLE_SHIFT
)Ë& 
SPI_STAT_MSTIDLE_MASK
)

	)

8007 
	#SPI_INTENSET_SSAEN_MASK
 (0x10U)

	)

8008 
	#SPI_INTENSET_SSAEN_SHIFT
 (4U)

	)

8009 
	#SPI_INTENSET_SSAEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_INTENSET_SSAEN_SHIFT
)Ë& 
SPI_INTENSET_SSAEN_MASK
)

	)

8010 
	#SPI_INTENSET_SSDEN_MASK
 (0x20U)

	)

8011 
	#SPI_INTENSET_SSDEN_SHIFT
 (5U)

	)

8012 
	#SPI_INTENSET_SSDEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_INTENSET_SSDEN_SHIFT
)Ë& 
SPI_INTENSET_SSDEN_MASK
)

	)

8013 
	#SPI_INTENSET_MSTIDLEEN_MASK
 (0x100U)

	)

8014 
	#SPI_INTENSET_MSTIDLEEN_SHIFT
 (8U)

	)

8015 
	#SPI_INTENSET_MSTIDLEEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_INTENSET_MSTIDLEEN_SHIFT
)Ë& 
SPI_INTENSET_MSTIDLEEN_MASK
)

	)

8018 
	#SPI_INTENCLR_SSAEN_MASK
 (0x10U)

	)

8019 
	#SPI_INTENCLR_SSAEN_SHIFT
 (4U)

	)

8020 
	#SPI_INTENCLR_SSAEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_INTENCLR_SSAEN_SHIFT
)Ë& 
SPI_INTENCLR_SSAEN_MASK
)

	)

8021 
	#SPI_INTENCLR_SSDEN_MASK
 (0x20U)

	)

8022 
	#SPI_INTENCLR_SSDEN_SHIFT
 (5U)

	)

8023 
	#SPI_INTENCLR_SSDEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_INTENCLR_SSDEN_SHIFT
)Ë& 
SPI_INTENCLR_SSDEN_MASK
)

	)

8024 
	#SPI_INTENCLR_MSTIDLE_MASK
 (0x100U)

	)

8025 
	#SPI_INTENCLR_MSTIDLE_SHIFT
 (8U)

	)

8026 
	#SPI_INTENCLR_MSTIDLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_INTENCLR_MSTIDLE_SHIFT
)Ë& 
SPI_INTENCLR_MSTIDLE_MASK
)

	)

8029 
	#SPI_DIV_DIVVAL_MASK
 (0xFFFFU)

	)

8030 
	#SPI_DIV_DIVVAL_SHIFT
 (0U)

	)

8031 
	#SPI_DIV_DIVVAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_DIV_DIVVAL_SHIFT
)Ë& 
SPI_DIV_DIVVAL_MASK
)

	)

8034 
	#SPI_INTSTAT_SSA_MASK
 (0x10U)

	)

8035 
	#SPI_INTSTAT_SSA_SHIFT
 (4U)

	)

8036 
	#SPI_INTSTAT_SSA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_INTSTAT_SSA_SHIFT
)Ë& 
SPI_INTSTAT_SSA_MASK
)

	)

8037 
	#SPI_INTSTAT_SSD_MASK
 (0x20U)

	)

8038 
	#SPI_INTSTAT_SSD_SHIFT
 (5U)

	)

8039 
	#SPI_INTSTAT_SSD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_INTSTAT_SSD_SHIFT
)Ë& 
SPI_INTSTAT_SSD_MASK
)

	)

8040 
	#SPI_INTSTAT_MSTIDLE_MASK
 (0x100U)

	)

8041 
	#SPI_INTSTAT_MSTIDLE_SHIFT
 (8U)

	)

8042 
	#SPI_INTSTAT_MSTIDLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_INTSTAT_MSTIDLE_SHIFT
)Ë& 
SPI_INTSTAT_MSTIDLE_MASK
)

	)

8045 
	#SPI_FIFOCFG_ENABLETX_MASK
 (0x1U)

	)

8046 
	#SPI_FIFOCFG_ENABLETX_SHIFT
 (0U)

	)

8047 
	#SPI_FIFOCFG_ENABLETX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOCFG_ENABLETX_SHIFT
)Ë& 
SPI_FIFOCFG_ENABLETX_MASK
)

	)

8048 
	#SPI_FIFOCFG_ENABLERX_MASK
 (0x2U)

	)

8049 
	#SPI_FIFOCFG_ENABLERX_SHIFT
 (1U)

	)

8050 
	#SPI_FIFOCFG_ENABLERX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOCFG_ENABLERX_SHIFT
)Ë& 
SPI_FIFOCFG_ENABLERX_MASK
)

	)

8051 
	#SPI_FIFOCFG_SIZE_MASK
 (0x30U)

	)

8052 
	#SPI_FIFOCFG_SIZE_SHIFT
 (4U)

	)

8053 
	#SPI_FIFOCFG_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOCFG_SIZE_SHIFT
)Ë& 
SPI_FIFOCFG_SIZE_MASK
)

	)

8054 
	#SPI_FIFOCFG_DMATX_MASK
 (0x1000U)

	)

8055 
	#SPI_FIFOCFG_DMATX_SHIFT
 (12U)

	)

8056 
	#SPI_FIFOCFG_DMATX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOCFG_DMATX_SHIFT
)Ë& 
SPI_FIFOCFG_DMATX_MASK
)

	)

8057 
	#SPI_FIFOCFG_DMARX_MASK
 (0x2000U)

	)

8058 
	#SPI_FIFOCFG_DMARX_SHIFT
 (13U)

	)

8059 
	#SPI_FIFOCFG_DMARX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOCFG_DMARX_SHIFT
)Ë& 
SPI_FIFOCFG_DMARX_MASK
)

	)

8060 
	#SPI_FIFOCFG_WAKETX_MASK
 (0x4000U)

	)

8061 
	#SPI_FIFOCFG_WAKETX_SHIFT
 (14U)

	)

8062 
	#SPI_FIFOCFG_WAKETX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOCFG_WAKETX_SHIFT
)Ë& 
SPI_FIFOCFG_WAKETX_MASK
)

	)

8063 
	#SPI_FIFOCFG_WAKERX_MASK
 (0x8000U)

	)

8064 
	#SPI_FIFOCFG_WAKERX_SHIFT
 (15U)

	)

8065 
	#SPI_FIFOCFG_WAKERX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOCFG_WAKERX_SHIFT
)Ë& 
SPI_FIFOCFG_WAKERX_MASK
)

	)

8066 
	#SPI_FIFOCFG_EMPTYTX_MASK
 (0x10000U)

	)

8067 
	#SPI_FIFOCFG_EMPTYTX_SHIFT
 (16U)

	)

8068 
	#SPI_FIFOCFG_EMPTYTX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOCFG_EMPTYTX_SHIFT
)Ë& 
SPI_FIFOCFG_EMPTYTX_MASK
)

	)

8069 
	#SPI_FIFOCFG_EMPTYRX_MASK
 (0x20000U)

	)

8070 
	#SPI_FIFOCFG_EMPTYRX_SHIFT
 (17U)

	)

8071 
	#SPI_FIFOCFG_EMPTYRX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOCFG_EMPTYRX_SHIFT
)Ë& 
SPI_FIFOCFG_EMPTYRX_MASK
)

	)

8072 
	#SPI_FIFOCFG_POPDBG_MASK
 (0x40000U)

	)

8073 
	#SPI_FIFOCFG_POPDBG_SHIFT
 (18U)

	)

8074 
	#SPI_FIFOCFG_POPDBG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOCFG_POPDBG_SHIFT
)Ë& 
SPI_FIFOCFG_POPDBG_MASK
)

	)

8077 
	#SPI_FIFOSTAT_TXERR_MASK
 (0x1U)

	)

8078 
	#SPI_FIFOSTAT_TXERR_SHIFT
 (0U)

	)

8079 
	#SPI_FIFOSTAT_TXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOSTAT_TXERR_SHIFT
)Ë& 
SPI_FIFOSTAT_TXERR_MASK
)

	)

8080 
	#SPI_FIFOSTAT_RXERR_MASK
 (0x2U)

	)

8081 
	#SPI_FIFOSTAT_RXERR_SHIFT
 (1U)

	)

8082 
	#SPI_FIFOSTAT_RXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOSTAT_RXERR_SHIFT
)Ë& 
SPI_FIFOSTAT_RXERR_MASK
)

	)

8083 
	#SPI_FIFOSTAT_PERINT_MASK
 (0x8U)

	)

8084 
	#SPI_FIFOSTAT_PERINT_SHIFT
 (3U)

	)

8085 
	#SPI_FIFOSTAT_PERINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOSTAT_PERINT_SHIFT
)Ë& 
SPI_FIFOSTAT_PERINT_MASK
)

	)

8086 
	#SPI_FIFOSTAT_TXEMPTY_MASK
 (0x10U)

	)

8087 
	#SPI_FIFOSTAT_TXEMPTY_SHIFT
 (4U)

	)

8088 
	#SPI_FIFOSTAT_TXEMPTY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOSTAT_TXEMPTY_SHIFT
)Ë& 
SPI_FIFOSTAT_TXEMPTY_MASK
)

	)

8089 
	#SPI_FIFOSTAT_TXNOTFULL_MASK
 (0x20U)

	)

8090 
	#SPI_FIFOSTAT_TXNOTFULL_SHIFT
 (5U)

	)

8091 
	#SPI_FIFOSTAT_TXNOTFULL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOSTAT_TXNOTFULL_SHIFT
)Ë& 
SPI_FIFOSTAT_TXNOTFULL_MASK
)

	)

8092 
	#SPI_FIFOSTAT_RXNOTEMPTY_MASK
 (0x40U)

	)

8093 
	#SPI_FIFOSTAT_RXNOTEMPTY_SHIFT
 (6U)

	)

8094 
	#SPI_FIFOSTAT_RXNOTEMPTY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOSTAT_RXNOTEMPTY_SHIFT
)Ë& 
SPI_FIFOSTAT_RXNOTEMPTY_MASK
)

	)

8095 
	#SPI_FIFOSTAT_RXFULL_MASK
 (0x80U)

	)

8096 
	#SPI_FIFOSTAT_RXFULL_SHIFT
 (7U)

	)

8097 
	#SPI_FIFOSTAT_RXFULL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOSTAT_RXFULL_SHIFT
)Ë& 
SPI_FIFOSTAT_RXFULL_MASK
)

	)

8098 
	#SPI_FIFOSTAT_TXLVL_MASK
 (0x1F00U)

	)

8099 
	#SPI_FIFOSTAT_TXLVL_SHIFT
 (8U)

	)

8100 
	#SPI_FIFOSTAT_TXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOSTAT_TXLVL_SHIFT
)Ë& 
SPI_FIFOSTAT_TXLVL_MASK
)

	)

8101 
	#SPI_FIFOSTAT_RXLVL_MASK
 (0x1F0000U)

	)

8102 
	#SPI_FIFOSTAT_RXLVL_SHIFT
 (16U)

	)

8103 
	#SPI_FIFOSTAT_RXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOSTAT_RXLVL_SHIFT
)Ë& 
SPI_FIFOSTAT_RXLVL_MASK
)

	)

8106 
	#SPI_FIFOTRIG_TXLVLENA_MASK
 (0x1U)

	)

8107 
	#SPI_FIFOTRIG_TXLVLENA_SHIFT
 (0U)

	)

8108 
	#SPI_FIFOTRIG_TXLVLENA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOTRIG_TXLVLENA_SHIFT
)Ë& 
SPI_FIFOTRIG_TXLVLENA_MASK
)

	)

8109 
	#SPI_FIFOTRIG_RXLVLENA_MASK
 (0x2U)

	)

8110 
	#SPI_FIFOTRIG_RXLVLENA_SHIFT
 (1U)

	)

8111 
	#SPI_FIFOTRIG_RXLVLENA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOTRIG_RXLVLENA_SHIFT
)Ë& 
SPI_FIFOTRIG_RXLVLENA_MASK
)

	)

8112 
	#SPI_FIFOTRIG_TXLVL_MASK
 (0xF00U)

	)

8113 
	#SPI_FIFOTRIG_TXLVL_SHIFT
 (8U)

	)

8114 
	#SPI_FIFOTRIG_TXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOTRIG_TXLVL_SHIFT
)Ë& 
SPI_FIFOTRIG_TXLVL_MASK
)

	)

8115 
	#SPI_FIFOTRIG_RXLVL_MASK
 (0xF0000U)

	)

8116 
	#SPI_FIFOTRIG_RXLVL_SHIFT
 (16U)

	)

8117 
	#SPI_FIFOTRIG_RXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOTRIG_RXLVL_SHIFT
)Ë& 
SPI_FIFOTRIG_RXLVL_MASK
)

	)

8120 
	#SPI_FIFOINTENSET_TXERR_MASK
 (0x1U)

	)

8121 
	#SPI_FIFOINTENSET_TXERR_SHIFT
 (0U)

	)

8122 
	#SPI_FIFOINTENSET_TXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOINTENSET_TXERR_SHIFT
)Ë& 
SPI_FIFOINTENSET_TXERR_MASK
)

	)

8123 
	#SPI_FIFOINTENSET_RXERR_MASK
 (0x2U)

	)

8124 
	#SPI_FIFOINTENSET_RXERR_SHIFT
 (1U)

	)

8125 
	#SPI_FIFOINTENSET_RXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOINTENSET_RXERR_SHIFT
)Ë& 
SPI_FIFOINTENSET_RXERR_MASK
)

	)

8126 
	#SPI_FIFOINTENSET_TXLVL_MASK
 (0x4U)

	)

8127 
	#SPI_FIFOINTENSET_TXLVL_SHIFT
 (2U)

	)

8128 
	#SPI_FIFOINTENSET_TXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOINTENSET_TXLVL_SHIFT
)Ë& 
SPI_FIFOINTENSET_TXLVL_MASK
)

	)

8129 
	#SPI_FIFOINTENSET_RXLVL_MASK
 (0x8U)

	)

8130 
	#SPI_FIFOINTENSET_RXLVL_SHIFT
 (3U)

	)

8131 
	#SPI_FIFOINTENSET_RXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOINTENSET_RXLVL_SHIFT
)Ë& 
SPI_FIFOINTENSET_RXLVL_MASK
)

	)

8134 
	#SPI_FIFOINTENCLR_TXERR_MASK
 (0x1U)

	)

8135 
	#SPI_FIFOINTENCLR_TXERR_SHIFT
 (0U)

	)

8136 
	#SPI_FIFOINTENCLR_TXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOINTENCLR_TXERR_SHIFT
)Ë& 
SPI_FIFOINTENCLR_TXERR_MASK
)

	)

8137 
	#SPI_FIFOINTENCLR_RXERR_MASK
 (0x2U)

	)

8138 
	#SPI_FIFOINTENCLR_RXERR_SHIFT
 (1U)

	)

8139 
	#SPI_FIFOINTENCLR_RXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOINTENCLR_RXERR_SHIFT
)Ë& 
SPI_FIFOINTENCLR_RXERR_MASK
)

	)

8140 
	#SPI_FIFOINTENCLR_TXLVL_MASK
 (0x4U)

	)

8141 
	#SPI_FIFOINTENCLR_TXLVL_SHIFT
 (2U)

	)

8142 
	#SPI_FIFOINTENCLR_TXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOINTENCLR_TXLVL_SHIFT
)Ë& 
SPI_FIFOINTENCLR_TXLVL_MASK
)

	)

8143 
	#SPI_FIFOINTENCLR_RXLVL_MASK
 (0x8U)

	)

8144 
	#SPI_FIFOINTENCLR_RXLVL_SHIFT
 (3U)

	)

8145 
	#SPI_FIFOINTENCLR_RXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOINTENCLR_RXLVL_SHIFT
)Ë& 
SPI_FIFOINTENCLR_RXLVL_MASK
)

	)

8148 
	#SPI_FIFOINTSTAT_TXERR_MASK
 (0x1U)

	)

8149 
	#SPI_FIFOINTSTAT_TXERR_SHIFT
 (0U)

	)

8150 
	#SPI_FIFOINTSTAT_TXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOINTSTAT_TXERR_SHIFT
)Ë& 
SPI_FIFOINTSTAT_TXERR_MASK
)

	)

8151 
	#SPI_FIFOINTSTAT_RXERR_MASK
 (0x2U)

	)

8152 
	#SPI_FIFOINTSTAT_RXERR_SHIFT
 (1U)

	)

8153 
	#SPI_FIFOINTSTAT_RXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOINTSTAT_RXERR_SHIFT
)Ë& 
SPI_FIFOINTSTAT_RXERR_MASK
)

	)

8154 
	#SPI_FIFOINTSTAT_TXLVL_MASK
 (0x4U)

	)

8155 
	#SPI_FIFOINTSTAT_TXLVL_SHIFT
 (2U)

	)

8156 
	#SPI_FIFOINTSTAT_TXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOINTSTAT_TXLVL_SHIFT
)Ë& 
SPI_FIFOINTSTAT_TXLVL_MASK
)

	)

8157 
	#SPI_FIFOINTSTAT_RXLVL_MASK
 (0x8U)

	)

8158 
	#SPI_FIFOINTSTAT_RXLVL_SHIFT
 (3U)

	)

8159 
	#SPI_FIFOINTSTAT_RXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOINTSTAT_RXLVL_SHIFT
)Ë& 
SPI_FIFOINTSTAT_RXLVL_MASK
)

	)

8160 
	#SPI_FIFOINTSTAT_PERINT_MASK
 (0x10U)

	)

8161 
	#SPI_FIFOINTSTAT_PERINT_SHIFT
 (4U)

	)

8162 
	#SPI_FIFOINTSTAT_PERINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOINTSTAT_PERINT_SHIFT
)Ë& 
SPI_FIFOINTSTAT_PERINT_MASK
)

	)

8165 
	#SPI_FIFOWR_TXDATA_MASK
 (0xFFFFU)

	)

8166 
	#SPI_FIFOWR_TXDATA_SHIFT
 (0U)

	)

8167 
	#SPI_FIFOWR_TXDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOWR_TXDATA_SHIFT
)Ë& 
SPI_FIFOWR_TXDATA_MASK
)

	)

8168 
	#SPI_FIFOWR_TXSSEL0_N_MASK
 (0x10000U)

	)

8169 
	#SPI_FIFOWR_TXSSEL0_N_SHIFT
 (16U)

	)

8170 
	#SPI_FIFOWR_TXSSEL0_N
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOWR_TXSSEL0_N_SHIFT
)Ë& 
SPI_FIFOWR_TXSSEL0_N_MASK
)

	)

8171 
	#SPI_FIFOWR_TXSSEL1_N_MASK
 (0x20000U)

	)

8172 
	#SPI_FIFOWR_TXSSEL1_N_SHIFT
 (17U)

	)

8173 
	#SPI_FIFOWR_TXSSEL1_N
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOWR_TXSSEL1_N_SHIFT
)Ë& 
SPI_FIFOWR_TXSSEL1_N_MASK
)

	)

8174 
	#SPI_FIFOWR_TXSSEL2_N_MASK
 (0x40000U)

	)

8175 
	#SPI_FIFOWR_TXSSEL2_N_SHIFT
 (18U)

	)

8176 
	#SPI_FIFOWR_TXSSEL2_N
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOWR_TXSSEL2_N_SHIFT
)Ë& 
SPI_FIFOWR_TXSSEL2_N_MASK
)

	)

8177 
	#SPI_FIFOWR_TXSSEL3_N_MASK
 (0x80000U)

	)

8178 
	#SPI_FIFOWR_TXSSEL3_N_SHIFT
 (19U)

	)

8179 
	#SPI_FIFOWR_TXSSEL3_N
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOWR_TXSSEL3_N_SHIFT
)Ë& 
SPI_FIFOWR_TXSSEL3_N_MASK
)

	)

8180 
	#SPI_FIFOWR_EOT_MASK
 (0x100000U)

	)

8181 
	#SPI_FIFOWR_EOT_SHIFT
 (20U)

	)

8182 
	#SPI_FIFOWR_EOT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOWR_EOT_SHIFT
)Ë& 
SPI_FIFOWR_EOT_MASK
)

	)

8183 
	#SPI_FIFOWR_EOF_MASK
 (0x200000U)

	)

8184 
	#SPI_FIFOWR_EOF_SHIFT
 (21U)

	)

8185 
	#SPI_FIFOWR_EOF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOWR_EOF_SHIFT
)Ë& 
SPI_FIFOWR_EOF_MASK
)

	)

8186 
	#SPI_FIFOWR_RXIGNORE_MASK
 (0x400000U)

	)

8187 
	#SPI_FIFOWR_RXIGNORE_SHIFT
 (22U)

	)

8188 
	#SPI_FIFOWR_RXIGNORE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOWR_RXIGNORE_SHIFT
)Ë& 
SPI_FIFOWR_RXIGNORE_MASK
)

	)

8189 
	#SPI_FIFOWR_LEN_MASK
 (0xF000000U)

	)

8190 
	#SPI_FIFOWR_LEN_SHIFT
 (24U)

	)

8191 
	#SPI_FIFOWR_LEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFOWR_LEN_SHIFT
)Ë& 
SPI_FIFOWR_LEN_MASK
)

	)

8194 
	#SPI_FIFORD_RXDATA_MASK
 (0xFFFFU)

	)

8195 
	#SPI_FIFORD_RXDATA_SHIFT
 (0U)

	)

8196 
	#SPI_FIFORD_RXDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFORD_RXDATA_SHIFT
)Ë& 
SPI_FIFORD_RXDATA_MASK
)

	)

8197 
	#SPI_FIFORD_RXSSEL0_N_MASK
 (0x10000U)

	)

8198 
	#SPI_FIFORD_RXSSEL0_N_SHIFT
 (16U)

	)

8199 
	#SPI_FIFORD_RXSSEL0_N
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFORD_RXSSEL0_N_SHIFT
)Ë& 
SPI_FIFORD_RXSSEL0_N_MASK
)

	)

8200 
	#SPI_FIFORD_RXSSEL1_N_MASK
 (0x20000U)

	)

8201 
	#SPI_FIFORD_RXSSEL1_N_SHIFT
 (17U)

	)

8202 
	#SPI_FIFORD_RXSSEL1_N
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFORD_RXSSEL1_N_SHIFT
)Ë& 
SPI_FIFORD_RXSSEL1_N_MASK
)

	)

8203 
	#SPI_FIFORD_RXSSEL2_N_MASK
 (0x40000U)

	)

8204 
	#SPI_FIFORD_RXSSEL2_N_SHIFT
 (18U)

	)

8205 
	#SPI_FIFORD_RXSSEL2_N
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFORD_RXSSEL2_N_SHIFT
)Ë& 
SPI_FIFORD_RXSSEL2_N_MASK
)

	)

8206 
	#SPI_FIFORD_RXSSEL3_N_MASK
 (0x80000U)

	)

8207 
	#SPI_FIFORD_RXSSEL3_N_SHIFT
 (19U)

	)

8208 
	#SPI_FIFORD_RXSSEL3_N
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFORD_RXSSEL3_N_SHIFT
)Ë& 
SPI_FIFORD_RXSSEL3_N_MASK
)

	)

8209 
	#SPI_FIFORD_SOT_MASK
 (0x100000U)

	)

8210 
	#SPI_FIFORD_SOT_SHIFT
 (20U)

	)

8211 
	#SPI_FIFORD_SOT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFORD_SOT_SHIFT
)Ë& 
SPI_FIFORD_SOT_MASK
)

	)

8214 
	#SPI_FIFORDNOPOP_RXDATA_MASK
 (0xFFFFU)

	)

8215 
	#SPI_FIFORDNOPOP_RXDATA_SHIFT
 (0U)

	)

8216 
	#SPI_FIFORDNOPOP_RXDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFORDNOPOP_RXDATA_SHIFT
)Ë& 
SPI_FIFORDNOPOP_RXDATA_MASK
)

	)

8217 
	#SPI_FIFORDNOPOP_RXSSEL0_N_MASK
 (0x10000U)

	)

8218 
	#SPI_FIFORDNOPOP_RXSSEL0_N_SHIFT
 (16U)

	)

8219 
	#SPI_FIFORDNOPOP_RXSSEL0_N
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFORDNOPOP_RXSSEL0_N_SHIFT
)Ë& 
SPI_FIFORDNOPOP_RXSSEL0_N_MASK
)

	)

8220 
	#SPI_FIFORDNOPOP_RXSSEL1_N_MASK
 (0x20000U)

	)

8221 
	#SPI_FIFORDNOPOP_RXSSEL1_N_SHIFT
 (17U)

	)

8222 
	#SPI_FIFORDNOPOP_RXSSEL1_N
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFORDNOPOP_RXSSEL1_N_SHIFT
)Ë& 
SPI_FIFORDNOPOP_RXSSEL1_N_MASK
)

	)

8223 
	#SPI_FIFORDNOPOP_RXSSEL2_N_MASK
 (0x40000U)

	)

8224 
	#SPI_FIFORDNOPOP_RXSSEL2_N_SHIFT
 (18U)

	)

8225 
	#SPI_FIFORDNOPOP_RXSSEL2_N
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFORDNOPOP_RXSSEL2_N_SHIFT
)Ë& 
SPI_FIFORDNOPOP_RXSSEL2_N_MASK
)

	)

8226 
	#SPI_FIFORDNOPOP_RXSSEL3_N_MASK
 (0x80000U)

	)

8227 
	#SPI_FIFORDNOPOP_RXSSEL3_N_SHIFT
 (19U)

	)

8228 
	#SPI_FIFORDNOPOP_RXSSEL3_N
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFORDNOPOP_RXSSEL3_N_SHIFT
)Ë& 
SPI_FIFORDNOPOP_RXSSEL3_N_MASK
)

	)

8229 
	#SPI_FIFORDNOPOP_SOT_MASK
 (0x100000U)

	)

8230 
	#SPI_FIFORDNOPOP_SOT_SHIFT
 (20U)

	)

8231 
	#SPI_FIFORDNOPOP_SOT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_FIFORDNOPOP_SOT_SHIFT
)Ë& 
SPI_FIFORDNOPOP_SOT_MASK
)

	)

8234 
	#SPI_ID_APERTURE_MASK
 (0xFFU)

	)

8235 
	#SPI_ID_APERTURE_SHIFT
 (0U)

	)

8236 
	#SPI_ID_APERTURE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_ID_APERTURE_SHIFT
)Ë& 
SPI_ID_APERTURE_MASK
)

	)

8237 
	#SPI_ID_MINOR_REV_MASK
 (0xF00U)

	)

8238 
	#SPI_ID_MINOR_REV_SHIFT
 (8U)

	)

8239 
	#SPI_ID_MINOR_REV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_ID_MINOR_REV_SHIFT
)Ë& 
SPI_ID_MINOR_REV_MASK
)

	)

8240 
	#SPI_ID_MAJOR_REV_MASK
 (0xF000U)

	)

8241 
	#SPI_ID_MAJOR_REV_SHIFT
 (12U)

	)

8242 
	#SPI_ID_MAJOR_REV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_ID_MAJOR_REV_SHIFT
)Ë& 
SPI_ID_MAJOR_REV_MASK
)

	)

8243 
	#SPI_ID_ID_MASK
 (0xFFFF0000U)

	)

8244 
	#SPI_ID_ID_SHIFT
 (16U)

	)

8245 
	#SPI_ID_ID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPI_ID_ID_SHIFT
)Ë& 
SPI_ID_ID_MASK
)

	)

8255 
	#SPI0_BASE
 (0x40086000u)

	)

8257 
	#SPI0
 ((
SPI_Ty≥
 *)
SPI0_BASE
)

	)

8259 
	#SPI1_BASE
 (0x40087000u)

	)

8261 
	#SPI1
 ((
SPI_Ty≥
 *)
SPI1_BASE
)

	)

8263 
	#SPI2_BASE
 (0x40088000u)

	)

8265 
	#SPI2
 ((
SPI_Ty≥
 *)
SPI2_BASE
)

	)

8267 
	#SPI3_BASE
 (0x40089000u)

	)

8269 
	#SPI3
 ((
SPI_Ty≥
 *)
SPI3_BASE
)

	)

8271 
	#SPI4_BASE
 (0x4008A000u)

	)

8273 
	#SPI4
 ((
SPI_Ty≥
 *)
SPI4_BASE
)

	)

8275 
	#SPI5_BASE
 (0x40096000u)

	)

8277 
	#SPI5
 ((
SPI_Ty≥
 *)
SPI5_BASE
)

	)

8279 
	#SPI6_BASE
 (0x40097000u)

	)

8281 
	#SPI6
 ((
SPI_Ty≥
 *)
SPI6_BASE
)

	)

8283 
	#SPI7_BASE
 (0x40098000u)

	)

8285 
	#SPI7
 ((
SPI_Ty≥
 *)
SPI7_BASE
)

	)

8287 
	#SPI8_BASE
 (0x40099000u)

	)

8289 
	#SPI8
 ((
SPI_Ty≥
 *)
SPI8_BASE
)

	)

8291 
	#SPI9_BASE
 (0x4009A000u)

	)

8293 
	#SPI9
 ((
SPI_Ty≥
 *)
SPI9_BASE
)

	)

8295 
	#SPI_BASE_ADDRS
 { 
SPI0_BASE
, 
SPI1_BASE
, 
SPI2_BASE
, 
SPI3_BASE
, 
SPI4_BASE
, 
SPI5_BASE
, 
SPI6_BASE
, 
SPI7_BASE
, 
SPI8_BASE
, 
SPI9_BASE
 }

	)

8297 
	#SPI_BASE_PTRS
 { 
SPI0
, 
SPI1
, 
SPI2
, 
SPI3
, 
SPI4
, 
SPI5
, 
SPI6
, 
SPI7
, 
SPI8
, 
SPI9
 }

	)

8299 
	#SPI_IRQS
 { 
FLEXCOMM0_IRQn
, 
FLEXCOMM1_IRQn
, 
FLEXCOMM2_IRQn
, 
FLEXCOMM3_IRQn
, 
FLEXCOMM4_IRQn
, 
FLEXCOMM5_IRQn
, 
FLEXCOMM6_IRQn
, 
FLEXCOMM7_IRQn
, 
FLEXCOMM8_IRQn
, 
FLEXCOMM9_IRQn
 }

	)

8317 
__IO
 
uöt32_t
 
	mCTRL
;

8318 
__IO
 
uöt32_t
 
	mCMD
;

8319 
__IO
 
uöt32_t
 
	mADDR
;

8320 
__IO
 
uöt32_t
 
	mIDATA
;

8321 
__IO
 
uöt32_t
 
	mCLIMIT
;

8322 
__IO
 
uöt32_t
 
	mDATA
;

8323 
__IO
 
uöt32_t
 
	mMCMD
;

8324 
__IO
 
uöt32_t
 
	mSTAT
;

8325 } 
	tSPIFI_Ty≥
;

8337 
	#SPIFI_CTRL_TIMEOUT_MASK
 (0xFFFFU)

	)

8338 
	#SPIFI_CTRL_TIMEOUT_SHIFT
 (0U)

	)

8339 
	#SPIFI_CTRL_TIMEOUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_CTRL_TIMEOUT_SHIFT
)Ë& 
SPIFI_CTRL_TIMEOUT_MASK
)

	)

8340 
	#SPIFI_CTRL_CSHIGH_MASK
 (0xF0000U)

	)

8341 
	#SPIFI_CTRL_CSHIGH_SHIFT
 (16U)

	)

8342 
	#SPIFI_CTRL_CSHIGH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_CTRL_CSHIGH_SHIFT
)Ë& 
SPIFI_CTRL_CSHIGH_MASK
)

	)

8343 
	#SPIFI_CTRL_D_PRFTCH_DIS_MASK
 (0x200000U)

	)

8344 
	#SPIFI_CTRL_D_PRFTCH_DIS_SHIFT
 (21U)

	)

8345 
	#SPIFI_CTRL_D_PRFTCH_DIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_CTRL_D_PRFTCH_DIS_SHIFT
)Ë& 
SPIFI_CTRL_D_PRFTCH_DIS_MASK
)

	)

8346 
	#SPIFI_CTRL_INTEN_MASK
 (0x400000U)

	)

8347 
	#SPIFI_CTRL_INTEN_SHIFT
 (22U)

	)

8348 
	#SPIFI_CTRL_INTEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_CTRL_INTEN_SHIFT
)Ë& 
SPIFI_CTRL_INTEN_MASK
)

	)

8349 
	#SPIFI_CTRL_MODE3_MASK
 (0x800000U)

	)

8350 
	#SPIFI_CTRL_MODE3_SHIFT
 (23U)

	)

8351 
	#SPIFI_CTRL_MODE3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_CTRL_MODE3_SHIFT
)Ë& 
SPIFI_CTRL_MODE3_MASK
)

	)

8352 
	#SPIFI_CTRL_PRFTCH_DIS_MASK
 (0x8000000U)

	)

8353 
	#SPIFI_CTRL_PRFTCH_DIS_SHIFT
 (27U)

	)

8354 
	#SPIFI_CTRL_PRFTCH_DIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_CTRL_PRFTCH_DIS_SHIFT
)Ë& 
SPIFI_CTRL_PRFTCH_DIS_MASK
)

	)

8355 
	#SPIFI_CTRL_DUAL_MASK
 (0x10000000U)

	)

8356 
	#SPIFI_CTRL_DUAL_SHIFT
 (28U)

	)

8357 
	#SPIFI_CTRL_DUAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_CTRL_DUAL_SHIFT
)Ë& 
SPIFI_CTRL_DUAL_MASK
)

	)

8358 
	#SPIFI_CTRL_RFCLK_MASK
 (0x20000000U)

	)

8359 
	#SPIFI_CTRL_RFCLK_SHIFT
 (29U)

	)

8360 
	#SPIFI_CTRL_RFCLK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_CTRL_RFCLK_SHIFT
)Ë& 
SPIFI_CTRL_RFCLK_MASK
)

	)

8361 
	#SPIFI_CTRL_FBCLK_MASK
 (0x40000000U)

	)

8362 
	#SPIFI_CTRL_FBCLK_SHIFT
 (30U)

	)

8363 
	#SPIFI_CTRL_FBCLK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_CTRL_FBCLK_SHIFT
)Ë& 
SPIFI_CTRL_FBCLK_MASK
)

	)

8364 
	#SPIFI_CTRL_DMAEN_MASK
 (0x80000000U)

	)

8365 
	#SPIFI_CTRL_DMAEN_SHIFT
 (31U)

	)

8366 
	#SPIFI_CTRL_DMAEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_CTRL_DMAEN_SHIFT
)Ë& 
SPIFI_CTRL_DMAEN_MASK
)

	)

8369 
	#SPIFI_CMD_DATALEN_MASK
 (0x3FFFU)

	)

8370 
	#SPIFI_CMD_DATALEN_SHIFT
 (0U)

	)

8371 
	#SPIFI_CMD_DATALEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_CMD_DATALEN_SHIFT
)Ë& 
SPIFI_CMD_DATALEN_MASK
)

	)

8372 
	#SPIFI_CMD_POLL_MASK
 (0x4000U)

	)

8373 
	#SPIFI_CMD_POLL_SHIFT
 (14U)

	)

8374 
	#SPIFI_CMD_POLL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_CMD_POLL_SHIFT
)Ë& 
SPIFI_CMD_POLL_MASK
)

	)

8375 
	#SPIFI_CMD_DOUT_MASK
 (0x8000U)

	)

8376 
	#SPIFI_CMD_DOUT_SHIFT
 (15U)

	)

8377 
	#SPIFI_CMD_DOUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_CMD_DOUT_SHIFT
)Ë& 
SPIFI_CMD_DOUT_MASK
)

	)

8378 
	#SPIFI_CMD_INTLEN_MASK
 (0x70000U)

	)

8379 
	#SPIFI_CMD_INTLEN_SHIFT
 (16U)

	)

8380 
	#SPIFI_CMD_INTLEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_CMD_INTLEN_SHIFT
)Ë& 
SPIFI_CMD_INTLEN_MASK
)

	)

8381 
	#SPIFI_CMD_FIELDFORM_MASK
 (0x180000U)

	)

8382 
	#SPIFI_CMD_FIELDFORM_SHIFT
 (19U)

	)

8383 
	#SPIFI_CMD_FIELDFORM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_CMD_FIELDFORM_SHIFT
)Ë& 
SPIFI_CMD_FIELDFORM_MASK
)

	)

8384 
	#SPIFI_CMD_FRAMEFORM_MASK
 (0xE00000U)

	)

8385 
	#SPIFI_CMD_FRAMEFORM_SHIFT
 (21U)

	)

8386 
	#SPIFI_CMD_FRAMEFORM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_CMD_FRAMEFORM_SHIFT
)Ë& 
SPIFI_CMD_FRAMEFORM_MASK
)

	)

8387 
	#SPIFI_CMD_OPCODE_MASK
 (0xFF000000U)

	)

8388 
	#SPIFI_CMD_OPCODE_SHIFT
 (24U)

	)

8389 
	#SPIFI_CMD_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_CMD_OPCODE_SHIFT
)Ë& 
SPIFI_CMD_OPCODE_MASK
)

	)

8392 
	#SPIFI_ADDR_ADDRESS_MASK
 (0xFFFFFFFFU)

	)

8393 
	#SPIFI_ADDR_ADDRESS_SHIFT
 (0U)

	)

8394 
	#SPIFI_ADDR_ADDRESS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_ADDR_ADDRESS_SHIFT
)Ë& 
SPIFI_ADDR_ADDRESS_MASK
)

	)

8397 
	#SPIFI_IDATA_IDATA_MASK
 (0xFFFFFFFFU)

	)

8398 
	#SPIFI_IDATA_IDATA_SHIFT
 (0U)

	)

8399 
	#SPIFI_IDATA_IDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_IDATA_IDATA_SHIFT
)Ë& 
SPIFI_IDATA_IDATA_MASK
)

	)

8402 
	#SPIFI_CLIMIT_CLIMIT_MASK
 (0xFFFFFFFFU)

	)

8403 
	#SPIFI_CLIMIT_CLIMIT_SHIFT
 (0U)

	)

8404 
	#SPIFI_CLIMIT_CLIMIT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_CLIMIT_CLIMIT_SHIFT
)Ë& 
SPIFI_CLIMIT_CLIMIT_MASK
)

	)

8407 
	#SPIFI_DATA_DATA_MASK
 (0xFFFFFFFFU)

	)

8408 
	#SPIFI_DATA_DATA_SHIFT
 (0U)

	)

8409 
	#SPIFI_DATA_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_DATA_DATA_SHIFT
)Ë& 
SPIFI_DATA_DATA_MASK
)

	)

8412 
	#SPIFI_MCMD_POLL_MASK
 (0x4000U)

	)

8413 
	#SPIFI_MCMD_POLL_SHIFT
 (14U)

	)

8414 
	#SPIFI_MCMD_POLL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_MCMD_POLL_SHIFT
)Ë& 
SPIFI_MCMD_POLL_MASK
)

	)

8415 
	#SPIFI_MCMD_DOUT_MASK
 (0x8000U)

	)

8416 
	#SPIFI_MCMD_DOUT_SHIFT
 (15U)

	)

8417 
	#SPIFI_MCMD_DOUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_MCMD_DOUT_SHIFT
)Ë& 
SPIFI_MCMD_DOUT_MASK
)

	)

8418 
	#SPIFI_MCMD_INTLEN_MASK
 (0x70000U)

	)

8419 
	#SPIFI_MCMD_INTLEN_SHIFT
 (16U)

	)

8420 
	#SPIFI_MCMD_INTLEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_MCMD_INTLEN_SHIFT
)Ë& 
SPIFI_MCMD_INTLEN_MASK
)

	)

8421 
	#SPIFI_MCMD_FIELDFORM_MASK
 (0x180000U)

	)

8422 
	#SPIFI_MCMD_FIELDFORM_SHIFT
 (19U)

	)

8423 
	#SPIFI_MCMD_FIELDFORM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_MCMD_FIELDFORM_SHIFT
)Ë& 
SPIFI_MCMD_FIELDFORM_MASK
)

	)

8424 
	#SPIFI_MCMD_FRAMEFORM_MASK
 (0xE00000U)

	)

8425 
	#SPIFI_MCMD_FRAMEFORM_SHIFT
 (21U)

	)

8426 
	#SPIFI_MCMD_FRAMEFORM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_MCMD_FRAMEFORM_SHIFT
)Ë& 
SPIFI_MCMD_FRAMEFORM_MASK
)

	)

8427 
	#SPIFI_MCMD_OPCODE_MASK
 (0xFF000000U)

	)

8428 
	#SPIFI_MCMD_OPCODE_SHIFT
 (24U)

	)

8429 
	#SPIFI_MCMD_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_MCMD_OPCODE_SHIFT
)Ë& 
SPIFI_MCMD_OPCODE_MASK
)

	)

8432 
	#SPIFI_STAT_MCINIT_MASK
 (0x1U)

	)

8433 
	#SPIFI_STAT_MCINIT_SHIFT
 (0U)

	)

8434 
	#SPIFI_STAT_MCINIT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_STAT_MCINIT_SHIFT
)Ë& 
SPIFI_STAT_MCINIT_MASK
)

	)

8435 
	#SPIFI_STAT_CMD_MASK
 (0x2U)

	)

8436 
	#SPIFI_STAT_CMD_SHIFT
 (1U)

	)

8437 
	#SPIFI_STAT_CMD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_STAT_CMD_SHIFT
)Ë& 
SPIFI_STAT_CMD_MASK
)

	)

8438 
	#SPIFI_STAT_RESET_MASK
 (0x10U)

	)

8439 
	#SPIFI_STAT_RESET_SHIFT
 (4U)

	)

8440 
	#SPIFI_STAT_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_STAT_RESET_SHIFT
)Ë& 
SPIFI_STAT_RESET_MASK
)

	)

8441 
	#SPIFI_STAT_INTRQ_MASK
 (0x20U)

	)

8442 
	#SPIFI_STAT_INTRQ_SHIFT
 (5U)

	)

8443 
	#SPIFI_STAT_INTRQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SPIFI_STAT_INTRQ_SHIFT
)Ë& 
SPIFI_STAT_INTRQ_MASK
)

	)

8453 
	#SPIFI0_BASE
 (0x40080000u)

	)

8455 
	#SPIFI0
 ((
SPIFI_Ty≥
 *)
SPIFI0_BASE
)

	)

8457 
	#SPIFI_BASE_ADDRS
 { 
SPIFI0_BASE
 }

	)

8459 
	#SPIFI_BASE_PTRS
 { 
SPIFI0
 }

	)

8461 
	#SPIFI_IRQS
 { 
SPIFI0_IRQn
 }

	)

8479 
uöt8_t
 
	mRESERVED_0
[16];

8480 
__IO
 
uöt32_t
 
	mAHBMATPRIO
;

8481 
uöt8_t
 
	mRESERVED_1
[44];

8482 
__IO
 
uöt32_t
 
	mSYSTCKCAL
;

8483 
uöt8_t
 
	mRESERVED_2
[4];

8484 
__IO
 
uöt32_t
 
	mNMISRC
;

8485 
__IO
 
uöt32_t
 
	mASYNCAPBCTRL
;

8486 
uöt8_t
 
	mRESERVED_3
[112];

8487 
__I
 
uöt32_t
 
	mPIOPORCAP
[2];

8488 
uöt8_t
 
	mRESERVED_4
[8];

8489 
__I
 
uöt32_t
 
	mPIORESCAP
[2];

8490 
uöt8_t
 
	mRESERVED_5
[40];

8491 
__IO
 
uöt32_t
 
	mPRESETCTRL
[3];

8492 
uöt8_t
 
	mRESERVED_6
[20];

8493 
__O
 
uöt32_t
 
	mPRESETCTRLSET
[3];

8494 
uöt8_t
 
	mRESERVED_7
[20];

8495 
__O
 
uöt32_t
 
	mPRESETCTRLCLR
[3];

8496 
uöt8_t
 
	mRESERVED_8
[164];

8497 
__IO
 
uöt32_t
 
	mSYSRSTSTAT
;

8498 
uöt8_t
 
	mRESERVED_9
[12];

8499 
__IO
 
uöt32_t
 
	mAHBCLKCTRL
[3];

8500 
uöt8_t
 
	mRESERVED_10
[20];

8501 
__O
 
uöt32_t
 
	mAHBCLKCTRLSET
[3];

8502 
uöt8_t
 
	mRESERVED_11
[20];

8503 
__O
 
uöt32_t
 
	mAHBCLKCTRLCLR
[3];

8504 
uöt8_t
 
	mRESERVED_12
[52];

8505 
__IO
 
uöt32_t
 
	mMAINCLKSELA
;

8506 
__IO
 
uöt32_t
 
	mMAINCLKSELB
;

8507 
__IO
 
uöt32_t
 
	mCLKOUTSELA
;

8508 
uöt8_t
 
	mRESERVED_13
[4];

8509 
__IO
 
uöt32_t
 
	mSYSPLLCLKSEL
;

8510 
uöt8_t
 
	mRESERVED_14
[4];

8511 
__IO
 
uöt32_t
 
	mAUDPLLCLKSEL
;

8512 
uöt8_t
 
	mRESERVED_15
[4];

8513 
__IO
 
uöt32_t
 
	mSPIFICLKSEL
;

8514 
__IO
 
uöt32_t
 
	mADCCLKSEL
;

8515 
__IO
 
uöt32_t
 
	mUSB0CLKSEL
;

8516 
__IO
 
uöt32_t
 
	mUSB1CLKSEL
;

8517 
__IO
 
uöt32_t
 
	mFCLKSEL
[10];

8518 
uöt8_t
 
	mRESERVED_16
[8];

8519 
__IO
 
uöt32_t
 
	mMCLKCLKSEL
;

8520 
uöt8_t
 
	mRESERVED_17
[4];

8521 
__IO
 
uöt32_t
 
	mFRGCLKSEL
;

8522 
__IO
 
uöt32_t
 
	mDMICCLKSEL
;

8523 
__IO
 
uöt32_t
 
	mSCTCLKSEL
;

8524 
__IO
 
uöt32_t
 
	mLCDCLKSEL
;

8525 
__IO
 
uöt32_t
 
	mSDIOCLKSEL
;

8526 
uöt8_t
 
	mRESERVED_18
[4];

8527 
__IO
 
uöt32_t
 
	mSYSTICKCLKDIV
;

8528 
__IO
 
uöt32_t
 
	mARMTRACECLKDIV
;

8529 
__IO
 
uöt32_t
 
	mCAN0CLKDIV
;

8530 
__IO
 
uöt32_t
 
	mCAN1CLKDIV
;

8531 
__IO
 
uöt32_t
 
	mSC0CLKDIV
;

8532 
__IO
 
uöt32_t
 
	mSC1CLKDIV
;

8533 
uöt8_t
 
	mRESERVED_19
[104];

8534 
__IO
 
uöt32_t
 
	mAHBCLKDIV
;

8535 
__IO
 
uöt32_t
 
	mCLKOUTDIV
;

8536 
__IO
 
uöt32_t
 
	mFROHFCLKDIV
;

8537 
uöt8_t
 
	mRESERVED_20
[4];

8538 
__IO
 
uöt32_t
 
	mSPIFICLKDIV
;

8539 
__IO
 
uöt32_t
 
	mADCCLKDIV
;

8540 
__IO
 
uöt32_t
 
	mUSB0CLKDIV
;

8541 
__IO
 
uöt32_t
 
	mUSB1CLKDIV
;

8542 
__IO
 
uöt32_t
 
	mFRGCTRL
;

8543 
uöt8_t
 
	mRESERVED_21
[4];

8544 
__IO
 
uöt32_t
 
	mDMICCLKDIV
;

8545 
__IO
 
uöt32_t
 
	mMCLKDIV
;

8546 
__IO
 
uöt32_t
 
	mLCDCLKDIV
;

8547 
__IO
 
uöt32_t
 
	mSCTCLKDIV
;

8548 
__IO
 
uöt32_t
 
	mEMCCLKDIV
;

8549 
__IO
 
uöt32_t
 
	mSDIOCLKDIV
;

8550 
uöt8_t
 
	mRESERVED_22
[64];

8551 
__IO
 
uöt32_t
 
	mFLASHCFG
;

8552 
uöt8_t
 
	mRESERVED_23
[8];

8553 
__IO
 
uöt32_t
 
	mUSB0CLKCTRL
;

8554 
__IO
 
uöt32_t
 
	mUSB0CLKSTAT
;

8555 
uöt8_t
 
	mRESERVED_24
[4];

8556 
__IO
 
uöt32_t
 
	mFREQMECTRL
;

8557 
uöt8_t
 
	mRESERVED_25
[4];

8558 
__IO
 
uöt32_t
 
	mMCLKIO
;

8559 
__IO
 
uöt32_t
 
	mUSB1CLKCTRL
;

8560 
__IO
 
uöt32_t
 
	mUSB1CLKSTAT
;

8561 
uöt8_t
 
	mRESERVED_26
[24];

8562 
__IO
 
uöt32_t
 
	mEMCSYSCTRL
;

8563 
__IO
 
uöt32_t
 
	mEMCDLYCTRL
;

8564 
__IO
 
uöt32_t
 
	mEMCDLYCAL
;

8565 
__IO
 
uöt32_t
 
	mETHPHYSEL
;

8566 
__IO
 
uöt32_t
 
	mETHSBDCTRL
;

8567 
uöt8_t
 
	mRESERVED_27
[8];

8568 
__IO
 
uöt32_t
 
	mSDIOCLKCTRL
;

8569 
uöt8_t
 
	mRESERVED_28
[156];

8570 
__IO
 
uöt32_t
 
	mFROCTRL
;

8571 
__IO
 
uöt32_t
 
	mSYSOSCCTRL
;

8572 
__IO
 
uöt32_t
 
	mWDTOSCCTRL
;

8573 
__IO
 
uöt32_t
 
	mRTCOSCCTRL
;

8574 
uöt8_t
 
	mRESERVED_29
[12];

8575 
__IO
 
uöt32_t
 
	mUSBPLLCTRL
;

8576 
__IO
 
uöt32_t
 
	mUSBPLLSTAT
;

8577 
uöt8_t
 
	mRESERVED_30
[92];

8578 
__IO
 
uöt32_t
 
	mSYSPLLCTRL
;

8579 
__IO
 
uöt32_t
 
	mSYSPLLSTAT
;

8580 
__IO
 
uöt32_t
 
	mSYSPLLNDEC
;

8581 
__IO
 
uöt32_t
 
	mSYSPLLPDEC
;

8582 
__IO
 
uöt32_t
 
	mSYSPLLMDEC
;

8583 
uöt8_t
 
	mRESERVED_31
[12];

8584 
__IO
 
uöt32_t
 
	mAUDPLLCTRL
;

8585 
__IO
 
uöt32_t
 
	mAUDPLLSTAT
;

8586 
__IO
 
uöt32_t
 
	mAUDPLLNDEC
;

8587 
__IO
 
uöt32_t
 
	mAUDPLLPDEC
;

8588 
__IO
 
uöt32_t
 
	mAUDPLLMDEC
;

8589 
__IO
 
uöt32_t
 
	mAUDPLLFRAC
;

8590 
uöt8_t
 
	mRESERVED_32
[72];

8591 
__IO
 
uöt32_t
 
	mPDSLEEPCFG
[2];

8592 
uöt8_t
 
	mRESERVED_33
[8];

8593 
__IO
 
uöt32_t
 
	mPDRUNCFG
[2];

8594 
uöt8_t
 
	mRESERVED_34
[8];

8595 
__IO
 
uöt32_t
 
	mPDRUNCFGSET
[2];

8596 
uöt8_t
 
	mRESERVED_35
[8];

8597 
__IO
 
uöt32_t
 
	mPDRUNCFGCLR
[2];

8598 
uöt8_t
 
	mRESERVED_36
[72];

8599 
__IO
 
uöt32_t
 
	mSTARTER
[2];

8600 
uöt8_t
 
	mRESERVED_37
[24];

8601 
__O
 
uöt32_t
 
	mSTARTERSET
[2];

8602 
uöt8_t
 
	mRESERVED_38
[24];

8603 
__O
 
uöt32_t
 
	mSTARTERCLR
[2];

8604 
uöt8_t
 
	mRESERVED_39
[184];

8605 
__IO
 
uöt32_t
 
	mHWWAKE
;

8606 
uöt8_t
 
	mRESERVED_40
[1664];

8607 
__IO
 
uöt32_t
 
	mAUTOCGOR
;

8608 
uöt8_t
 
	mRESERVED_41
[492];

8609 
__I
 
uöt32_t
 
	mJTAGIDCODE
;

8610 
__I
 
uöt32_t
 
	mDEVICE_ID0
;

8611 
__I
 
uöt32_t
 
	mDEVICE_ID1
;

8612 
uöt8_t
 
	mRESERVED_42
[127044];

8613 
__IO
 
uöt32_t
 
	mBODCTRL
;

8614 } 
	tSYSCON_Ty≥
;

8626 
	#SYSCON_AHBMATPRIO_PRI_ICODE_MASK
 (0x3U)

	)

8627 
	#SYSCON_AHBMATPRIO_PRI_ICODE_SHIFT
 (0U)

	)

8628 
	#SYSCON_AHBMATPRIO_PRI_ICODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBMATPRIO_PRI_ICODE_SHIFT
)Ë& 
SYSCON_AHBMATPRIO_PRI_ICODE_MASK
)

	)

8629 
	#SYSCON_AHBMATPRIO_PRI_DCODE_MASK
 (0xCU)

	)

8630 
	#SYSCON_AHBMATPRIO_PRI_DCODE_SHIFT
 (2U)

	)

8631 
	#SYSCON_AHBMATPRIO_PRI_DCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBMATPRIO_PRI_DCODE_SHIFT
)Ë& 
SYSCON_AHBMATPRIO_PRI_DCODE_MASK
)

	)

8632 
	#SYSCON_AHBMATPRIO_PRI_SYS_MASK
 (0x30U)

	)

8633 
	#SYSCON_AHBMATPRIO_PRI_SYS_SHIFT
 (4U)

	)

8634 
	#SYSCON_AHBMATPRIO_PRI_SYS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBMATPRIO_PRI_SYS_SHIFT
)Ë& 
SYSCON_AHBMATPRIO_PRI_SYS_MASK
)

	)

8635 
	#SYSCON_AHBMATPRIO_PRI_DMA_MASK
 (0x3C0U)

	)

8636 
	#SYSCON_AHBMATPRIO_PRI_DMA_SHIFT
 (6U)

	)

8637 
	#SYSCON_AHBMATPRIO_PRI_DMA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBMATPRIO_PRI_DMA_SHIFT
)Ë& 
SYSCON_AHBMATPRIO_PRI_DMA_MASK
)

	)

8638 
	#SYSCON_AHBMATPRIO_PRI_ETH_MASK
 (0xC00U)

	)

8639 
	#SYSCON_AHBMATPRIO_PRI_ETH_SHIFT
 (10U)

	)

8640 
	#SYSCON_AHBMATPRIO_PRI_ETH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBMATPRIO_PRI_ETH_SHIFT
)Ë& 
SYSCON_AHBMATPRIO_PRI_ETH_MASK
)

	)

8641 
	#SYSCON_AHBMATPRIO_PRI_LCD_MASK
 (0x3000U)

	)

8642 
	#SYSCON_AHBMATPRIO_PRI_LCD_SHIFT
 (12U)

	)

8643 
	#SYSCON_AHBMATPRIO_PRI_LCD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBMATPRIO_PRI_LCD_SHIFT
)Ë& 
SYSCON_AHBMATPRIO_PRI_LCD_MASK
)

	)

8644 
	#SYSCON_AHBMATPRIO_PRI_USB0_MASK
 (0xC000U)

	)

8645 
	#SYSCON_AHBMATPRIO_PRI_USB0_SHIFT
 (14U)

	)

8646 
	#SYSCON_AHBMATPRIO_PRI_USB0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBMATPRIO_PRI_USB0_SHIFT
)Ë& 
SYSCON_AHBMATPRIO_PRI_USB0_MASK
)

	)

8647 
	#SYSCON_AHBMATPRIO_PRI_USB1_MASK
 (0x30000U)

	)

8648 
	#SYSCON_AHBMATPRIO_PRI_USB1_SHIFT
 (16U)

	)

8649 
	#SYSCON_AHBMATPRIO_PRI_USB1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBMATPRIO_PRI_USB1_SHIFT
)Ë& 
SYSCON_AHBMATPRIO_PRI_USB1_MASK
)

	)

8650 
	#SYSCON_AHBMATPRIO_PRI_SDIO_MASK
 (0xC0000U)

	)

8651 
	#SYSCON_AHBMATPRIO_PRI_SDIO_SHIFT
 (18U)

	)

8652 
	#SYSCON_AHBMATPRIO_PRI_SDIO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBMATPRIO_PRI_SDIO_SHIFT
)Ë& 
SYSCON_AHBMATPRIO_PRI_SDIO_MASK
)

	)

8653 
	#SYSCON_AHBMATPRIO_PRI_MCAN1_MASK
 (0x300000U)

	)

8654 
	#SYSCON_AHBMATPRIO_PRI_MCAN1_SHIFT
 (20U)

	)

8655 
	#SYSCON_AHBMATPRIO_PRI_MCAN1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBMATPRIO_PRI_MCAN1_SHIFT
)Ë& 
SYSCON_AHBMATPRIO_PRI_MCAN1_MASK
)

	)

8656 
	#SYSCON_AHBMATPRIO_PRI_MCAN2_MASK
 (0xC00000U)

	)

8657 
	#SYSCON_AHBMATPRIO_PRI_MCAN2_SHIFT
 (22U)

	)

8658 
	#SYSCON_AHBMATPRIO_PRI_MCAN2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBMATPRIO_PRI_MCAN2_SHIFT
)Ë& 
SYSCON_AHBMATPRIO_PRI_MCAN2_MASK
)

	)

8659 
	#SYSCON_AHBMATPRIO_PRI_SHA_MASK
 (0x3000000U)

	)

8660 
	#SYSCON_AHBMATPRIO_PRI_SHA_SHIFT
 (24U)

	)

8661 
	#SYSCON_AHBMATPRIO_PRI_SHA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBMATPRIO_PRI_SHA_SHIFT
)Ë& 
SYSCON_AHBMATPRIO_PRI_SHA_MASK
)

	)

8664 
	#SYSCON_SYSTCKCAL_CAL_MASK
 (0xFFFFFFU)

	)

8665 
	#SYSCON_SYSTCKCAL_CAL_SHIFT
 (0U)

	)

8666 
	#SYSCON_SYSTCKCAL_CAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSTCKCAL_CAL_SHIFT
)Ë& 
SYSCON_SYSTCKCAL_CAL_MASK
)

	)

8667 
	#SYSCON_SYSTCKCAL_SKEW_MASK
 (0x1000000U)

	)

8668 
	#SYSCON_SYSTCKCAL_SKEW_SHIFT
 (24U)

	)

8669 
	#SYSCON_SYSTCKCAL_SKEW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSTCKCAL_SKEW_SHIFT
)Ë& 
SYSCON_SYSTCKCAL_SKEW_MASK
)

	)

8670 
	#SYSCON_SYSTCKCAL_NOREF_MASK
 (0x2000000U)

	)

8671 
	#SYSCON_SYSTCKCAL_NOREF_SHIFT
 (25U)

	)

8672 
	#SYSCON_SYSTCKCAL_NOREF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSTCKCAL_NOREF_SHIFT
)Ë& 
SYSCON_SYSTCKCAL_NOREF_MASK
)

	)

8675 
	#SYSCON_NMISRC_IRQM4_MASK
 (0x3FU)

	)

8676 
	#SYSCON_NMISRC_IRQM4_SHIFT
 (0U)

	)

8677 
	#SYSCON_NMISRC_IRQM4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_NMISRC_IRQM4_SHIFT
)Ë& 
SYSCON_NMISRC_IRQM4_MASK
)

	)

8678 
	#SYSCON_NMISRC_NMIENM4_MASK
 (0x80000000U)

	)

8679 
	#SYSCON_NMISRC_NMIENM4_SHIFT
 (31U)

	)

8680 
	#SYSCON_NMISRC_NMIENM4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_NMISRC_NMIENM4_SHIFT
)Ë& 
SYSCON_NMISRC_NMIENM4_MASK
)

	)

8683 
	#SYSCON_ASYNCAPBCTRL_ENABLE_MASK
 (0x1U)

	)

8684 
	#SYSCON_ASYNCAPBCTRL_ENABLE_SHIFT
 (0U)

	)

8685 
	#SYSCON_ASYNCAPBCTRL_ENABLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_ASYNCAPBCTRL_ENABLE_SHIFT
)Ë& 
SYSCON_ASYNCAPBCTRL_ENABLE_MASK
)

	)

8688 
	#SYSCON_PIOPORCAP_PIOPORCAP_MASK
 (0xFFFFFFFFU)

	)

8689 
	#SYSCON_PIOPORCAP_PIOPORCAP_SHIFT
 (0U)

	)

8690 
	#SYSCON_PIOPORCAP_PIOPORCAP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PIOPORCAP_PIOPORCAP_SHIFT
)Ë& 
SYSCON_PIOPORCAP_PIOPORCAP_MASK
)

	)

8693 
	#SYSCON_PIOPORCAP_COUNT
 (2U)

	)

8696 
	#SYSCON_PIORESCAP_PIORESCAP_MASK
 (0xFFFFFFFFU)

	)

8697 
	#SYSCON_PIORESCAP_PIORESCAP_SHIFT
 (0U)

	)

8698 
	#SYSCON_PIORESCAP_PIORESCAP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PIORESCAP_PIORESCAP_SHIFT
)Ë& 
SYSCON_PIORESCAP_PIORESCAP_MASK
)

	)

8701 
	#SYSCON_PIORESCAP_COUNT
 (2U)

	)

8704 
	#SYSCON_PRESETCTRL_MRT_RST_MASK
 (0x1U)

	)

8705 
	#SYSCON_PRESETCTRL_MRT_RST_SHIFT
 (0U)

	)

8706 
	#SYSCON_PRESETCTRL_MRT_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_MRT_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_MRT_RST_MASK
)

	)

8707 
	#SYSCON_PRESETCTRL_SCT0_RST_MASK
 (0x4U)

	)

8708 
	#SYSCON_PRESETCTRL_SCT0_RST_SHIFT
 (2U)

	)

8709 
	#SYSCON_PRESETCTRL_SCT0_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_SCT0_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_SCT0_RST_MASK
)

	)

8710 
	#SYSCON_PRESETCTRL_LCD_RST_MASK
 (0x4U)

	)

8711 
	#SYSCON_PRESETCTRL_LCD_RST_SHIFT
 (2U)

	)

8712 
	#SYSCON_PRESETCTRL_LCD_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_LCD_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_LCD_RST_MASK
)

	)

8713 
	#SYSCON_PRESETCTRL_SDIO_RST_MASK
 (0x8U)

	)

8714 
	#SYSCON_PRESETCTRL_SDIO_RST_SHIFT
 (3U)

	)

8715 
	#SYSCON_PRESETCTRL_SDIO_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_SDIO_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_SDIO_RST_MASK
)

	)

8716 
	#SYSCON_PRESETCTRL_USB1H_RST_MASK
 (0x10U)

	)

8717 
	#SYSCON_PRESETCTRL_USB1H_RST_SHIFT
 (4U)

	)

8718 
	#SYSCON_PRESETCTRL_USB1H_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_USB1H_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_USB1H_RST_MASK
)

	)

8719 
	#SYSCON_PRESETCTRL_USB1D_RST_MASK
 (0x20U)

	)

8720 
	#SYSCON_PRESETCTRL_USB1D_RST_SHIFT
 (5U)

	)

8721 
	#SYSCON_PRESETCTRL_USB1D_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_USB1D_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_USB1D_RST_MASK
)

	)

8722 
	#SYSCON_PRESETCTRL_USB1RAM_RST_MASK
 (0x40U)

	)

8723 
	#SYSCON_PRESETCTRL_USB1RAM_RST_SHIFT
 (6U)

	)

8724 
	#SYSCON_PRESETCTRL_USB1RAM_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_USB1RAM_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_USB1RAM_RST_MASK
)

	)

8725 
	#SYSCON_PRESETCTRL_EMC_RESET_MASK
 (0x80U)

	)

8726 
	#SYSCON_PRESETCTRL_EMC_RESET_SHIFT
 (7U)

	)

8727 
	#SYSCON_PRESETCTRL_EMC_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_EMC_RESET_SHIFT
)Ë& 
SYSCON_PRESETCTRL_EMC_RESET_MASK
)

	)

8728 
	#SYSCON_PRESETCTRL_FLASH_RST_MASK
 (0x80U)

	)

8729 
	#SYSCON_PRESETCTRL_FLASH_RST_SHIFT
 (7U)

	)

8730 
	#SYSCON_PRESETCTRL_FLASH_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_FLASH_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_FLASH_RST_MASK
)

	)

8731 
	#SYSCON_PRESETCTRL_MCAN0_RST_MASK
 (0x80U)

	)

8732 
	#SYSCON_PRESETCTRL_MCAN0_RST_SHIFT
 (7U)

	)

8733 
	#SYSCON_PRESETCTRL_MCAN0_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_MCAN0_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_MCAN0_RST_MASK
)

	)

8734 
	#SYSCON_PRESETCTRL_FMC_RST_MASK
 (0x100U)

	)

8735 
	#SYSCON_PRESETCTRL_FMC_RST_SHIFT
 (8U)

	)

8736 
	#SYSCON_PRESETCTRL_FMC_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_FMC_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_FMC_RST_MASK
)

	)

8737 
	#SYSCON_PRESETCTRL_ETH_RST_MASK
 (0x100U)

	)

8738 
	#SYSCON_PRESETCTRL_ETH_RST_SHIFT
 (8U)

	)

8739 
	#SYSCON_PRESETCTRL_ETH_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_ETH_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_ETH_RST_MASK
)

	)

8740 
	#SYSCON_PRESETCTRL_MCAN1_RST_MASK
 (0x100U)

	)

8741 
	#SYSCON_PRESETCTRL_MCAN1_RST_SHIFT
 (8U)

	)

8742 
	#SYSCON_PRESETCTRL_MCAN1_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_MCAN1_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_MCAN1_RST_MASK
)

	)

8743 
	#SYSCON_PRESETCTRL_GPIO4_RST_MASK
 (0x200U)

	)

8744 
	#SYSCON_PRESETCTRL_GPIO4_RST_SHIFT
 (9U)

	)

8745 
	#SYSCON_PRESETCTRL_GPIO4_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_GPIO4_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_GPIO4_RST_MASK
)

	)

8746 
	#SYSCON_PRESETCTRL_EEPROM_RST_MASK
 (0x200U)

	)

8747 
	#SYSCON_PRESETCTRL_EEPROM_RST_SHIFT
 (9U)

	)

8748 
	#SYSCON_PRESETCTRL_EEPROM_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_EEPROM_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_EEPROM_RST_MASK
)

	)

8749 
	#SYSCON_PRESETCTRL_GPIO5_RST_MASK
 (0x400U)

	)

8750 
	#SYSCON_PRESETCTRL_GPIO5_RST_SHIFT
 (10U)

	)

8751 
	#SYSCON_PRESETCTRL_GPIO5_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_GPIO5_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_GPIO5_RST_MASK
)

	)

8752 
	#SYSCON_PRESETCTRL_UTICK_RST_MASK
 (0x400U)

	)

8753 
	#SYSCON_PRESETCTRL_UTICK_RST_SHIFT
 (10U)

	)

8754 
	#SYSCON_PRESETCTRL_UTICK_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_UTICK_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_UTICK_RST_MASK
)

	)

8755 
	#SYSCON_PRESETCTRL_SPIFI_RST_MASK
 (0x400U)

	)

8756 
	#SYSCON_PRESETCTRL_SPIFI_RST_SHIFT
 (10U)

	)

8757 
	#SYSCON_PRESETCTRL_SPIFI_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_SPIFI_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_SPIFI_RST_MASK
)

	)

8758 
	#SYSCON_PRESETCTRL_AES_RST_MASK
 (0x800U)

	)

8759 
	#SYSCON_PRESETCTRL_AES_RST_SHIFT
 (11U)

	)

8760 
	#SYSCON_PRESETCTRL_AES_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_AES_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_AES_RST_MASK
)

	)

8761 
	#SYSCON_PRESETCTRL_MUX_RST_MASK
 (0x800U)

	)

8762 
	#SYSCON_PRESETCTRL_MUX_RST_SHIFT
 (11U)

	)

8763 
	#SYSCON_PRESETCTRL_MUX_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_MUX_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_MUX_RST_MASK
)

	)

8764 
	#SYSCON_PRESETCTRL_FC0_RST_MASK
 (0x800U)

	)

8765 
	#SYSCON_PRESETCTRL_FC0_RST_SHIFT
 (11U)

	)

8766 
	#SYSCON_PRESETCTRL_FC0_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_FC0_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_FC0_RST_MASK
)

	)

8767 
	#SYSCON_PRESETCTRL_OTP_RST_MASK
 (0x1000U)

	)

8768 
	#SYSCON_PRESETCTRL_OTP_RST_SHIFT
 (12U)

	)

8769 
	#SYSCON_PRESETCTRL_OTP_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_OTP_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_OTP_RST_MASK
)

	)

8770 
	#SYSCON_PRESETCTRL_FC1_RST_MASK
 (0x1000U)

	)

8771 
	#SYSCON_PRESETCTRL_FC1_RST_SHIFT
 (12U)

	)

8772 
	#SYSCON_PRESETCTRL_FC1_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_FC1_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_FC1_RST_MASK
)

	)

8773 
	#SYSCON_PRESETCTRL_IOCON_RST_MASK
 (0x2000U)

	)

8774 
	#SYSCON_PRESETCTRL_IOCON_RST_SHIFT
 (13U)

	)

8775 
	#SYSCON_PRESETCTRL_IOCON_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_IOCON_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_IOCON_RST_MASK
)

	)

8776 
	#SYSCON_PRESETCTRL_RNG_RST_MASK
 (0x2000U)

	)

8777 
	#SYSCON_PRESETCTRL_RNG_RST_SHIFT
 (13U)

	)

8778 
	#SYSCON_PRESETCTRL_RNG_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_RNG_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_RNG_RST_MASK
)

	)

8779 
	#SYSCON_PRESETCTRL_FC2_RST_MASK
 (0x2000U)

	)

8780 
	#SYSCON_PRESETCTRL_FC2_RST_SHIFT
 (13U)

	)

8781 
	#SYSCON_PRESETCTRL_FC2_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_FC2_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_FC2_RST_MASK
)

	)

8782 
	#SYSCON_PRESETCTRL_FC8_RST_MASK
 (0x4000U)

	)

8783 
	#SYSCON_PRESETCTRL_FC8_RST_SHIFT
 (14U)

	)

8784 
	#SYSCON_PRESETCTRL_FC8_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_FC8_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_FC8_RST_MASK
)

	)

8785 
	#SYSCON_PRESETCTRL_FC3_RST_MASK
 (0x4000U)

	)

8786 
	#SYSCON_PRESETCTRL_FC3_RST_SHIFT
 (14U)

	)

8787 
	#SYSCON_PRESETCTRL_FC3_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_FC3_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_FC3_RST_MASK
)

	)

8788 
	#SYSCON_PRESETCTRL_GPIO0_RST_MASK
 (0x4000U)

	)

8789 
	#SYSCON_PRESETCTRL_GPIO0_RST_SHIFT
 (14U)

	)

8790 
	#SYSCON_PRESETCTRL_GPIO0_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_GPIO0_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_GPIO0_RST_MASK
)

	)

8791 
	#SYSCON_PRESETCTRL_GPIO1_RST_MASK
 (0x8000U)

	)

8792 
	#SYSCON_PRESETCTRL_GPIO1_RST_SHIFT
 (15U)

	)

8793 
	#SYSCON_PRESETCTRL_GPIO1_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_GPIO1_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_GPIO1_RST_MASK
)

	)

8794 
	#SYSCON_PRESETCTRL_FC9_RST_MASK
 (0x8000U)

	)

8795 
	#SYSCON_PRESETCTRL_FC9_RST_SHIFT
 (15U)

	)

8796 
	#SYSCON_PRESETCTRL_FC9_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_FC9_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_FC9_RST_MASK
)

	)

8797 
	#SYSCON_PRESETCTRL_FC4_RST_MASK
 (0x8000U)

	)

8798 
	#SYSCON_PRESETCTRL_FC4_RST_SHIFT
 (15U)

	)

8799 
	#SYSCON_PRESETCTRL_FC4_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_FC4_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_FC4_RST_MASK
)

	)

8800 
	#SYSCON_PRESETCTRL_USB0HMR_RST_MASK
 (0x10000U)

	)

8801 
	#SYSCON_PRESETCTRL_USB0HMR_RST_SHIFT
 (16U)

	)

8802 
	#SYSCON_PRESETCTRL_USB0HMR_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_USB0HMR_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_USB0HMR_RST_MASK
)

	)

8803 
	#SYSCON_PRESETCTRL_GPIO2_RST_MASK
 (0x10000U)

	)

8804 
	#SYSCON_PRESETCTRL_GPIO2_RST_SHIFT
 (16U)

	)

8805 
	#SYSCON_PRESETCTRL_GPIO2_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_GPIO2_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_GPIO2_RST_MASK
)

	)

8806 
	#SYSCON_PRESETCTRL_FC5_RST_MASK
 (0x10000U)

	)

8807 
	#SYSCON_PRESETCTRL_FC5_RST_SHIFT
 (16U)

	)

8808 
	#SYSCON_PRESETCTRL_FC5_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_FC5_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_FC5_RST_MASK
)

	)

8809 
	#SYSCON_PRESETCTRL_GPIO3_RST_MASK
 (0x20000U)

	)

8810 
	#SYSCON_PRESETCTRL_GPIO3_RST_SHIFT
 (17U)

	)

8811 
	#SYSCON_PRESETCTRL_GPIO3_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_GPIO3_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_GPIO3_RST_MASK
)

	)

8812 
	#SYSCON_PRESETCTRL_FC6_RST_MASK
 (0x20000U)

	)

8813 
	#SYSCON_PRESETCTRL_FC6_RST_SHIFT
 (17U)

	)

8814 
	#SYSCON_PRESETCTRL_FC6_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_FC6_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_FC6_RST_MASK
)

	)

8815 
	#SYSCON_PRESETCTRL_USB0HSL_RST_MASK
 (0x20000U)

	)

8816 
	#SYSCON_PRESETCTRL_USB0HSL_RST_SHIFT
 (17U)

	)

8817 
	#SYSCON_PRESETCTRL_USB0HSL_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_USB0HSL_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_USB0HSL_RST_MASK
)

	)

8818 
	#SYSCON_PRESETCTRL_FC7_RST_MASK
 (0x40000U)

	)

8819 
	#SYSCON_PRESETCTRL_FC7_RST_SHIFT
 (18U)

	)

8820 
	#SYSCON_PRESETCTRL_FC7_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_FC7_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_FC7_RST_MASK
)

	)

8821 
	#SYSCON_PRESETCTRL_SHA_RST_MASK
 (0x40000U)

	)

8822 
	#SYSCON_PRESETCTRL_SHA_RST_SHIFT
 (18U)

	)

8823 
	#SYSCON_PRESETCTRL_SHA_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_SHA_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_SHA_RST_MASK
)

	)

8824 
	#SYSCON_PRESETCTRL_PINT_RST_MASK
 (0x40000U)

	)

8825 
	#SYSCON_PRESETCTRL_PINT_RST_SHIFT
 (18U)

	)

8826 
	#SYSCON_PRESETCTRL_PINT_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_PINT_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_PINT_RST_MASK
)

	)

8827 
	#SYSCON_PRESETCTRL_DMIC_RST_MASK
 (0x80000U)

	)

8828 
	#SYSCON_PRESETCTRL_DMIC_RST_SHIFT
 (19U)

	)

8829 
	#SYSCON_PRESETCTRL_DMIC_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_DMIC_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_DMIC_RST_MASK
)

	)

8830 
	#SYSCON_PRESETCTRL_SC0_RST_MASK
 (0x80000U)

	)

8831 
	#SYSCON_PRESETCTRL_SC0_RST_SHIFT
 (19U)

	)

8832 
	#SYSCON_PRESETCTRL_SC0_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_SC0_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_SC0_RST_MASK
)

	)

8833 
	#SYSCON_PRESETCTRL_GINT_RST_MASK
 (0x80000U)

	)

8834 
	#SYSCON_PRESETCTRL_GINT_RST_SHIFT
 (19U)

	)

8835 
	#SYSCON_PRESETCTRL_GINT_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_GINT_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_GINT_RST_MASK
)

	)

8836 
	#SYSCON_PRESETCTRL_SC1_RST_MASK
 (0x100000U)

	)

8837 
	#SYSCON_PRESETCTRL_SC1_RST_SHIFT
 (20U)

	)

8838 
	#SYSCON_PRESETCTRL_SC1_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_SC1_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_SC1_RST_MASK
)

	)

8839 
	#SYSCON_PRESETCTRL_DMA0_RST_MASK
 (0x100000U)

	)

8840 
	#SYSCON_PRESETCTRL_DMA0_RST_SHIFT
 (20U)

	)

8841 
	#SYSCON_PRESETCTRL_DMA0_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_DMA0_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_DMA0_RST_MASK
)

	)

8842 
	#SYSCON_PRESETCTRL_CRC_RST_MASK
 (0x200000U)

	)

8843 
	#SYSCON_PRESETCTRL_CRC_RST_SHIFT
 (21U)

	)

8844 
	#SYSCON_PRESETCTRL_CRC_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_CRC_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_CRC_RST_MASK
)

	)

8845 
	#SYSCON_PRESETCTRL_CTIMER2_RST_MASK
 (0x400000U)

	)

8846 
	#SYSCON_PRESETCTRL_CTIMER2_RST_SHIFT
 (22U)

	)

8847 
	#SYSCON_PRESETCTRL_CTIMER2_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_CTIMER2_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_CTIMER2_RST_MASK
)

	)

8848 
	#SYSCON_PRESETCTRL_WWDT_RST_MASK
 (0x400000U)

	)

8849 
	#SYSCON_PRESETCTRL_WWDT_RST_SHIFT
 (22U)

	)

8850 
	#SYSCON_PRESETCTRL_WWDT_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_WWDT_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_WWDT_RST_MASK
)

	)

8851 
	#SYSCON_PRESETCTRL_USB0D_RST_MASK
 (0x2000000U)

	)

8852 
	#SYSCON_PRESETCTRL_USB0D_RST_SHIFT
 (25U)

	)

8853 
	#SYSCON_PRESETCTRL_USB0D_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_USB0D_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_USB0D_RST_MASK
)

	)

8854 
	#SYSCON_PRESETCTRL_CTIMER0_RST_MASK
 (0x4000000U)

	)

8855 
	#SYSCON_PRESETCTRL_CTIMER0_RST_SHIFT
 (26U)

	)

8856 
	#SYSCON_PRESETCTRL_CTIMER0_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_CTIMER0_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_CTIMER0_RST_MASK
)

	)

8857 
	#SYSCON_PRESETCTRL_ADC0_RST_MASK
 (0x8000000U)

	)

8858 
	#SYSCON_PRESETCTRL_ADC0_RST_SHIFT
 (27U)

	)

8859 
	#SYSCON_PRESETCTRL_ADC0_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_ADC0_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_ADC0_RST_MASK
)

	)

8860 
	#SYSCON_PRESETCTRL_CTIMER1_RST_MASK
 (0x8000000U)

	)

8861 
	#SYSCON_PRESETCTRL_CTIMER1_RST_SHIFT
 (27U)

	)

8862 
	#SYSCON_PRESETCTRL_CTIMER1_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRL_CTIMER1_RST_SHIFT
)Ë& 
SYSCON_PRESETCTRL_CTIMER1_RST_MASK
)

	)

8865 
	#SYSCON_PRESETCTRL_COUNT
 (3U)

	)

8868 
	#SYSCON_PRESETCTRLSET_RST_SET_MASK
 (0xFFFFFFFFU)

	)

8869 
	#SYSCON_PRESETCTRLSET_RST_SET_SHIFT
 (0U)

	)

8870 
	#SYSCON_PRESETCTRLSET_RST_SET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRLSET_RST_SET_SHIFT
)Ë& 
SYSCON_PRESETCTRLSET_RST_SET_MASK
)

	)

8873 
	#SYSCON_PRESETCTRLSET_COUNT
 (3U)

	)

8876 
	#SYSCON_PRESETCTRLCLR_RST_CLR_MASK
 (0xFFFFFFFFU)

	)

8877 
	#SYSCON_PRESETCTRLCLR_RST_CLR_SHIFT
 (0U)

	)

8878 
	#SYSCON_PRESETCTRLCLR_RST_CLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PRESETCTRLCLR_RST_CLR_SHIFT
)Ë& 
SYSCON_PRESETCTRLCLR_RST_CLR_MASK
)

	)

8881 
	#SYSCON_PRESETCTRLCLR_COUNT
 (3U)

	)

8884 
	#SYSCON_SYSRSTSTAT_POR_MASK
 (0x1U)

	)

8885 
	#SYSCON_SYSRSTSTAT_POR_SHIFT
 (0U)

	)

8886 
	#SYSCON_SYSRSTSTAT_POR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSRSTSTAT_POR_SHIFT
)Ë& 
SYSCON_SYSRSTSTAT_POR_MASK
)

	)

8887 
	#SYSCON_SYSRSTSTAT_EXTRST_MASK
 (0x2U)

	)

8888 
	#SYSCON_SYSRSTSTAT_EXTRST_SHIFT
 (1U)

	)

8889 
	#SYSCON_SYSRSTSTAT_EXTRST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSRSTSTAT_EXTRST_SHIFT
)Ë& 
SYSCON_SYSRSTSTAT_EXTRST_MASK
)

	)

8890 
	#SYSCON_SYSRSTSTAT_WDT_MASK
 (0x4U)

	)

8891 
	#SYSCON_SYSRSTSTAT_WDT_SHIFT
 (2U)

	)

8892 
	#SYSCON_SYSRSTSTAT_WDT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSRSTSTAT_WDT_SHIFT
)Ë& 
SYSCON_SYSRSTSTAT_WDT_MASK
)

	)

8893 
	#SYSCON_SYSRSTSTAT_BOD_MASK
 (0x8U)

	)

8894 
	#SYSCON_SYSRSTSTAT_BOD_SHIFT
 (3U)

	)

8895 
	#SYSCON_SYSRSTSTAT_BOD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSRSTSTAT_BOD_SHIFT
)Ë& 
SYSCON_SYSRSTSTAT_BOD_MASK
)

	)

8896 
	#SYSCON_SYSRSTSTAT_SYSRST_MASK
 (0x10U)

	)

8897 
	#SYSCON_SYSRSTSTAT_SYSRST_SHIFT
 (4U)

	)

8898 
	#SYSCON_SYSRSTSTAT_SYSRST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSRSTSTAT_SYSRST_SHIFT
)Ë& 
SYSCON_SYSRSTSTAT_SYSRST_MASK
)

	)

8901 
	#SYSCON_AHBCLKCTRL_MRT_MASK
 (0x1U)

	)

8902 
	#SYSCON_AHBCLKCTRL_MRT_SHIFT
 (0U)

	)

8903 
	#SYSCON_AHBCLKCTRL_MRT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_MRT_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_MRT_MASK
)

	)

8904 
	#SYSCON_AHBCLKCTRL_RIT_MASK
 (0x2U)

	)

8905 
	#SYSCON_AHBCLKCTRL_RIT_SHIFT
 (1U)

	)

8906 
	#SYSCON_AHBCLKCTRL_RIT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_RIT_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_RIT_MASK
)

	)

8907 
	#SYSCON_AHBCLKCTRL_ROM_MASK
 (0x2U)

	)

8908 
	#SYSCON_AHBCLKCTRL_ROM_SHIFT
 (1U)

	)

8909 
	#SYSCON_AHBCLKCTRL_ROM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_ROM_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_ROM_MASK
)

	)

8910 
	#SYSCON_AHBCLKCTRL_SCT0_MASK
 (0x4U)

	)

8911 
	#SYSCON_AHBCLKCTRL_SCT0_SHIFT
 (2U)

	)

8912 
	#SYSCON_AHBCLKCTRL_SCT0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_SCT0_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_SCT0_MASK
)

	)

8913 
	#SYSCON_AHBCLKCTRL_LCD_MASK
 (0x4U)

	)

8914 
	#SYSCON_AHBCLKCTRL_LCD_SHIFT
 (2U)

	)

8915 
	#SYSCON_AHBCLKCTRL_LCD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_LCD_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_LCD_MASK
)

	)

8916 
	#SYSCON_AHBCLKCTRL_SRAM1_MASK
 (0x8U)

	)

8917 
	#SYSCON_AHBCLKCTRL_SRAM1_SHIFT
 (3U)

	)

8918 
	#SYSCON_AHBCLKCTRL_SRAM1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_SRAM1_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_SRAM1_MASK
)

	)

8919 
	#SYSCON_AHBCLKCTRL_SDIO_MASK
 (0x8U)

	)

8920 
	#SYSCON_AHBCLKCTRL_SDIO_SHIFT
 (3U)

	)

8921 
	#SYSCON_AHBCLKCTRL_SDIO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_SDIO_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_SDIO_MASK
)

	)

8922 
	#SYSCON_AHBCLKCTRL_SRAM2_MASK
 (0x10U)

	)

8923 
	#SYSCON_AHBCLKCTRL_SRAM2_SHIFT
 (4U)

	)

8924 
	#SYSCON_AHBCLKCTRL_SRAM2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_SRAM2_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_SRAM2_MASK
)

	)

8925 
	#SYSCON_AHBCLKCTRL_USB1H_MASK
 (0x10U)

	)

8926 
	#SYSCON_AHBCLKCTRL_USB1H_SHIFT
 (4U)

	)

8927 
	#SYSCON_AHBCLKCTRL_USB1H
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_USB1H_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_USB1H_MASK
)

	)

8928 
	#SYSCON_AHBCLKCTRL_SRAM3_MASK
 (0x20U)

	)

8929 
	#SYSCON_AHBCLKCTRL_SRAM3_SHIFT
 (5U)

	)

8930 
	#SYSCON_AHBCLKCTRL_SRAM3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_SRAM3_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_SRAM3_MASK
)

	)

8931 
	#SYSCON_AHBCLKCTRL_USB1D_MASK
 (0x20U)

	)

8932 
	#SYSCON_AHBCLKCTRL_USB1D_SHIFT
 (5U)

	)

8933 
	#SYSCON_AHBCLKCTRL_USB1D
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_USB1D_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_USB1D_MASK
)

	)

8934 
	#SYSCON_AHBCLKCTRL_USB1RAM_MASK
 (0x40U)

	)

8935 
	#SYSCON_AHBCLKCTRL_USB1RAM_SHIFT
 (6U)

	)

8936 
	#SYSCON_AHBCLKCTRL_USB1RAM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_USB1RAM_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_USB1RAM_MASK
)

	)

8937 
	#SYSCON_AHBCLKCTRL_FLASH_MASK
 (0x80U)

	)

8938 
	#SYSCON_AHBCLKCTRL_FLASH_SHIFT
 (7U)

	)

8939 
	#SYSCON_AHBCLKCTRL_FLASH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_FLASH_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_FLASH_MASK
)

	)

8940 
	#SYSCON_AHBCLKCTRL_EMC_MASK
 (0x80U)

	)

8941 
	#SYSCON_AHBCLKCTRL_EMC_SHIFT
 (7U)

	)

8942 
	#SYSCON_AHBCLKCTRL_EMC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_EMC_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_EMC_MASK
)

	)

8943 
	#SYSCON_AHBCLKCTRL_MCAN0_MASK
 (0x80U)

	)

8944 
	#SYSCON_AHBCLKCTRL_MCAN0_SHIFT
 (7U)

	)

8945 
	#SYSCON_AHBCLKCTRL_MCAN0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_MCAN0_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_MCAN0_MASK
)

	)

8946 
	#SYSCON_AHBCLKCTRL_FMC_MASK
 (0x100U)

	)

8947 
	#SYSCON_AHBCLKCTRL_FMC_SHIFT
 (8U)

	)

8948 
	#SYSCON_AHBCLKCTRL_FMC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_FMC_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_FMC_MASK
)

	)

8949 
	#SYSCON_AHBCLKCTRL_ETH_MASK
 (0x100U)

	)

8950 
	#SYSCON_AHBCLKCTRL_ETH_SHIFT
 (8U)

	)

8951 
	#SYSCON_AHBCLKCTRL_ETH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_ETH_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_ETH_MASK
)

	)

8952 
	#SYSCON_AHBCLKCTRL_MCAN1_MASK
 (0x100U)

	)

8953 
	#SYSCON_AHBCLKCTRL_MCAN1_SHIFT
 (8U)

	)

8954 
	#SYSCON_AHBCLKCTRL_MCAN1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_MCAN1_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_MCAN1_MASK
)

	)

8955 
	#SYSCON_AHBCLKCTRL_EEPROM_MASK
 (0x200U)

	)

8956 
	#SYSCON_AHBCLKCTRL_EEPROM_SHIFT
 (9U)

	)

8957 
	#SYSCON_AHBCLKCTRL_EEPROM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_EEPROM_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_EEPROM_MASK
)

	)

8958 
	#SYSCON_AHBCLKCTRL_GPIO4_MASK
 (0x200U)

	)

8959 
	#SYSCON_AHBCLKCTRL_GPIO4_SHIFT
 (9U)

	)

8960 
	#SYSCON_AHBCLKCTRL_GPIO4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_GPIO4_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_GPIO4_MASK
)

	)

8961 
	#SYSCON_AHBCLKCTRL_GPIO5_MASK
 (0x400U)

	)

8962 
	#SYSCON_AHBCLKCTRL_GPIO5_SHIFT
 (10U)

	)

8963 
	#SYSCON_AHBCLKCTRL_GPIO5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_GPIO5_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_GPIO5_MASK
)

	)

8964 
	#SYSCON_AHBCLKCTRL_UTICK_MASK
 (0x400U)

	)

8965 
	#SYSCON_AHBCLKCTRL_UTICK_SHIFT
 (10U)

	)

8966 
	#SYSCON_AHBCLKCTRL_UTICK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_UTICK_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_UTICK_MASK
)

	)

8967 
	#SYSCON_AHBCLKCTRL_SPIFI_MASK
 (0x400U)

	)

8968 
	#SYSCON_AHBCLKCTRL_SPIFI_SHIFT
 (10U)

	)

8969 
	#SYSCON_AHBCLKCTRL_SPIFI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_SPIFI_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_SPIFI_MASK
)

	)

8970 
	#SYSCON_AHBCLKCTRL_INPUTMUX_MASK
 (0x800U)

	)

8971 
	#SYSCON_AHBCLKCTRL_INPUTMUX_SHIFT
 (11U)

	)

8972 
	#SYSCON_AHBCLKCTRL_INPUTMUX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_INPUTMUX_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_INPUTMUX_MASK
)

	)

8973 
	#SYSCON_AHBCLKCTRL_AES_MASK
 (0x800U)

	)

8974 
	#SYSCON_AHBCLKCTRL_AES_SHIFT
 (11U)

	)

8975 
	#SYSCON_AHBCLKCTRL_AES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_AES_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_AES_MASK
)

	)

8976 
	#SYSCON_AHBCLKCTRL_FLEXCOMM0_MASK
 (0x800U)

	)

8977 
	#SYSCON_AHBCLKCTRL_FLEXCOMM0_SHIFT
 (11U)

	)

8978 
	#SYSCON_AHBCLKCTRL_FLEXCOMM0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_FLEXCOMM0_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_FLEXCOMM0_MASK
)

	)

8979 
	#SYSCON_AHBCLKCTRL_OTP_MASK
 (0x1000U)

	)

8980 
	#SYSCON_AHBCLKCTRL_OTP_SHIFT
 (12U)

	)

8981 
	#SYSCON_AHBCLKCTRL_OTP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_OTP_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_OTP_MASK
)

	)

8982 
	#SYSCON_AHBCLKCTRL_FLEXCOMM1_MASK
 (0x1000U)

	)

8983 
	#SYSCON_AHBCLKCTRL_FLEXCOMM1_SHIFT
 (12U)

	)

8984 
	#SYSCON_AHBCLKCTRL_FLEXCOMM1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_FLEXCOMM1_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_FLEXCOMM1_MASK
)

	)

8985 
	#SYSCON_AHBCLKCTRL_RNG_MASK
 (0x2000U)

	)

8986 
	#SYSCON_AHBCLKCTRL_RNG_SHIFT
 (13U)

	)

8987 
	#SYSCON_AHBCLKCTRL_RNG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_RNG_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_RNG_MASK
)

	)

8988 
	#SYSCON_AHBCLKCTRL_IOCON_MASK
 (0x2000U)

	)

8989 
	#SYSCON_AHBCLKCTRL_IOCON_SHIFT
 (13U)

	)

8990 
	#SYSCON_AHBCLKCTRL_IOCON
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_IOCON_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_IOCON_MASK
)

	)

8991 
	#SYSCON_AHBCLKCTRL_FLEXCOMM2_MASK
 (0x2000U)

	)

8992 
	#SYSCON_AHBCLKCTRL_FLEXCOMM2_SHIFT
 (13U)

	)

8993 
	#SYSCON_AHBCLKCTRL_FLEXCOMM2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_FLEXCOMM2_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_FLEXCOMM2_MASK
)

	)

8994 
	#SYSCON_AHBCLKCTRL_GPIO0_MASK
 (0x4000U)

	)

8995 
	#SYSCON_AHBCLKCTRL_GPIO0_SHIFT
 (14U)

	)

8996 
	#SYSCON_AHBCLKCTRL_GPIO0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_GPIO0_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_GPIO0_MASK
)

	)

8997 
	#SYSCON_AHBCLKCTRL_FLEXCOMM3_MASK
 (0x4000U)

	)

8998 
	#SYSCON_AHBCLKCTRL_FLEXCOMM3_SHIFT
 (14U)

	)

8999 
	#SYSCON_AHBCLKCTRL_FLEXCOMM3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_FLEXCOMM3_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_FLEXCOMM3_MASK
)

	)

9000 
	#SYSCON_AHBCLKCTRL_FLEXCOMM8_MASK
 (0x4000U)

	)

9001 
	#SYSCON_AHBCLKCTRL_FLEXCOMM8_SHIFT
 (14U)

	)

9002 
	#SYSCON_AHBCLKCTRL_FLEXCOMM8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_FLEXCOMM8_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_FLEXCOMM8_MASK
)

	)

9003 
	#SYSCON_AHBCLKCTRL_FLEXCOMM9_MASK
 (0x8000U)

	)

9004 
	#SYSCON_AHBCLKCTRL_FLEXCOMM9_SHIFT
 (15U)

	)

9005 
	#SYSCON_AHBCLKCTRL_FLEXCOMM9
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_FLEXCOMM9_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_FLEXCOMM9_MASK
)

	)

9006 
	#SYSCON_AHBCLKCTRL_FLEXCOMM4_MASK
 (0x8000U)

	)

9007 
	#SYSCON_AHBCLKCTRL_FLEXCOMM4_SHIFT
 (15U)

	)

9008 
	#SYSCON_AHBCLKCTRL_FLEXCOMM4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_FLEXCOMM4_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_FLEXCOMM4_MASK
)

	)

9009 
	#SYSCON_AHBCLKCTRL_GPIO1_MASK
 (0x8000U)

	)

9010 
	#SYSCON_AHBCLKCTRL_GPIO1_SHIFT
 (15U)

	)

9011 
	#SYSCON_AHBCLKCTRL_GPIO1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_GPIO1_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_GPIO1_MASK
)

	)

9012 
	#SYSCON_AHBCLKCTRL_GPIO2_MASK
 (0x10000U)

	)

9013 
	#SYSCON_AHBCLKCTRL_GPIO2_SHIFT
 (16U)

	)

9014 
	#SYSCON_AHBCLKCTRL_GPIO2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_GPIO2_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_GPIO2_MASK
)

	)

9015 
	#SYSCON_AHBCLKCTRL_USB0HMR_MASK
 (0x10000U)

	)

9016 
	#SYSCON_AHBCLKCTRL_USB0HMR_SHIFT
 (16U)

	)

9017 
	#SYSCON_AHBCLKCTRL_USB0HMR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_USB0HMR_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_USB0HMR_MASK
)

	)

9018 
	#SYSCON_AHBCLKCTRL_FLEXCOMM5_MASK
 (0x10000U)

	)

9019 
	#SYSCON_AHBCLKCTRL_FLEXCOMM5_SHIFT
 (16U)

	)

9020 
	#SYSCON_AHBCLKCTRL_FLEXCOMM5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_FLEXCOMM5_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_FLEXCOMM5_MASK
)

	)

9021 
	#SYSCON_AHBCLKCTRL_FLEXCOMM6_MASK
 (0x20000U)

	)

9022 
	#SYSCON_AHBCLKCTRL_FLEXCOMM6_SHIFT
 (17U)

	)

9023 
	#SYSCON_AHBCLKCTRL_FLEXCOMM6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_FLEXCOMM6_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_FLEXCOMM6_MASK
)

	)

9024 
	#SYSCON_AHBCLKCTRL_GPIO3_MASK
 (0x20000U)

	)

9025 
	#SYSCON_AHBCLKCTRL_GPIO3_SHIFT
 (17U)

	)

9026 
	#SYSCON_AHBCLKCTRL_GPIO3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_GPIO3_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_GPIO3_MASK
)

	)

9027 
	#SYSCON_AHBCLKCTRL_USB0HSL_MASK
 (0x20000U)

	)

9028 
	#SYSCON_AHBCLKCTRL_USB0HSL_SHIFT
 (17U)

	)

9029 
	#SYSCON_AHBCLKCTRL_USB0HSL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_USB0HSL_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_USB0HSL_MASK
)

	)

9030 
	#SYSCON_AHBCLKCTRL_PINT_MASK
 (0x40000U)

	)

9031 
	#SYSCON_AHBCLKCTRL_PINT_SHIFT
 (18U)

	)

9032 
	#SYSCON_AHBCLKCTRL_PINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_PINT_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_PINT_MASK
)

	)

9033 
	#SYSCON_AHBCLKCTRL_SHA0_MASK
 (0x40000U)

	)

9034 
	#SYSCON_AHBCLKCTRL_SHA0_SHIFT
 (18U)

	)

9035 
	#SYSCON_AHBCLKCTRL_SHA0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_SHA0_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_SHA0_MASK
)

	)

9036 
	#SYSCON_AHBCLKCTRL_FLEXCOMM7_MASK
 (0x40000U)

	)

9037 
	#SYSCON_AHBCLKCTRL_FLEXCOMM7_SHIFT
 (18U)

	)

9038 
	#SYSCON_AHBCLKCTRL_FLEXCOMM7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_FLEXCOMM7_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_FLEXCOMM7_MASK
)

	)

9039 
	#SYSCON_AHBCLKCTRL_DMIC_MASK
 (0x80000U)

	)

9040 
	#SYSCON_AHBCLKCTRL_DMIC_SHIFT
 (19U)

	)

9041 
	#SYSCON_AHBCLKCTRL_DMIC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_DMIC_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_DMIC_MASK
)

	)

9042 
	#SYSCON_AHBCLKCTRL_GINT_MASK
 (0x80000U)

	)

9043 
	#SYSCON_AHBCLKCTRL_GINT_SHIFT
 (19U)

	)

9044 
	#SYSCON_AHBCLKCTRL_GINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_GINT_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_GINT_MASK
)

	)

9045 
	#SYSCON_AHBCLKCTRL_SC0_MASK
 (0x80000U)

	)

9046 
	#SYSCON_AHBCLKCTRL_SC0_SHIFT
 (19U)

	)

9047 
	#SYSCON_AHBCLKCTRL_SC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_SC0_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_SC0_MASK
)

	)

9048 
	#SYSCON_AHBCLKCTRL_SC1_MASK
 (0x100000U)

	)

9049 
	#SYSCON_AHBCLKCTRL_SC1_SHIFT
 (20U)

	)

9050 
	#SYSCON_AHBCLKCTRL_SC1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_SC1_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_SC1_MASK
)

	)

9051 
	#SYSCON_AHBCLKCTRL_DMA_MASK
 (0x100000U)

	)

9052 
	#SYSCON_AHBCLKCTRL_DMA_SHIFT
 (20U)

	)

9053 
	#SYSCON_AHBCLKCTRL_DMA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_DMA_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_DMA_MASK
)

	)

9054 
	#SYSCON_AHBCLKCTRL_CRC_MASK
 (0x200000U)

	)

9055 
	#SYSCON_AHBCLKCTRL_CRC_SHIFT
 (21U)

	)

9056 
	#SYSCON_AHBCLKCTRL_CRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_CRC_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_CRC_MASK
)

	)

9057 
	#SYSCON_AHBCLKCTRL_WWDT_MASK
 (0x400000U)

	)

9058 
	#SYSCON_AHBCLKCTRL_WWDT_SHIFT
 (22U)

	)

9059 
	#SYSCON_AHBCLKCTRL_WWDT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_WWDT_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_WWDT_MASK
)

	)

9060 
	#SYSCON_AHBCLKCTRL_CTIMER2_MASK
 (0x400000U)

	)

9061 
	#SYSCON_AHBCLKCTRL_CTIMER2_SHIFT
 (22U)

	)

9062 
	#SYSCON_AHBCLKCTRL_CTIMER2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_CTIMER2_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_CTIMER2_MASK
)

	)

9063 
	#SYSCON_AHBCLKCTRL_RTC_MASK
 (0x800000U)

	)

9064 
	#SYSCON_AHBCLKCTRL_RTC_SHIFT
 (23U)

	)

9065 
	#SYSCON_AHBCLKCTRL_RTC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_RTC_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_RTC_MASK
)

	)

9066 
	#SYSCON_AHBCLKCTRL_USB0D_MASK
 (0x2000000U)

	)

9067 
	#SYSCON_AHBCLKCTRL_USB0D_SHIFT
 (25U)

	)

9068 
	#SYSCON_AHBCLKCTRL_USB0D
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_USB0D_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_USB0D_MASK
)

	)

9069 
	#SYSCON_AHBCLKCTRL_CTIMER0_MASK
 (0x4000000U)

	)

9070 
	#SYSCON_AHBCLKCTRL_CTIMER0_SHIFT
 (26U)

	)

9071 
	#SYSCON_AHBCLKCTRL_CTIMER0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_CTIMER0_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_CTIMER0_MASK
)

	)

9072 
	#SYSCON_AHBCLKCTRL_CTIMER1_MASK
 (0x8000000U)

	)

9073 
	#SYSCON_AHBCLKCTRL_CTIMER1_SHIFT
 (27U)

	)

9074 
	#SYSCON_AHBCLKCTRL_CTIMER1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_CTIMER1_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_CTIMER1_MASK
)

	)

9075 
	#SYSCON_AHBCLKCTRL_ADC0_MASK
 (0x8000000U)

	)

9076 
	#SYSCON_AHBCLKCTRL_ADC0_SHIFT
 (27U)

	)

9077 
	#SYSCON_AHBCLKCTRL_ADC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRL_ADC0_SHIFT
)Ë& 
SYSCON_AHBCLKCTRL_ADC0_MASK
)

	)

9080 
	#SYSCON_AHBCLKCTRL_COUNT
 (3U)

	)

9083 
	#SYSCON_AHBCLKCTRLSET_CLK_SET_MASK
 (0xFFFFFFFFU)

	)

9084 
	#SYSCON_AHBCLKCTRLSET_CLK_SET_SHIFT
 (0U)

	)

9085 
	#SYSCON_AHBCLKCTRLSET_CLK_SET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRLSET_CLK_SET_SHIFT
)Ë& 
SYSCON_AHBCLKCTRLSET_CLK_SET_MASK
)

	)

9088 
	#SYSCON_AHBCLKCTRLSET_COUNT
 (3U)

	)

9091 
	#SYSCON_AHBCLKCTRLCLR_CLK_CLR_MASK
 (0xFFFFFFFFU)

	)

9092 
	#SYSCON_AHBCLKCTRLCLR_CLK_CLR_SHIFT
 (0U)

	)

9093 
	#SYSCON_AHBCLKCTRLCLR_CLK_CLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKCTRLCLR_CLK_CLR_SHIFT
)Ë& 
SYSCON_AHBCLKCTRLCLR_CLK_CLR_MASK
)

	)

9096 
	#SYSCON_AHBCLKCTRLCLR_COUNT
 (3U)

	)

9099 
	#SYSCON_MAINCLKSELA_SEL_MASK
 (0x3U)

	)

9100 
	#SYSCON_MAINCLKSELA_SEL_SHIFT
 (0U)

	)

9101 
	#SYSCON_MAINCLKSELA_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_MAINCLKSELA_SEL_SHIFT
)Ë& 
SYSCON_MAINCLKSELA_SEL_MASK
)

	)

9104 
	#SYSCON_MAINCLKSELB_SEL_MASK
 (0x3U)

	)

9105 
	#SYSCON_MAINCLKSELB_SEL_SHIFT
 (0U)

	)

9106 
	#SYSCON_MAINCLKSELB_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_MAINCLKSELB_SEL_SHIFT
)Ë& 
SYSCON_MAINCLKSELB_SEL_MASK
)

	)

9109 
	#SYSCON_CLKOUTSELA_SEL_MASK
 (0x7U)

	)

9110 
	#SYSCON_CLKOUTSELA_SEL_SHIFT
 (0U)

	)

9111 
	#SYSCON_CLKOUTSELA_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_CLKOUTSELA_SEL_SHIFT
)Ë& 
SYSCON_CLKOUTSELA_SEL_MASK
)

	)

9114 
	#SYSCON_SYSPLLCLKSEL_SEL_MASK
 (0x7U)

	)

9115 
	#SYSCON_SYSPLLCLKSEL_SEL_SHIFT
 (0U)

	)

9116 
	#SYSCON_SYSPLLCLKSEL_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSPLLCLKSEL_SEL_SHIFT
)Ë& 
SYSCON_SYSPLLCLKSEL_SEL_MASK
)

	)

9119 
	#SYSCON_AUDPLLCLKSEL_SEL_MASK
 (0x7U)

	)

9120 
	#SYSCON_AUDPLLCLKSEL_SEL_SHIFT
 (0U)

	)

9121 
	#SYSCON_AUDPLLCLKSEL_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AUDPLLCLKSEL_SEL_SHIFT
)Ë& 
SYSCON_AUDPLLCLKSEL_SEL_MASK
)

	)

9124 
	#SYSCON_SPIFICLKSEL_SEL_MASK
 (0x7U)

	)

9125 
	#SYSCON_SPIFICLKSEL_SEL_SHIFT
 (0U)

	)

9126 
	#SYSCON_SPIFICLKSEL_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SPIFICLKSEL_SEL_SHIFT
)Ë& 
SYSCON_SPIFICLKSEL_SEL_MASK
)

	)

9129 
	#SYSCON_ADCCLKSEL_SEL_MASK
 (0x7U)

	)

9130 
	#SYSCON_ADCCLKSEL_SEL_SHIFT
 (0U)

	)

9131 
	#SYSCON_ADCCLKSEL_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_ADCCLKSEL_SEL_SHIFT
)Ë& 
SYSCON_ADCCLKSEL_SEL_MASK
)

	)

9134 
	#SYSCON_USB0CLKSEL_SEL_MASK
 (0x7U)

	)

9135 
	#SYSCON_USB0CLKSEL_SEL_SHIFT
 (0U)

	)

9136 
	#SYSCON_USB0CLKSEL_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB0CLKSEL_SEL_SHIFT
)Ë& 
SYSCON_USB0CLKSEL_SEL_MASK
)

	)

9139 
	#SYSCON_USB1CLKSEL_SEL_MASK
 (0x7U)

	)

9140 
	#SYSCON_USB1CLKSEL_SEL_SHIFT
 (0U)

	)

9141 
	#SYSCON_USB1CLKSEL_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB1CLKSEL_SEL_SHIFT
)Ë& 
SYSCON_USB1CLKSEL_SEL_MASK
)

	)

9144 
	#SYSCON_FCLKSEL_SEL_MASK
 (0x7U)

	)

9145 
	#SYSCON_FCLKSEL_SEL_SHIFT
 (0U)

	)

9146 
	#SYSCON_FCLKSEL_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FCLKSEL_SEL_SHIFT
)Ë& 
SYSCON_FCLKSEL_SEL_MASK
)

	)

9149 
	#SYSCON_FCLKSEL_COUNT
 (10U)

	)

9152 
	#SYSCON_MCLKCLKSEL_SEL_MASK
 (0x7U)

	)

9153 
	#SYSCON_MCLKCLKSEL_SEL_SHIFT
 (0U)

	)

9154 
	#SYSCON_MCLKCLKSEL_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_MCLKCLKSEL_SEL_SHIFT
)Ë& 
SYSCON_MCLKCLKSEL_SEL_MASK
)

	)

9157 
	#SYSCON_FRGCLKSEL_SEL_MASK
 (0x7U)

	)

9158 
	#SYSCON_FRGCLKSEL_SEL_SHIFT
 (0U)

	)

9159 
	#SYSCON_FRGCLKSEL_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FRGCLKSEL_SEL_SHIFT
)Ë& 
SYSCON_FRGCLKSEL_SEL_MASK
)

	)

9162 
	#SYSCON_DMICCLKSEL_SEL_MASK
 (0x7U)

	)

9163 
	#SYSCON_DMICCLKSEL_SEL_SHIFT
 (0U)

	)

9164 
	#SYSCON_DMICCLKSEL_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_DMICCLKSEL_SEL_SHIFT
)Ë& 
SYSCON_DMICCLKSEL_SEL_MASK
)

	)

9167 
	#SYSCON_SCTCLKSEL_SEL_MASK
 (0x7U)

	)

9168 
	#SYSCON_SCTCLKSEL_SEL_SHIFT
 (0U)

	)

9169 
	#SYSCON_SCTCLKSEL_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SCTCLKSEL_SEL_SHIFT
)Ë& 
SYSCON_SCTCLKSEL_SEL_MASK
)

	)

9172 
	#SYSCON_LCDCLKSEL_SEL_MASK
 (0x3U)

	)

9173 
	#SYSCON_LCDCLKSEL_SEL_SHIFT
 (0U)

	)

9174 
	#SYSCON_LCDCLKSEL_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_LCDCLKSEL_SEL_SHIFT
)Ë& 
SYSCON_LCDCLKSEL_SEL_MASK
)

	)

9177 
	#SYSCON_SDIOCLKSEL_SEL_MASK
 (0x7U)

	)

9178 
	#SYSCON_SDIOCLKSEL_SEL_SHIFT
 (0U)

	)

9179 
	#SYSCON_SDIOCLKSEL_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SDIOCLKSEL_SEL_SHIFT
)Ë& 
SYSCON_SDIOCLKSEL_SEL_MASK
)

	)

9182 
	#SYSCON_SYSTICKCLKDIV_DIV_MASK
 (0xFFU)

	)

9183 
	#SYSCON_SYSTICKCLKDIV_DIV_SHIFT
 (0U)

	)

9184 
	#SYSCON_SYSTICKCLKDIV_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSTICKCLKDIV_DIV_SHIFT
)Ë& 
SYSCON_SYSTICKCLKDIV_DIV_MASK
)

	)

9185 
	#SYSCON_SYSTICKCLKDIV_RESET_MASK
 (0x20000000U)

	)

9186 
	#SYSCON_SYSTICKCLKDIV_RESET_SHIFT
 (29U)

	)

9187 
	#SYSCON_SYSTICKCLKDIV_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSTICKCLKDIV_RESET_SHIFT
)Ë& 
SYSCON_SYSTICKCLKDIV_RESET_MASK
)

	)

9188 
	#SYSCON_SYSTICKCLKDIV_HALT_MASK
 (0x40000000U)

	)

9189 
	#SYSCON_SYSTICKCLKDIV_HALT_SHIFT
 (30U)

	)

9190 
	#SYSCON_SYSTICKCLKDIV_HALT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSTICKCLKDIV_HALT_SHIFT
)Ë& 
SYSCON_SYSTICKCLKDIV_HALT_MASK
)

	)

9191 
	#SYSCON_SYSTICKCLKDIV_REQFLAG_MASK
 (0x80000000U)

	)

9192 
	#SYSCON_SYSTICKCLKDIV_REQFLAG_SHIFT
 (31U)

	)

9193 
	#SYSCON_SYSTICKCLKDIV_REQFLAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSTICKCLKDIV_REQFLAG_SHIFT
)Ë& 
SYSCON_SYSTICKCLKDIV_REQFLAG_MASK
)

	)

9196 
	#SYSCON_ARMTRACECLKDIV_DIV_MASK
 (0xFFU)

	)

9197 
	#SYSCON_ARMTRACECLKDIV_DIV_SHIFT
 (0U)

	)

9198 
	#SYSCON_ARMTRACECLKDIV_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_ARMTRACECLKDIV_DIV_SHIFT
)Ë& 
SYSCON_ARMTRACECLKDIV_DIV_MASK
)

	)

9199 
	#SYSCON_ARMTRACECLKDIV_RESET_MASK
 (0x20000000U)

	)

9200 
	#SYSCON_ARMTRACECLKDIV_RESET_SHIFT
 (29U)

	)

9201 
	#SYSCON_ARMTRACECLKDIV_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_ARMTRACECLKDIV_RESET_SHIFT
)Ë& 
SYSCON_ARMTRACECLKDIV_RESET_MASK
)

	)

9202 
	#SYSCON_ARMTRACECLKDIV_HALT_MASK
 (0x40000000U)

	)

9203 
	#SYSCON_ARMTRACECLKDIV_HALT_SHIFT
 (30U)

	)

9204 
	#SYSCON_ARMTRACECLKDIV_HALT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_ARMTRACECLKDIV_HALT_SHIFT
)Ë& 
SYSCON_ARMTRACECLKDIV_HALT_MASK
)

	)

9205 
	#SYSCON_ARMTRACECLKDIV_REQFLAG_MASK
 (0x80000000U)

	)

9206 
	#SYSCON_ARMTRACECLKDIV_REQFLAG_SHIFT
 (31U)

	)

9207 
	#SYSCON_ARMTRACECLKDIV_REQFLAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_ARMTRACECLKDIV_REQFLAG_SHIFT
)Ë& 
SYSCON_ARMTRACECLKDIV_REQFLAG_MASK
)

	)

9210 
	#SYSCON_CAN0CLKDIV_DIV_MASK
 (0xFFU)

	)

9211 
	#SYSCON_CAN0CLKDIV_DIV_SHIFT
 (0U)

	)

9212 
	#SYSCON_CAN0CLKDIV_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_CAN0CLKDIV_DIV_SHIFT
)Ë& 
SYSCON_CAN0CLKDIV_DIV_MASK
)

	)

9213 
	#SYSCON_CAN0CLKDIV_RESET_MASK
 (0x20000000U)

	)

9214 
	#SYSCON_CAN0CLKDIV_RESET_SHIFT
 (29U)

	)

9215 
	#SYSCON_CAN0CLKDIV_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_CAN0CLKDIV_RESET_SHIFT
)Ë& 
SYSCON_CAN0CLKDIV_RESET_MASK
)

	)

9216 
	#SYSCON_CAN0CLKDIV_HALT_MASK
 (0x40000000U)

	)

9217 
	#SYSCON_CAN0CLKDIV_HALT_SHIFT
 (30U)

	)

9218 
	#SYSCON_CAN0CLKDIV_HALT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_CAN0CLKDIV_HALT_SHIFT
)Ë& 
SYSCON_CAN0CLKDIV_HALT_MASK
)

	)

9219 
	#SYSCON_CAN0CLKDIV_REQFLAG_MASK
 (0x80000000U)

	)

9220 
	#SYSCON_CAN0CLKDIV_REQFLAG_SHIFT
 (31U)

	)

9221 
	#SYSCON_CAN0CLKDIV_REQFLAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_CAN0CLKDIV_REQFLAG_SHIFT
)Ë& 
SYSCON_CAN0CLKDIV_REQFLAG_MASK
)

	)

9224 
	#SYSCON_CAN1CLKDIV_DIV_MASK
 (0xFFU)

	)

9225 
	#SYSCON_CAN1CLKDIV_DIV_SHIFT
 (0U)

	)

9226 
	#SYSCON_CAN1CLKDIV_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_CAN1CLKDIV_DIV_SHIFT
)Ë& 
SYSCON_CAN1CLKDIV_DIV_MASK
)

	)

9227 
	#SYSCON_CAN1CLKDIV_RESET_MASK
 (0x20000000U)

	)

9228 
	#SYSCON_CAN1CLKDIV_RESET_SHIFT
 (29U)

	)

9229 
	#SYSCON_CAN1CLKDIV_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_CAN1CLKDIV_RESET_SHIFT
)Ë& 
SYSCON_CAN1CLKDIV_RESET_MASK
)

	)

9230 
	#SYSCON_CAN1CLKDIV_HALT_MASK
 (0x40000000U)

	)

9231 
	#SYSCON_CAN1CLKDIV_HALT_SHIFT
 (30U)

	)

9232 
	#SYSCON_CAN1CLKDIV_HALT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_CAN1CLKDIV_HALT_SHIFT
)Ë& 
SYSCON_CAN1CLKDIV_HALT_MASK
)

	)

9233 
	#SYSCON_CAN1CLKDIV_REQFLAG_MASK
 (0x80000000U)

	)

9234 
	#SYSCON_CAN1CLKDIV_REQFLAG_SHIFT
 (31U)

	)

9235 
	#SYSCON_CAN1CLKDIV_REQFLAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_CAN1CLKDIV_REQFLAG_SHIFT
)Ë& 
SYSCON_CAN1CLKDIV_REQFLAG_MASK
)

	)

9238 
	#SYSCON_SC0CLKDIV_DIV_MASK
 (0xFFU)

	)

9239 
	#SYSCON_SC0CLKDIV_DIV_SHIFT
 (0U)

	)

9240 
	#SYSCON_SC0CLKDIV_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SC0CLKDIV_DIV_SHIFT
)Ë& 
SYSCON_SC0CLKDIV_DIV_MASK
)

	)

9241 
	#SYSCON_SC0CLKDIV_RESET_MASK
 (0x20000000U)

	)

9242 
	#SYSCON_SC0CLKDIV_RESET_SHIFT
 (29U)

	)

9243 
	#SYSCON_SC0CLKDIV_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SC0CLKDIV_RESET_SHIFT
)Ë& 
SYSCON_SC0CLKDIV_RESET_MASK
)

	)

9244 
	#SYSCON_SC0CLKDIV_HALT_MASK
 (0x40000000U)

	)

9245 
	#SYSCON_SC0CLKDIV_HALT_SHIFT
 (30U)

	)

9246 
	#SYSCON_SC0CLKDIV_HALT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SC0CLKDIV_HALT_SHIFT
)Ë& 
SYSCON_SC0CLKDIV_HALT_MASK
)

	)

9247 
	#SYSCON_SC0CLKDIV_REQFLAG_MASK
 (0x80000000U)

	)

9248 
	#SYSCON_SC0CLKDIV_REQFLAG_SHIFT
 (31U)

	)

9249 
	#SYSCON_SC0CLKDIV_REQFLAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SC0CLKDIV_REQFLAG_SHIFT
)Ë& 
SYSCON_SC0CLKDIV_REQFLAG_MASK
)

	)

9252 
	#SYSCON_SC1CLKDIV_DIV_MASK
 (0xFFU)

	)

9253 
	#SYSCON_SC1CLKDIV_DIV_SHIFT
 (0U)

	)

9254 
	#SYSCON_SC1CLKDIV_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SC1CLKDIV_DIV_SHIFT
)Ë& 
SYSCON_SC1CLKDIV_DIV_MASK
)

	)

9255 
	#SYSCON_SC1CLKDIV_RESET_MASK
 (0x20000000U)

	)

9256 
	#SYSCON_SC1CLKDIV_RESET_SHIFT
 (29U)

	)

9257 
	#SYSCON_SC1CLKDIV_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SC1CLKDIV_RESET_SHIFT
)Ë& 
SYSCON_SC1CLKDIV_RESET_MASK
)

	)

9258 
	#SYSCON_SC1CLKDIV_HALT_MASK
 (0x40000000U)

	)

9259 
	#SYSCON_SC1CLKDIV_HALT_SHIFT
 (30U)

	)

9260 
	#SYSCON_SC1CLKDIV_HALT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SC1CLKDIV_HALT_SHIFT
)Ë& 
SYSCON_SC1CLKDIV_HALT_MASK
)

	)

9261 
	#SYSCON_SC1CLKDIV_REQFLAG_MASK
 (0x80000000U)

	)

9262 
	#SYSCON_SC1CLKDIV_REQFLAG_SHIFT
 (31U)

	)

9263 
	#SYSCON_SC1CLKDIV_REQFLAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SC1CLKDIV_REQFLAG_SHIFT
)Ë& 
SYSCON_SC1CLKDIV_REQFLAG_MASK
)

	)

9266 
	#SYSCON_AHBCLKDIV_DIV_MASK
 (0xFFU)

	)

9267 
	#SYSCON_AHBCLKDIV_DIV_SHIFT
 (0U)

	)

9268 
	#SYSCON_AHBCLKDIV_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKDIV_DIV_SHIFT
)Ë& 
SYSCON_AHBCLKDIV_DIV_MASK
)

	)

9269 
	#SYSCON_AHBCLKDIV_REQFLAG_MASK
 (0x80000000U)

	)

9270 
	#SYSCON_AHBCLKDIV_REQFLAG_SHIFT
 (31U)

	)

9271 
	#SYSCON_AHBCLKDIV_REQFLAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AHBCLKDIV_REQFLAG_SHIFT
)Ë& 
SYSCON_AHBCLKDIV_REQFLAG_MASK
)

	)

9274 
	#SYSCON_CLKOUTDIV_DIV_MASK
 (0xFFU)

	)

9275 
	#SYSCON_CLKOUTDIV_DIV_SHIFT
 (0U)

	)

9276 
	#SYSCON_CLKOUTDIV_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_CLKOUTDIV_DIV_SHIFT
)Ë& 
SYSCON_CLKOUTDIV_DIV_MASK
)

	)

9277 
	#SYSCON_CLKOUTDIV_RESET_MASK
 (0x20000000U)

	)

9278 
	#SYSCON_CLKOUTDIV_RESET_SHIFT
 (29U)

	)

9279 
	#SYSCON_CLKOUTDIV_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_CLKOUTDIV_RESET_SHIFT
)Ë& 
SYSCON_CLKOUTDIV_RESET_MASK
)

	)

9280 
	#SYSCON_CLKOUTDIV_HALT_MASK
 (0x40000000U)

	)

9281 
	#SYSCON_CLKOUTDIV_HALT_SHIFT
 (30U)

	)

9282 
	#SYSCON_CLKOUTDIV_HALT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_CLKOUTDIV_HALT_SHIFT
)Ë& 
SYSCON_CLKOUTDIV_HALT_MASK
)

	)

9283 
	#SYSCON_CLKOUTDIV_REQFLAG_MASK
 (0x80000000U)

	)

9284 
	#SYSCON_CLKOUTDIV_REQFLAG_SHIFT
 (31U)

	)

9285 
	#SYSCON_CLKOUTDIV_REQFLAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_CLKOUTDIV_REQFLAG_SHIFT
)Ë& 
SYSCON_CLKOUTDIV_REQFLAG_MASK
)

	)

9288 
	#SYSCON_FROHFCLKDIV_DIV_MASK
 (0xFFU)

	)

9289 
	#SYSCON_FROHFCLKDIV_DIV_SHIFT
 (0U)

	)

9290 
	#SYSCON_FROHFCLKDIV_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FROHFCLKDIV_DIV_SHIFT
)Ë& 
SYSCON_FROHFCLKDIV_DIV_MASK
)

	)

9291 
	#SYSCON_FROHFCLKDIV_RESET_MASK
 (0x20000000U)

	)

9292 
	#SYSCON_FROHFCLKDIV_RESET_SHIFT
 (29U)

	)

9293 
	#SYSCON_FROHFCLKDIV_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FROHFCLKDIV_RESET_SHIFT
)Ë& 
SYSCON_FROHFCLKDIV_RESET_MASK
)

	)

9294 
	#SYSCON_FROHFCLKDIV_HALT_MASK
 (0x40000000U)

	)

9295 
	#SYSCON_FROHFCLKDIV_HALT_SHIFT
 (30U)

	)

9296 
	#SYSCON_FROHFCLKDIV_HALT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FROHFCLKDIV_HALT_SHIFT
)Ë& 
SYSCON_FROHFCLKDIV_HALT_MASK
)

	)

9297 
	#SYSCON_FROHFCLKDIV_REQFLAG_MASK
 (0x80000000U)

	)

9298 
	#SYSCON_FROHFCLKDIV_REQFLAG_SHIFT
 (31U)

	)

9299 
	#SYSCON_FROHFCLKDIV_REQFLAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FROHFCLKDIV_REQFLAG_SHIFT
)Ë& 
SYSCON_FROHFCLKDIV_REQFLAG_MASK
)

	)

9302 
	#SYSCON_SPIFICLKDIV_DIV_MASK
 (0xFFU)

	)

9303 
	#SYSCON_SPIFICLKDIV_DIV_SHIFT
 (0U)

	)

9304 
	#SYSCON_SPIFICLKDIV_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SPIFICLKDIV_DIV_SHIFT
)Ë& 
SYSCON_SPIFICLKDIV_DIV_MASK
)

	)

9305 
	#SYSCON_SPIFICLKDIV_RESET_MASK
 (0x20000000U)

	)

9306 
	#SYSCON_SPIFICLKDIV_RESET_SHIFT
 (29U)

	)

9307 
	#SYSCON_SPIFICLKDIV_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SPIFICLKDIV_RESET_SHIFT
)Ë& 
SYSCON_SPIFICLKDIV_RESET_MASK
)

	)

9308 
	#SYSCON_SPIFICLKDIV_HALT_MASK
 (0x40000000U)

	)

9309 
	#SYSCON_SPIFICLKDIV_HALT_SHIFT
 (30U)

	)

9310 
	#SYSCON_SPIFICLKDIV_HALT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SPIFICLKDIV_HALT_SHIFT
)Ë& 
SYSCON_SPIFICLKDIV_HALT_MASK
)

	)

9311 
	#SYSCON_SPIFICLKDIV_REQFLAG_MASK
 (0x80000000U)

	)

9312 
	#SYSCON_SPIFICLKDIV_REQFLAG_SHIFT
 (31U)

	)

9313 
	#SYSCON_SPIFICLKDIV_REQFLAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SPIFICLKDIV_REQFLAG_SHIFT
)Ë& 
SYSCON_SPIFICLKDIV_REQFLAG_MASK
)

	)

9316 
	#SYSCON_ADCCLKDIV_DIV_MASK
 (0xFFU)

	)

9317 
	#SYSCON_ADCCLKDIV_DIV_SHIFT
 (0U)

	)

9318 
	#SYSCON_ADCCLKDIV_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_ADCCLKDIV_DIV_SHIFT
)Ë& 
SYSCON_ADCCLKDIV_DIV_MASK
)

	)

9319 
	#SYSCON_ADCCLKDIV_RESET_MASK
 (0x20000000U)

	)

9320 
	#SYSCON_ADCCLKDIV_RESET_SHIFT
 (29U)

	)

9321 
	#SYSCON_ADCCLKDIV_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_ADCCLKDIV_RESET_SHIFT
)Ë& 
SYSCON_ADCCLKDIV_RESET_MASK
)

	)

9322 
	#SYSCON_ADCCLKDIV_HALT_MASK
 (0x40000000U)

	)

9323 
	#SYSCON_ADCCLKDIV_HALT_SHIFT
 (30U)

	)

9324 
	#SYSCON_ADCCLKDIV_HALT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_ADCCLKDIV_HALT_SHIFT
)Ë& 
SYSCON_ADCCLKDIV_HALT_MASK
)

	)

9325 
	#SYSCON_ADCCLKDIV_REQFLAG_MASK
 (0x80000000U)

	)

9326 
	#SYSCON_ADCCLKDIV_REQFLAG_SHIFT
 (31U)

	)

9327 
	#SYSCON_ADCCLKDIV_REQFLAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_ADCCLKDIV_REQFLAG_SHIFT
)Ë& 
SYSCON_ADCCLKDIV_REQFLAG_MASK
)

	)

9330 
	#SYSCON_USB0CLKDIV_DIV_MASK
 (0xFFU)

	)

9331 
	#SYSCON_USB0CLKDIV_DIV_SHIFT
 (0U)

	)

9332 
	#SYSCON_USB0CLKDIV_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB0CLKDIV_DIV_SHIFT
)Ë& 
SYSCON_USB0CLKDIV_DIV_MASK
)

	)

9333 
	#SYSCON_USB0CLKDIV_RESET_MASK
 (0x20000000U)

	)

9334 
	#SYSCON_USB0CLKDIV_RESET_SHIFT
 (29U)

	)

9335 
	#SYSCON_USB0CLKDIV_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB0CLKDIV_RESET_SHIFT
)Ë& 
SYSCON_USB0CLKDIV_RESET_MASK
)

	)

9336 
	#SYSCON_USB0CLKDIV_HALT_MASK
 (0x40000000U)

	)

9337 
	#SYSCON_USB0CLKDIV_HALT_SHIFT
 (30U)

	)

9338 
	#SYSCON_USB0CLKDIV_HALT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB0CLKDIV_HALT_SHIFT
)Ë& 
SYSCON_USB0CLKDIV_HALT_MASK
)

	)

9339 
	#SYSCON_USB0CLKDIV_REQFLAG_MASK
 (0x80000000U)

	)

9340 
	#SYSCON_USB0CLKDIV_REQFLAG_SHIFT
 (31U)

	)

9341 
	#SYSCON_USB0CLKDIV_REQFLAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB0CLKDIV_REQFLAG_SHIFT
)Ë& 
SYSCON_USB0CLKDIV_REQFLAG_MASK
)

	)

9344 
	#SYSCON_USB1CLKDIV_DIV_MASK
 (0xFFU)

	)

9345 
	#SYSCON_USB1CLKDIV_DIV_SHIFT
 (0U)

	)

9346 
	#SYSCON_USB1CLKDIV_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB1CLKDIV_DIV_SHIFT
)Ë& 
SYSCON_USB1CLKDIV_DIV_MASK
)

	)

9347 
	#SYSCON_USB1CLKDIV_RESET_MASK
 (0x20000000U)

	)

9348 
	#SYSCON_USB1CLKDIV_RESET_SHIFT
 (29U)

	)

9349 
	#SYSCON_USB1CLKDIV_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB1CLKDIV_RESET_SHIFT
)Ë& 
SYSCON_USB1CLKDIV_RESET_MASK
)

	)

9350 
	#SYSCON_USB1CLKDIV_HALT_MASK
 (0x40000000U)

	)

9351 
	#SYSCON_USB1CLKDIV_HALT_SHIFT
 (30U)

	)

9352 
	#SYSCON_USB1CLKDIV_HALT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB1CLKDIV_HALT_SHIFT
)Ë& 
SYSCON_USB1CLKDIV_HALT_MASK
)

	)

9353 
	#SYSCON_USB1CLKDIV_REQFLAG_MASK
 (0x80000000U)

	)

9354 
	#SYSCON_USB1CLKDIV_REQFLAG_SHIFT
 (31U)

	)

9355 
	#SYSCON_USB1CLKDIV_REQFLAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB1CLKDIV_REQFLAG_SHIFT
)Ë& 
SYSCON_USB1CLKDIV_REQFLAG_MASK
)

	)

9358 
	#SYSCON_FRGCTRL_DIV_MASK
 (0xFFU)

	)

9359 
	#SYSCON_FRGCTRL_DIV_SHIFT
 (0U)

	)

9360 
	#SYSCON_FRGCTRL_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FRGCTRL_DIV_SHIFT
)Ë& 
SYSCON_FRGCTRL_DIV_MASK
)

	)

9361 
	#SYSCON_FRGCTRL_MULT_MASK
 (0xFF00U)

	)

9362 
	#SYSCON_FRGCTRL_MULT_SHIFT
 (8U)

	)

9363 
	#SYSCON_FRGCTRL_MULT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FRGCTRL_MULT_SHIFT
)Ë& 
SYSCON_FRGCTRL_MULT_MASK
)

	)

9366 
	#SYSCON_DMICCLKDIV_DIV_MASK
 (0xFFU)

	)

9367 
	#SYSCON_DMICCLKDIV_DIV_SHIFT
 (0U)

	)

9368 
	#SYSCON_DMICCLKDIV_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_DMICCLKDIV_DIV_SHIFT
)Ë& 
SYSCON_DMICCLKDIV_DIV_MASK
)

	)

9369 
	#SYSCON_DMICCLKDIV_RESET_MASK
 (0x20000000U)

	)

9370 
	#SYSCON_DMICCLKDIV_RESET_SHIFT
 (29U)

	)

9371 
	#SYSCON_DMICCLKDIV_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_DMICCLKDIV_RESET_SHIFT
)Ë& 
SYSCON_DMICCLKDIV_RESET_MASK
)

	)

9372 
	#SYSCON_DMICCLKDIV_HALT_MASK
 (0x40000000U)

	)

9373 
	#SYSCON_DMICCLKDIV_HALT_SHIFT
 (30U)

	)

9374 
	#SYSCON_DMICCLKDIV_HALT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_DMICCLKDIV_HALT_SHIFT
)Ë& 
SYSCON_DMICCLKDIV_HALT_MASK
)

	)

9375 
	#SYSCON_DMICCLKDIV_REQFLAG_MASK
 (0x80000000U)

	)

9376 
	#SYSCON_DMICCLKDIV_REQFLAG_SHIFT
 (31U)

	)

9377 
	#SYSCON_DMICCLKDIV_REQFLAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_DMICCLKDIV_REQFLAG_SHIFT
)Ë& 
SYSCON_DMICCLKDIV_REQFLAG_MASK
)

	)

9380 
	#SYSCON_MCLKDIV_DIV_MASK
 (0xFFU)

	)

9381 
	#SYSCON_MCLKDIV_DIV_SHIFT
 (0U)

	)

9382 
	#SYSCON_MCLKDIV_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_MCLKDIV_DIV_SHIFT
)Ë& 
SYSCON_MCLKDIV_DIV_MASK
)

	)

9383 
	#SYSCON_MCLKDIV_RESET_MASK
 (0x20000000U)

	)

9384 
	#SYSCON_MCLKDIV_RESET_SHIFT
 (29U)

	)

9385 
	#SYSCON_MCLKDIV_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_MCLKDIV_RESET_SHIFT
)Ë& 
SYSCON_MCLKDIV_RESET_MASK
)

	)

9386 
	#SYSCON_MCLKDIV_HALT_MASK
 (0x40000000U)

	)

9387 
	#SYSCON_MCLKDIV_HALT_SHIFT
 (30U)

	)

9388 
	#SYSCON_MCLKDIV_HALT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_MCLKDIV_HALT_SHIFT
)Ë& 
SYSCON_MCLKDIV_HALT_MASK
)

	)

9389 
	#SYSCON_MCLKDIV_REQFLAG_MASK
 (0x80000000U)

	)

9390 
	#SYSCON_MCLKDIV_REQFLAG_SHIFT
 (31U)

	)

9391 
	#SYSCON_MCLKDIV_REQFLAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_MCLKDIV_REQFLAG_SHIFT
)Ë& 
SYSCON_MCLKDIV_REQFLAG_MASK
)

	)

9394 
	#SYSCON_LCDCLKDIV_DIV_MASK
 (0xFFU)

	)

9395 
	#SYSCON_LCDCLKDIV_DIV_SHIFT
 (0U)

	)

9396 
	#SYSCON_LCDCLKDIV_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_LCDCLKDIV_DIV_SHIFT
)Ë& 
SYSCON_LCDCLKDIV_DIV_MASK
)

	)

9397 
	#SYSCON_LCDCLKDIV_RESET_MASK
 (0x20000000U)

	)

9398 
	#SYSCON_LCDCLKDIV_RESET_SHIFT
 (29U)

	)

9399 
	#SYSCON_LCDCLKDIV_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_LCDCLKDIV_RESET_SHIFT
)Ë& 
SYSCON_LCDCLKDIV_RESET_MASK
)

	)

9400 
	#SYSCON_LCDCLKDIV_HALT_MASK
 (0x40000000U)

	)

9401 
	#SYSCON_LCDCLKDIV_HALT_SHIFT
 (30U)

	)

9402 
	#SYSCON_LCDCLKDIV_HALT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_LCDCLKDIV_HALT_SHIFT
)Ë& 
SYSCON_LCDCLKDIV_HALT_MASK
)

	)

9403 
	#SYSCON_LCDCLKDIV_REQFLAG_MASK
 (0x80000000U)

	)

9404 
	#SYSCON_LCDCLKDIV_REQFLAG_SHIFT
 (31U)

	)

9405 
	#SYSCON_LCDCLKDIV_REQFLAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_LCDCLKDIV_REQFLAG_SHIFT
)Ë& 
SYSCON_LCDCLKDIV_REQFLAG_MASK
)

	)

9408 
	#SYSCON_SCTCLKDIV_DIV_MASK
 (0xFFU)

	)

9409 
	#SYSCON_SCTCLKDIV_DIV_SHIFT
 (0U)

	)

9410 
	#SYSCON_SCTCLKDIV_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SCTCLKDIV_DIV_SHIFT
)Ë& 
SYSCON_SCTCLKDIV_DIV_MASK
)

	)

9411 
	#SYSCON_SCTCLKDIV_RESET_MASK
 (0x20000000U)

	)

9412 
	#SYSCON_SCTCLKDIV_RESET_SHIFT
 (29U)

	)

9413 
	#SYSCON_SCTCLKDIV_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SCTCLKDIV_RESET_SHIFT
)Ë& 
SYSCON_SCTCLKDIV_RESET_MASK
)

	)

9414 
	#SYSCON_SCTCLKDIV_HALT_MASK
 (0x40000000U)

	)

9415 
	#SYSCON_SCTCLKDIV_HALT_SHIFT
 (30U)

	)

9416 
	#SYSCON_SCTCLKDIV_HALT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SCTCLKDIV_HALT_SHIFT
)Ë& 
SYSCON_SCTCLKDIV_HALT_MASK
)

	)

9417 
	#SYSCON_SCTCLKDIV_REQFLAG_MASK
 (0x80000000U)

	)

9418 
	#SYSCON_SCTCLKDIV_REQFLAG_SHIFT
 (31U)

	)

9419 
	#SYSCON_SCTCLKDIV_REQFLAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SCTCLKDIV_REQFLAG_SHIFT
)Ë& 
SYSCON_SCTCLKDIV_REQFLAG_MASK
)

	)

9422 
	#SYSCON_EMCCLKDIV_DIV_MASK
 (0xFFU)

	)

9423 
	#SYSCON_EMCCLKDIV_DIV_SHIFT
 (0U)

	)

9424 
	#SYSCON_EMCCLKDIV_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_EMCCLKDIV_DIV_SHIFT
)Ë& 
SYSCON_EMCCLKDIV_DIV_MASK
)

	)

9425 
	#SYSCON_EMCCLKDIV_RESET_MASK
 (0x20000000U)

	)

9426 
	#SYSCON_EMCCLKDIV_RESET_SHIFT
 (29U)

	)

9427 
	#SYSCON_EMCCLKDIV_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_EMCCLKDIV_RESET_SHIFT
)Ë& 
SYSCON_EMCCLKDIV_RESET_MASK
)

	)

9428 
	#SYSCON_EMCCLKDIV_HALT_MASK
 (0x40000000U)

	)

9429 
	#SYSCON_EMCCLKDIV_HALT_SHIFT
 (30U)

	)

9430 
	#SYSCON_EMCCLKDIV_HALT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_EMCCLKDIV_HALT_SHIFT
)Ë& 
SYSCON_EMCCLKDIV_HALT_MASK
)

	)

9431 
	#SYSCON_EMCCLKDIV_REQFLAG_MASK
 (0x80000000U)

	)

9432 
	#SYSCON_EMCCLKDIV_REQFLAG_SHIFT
 (31U)

	)

9433 
	#SYSCON_EMCCLKDIV_REQFLAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_EMCCLKDIV_REQFLAG_SHIFT
)Ë& 
SYSCON_EMCCLKDIV_REQFLAG_MASK
)

	)

9436 
	#SYSCON_SDIOCLKDIV_DIV_MASK
 (0xFFU)

	)

9437 
	#SYSCON_SDIOCLKDIV_DIV_SHIFT
 (0U)

	)

9438 
	#SYSCON_SDIOCLKDIV_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SDIOCLKDIV_DIV_SHIFT
)Ë& 
SYSCON_SDIOCLKDIV_DIV_MASK
)

	)

9439 
	#SYSCON_SDIOCLKDIV_RESET_MASK
 (0x20000000U)

	)

9440 
	#SYSCON_SDIOCLKDIV_RESET_SHIFT
 (29U)

	)

9441 
	#SYSCON_SDIOCLKDIV_RESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SDIOCLKDIV_RESET_SHIFT
)Ë& 
SYSCON_SDIOCLKDIV_RESET_MASK
)

	)

9442 
	#SYSCON_SDIOCLKDIV_HALT_MASK
 (0x40000000U)

	)

9443 
	#SYSCON_SDIOCLKDIV_HALT_SHIFT
 (30U)

	)

9444 
	#SYSCON_SDIOCLKDIV_HALT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SDIOCLKDIV_HALT_SHIFT
)Ë& 
SYSCON_SDIOCLKDIV_HALT_MASK
)

	)

9445 
	#SYSCON_SDIOCLKDIV_REQFLAG_MASK
 (0x80000000U)

	)

9446 
	#SYSCON_SDIOCLKDIV_REQFLAG_SHIFT
 (31U)

	)

9447 
	#SYSCON_SDIOCLKDIV_REQFLAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SDIOCLKDIV_REQFLAG_SHIFT
)Ë& 
SYSCON_SDIOCLKDIV_REQFLAG_MASK
)

	)

9450 
	#SYSCON_FLASHCFG_FETCHCFG_MASK
 (0x3U)

	)

9451 
	#SYSCON_FLASHCFG_FETCHCFG_SHIFT
 (0U)

	)

9452 
	#SYSCON_FLASHCFG_FETCHCFG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FLASHCFG_FETCHCFG_SHIFT
)Ë& 
SYSCON_FLASHCFG_FETCHCFG_MASK
)

	)

9453 
	#SYSCON_FLASHCFG_DATACFG_MASK
 (0xCU)

	)

9454 
	#SYSCON_FLASHCFG_DATACFG_SHIFT
 (2U)

	)

9455 
	#SYSCON_FLASHCFG_DATACFG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FLASHCFG_DATACFG_SHIFT
)Ë& 
SYSCON_FLASHCFG_DATACFG_MASK
)

	)

9456 
	#SYSCON_FLASHCFG_ACCEL_MASK
 (0x10U)

	)

9457 
	#SYSCON_FLASHCFG_ACCEL_SHIFT
 (4U)

	)

9458 
	#SYSCON_FLASHCFG_ACCEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FLASHCFG_ACCEL_SHIFT
)Ë& 
SYSCON_FLASHCFG_ACCEL_MASK
)

	)

9459 
	#SYSCON_FLASHCFG_PREFEN_MASK
 (0x20U)

	)

9460 
	#SYSCON_FLASHCFG_PREFEN_SHIFT
 (5U)

	)

9461 
	#SYSCON_FLASHCFG_PREFEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FLASHCFG_PREFEN_SHIFT
)Ë& 
SYSCON_FLASHCFG_PREFEN_MASK
)

	)

9462 
	#SYSCON_FLASHCFG_PREFOVR_MASK
 (0x40U)

	)

9463 
	#SYSCON_FLASHCFG_PREFOVR_SHIFT
 (6U)

	)

9464 
	#SYSCON_FLASHCFG_PREFOVR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FLASHCFG_PREFOVR_SHIFT
)Ë& 
SYSCON_FLASHCFG_PREFOVR_MASK
)

	)

9465 
	#SYSCON_FLASHCFG_FLASHTIM_MASK
 (0xF000U)

	)

9466 
	#SYSCON_FLASHCFG_FLASHTIM_SHIFT
 (12U)

	)

9467 
	#SYSCON_FLASHCFG_FLASHTIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FLASHCFG_FLASHTIM_SHIFT
)Ë& 
SYSCON_FLASHCFG_FLASHTIM_MASK
)

	)

9470 
	#SYSCON_USB0CLKCTRL_AP_FS_DEV_CLK_MASK
 (0x1U)

	)

9471 
	#SYSCON_USB0CLKCTRL_AP_FS_DEV_CLK_SHIFT
 (0U)

	)

9472 
	#SYSCON_USB0CLKCTRL_AP_FS_DEV_CLK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB0CLKCTRL_AP_FS_DEV_CLK_SHIFT
)Ë& 
SYSCON_USB0CLKCTRL_AP_FS_DEV_CLK_MASK
)

	)

9473 
	#SYSCON_USB0CLKCTRL_POL_FS_DEV_CLK_MASK
 (0x2U)

	)

9474 
	#SYSCON_USB0CLKCTRL_POL_FS_DEV_CLK_SHIFT
 (1U)

	)

9475 
	#SYSCON_USB0CLKCTRL_POL_FS_DEV_CLK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB0CLKCTRL_POL_FS_DEV_CLK_SHIFT
)Ë& 
SYSCON_USB0CLKCTRL_POL_FS_DEV_CLK_MASK
)

	)

9476 
	#SYSCON_USB0CLKCTRL_AP_FS_HOST_CLK_MASK
 (0x4U)

	)

9477 
	#SYSCON_USB0CLKCTRL_AP_FS_HOST_CLK_SHIFT
 (2U)

	)

9478 
	#SYSCON_USB0CLKCTRL_AP_FS_HOST_CLK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB0CLKCTRL_AP_FS_HOST_CLK_SHIFT
)Ë& 
SYSCON_USB0CLKCTRL_AP_FS_HOST_CLK_MASK
)

	)

9479 
	#SYSCON_USB0CLKCTRL_POL_FS_HOST_CLK_MASK
 (0x8U)

	)

9480 
	#SYSCON_USB0CLKCTRL_POL_FS_HOST_CLK_SHIFT
 (3U)

	)

9481 
	#SYSCON_USB0CLKCTRL_POL_FS_HOST_CLK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB0CLKCTRL_POL_FS_HOST_CLK_SHIFT
)Ë& 
SYSCON_USB0CLKCTRL_POL_FS_HOST_CLK_MASK
)

	)

9482 
	#SYSCON_USB0CLKCTRL_PU_DISABLE_MASK
 (0x10U)

	)

9483 
	#SYSCON_USB0CLKCTRL_PU_DISABLE_SHIFT
 (4U)

	)

9484 
	#SYSCON_USB0CLKCTRL_PU_DISABLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB0CLKCTRL_PU_DISABLE_SHIFT
)Ë& 
SYSCON_USB0CLKCTRL_PU_DISABLE_MASK
)

	)

9487 
	#SYSCON_USB0CLKSTAT_DEV_NEED_CLKST_MASK
 (0x1U)

	)

9488 
	#SYSCON_USB0CLKSTAT_DEV_NEED_CLKST_SHIFT
 (0U)

	)

9489 
	#SYSCON_USB0CLKSTAT_DEV_NEED_CLKST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB0CLKSTAT_DEV_NEED_CLKST_SHIFT
)Ë& 
SYSCON_USB0CLKSTAT_DEV_NEED_CLKST_MASK
)

	)

9490 
	#SYSCON_USB0CLKSTAT_HOST_NEED_CLKST_MASK
 (0x2U)

	)

9491 
	#SYSCON_USB0CLKSTAT_HOST_NEED_CLKST_SHIFT
 (1U)

	)

9492 
	#SYSCON_USB0CLKSTAT_HOST_NEED_CLKST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB0CLKSTAT_HOST_NEED_CLKST_SHIFT
)Ë& 
SYSCON_USB0CLKSTAT_HOST_NEED_CLKST_MASK
)

	)

9495 
	#SYSCON_FREQMECTRL_CAPVAL_MASK
 (0x3FFFU)

	)

9496 
	#SYSCON_FREQMECTRL_CAPVAL_SHIFT
 (0U)

	)

9497 
	#SYSCON_FREQMECTRL_CAPVAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FREQMECTRL_CAPVAL_SHIFT
)Ë& 
SYSCON_FREQMECTRL_CAPVAL_MASK
)

	)

9498 
	#SYSCON_FREQMECTRL_PROG_MASK
 (0x80000000U)

	)

9499 
	#SYSCON_FREQMECTRL_PROG_SHIFT
 (31U)

	)

9500 
	#SYSCON_FREQMECTRL_PROG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FREQMECTRL_PROG_SHIFT
)Ë& 
SYSCON_FREQMECTRL_PROG_MASK
)

	)

9503 
	#SYSCON_MCLKIO_DIR_MASK
 (0x1U)

	)

9504 
	#SYSCON_MCLKIO_DIR_SHIFT
 (0U)

	)

9505 
	#SYSCON_MCLKIO_DIR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_MCLKIO_DIR_SHIFT
)Ë& 
SYSCON_MCLKIO_DIR_MASK
)

	)

9508 
	#SYSCON_USB1CLKCTRL_AP_FS_DEV_CLK_MASK
 (0x1U)

	)

9509 
	#SYSCON_USB1CLKCTRL_AP_FS_DEV_CLK_SHIFT
 (0U)

	)

9510 
	#SYSCON_USB1CLKCTRL_AP_FS_DEV_CLK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB1CLKCTRL_AP_FS_DEV_CLK_SHIFT
)Ë& 
SYSCON_USB1CLKCTRL_AP_FS_DEV_CLK_MASK
)

	)

9511 
	#SYSCON_USB1CLKCTRL_POL_FS_DEV_CLK_MASK
 (0x2U)

	)

9512 
	#SYSCON_USB1CLKCTRL_POL_FS_DEV_CLK_SHIFT
 (1U)

	)

9513 
	#SYSCON_USB1CLKCTRL_POL_FS_DEV_CLK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB1CLKCTRL_POL_FS_DEV_CLK_SHIFT
)Ë& 
SYSCON_USB1CLKCTRL_POL_FS_DEV_CLK_MASK
)

	)

9514 
	#SYSCON_USB1CLKCTRL_AP_FS_HOST_CLK_MASK
 (0x4U)

	)

9515 
	#SYSCON_USB1CLKCTRL_AP_FS_HOST_CLK_SHIFT
 (2U)

	)

9516 
	#SYSCON_USB1CLKCTRL_AP_FS_HOST_CLK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB1CLKCTRL_AP_FS_HOST_CLK_SHIFT
)Ë& 
SYSCON_USB1CLKCTRL_AP_FS_HOST_CLK_MASK
)

	)

9517 
	#SYSCON_USB1CLKCTRL_POL_FS_HOST_CLK_MASK
 (0x8U)

	)

9518 
	#SYSCON_USB1CLKCTRL_POL_FS_HOST_CLK_SHIFT
 (3U)

	)

9519 
	#SYSCON_USB1CLKCTRL_POL_FS_HOST_CLK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB1CLKCTRL_POL_FS_HOST_CLK_SHIFT
)Ë& 
SYSCON_USB1CLKCTRL_POL_FS_HOST_CLK_MASK
)

	)

9520 
	#SYSCON_USB1CLKCTRL_HS_DEV_WAKEUP_N_MASK
 (0x10U)

	)

9521 
	#SYSCON_USB1CLKCTRL_HS_DEV_WAKEUP_N_SHIFT
 (4U)

	)

9522 
	#SYSCON_USB1CLKCTRL_HS_DEV_WAKEUP_N
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB1CLKCTRL_HS_DEV_WAKEUP_N_SHIFT
)Ë& 
SYSCON_USB1CLKCTRL_HS_DEV_WAKEUP_N_MASK
)

	)

9525 
	#SYSCON_USB1CLKSTAT_DEV_NEED_CLKST_MASK
 (0x1U)

	)

9526 
	#SYSCON_USB1CLKSTAT_DEV_NEED_CLKST_SHIFT
 (0U)

	)

9527 
	#SYSCON_USB1CLKSTAT_DEV_NEED_CLKST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB1CLKSTAT_DEV_NEED_CLKST_SHIFT
)Ë& 
SYSCON_USB1CLKSTAT_DEV_NEED_CLKST_MASK
)

	)

9528 
	#SYSCON_USB1CLKSTAT_HOST_NEED_CLKST_MASK
 (0x2U)

	)

9529 
	#SYSCON_USB1CLKSTAT_HOST_NEED_CLKST_SHIFT
 (1U)

	)

9530 
	#SYSCON_USB1CLKSTAT_HOST_NEED_CLKST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USB1CLKSTAT_HOST_NEED_CLKST_SHIFT
)Ë& 
SYSCON_USB1CLKSTAT_HOST_NEED_CLKST_MASK
)

	)

9533 
	#SYSCON_EMCSYSCTRL_EMCSC_MASK
 (0x1U)

	)

9534 
	#SYSCON_EMCSYSCTRL_EMCSC_SHIFT
 (0U)

	)

9535 
	#SYSCON_EMCSYSCTRL_EMCSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_EMCSYSCTRL_EMCSC_SHIFT
)Ë& 
SYSCON_EMCSYSCTRL_EMCSC_MASK
)

	)

9536 
	#SYSCON_EMCSYSCTRL_EMCRD_MASK
 (0x2U)

	)

9537 
	#SYSCON_EMCSYSCTRL_EMCRD_SHIFT
 (1U)

	)

9538 
	#SYSCON_EMCSYSCTRL_EMCRD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_EMCSYSCTRL_EMCRD_SHIFT
)Ë& 
SYSCON_EMCSYSCTRL_EMCRD_MASK
)

	)

9539 
	#SYSCON_EMCSYSCTRL_EMCBC_MASK
 (0x4U)

	)

9540 
	#SYSCON_EMCSYSCTRL_EMCBC_SHIFT
 (2U)

	)

9541 
	#SYSCON_EMCSYSCTRL_EMCBC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_EMCSYSCTRL_EMCBC_SHIFT
)Ë& 
SYSCON_EMCSYSCTRL_EMCBC_MASK
)

	)

9542 
	#SYSCON_EMCSYSCTRL_EMCFBCLKINSEL_MASK
 (0x8U)

	)

9543 
	#SYSCON_EMCSYSCTRL_EMCFBCLKINSEL_SHIFT
 (3U)

	)

9544 
	#SYSCON_EMCSYSCTRL_EMCFBCLKINSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_EMCSYSCTRL_EMCFBCLKINSEL_SHIFT
)Ë& 
SYSCON_EMCSYSCTRL_EMCFBCLKINSEL_MASK
)

	)

9547 
	#SYSCON_EMCDLYCTRL_CMD_DELAY_MASK
 (0x1FU)

	)

9548 
	#SYSCON_EMCDLYCTRL_CMD_DELAY_SHIFT
 (0U)

	)

9549 
	#SYSCON_EMCDLYCTRL_CMD_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_EMCDLYCTRL_CMD_DELAY_SHIFT
)Ë& 
SYSCON_EMCDLYCTRL_CMD_DELAY_MASK
)

	)

9550 
	#SYSCON_EMCDLYCTRL_FBCLK_DELAY_MASK
 (0x1F00U)

	)

9551 
	#SYSCON_EMCDLYCTRL_FBCLK_DELAY_SHIFT
 (8U)

	)

9552 
	#SYSCON_EMCDLYCTRL_FBCLK_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_EMCDLYCTRL_FBCLK_DELAY_SHIFT
)Ë& 
SYSCON_EMCDLYCTRL_FBCLK_DELAY_MASK
)

	)

9555 
	#SYSCON_EMCDLYCAL_CALVALUE_MASK
 (0xFFU)

	)

9556 
	#SYSCON_EMCDLYCAL_CALVALUE_SHIFT
 (0U)

	)

9557 
	#SYSCON_EMCDLYCAL_CALVALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_EMCDLYCAL_CALVALUE_SHIFT
)Ë& 
SYSCON_EMCDLYCAL_CALVALUE_MASK
)

	)

9558 
	#SYSCON_EMCDLYCAL_START_MASK
 (0x4000U)

	)

9559 
	#SYSCON_EMCDLYCAL_START_SHIFT
 (14U)

	)

9560 
	#SYSCON_EMCDLYCAL_START
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_EMCDLYCAL_START_SHIFT
)Ë& 
SYSCON_EMCDLYCAL_START_MASK
)

	)

9561 
	#SYSCON_EMCDLYCAL_DONE_MASK
 (0x8000U)

	)

9562 
	#SYSCON_EMCDLYCAL_DONE_SHIFT
 (15U)

	)

9563 
	#SYSCON_EMCDLYCAL_DONE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_EMCDLYCAL_DONE_SHIFT
)Ë& 
SYSCON_EMCDLYCAL_DONE_MASK
)

	)

9566 
	#SYSCON_ETHPHYSEL_PHY_SEL_MASK
 (0x4U)

	)

9567 
	#SYSCON_ETHPHYSEL_PHY_SEL_SHIFT
 (2U)

	)

9568 
	#SYSCON_ETHPHYSEL_PHY_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_ETHPHYSEL_PHY_SEL_SHIFT
)Ë& 
SYSCON_ETHPHYSEL_PHY_SEL_MASK
)

	)

9571 
	#SYSCON_ETHSBDCTRL_SBD_CTRL_MASK
 (0x3U)

	)

9572 
	#SYSCON_ETHSBDCTRL_SBD_CTRL_SHIFT
 (0U)

	)

9573 
	#SYSCON_ETHSBDCTRL_SBD_CTRL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_ETHSBDCTRL_SBD_CTRL_SHIFT
)Ë& 
SYSCON_ETHSBDCTRL_SBD_CTRL_MASK
)

	)

9576 
	#SYSCON_SDIOCLKCTRL_CCLK_DRV_PHASE_MASK
 (0x3U)

	)

9577 
	#SYSCON_SDIOCLKCTRL_CCLK_DRV_PHASE_SHIFT
 (0U)

	)

9578 
	#SYSCON_SDIOCLKCTRL_CCLK_DRV_PHASE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SDIOCLKCTRL_CCLK_DRV_PHASE_SHIFT
)Ë& 
SYSCON_SDIOCLKCTRL_CCLK_DRV_PHASE_MASK
)

	)

9579 
	#SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_PHASE_MASK
 (0xCU)

	)

9580 
	#SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_PHASE_SHIFT
 (2U)

	)

9581 
	#SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_PHASE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_PHASE_SHIFT
)Ë& 
SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_PHASE_MASK
)

	)

9582 
	#SYSCON_SDIOCLKCTRL_PHASE_ACTIVE_MASK
 (0x80U)

	)

9583 
	#SYSCON_SDIOCLKCTRL_PHASE_ACTIVE_SHIFT
 (7U)

	)

9584 
	#SYSCON_SDIOCLKCTRL_PHASE_ACTIVE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SDIOCLKCTRL_PHASE_ACTIVE_SHIFT
)Ë& 
SYSCON_SDIOCLKCTRL_PHASE_ACTIVE_MASK
)

	)

9585 
	#SYSCON_SDIOCLKCTRL_CCLK_DRV_DELAY_MASK
 (0x1F0000U)

	)

9586 
	#SYSCON_SDIOCLKCTRL_CCLK_DRV_DELAY_SHIFT
 (16U)

	)

9587 
	#SYSCON_SDIOCLKCTRL_CCLK_DRV_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SDIOCLKCTRL_CCLK_DRV_DELAY_SHIFT
)Ë& 
SYSCON_SDIOCLKCTRL_CCLK_DRV_DELAY_MASK
)

	)

9588 
	#SYSCON_SDIOCLKCTRL_CCLK_DRV_DELAY_ACTIVE_MASK
 (0x800000U)

	)

9589 
	#SYSCON_SDIOCLKCTRL_CCLK_DRV_DELAY_ACTIVE_SHIFT
 (23U)

	)

9590 
	#SYSCON_SDIOCLKCTRL_CCLK_DRV_DELAY_ACTIVE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SDIOCLKCTRL_CCLK_DRV_DELAY_ACTIVE_SHIFT
)Ë& 
SYSCON_SDIOCLKCTRL_CCLK_DRV_DELAY_ACTIVE_MASK
)

	)

9591 
	#SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_DELAY_MASK
 (0x1F000000U)

	)

9592 
	#SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_DELAY_SHIFT
 (24U)

	)

9593 
	#SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_DELAY_SHIFT
)Ë& 
SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_DELAY_MASK
)

	)

9594 
	#SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_DELAY_ACTIVE_MASK
 (0x80000000U)

	)

9595 
	#SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_DELAY_ACTIVE_SHIFT
 (31U)

	)

9596 
	#SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_DELAY_ACTIVE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_DELAY_ACTIVE_SHIFT
)Ë& 
SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_DELAY_ACTIVE_MASK
)

	)

9599 
	#SYSCON_FROCTRL_TRIM_MASK
 (0x3FFFU)

	)

9600 
	#SYSCON_FROCTRL_TRIM_SHIFT
 (0U)

	)

9601 
	#SYSCON_FROCTRL_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FROCTRL_TRIM_SHIFT
)Ë& 
SYSCON_FROCTRL_TRIM_MASK
)

	)

9602 
	#SYSCON_FROCTRL_SEL_MASK
 (0x4000U)

	)

9603 
	#SYSCON_FROCTRL_SEL_SHIFT
 (14U)

	)

9604 
	#SYSCON_FROCTRL_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FROCTRL_SEL_SHIFT
)Ë& 
SYSCON_FROCTRL_SEL_MASK
)

	)

9605 
	#SYSCON_FROCTRL_FREQTRIM_MASK
 (0xFF0000U)

	)

9606 
	#SYSCON_FROCTRL_FREQTRIM_SHIFT
 (16U)

	)

9607 
	#SYSCON_FROCTRL_FREQTRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FROCTRL_FREQTRIM_SHIFT
)Ë& 
SYSCON_FROCTRL_FREQTRIM_MASK
)

	)

9608 
	#SYSCON_FROCTRL_USBCLKADJ_MASK
 (0x1000000U)

	)

9609 
	#SYSCON_FROCTRL_USBCLKADJ_SHIFT
 (24U)

	)

9610 
	#SYSCON_FROCTRL_USBCLKADJ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FROCTRL_USBCLKADJ_SHIFT
)Ë& 
SYSCON_FROCTRL_USBCLKADJ_MASK
)

	)

9611 
	#SYSCON_FROCTRL_USBMODCHG_MASK
 (0x2000000U)

	)

9612 
	#SYSCON_FROCTRL_USBMODCHG_SHIFT
 (25U)

	)

9613 
	#SYSCON_FROCTRL_USBMODCHG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FROCTRL_USBMODCHG_SHIFT
)Ë& 
SYSCON_FROCTRL_USBMODCHG_MASK
)

	)

9614 
	#SYSCON_FROCTRL_HSPDCLK_MASK
 (0x40000000U)

	)

9615 
	#SYSCON_FROCTRL_HSPDCLK_SHIFT
 (30U)

	)

9616 
	#SYSCON_FROCTRL_HSPDCLK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FROCTRL_HSPDCLK_SHIFT
)Ë& 
SYSCON_FROCTRL_HSPDCLK_MASK
)

	)

9617 
	#SYSCON_FROCTRL_WRTRIM_MASK
 (0x80000000U)

	)

9618 
	#SYSCON_FROCTRL_WRTRIM_SHIFT
 (31U)

	)

9619 
	#SYSCON_FROCTRL_WRTRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_FROCTRL_WRTRIM_SHIFT
)Ë& 
SYSCON_FROCTRL_WRTRIM_MASK
)

	)

9622 
	#SYSCON_SYSOSCCTRL_BYPASS_MASK
 (0x1U)

	)

9623 
	#SYSCON_SYSOSCCTRL_BYPASS_SHIFT
 (0U)

	)

9624 
	#SYSCON_SYSOSCCTRL_BYPASS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSOSCCTRL_BYPASS_SHIFT
)Ë& 
SYSCON_SYSOSCCTRL_BYPASS_MASK
)

	)

9625 
	#SYSCON_SYSOSCCTRL_FREQRANGE_MASK
 (0x2U)

	)

9626 
	#SYSCON_SYSOSCCTRL_FREQRANGE_SHIFT
 (1U)

	)

9627 
	#SYSCON_SYSOSCCTRL_FREQRANGE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSOSCCTRL_FREQRANGE_SHIFT
)Ë& 
SYSCON_SYSOSCCTRL_FREQRANGE_MASK
)

	)

9630 
	#SYSCON_WDTOSCCTRL_DIVSEL_MASK
 (0x1FU)

	)

9631 
	#SYSCON_WDTOSCCTRL_DIVSEL_SHIFT
 (0U)

	)

9632 
	#SYSCON_WDTOSCCTRL_DIVSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_WDTOSCCTRL_DIVSEL_SHIFT
)Ë& 
SYSCON_WDTOSCCTRL_DIVSEL_MASK
)

	)

9633 
	#SYSCON_WDTOSCCTRL_FREQSEL_MASK
 (0x3E0U)

	)

9634 
	#SYSCON_WDTOSCCTRL_FREQSEL_SHIFT
 (5U)

	)

9635 
	#SYSCON_WDTOSCCTRL_FREQSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_WDTOSCCTRL_FREQSEL_SHIFT
)Ë& 
SYSCON_WDTOSCCTRL_FREQSEL_MASK
)

	)

9638 
	#SYSCON_RTCOSCCTRL_EN_MASK
 (0x1U)

	)

9639 
	#SYSCON_RTCOSCCTRL_EN_SHIFT
 (0U)

	)

9640 
	#SYSCON_RTCOSCCTRL_EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_RTCOSCCTRL_EN_SHIFT
)Ë& 
SYSCON_RTCOSCCTRL_EN_MASK
)

	)

9643 
	#SYSCON_USBPLLCTRL_MSEL_MASK
 (0xFFU)

	)

9644 
	#SYSCON_USBPLLCTRL_MSEL_SHIFT
 (0U)

	)

9645 
	#SYSCON_USBPLLCTRL_MSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USBPLLCTRL_MSEL_SHIFT
)Ë& 
SYSCON_USBPLLCTRL_MSEL_MASK
)

	)

9646 
	#SYSCON_USBPLLCTRL_PSEL_MASK
 (0x300U)

	)

9647 
	#SYSCON_USBPLLCTRL_PSEL_SHIFT
 (8U)

	)

9648 
	#SYSCON_USBPLLCTRL_PSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USBPLLCTRL_PSEL_SHIFT
)Ë& 
SYSCON_USBPLLCTRL_PSEL_MASK
)

	)

9649 
	#SYSCON_USBPLLCTRL_NSEL_MASK
 (0xC00U)

	)

9650 
	#SYSCON_USBPLLCTRL_NSEL_SHIFT
 (10U)

	)

9651 
	#SYSCON_USBPLLCTRL_NSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USBPLLCTRL_NSEL_SHIFT
)Ë& 
SYSCON_USBPLLCTRL_NSEL_MASK
)

	)

9652 
	#SYSCON_USBPLLCTRL_DIRECT_MASK
 (0x1000U)

	)

9653 
	#SYSCON_USBPLLCTRL_DIRECT_SHIFT
 (12U)

	)

9654 
	#SYSCON_USBPLLCTRL_DIRECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USBPLLCTRL_DIRECT_SHIFT
)Ë& 
SYSCON_USBPLLCTRL_DIRECT_MASK
)

	)

9655 
	#SYSCON_USBPLLCTRL_BYPASS_MASK
 (0x2000U)

	)

9656 
	#SYSCON_USBPLLCTRL_BYPASS_SHIFT
 (13U)

	)

9657 
	#SYSCON_USBPLLCTRL_BYPASS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USBPLLCTRL_BYPASS_SHIFT
)Ë& 
SYSCON_USBPLLCTRL_BYPASS_MASK
)

	)

9658 
	#SYSCON_USBPLLCTRL_FBSEL_MASK
 (0x4000U)

	)

9659 
	#SYSCON_USBPLLCTRL_FBSEL_SHIFT
 (14U)

	)

9660 
	#SYSCON_USBPLLCTRL_FBSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USBPLLCTRL_FBSEL_SHIFT
)Ë& 
SYSCON_USBPLLCTRL_FBSEL_MASK
)

	)

9663 
	#SYSCON_USBPLLSTAT_LOCK_MASK
 (0x1U)

	)

9664 
	#SYSCON_USBPLLSTAT_LOCK_SHIFT
 (0U)

	)

9665 
	#SYSCON_USBPLLSTAT_LOCK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_USBPLLSTAT_LOCK_SHIFT
)Ë& 
SYSCON_USBPLLSTAT_LOCK_MASK
)

	)

9668 
	#SYSCON_SYSPLLCTRL_SELR_MASK
 (0xFU)

	)

9669 
	#SYSCON_SYSPLLCTRL_SELR_SHIFT
 (0U)

	)

9670 
	#SYSCON_SYSPLLCTRL_SELR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSPLLCTRL_SELR_SHIFT
)Ë& 
SYSCON_SYSPLLCTRL_SELR_MASK
)

	)

9671 
	#SYSCON_SYSPLLCTRL_SELI_MASK
 (0x3F0U)

	)

9672 
	#SYSCON_SYSPLLCTRL_SELI_SHIFT
 (4U)

	)

9673 
	#SYSCON_SYSPLLCTRL_SELI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSPLLCTRL_SELI_SHIFT
)Ë& 
SYSCON_SYSPLLCTRL_SELI_MASK
)

	)

9674 
	#SYSCON_SYSPLLCTRL_SELP_MASK
 (0x7C00U)

	)

9675 
	#SYSCON_SYSPLLCTRL_SELP_SHIFT
 (10U)

	)

9676 
	#SYSCON_SYSPLLCTRL_SELP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSPLLCTRL_SELP_SHIFT
)Ë& 
SYSCON_SYSPLLCTRL_SELP_MASK
)

	)

9677 
	#SYSCON_SYSPLLCTRL_BYPASS_MASK
 (0x8000U)

	)

9678 
	#SYSCON_SYSPLLCTRL_BYPASS_SHIFT
 (15U)

	)

9679 
	#SYSCON_SYSPLLCTRL_BYPASS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSPLLCTRL_BYPASS_SHIFT
)Ë& 
SYSCON_SYSPLLCTRL_BYPASS_MASK
)

	)

9680 
	#SYSCON_SYSPLLCTRL_UPLIMOFF_MASK
 (0x20000U)

	)

9681 
	#SYSCON_SYSPLLCTRL_UPLIMOFF_SHIFT
 (17U)

	)

9682 
	#SYSCON_SYSPLLCTRL_UPLIMOFF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSPLLCTRL_UPLIMOFF_SHIFT
)Ë& 
SYSCON_SYSPLLCTRL_UPLIMOFF_MASK
)

	)

9683 
	#SYSCON_SYSPLLCTRL_DIRECTI_MASK
 (0x80000U)

	)

9684 
	#SYSCON_SYSPLLCTRL_DIRECTI_SHIFT
 (19U)

	)

9685 
	#SYSCON_SYSPLLCTRL_DIRECTI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSPLLCTRL_DIRECTI_SHIFT
)Ë& 
SYSCON_SYSPLLCTRL_DIRECTI_MASK
)

	)

9686 
	#SYSCON_SYSPLLCTRL_DIRECTO_MASK
 (0x100000U)

	)

9687 
	#SYSCON_SYSPLLCTRL_DIRECTO_SHIFT
 (20U)

	)

9688 
	#SYSCON_SYSPLLCTRL_DIRECTO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSPLLCTRL_DIRECTO_SHIFT
)Ë& 
SYSCON_SYSPLLCTRL_DIRECTO_MASK
)

	)

9691 
	#SYSCON_SYSPLLSTAT_LOCK_MASK
 (0x1U)

	)

9692 
	#SYSCON_SYSPLLSTAT_LOCK_SHIFT
 (0U)

	)

9693 
	#SYSCON_SYSPLLSTAT_LOCK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSPLLSTAT_LOCK_SHIFT
)Ë& 
SYSCON_SYSPLLSTAT_LOCK_MASK
)

	)

9696 
	#SYSCON_SYSPLLNDEC_NDEC_MASK
 (0x3FFU)

	)

9697 
	#SYSCON_SYSPLLNDEC_NDEC_SHIFT
 (0U)

	)

9698 
	#SYSCON_SYSPLLNDEC_NDEC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSPLLNDEC_NDEC_SHIFT
)Ë& 
SYSCON_SYSPLLNDEC_NDEC_MASK
)

	)

9699 
	#SYSCON_SYSPLLNDEC_NREQ_MASK
 (0x400U)

	)

9700 
	#SYSCON_SYSPLLNDEC_NREQ_SHIFT
 (10U)

	)

9701 
	#SYSCON_SYSPLLNDEC_NREQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSPLLNDEC_NREQ_SHIFT
)Ë& 
SYSCON_SYSPLLNDEC_NREQ_MASK
)

	)

9704 
	#SYSCON_SYSPLLPDEC_PDEC_MASK
 (0x7FU)

	)

9705 
	#SYSCON_SYSPLLPDEC_PDEC_SHIFT
 (0U)

	)

9706 
	#SYSCON_SYSPLLPDEC_PDEC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSPLLPDEC_PDEC_SHIFT
)Ë& 
SYSCON_SYSPLLPDEC_PDEC_MASK
)

	)

9707 
	#SYSCON_SYSPLLPDEC_PREQ_MASK
 (0x80U)

	)

9708 
	#SYSCON_SYSPLLPDEC_PREQ_SHIFT
 (7U)

	)

9709 
	#SYSCON_SYSPLLPDEC_PREQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSPLLPDEC_PREQ_SHIFT
)Ë& 
SYSCON_SYSPLLPDEC_PREQ_MASK
)

	)

9712 
	#SYSCON_SYSPLLMDEC_MDEC_MASK
 (0x1FFFFU)

	)

9713 
	#SYSCON_SYSPLLMDEC_MDEC_SHIFT
 (0U)

	)

9714 
	#SYSCON_SYSPLLMDEC_MDEC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSPLLMDEC_MDEC_SHIFT
)Ë& 
SYSCON_SYSPLLMDEC_MDEC_MASK
)

	)

9715 
	#SYSCON_SYSPLLMDEC_MREQ_MASK
 (0x20000U)

	)

9716 
	#SYSCON_SYSPLLMDEC_MREQ_SHIFT
 (17U)

	)

9717 
	#SYSCON_SYSPLLMDEC_MREQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_SYSPLLMDEC_MREQ_SHIFT
)Ë& 
SYSCON_SYSPLLMDEC_MREQ_MASK
)

	)

9720 
	#SYSCON_AUDPLLCTRL_SELR_MASK
 (0xFU)

	)

9721 
	#SYSCON_AUDPLLCTRL_SELR_SHIFT
 (0U)

	)

9722 
	#SYSCON_AUDPLLCTRL_SELR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AUDPLLCTRL_SELR_SHIFT
)Ë& 
SYSCON_AUDPLLCTRL_SELR_MASK
)

	)

9723 
	#SYSCON_AUDPLLCTRL_SELI_MASK
 (0x3F0U)

	)

9724 
	#SYSCON_AUDPLLCTRL_SELI_SHIFT
 (4U)

	)

9725 
	#SYSCON_AUDPLLCTRL_SELI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AUDPLLCTRL_SELI_SHIFT
)Ë& 
SYSCON_AUDPLLCTRL_SELI_MASK
)

	)

9726 
	#SYSCON_AUDPLLCTRL_SELP_MASK
 (0x7C00U)

	)

9727 
	#SYSCON_AUDPLLCTRL_SELP_SHIFT
 (10U)

	)

9728 
	#SYSCON_AUDPLLCTRL_SELP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AUDPLLCTRL_SELP_SHIFT
)Ë& 
SYSCON_AUDPLLCTRL_SELP_MASK
)

	)

9729 
	#SYSCON_AUDPLLCTRL_BYPASS_MASK
 (0x8000U)

	)

9730 
	#SYSCON_AUDPLLCTRL_BYPASS_SHIFT
 (15U)

	)

9731 
	#SYSCON_AUDPLLCTRL_BYPASS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AUDPLLCTRL_BYPASS_SHIFT
)Ë& 
SYSCON_AUDPLLCTRL_BYPASS_MASK
)

	)

9732 
	#SYSCON_AUDPLLCTRL_UPLIMOFF_MASK
 (0x20000U)

	)

9733 
	#SYSCON_AUDPLLCTRL_UPLIMOFF_SHIFT
 (17U)

	)

9734 
	#SYSCON_AUDPLLCTRL_UPLIMOFF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AUDPLLCTRL_UPLIMOFF_SHIFT
)Ë& 
SYSCON_AUDPLLCTRL_UPLIMOFF_MASK
)

	)

9735 
	#SYSCON_AUDPLLCTRL_DIRECTI_MASK
 (0x80000U)

	)

9736 
	#SYSCON_AUDPLLCTRL_DIRECTI_SHIFT
 (19U)

	)

9737 
	#SYSCON_AUDPLLCTRL_DIRECTI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AUDPLLCTRL_DIRECTI_SHIFT
)Ë& 
SYSCON_AUDPLLCTRL_DIRECTI_MASK
)

	)

9738 
	#SYSCON_AUDPLLCTRL_DIRECTO_MASK
 (0x100000U)

	)

9739 
	#SYSCON_AUDPLLCTRL_DIRECTO_SHIFT
 (20U)

	)

9740 
	#SYSCON_AUDPLLCTRL_DIRECTO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AUDPLLCTRL_DIRECTO_SHIFT
)Ë& 
SYSCON_AUDPLLCTRL_DIRECTO_MASK
)

	)

9743 
	#SYSCON_AUDPLLSTAT_LOCK_MASK
 (0x1U)

	)

9744 
	#SYSCON_AUDPLLSTAT_LOCK_SHIFT
 (0U)

	)

9745 
	#SYSCON_AUDPLLSTAT_LOCK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AUDPLLSTAT_LOCK_SHIFT
)Ë& 
SYSCON_AUDPLLSTAT_LOCK_MASK
)

	)

9748 
	#SYSCON_AUDPLLNDEC_NDEC_MASK
 (0x3FFU)

	)

9749 
	#SYSCON_AUDPLLNDEC_NDEC_SHIFT
 (0U)

	)

9750 
	#SYSCON_AUDPLLNDEC_NDEC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AUDPLLNDEC_NDEC_SHIFT
)Ë& 
SYSCON_AUDPLLNDEC_NDEC_MASK
)

	)

9751 
	#SYSCON_AUDPLLNDEC_NREQ_MASK
 (0x400U)

	)

9752 
	#SYSCON_AUDPLLNDEC_NREQ_SHIFT
 (10U)

	)

9753 
	#SYSCON_AUDPLLNDEC_NREQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AUDPLLNDEC_NREQ_SHIFT
)Ë& 
SYSCON_AUDPLLNDEC_NREQ_MASK
)

	)

9756 
	#SYSCON_AUDPLLPDEC_PDEC_MASK
 (0x7FU)

	)

9757 
	#SYSCON_AUDPLLPDEC_PDEC_SHIFT
 (0U)

	)

9758 
	#SYSCON_AUDPLLPDEC_PDEC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AUDPLLPDEC_PDEC_SHIFT
)Ë& 
SYSCON_AUDPLLPDEC_PDEC_MASK
)

	)

9759 
	#SYSCON_AUDPLLPDEC_PREQ_MASK
 (0x80U)

	)

9760 
	#SYSCON_AUDPLLPDEC_PREQ_SHIFT
 (7U)

	)

9761 
	#SYSCON_AUDPLLPDEC_PREQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AUDPLLPDEC_PREQ_SHIFT
)Ë& 
SYSCON_AUDPLLPDEC_PREQ_MASK
)

	)

9764 
	#SYSCON_AUDPLLMDEC_MDEC_MASK
 (0x1FFFFU)

	)

9765 
	#SYSCON_AUDPLLMDEC_MDEC_SHIFT
 (0U)

	)

9766 
	#SYSCON_AUDPLLMDEC_MDEC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AUDPLLMDEC_MDEC_SHIFT
)Ë& 
SYSCON_AUDPLLMDEC_MDEC_MASK
)

	)

9767 
	#SYSCON_AUDPLLMDEC_MREQ_MASK
 (0x20000U)

	)

9768 
	#SYSCON_AUDPLLMDEC_MREQ_SHIFT
 (17U)

	)

9769 
	#SYSCON_AUDPLLMDEC_MREQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AUDPLLMDEC_MREQ_SHIFT
)Ë& 
SYSCON_AUDPLLMDEC_MREQ_MASK
)

	)

9772 
	#SYSCON_AUDPLLFRAC_CTRL_MASK
 (0x3FFFFFU)

	)

9773 
	#SYSCON_AUDPLLFRAC_CTRL_SHIFT
 (0U)

	)

9774 
	#SYSCON_AUDPLLFRAC_CTRL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AUDPLLFRAC_CTRL_SHIFT
)Ë& 
SYSCON_AUDPLLFRAC_CTRL_MASK
)

	)

9775 
	#SYSCON_AUDPLLFRAC_REQ_MASK
 (0x400000U)

	)

9776 
	#SYSCON_AUDPLLFRAC_REQ_SHIFT
 (22U)

	)

9777 
	#SYSCON_AUDPLLFRAC_REQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AUDPLLFRAC_REQ_SHIFT
)Ë& 
SYSCON_AUDPLLFRAC_REQ_MASK
)

	)

9778 
	#SYSCON_AUDPLLFRAC_SEL_EXT_MASK
 (0x800000U)

	)

9779 
	#SYSCON_AUDPLLFRAC_SEL_EXT_SHIFT
 (23U)

	)

9780 
	#SYSCON_AUDPLLFRAC_SEL_EXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AUDPLLFRAC_SEL_EXT_SHIFT
)Ë& 
SYSCON_AUDPLLFRAC_SEL_EXT_MASK
)

	)

9783 
	#SYSCON_PDSLEEPCFG_PDEN_USB1_PHY_MASK
 (0x1U)

	)

9784 
	#SYSCON_PDSLEEPCFG_PDEN_USB1_PHY_SHIFT
 (0U)

	)

9785 
	#SYSCON_PDSLEEPCFG_PDEN_USB1_PHY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_USB1_PHY_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_USB1_PHY_MASK
)

	)

9786 
	#SYSCON_PDSLEEPCFG_PDEN_USB1_PLL_MASK
 (0x2U)

	)

9787 
	#SYSCON_PDSLEEPCFG_PDEN_USB1_PLL_SHIFT
 (1U)

	)

9788 
	#SYSCON_PDSLEEPCFG_PDEN_USB1_PLL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_USB1_PLL_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_USB1_PLL_MASK
)

	)

9789 
	#SYSCON_PDSLEEPCFG_PDEN_AUD_PLL_MASK
 (0x4U)

	)

9790 
	#SYSCON_PDSLEEPCFG_PDEN_AUD_PLL_SHIFT
 (2U)

	)

9791 
	#SYSCON_PDSLEEPCFG_PDEN_AUD_PLL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_AUD_PLL_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_AUD_PLL_MASK
)

	)

9792 
	#SYSCON_PDSLEEPCFG_PDEN_SYSOSC_MASK
 (0x8U)

	)

9793 
	#SYSCON_PDSLEEPCFG_PDEN_SYSOSC_SHIFT
 (3U)

	)

9794 
	#SYSCON_PDSLEEPCFG_PDEN_SYSOSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_SYSOSC_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_SYSOSC_MASK
)

	)

9795 
	#SYSCON_PDSLEEPCFG_PDEN_FRO_MASK
 (0x10U)

	)

9796 
	#SYSCON_PDSLEEPCFG_PDEN_FRO_SHIFT
 (4U)

	)

9797 
	#SYSCON_PDSLEEPCFG_PDEN_FRO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_FRO_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_FRO_MASK
)

	)

9798 
	#SYSCON_PDSLEEPCFG_PDEN_EEPROM_MASK
 (0x20U)

	)

9799 
	#SYSCON_PDSLEEPCFG_PDEN_EEPROM_SHIFT
 (5U)

	)

9800 
	#SYSCON_PDSLEEPCFG_PDEN_EEPROM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_EEPROM_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_EEPROM_MASK
)

	)

9801 
	#SYSCON_PDSLEEPCFG_PDEN_TS_MASK
 (0x40U)

	)

9802 
	#SYSCON_PDSLEEPCFG_PDEN_TS_SHIFT
 (6U)

	)

9803 
	#SYSCON_PDSLEEPCFG_PDEN_TS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_TS_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_TS_MASK
)

	)

9804 
	#SYSCON_PDSLEEPCFG_PDEN_BOD_RST_MASK
 (0x80U)

	)

9805 
	#SYSCON_PDSLEEPCFG_PDEN_BOD_RST_SHIFT
 (7U)

	)

9806 
	#SYSCON_PDSLEEPCFG_PDEN_BOD_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_BOD_RST_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_BOD_RST_MASK
)

	)

9807 
	#SYSCON_PDSLEEPCFG_PDEN_RNG_MASK
 (0x80U)

	)

9808 
	#SYSCON_PDSLEEPCFG_PDEN_RNG_SHIFT
 (7U)

	)

9809 
	#SYSCON_PDSLEEPCFG_PDEN_RNG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_RNG_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_RNG_MASK
)

	)

9810 
	#SYSCON_PDSLEEPCFG_PDEN_BOD_INTR_MASK
 (0x100U)

	)

9811 
	#SYSCON_PDSLEEPCFG_PDEN_BOD_INTR_SHIFT
 (8U)

	)

9812 
	#SYSCON_PDSLEEPCFG_PDEN_BOD_INTR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_BOD_INTR_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_BOD_INTR_MASK
)

	)

9813 
	#SYSCON_PDSLEEPCFG_PDEN_VD2_ANA_MASK
 (0x200U)

	)

9814 
	#SYSCON_PDSLEEPCFG_PDEN_VD2_ANA_SHIFT
 (9U)

	)

9815 
	#SYSCON_PDSLEEPCFG_PDEN_VD2_ANA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_VD2_ANA_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_VD2_ANA_MASK
)

	)

9816 
	#SYSCON_PDSLEEPCFG_PDEN_ADC0_MASK
 (0x400U)

	)

9817 
	#SYSCON_PDSLEEPCFG_PDEN_ADC0_SHIFT
 (10U)

	)

9818 
	#SYSCON_PDSLEEPCFG_PDEN_ADC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_ADC0_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_ADC0_MASK
)

	)

9819 
	#SYSCON_PDSLEEPCFG_PDEN_SRAMX_MASK
 (0x2000U)

	)

9820 
	#SYSCON_PDSLEEPCFG_PDEN_SRAMX_SHIFT
 (13U)

	)

9821 
	#SYSCON_PDSLEEPCFG_PDEN_SRAMX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_SRAMX_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_SRAMX_MASK
)

	)

9822 
	#SYSCON_PDSLEEPCFG_PDEN_SRAM0_MASK
 (0x4000U)

	)

9823 
	#SYSCON_PDSLEEPCFG_PDEN_SRAM0_SHIFT
 (14U)

	)

9824 
	#SYSCON_PDSLEEPCFG_PDEN_SRAM0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_SRAM0_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_SRAM0_MASK
)

	)

9825 
	#SYSCON_PDSLEEPCFG_PDEN_SRAM1_2_3_MASK
 (0x8000U)

	)

9826 
	#SYSCON_PDSLEEPCFG_PDEN_SRAM1_2_3_SHIFT
 (15U)

	)

9827 
	#SYSCON_PDSLEEPCFG_PDEN_SRAM1_2_3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_SRAM1_2_3_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_SRAM1_2_3_MASK
)

	)

9828 
	#SYSCON_PDSLEEPCFG_PDEN_USB_RAM_MASK
 (0x10000U)

	)

9829 
	#SYSCON_PDSLEEPCFG_PDEN_USB_RAM_SHIFT
 (16U)

	)

9830 
	#SYSCON_PDSLEEPCFG_PDEN_USB_RAM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_USB_RAM_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_USB_RAM_MASK
)

	)

9831 
	#SYSCON_PDSLEEPCFG_PDEN_ROM_MASK
 (0x20000U)

	)

9832 
	#SYSCON_PDSLEEPCFG_PDEN_ROM_SHIFT
 (17U)

	)

9833 
	#SYSCON_PDSLEEPCFG_PDEN_ROM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_ROM_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_ROM_MASK
)

	)

9834 
	#SYSCON_PDSLEEPCFG_PDEN_VDDA_MASK
 (0x80000U)

	)

9835 
	#SYSCON_PDSLEEPCFG_PDEN_VDDA_SHIFT
 (19U)

	)

9836 
	#SYSCON_PDSLEEPCFG_PDEN_VDDA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_VDDA_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_VDDA_MASK
)

	)

9837 
	#SYSCON_PDSLEEPCFG_PDEN_WDT_OSC_MASK
 (0x100000U)

	)

9838 
	#SYSCON_PDSLEEPCFG_PDEN_WDT_OSC_SHIFT
 (20U)

	)

9839 
	#SYSCON_PDSLEEPCFG_PDEN_WDT_OSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_WDT_OSC_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_WDT_OSC_MASK
)

	)

9840 
	#SYSCON_PDSLEEPCFG_PDEN_USB0_PHY_MASK
 (0x200000U)

	)

9841 
	#SYSCON_PDSLEEPCFG_PDEN_USB0_PHY_SHIFT
 (21U)

	)

9842 
	#SYSCON_PDSLEEPCFG_PDEN_USB0_PHY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_USB0_PHY_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_USB0_PHY_MASK
)

	)

9843 
	#SYSCON_PDSLEEPCFG_PDEN_SYS_PLL_MASK
 (0x400000U)

	)

9844 
	#SYSCON_PDSLEEPCFG_PDEN_SYS_PLL_SHIFT
 (22U)

	)

9845 
	#SYSCON_PDSLEEPCFG_PDEN_SYS_PLL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_SYS_PLL_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_SYS_PLL_MASK
)

	)

9846 
	#SYSCON_PDSLEEPCFG_PDEN_VREFP_MASK
 (0x800000U)

	)

9847 
	#SYSCON_PDSLEEPCFG_PDEN_VREFP_SHIFT
 (23U)

	)

9848 
	#SYSCON_PDSLEEPCFG_PDEN_VREFP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_VREFP_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_VREFP_MASK
)

	)

9849 
	#SYSCON_PDSLEEPCFG_PDEN_VD3_MASK
 (0x4000000U)

	)

9850 
	#SYSCON_PDSLEEPCFG_PDEN_VD3_SHIFT
 (26U)

	)

9851 
	#SYSCON_PDSLEEPCFG_PDEN_VD3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_VD3_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_VD3_MASK
)

	)

9852 
	#SYSCON_PDSLEEPCFG_PDEN_VD4_MASK
 (0x8000000U)

	)

9853 
	#SYSCON_PDSLEEPCFG_PDEN_VD4_SHIFT
 (27U)

	)

9854 
	#SYSCON_PDSLEEPCFG_PDEN_VD4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_VD4_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_VD4_MASK
)

	)

9855 
	#SYSCON_PDSLEEPCFG_PDEN_VD5_MASK
 (0x10000000U)

	)

9856 
	#SYSCON_PDSLEEPCFG_PDEN_VD5_SHIFT
 (28U)

	)

9857 
	#SYSCON_PDSLEEPCFG_PDEN_VD5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_VD5_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_VD5_MASK
)

	)

9858 
	#SYSCON_PDSLEEPCFG_PDEN_VD6_MASK
 (0x20000000U)

	)

9859 
	#SYSCON_PDSLEEPCFG_PDEN_VD6_SHIFT
 (29U)

	)

9860 
	#SYSCON_PDSLEEPCFG_PDEN_VD6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDSLEEPCFG_PDEN_VD6_SHIFT
)Ë& 
SYSCON_PDSLEEPCFG_PDEN_VD6_MASK
)

	)

9863 
	#SYSCON_PDSLEEPCFG_COUNT
 (2U)

	)

9866 
	#SYSCON_PDRUNCFG_PDEN_USB1_PHY_MASK
 (0x1U)

	)

9867 
	#SYSCON_PDRUNCFG_PDEN_USB1_PHY_SHIFT
 (0U)

	)

9868 
	#SYSCON_PDRUNCFG_PDEN_USB1_PHY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_USB1_PHY_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_USB1_PHY_MASK
)

	)

9869 
	#SYSCON_PDRUNCFG_PDEN_USB1_PLL_MASK
 (0x2U)

	)

9870 
	#SYSCON_PDRUNCFG_PDEN_USB1_PLL_SHIFT
 (1U)

	)

9871 
	#SYSCON_PDRUNCFG_PDEN_USB1_PLL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_USB1_PLL_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_USB1_PLL_MASK
)

	)

9872 
	#SYSCON_PDRUNCFG_PDEN_AUD_PLL_MASK
 (0x4U)

	)

9873 
	#SYSCON_PDRUNCFG_PDEN_AUD_PLL_SHIFT
 (2U)

	)

9874 
	#SYSCON_PDRUNCFG_PDEN_AUD_PLL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_AUD_PLL_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_AUD_PLL_MASK
)

	)

9875 
	#SYSCON_PDRUNCFG_PDEN_SYSOSC_MASK
 (0x8U)

	)

9876 
	#SYSCON_PDRUNCFG_PDEN_SYSOSC_SHIFT
 (3U)

	)

9877 
	#SYSCON_PDRUNCFG_PDEN_SYSOSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_SYSOSC_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_SYSOSC_MASK
)

	)

9878 
	#SYSCON_PDRUNCFG_PDEN_FRO_MASK
 (0x10U)

	)

9879 
	#SYSCON_PDRUNCFG_PDEN_FRO_SHIFT
 (4U)

	)

9880 
	#SYSCON_PDRUNCFG_PDEN_FRO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_FRO_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_FRO_MASK
)

	)

9881 
	#SYSCON_PDRUNCFG_PDEN_EEPROM_MASK
 (0x20U)

	)

9882 
	#SYSCON_PDRUNCFG_PDEN_EEPROM_SHIFT
 (5U)

	)

9883 
	#SYSCON_PDRUNCFG_PDEN_EEPROM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_EEPROM_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_EEPROM_MASK
)

	)

9884 
	#SYSCON_PDRUNCFG_PDEN_TS_MASK
 (0x40U)

	)

9885 
	#SYSCON_PDRUNCFG_PDEN_TS_SHIFT
 (6U)

	)

9886 
	#SYSCON_PDRUNCFG_PDEN_TS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_TS_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_TS_MASK
)

	)

9887 
	#SYSCON_PDRUNCFG_PDEN_BOD_RST_MASK
 (0x80U)

	)

9888 
	#SYSCON_PDRUNCFG_PDEN_BOD_RST_SHIFT
 (7U)

	)

9889 
	#SYSCON_PDRUNCFG_PDEN_BOD_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_BOD_RST_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_BOD_RST_MASK
)

	)

9890 
	#SYSCON_PDRUNCFG_PDEN_RNG_MASK
 (0x80U)

	)

9891 
	#SYSCON_PDRUNCFG_PDEN_RNG_SHIFT
 (7U)

	)

9892 
	#SYSCON_PDRUNCFG_PDEN_RNG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_RNG_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_RNG_MASK
)

	)

9893 
	#SYSCON_PDRUNCFG_PDEN_BOD_INTR_MASK
 (0x100U)

	)

9894 
	#SYSCON_PDRUNCFG_PDEN_BOD_INTR_SHIFT
 (8U)

	)

9895 
	#SYSCON_PDRUNCFG_PDEN_BOD_INTR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_BOD_INTR_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_BOD_INTR_MASK
)

	)

9896 
	#SYSCON_PDRUNCFG_PDEN_VD2_ANA_MASK
 (0x200U)

	)

9897 
	#SYSCON_PDRUNCFG_PDEN_VD2_ANA_SHIFT
 (9U)

	)

9898 
	#SYSCON_PDRUNCFG_PDEN_VD2_ANA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_VD2_ANA_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_VD2_ANA_MASK
)

	)

9899 
	#SYSCON_PDRUNCFG_PDEN_ADC0_MASK
 (0x400U)

	)

9900 
	#SYSCON_PDRUNCFG_PDEN_ADC0_SHIFT
 (10U)

	)

9901 
	#SYSCON_PDRUNCFG_PDEN_ADC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_ADC0_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_ADC0_MASK
)

	)

9902 
	#SYSCON_PDRUNCFG_PDEN_SRAMX_MASK
 (0x2000U)

	)

9903 
	#SYSCON_PDRUNCFG_PDEN_SRAMX_SHIFT
 (13U)

	)

9904 
	#SYSCON_PDRUNCFG_PDEN_SRAMX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_SRAMX_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_SRAMX_MASK
)

	)

9905 
	#SYSCON_PDRUNCFG_PDEN_SRAM0_MASK
 (0x4000U)

	)

9906 
	#SYSCON_PDRUNCFG_PDEN_SRAM0_SHIFT
 (14U)

	)

9907 
	#SYSCON_PDRUNCFG_PDEN_SRAM0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_SRAM0_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_SRAM0_MASK
)

	)

9908 
	#SYSCON_PDRUNCFG_PDEN_SRAM1_2_3_MASK
 (0x8000U)

	)

9909 
	#SYSCON_PDRUNCFG_PDEN_SRAM1_2_3_SHIFT
 (15U)

	)

9910 
	#SYSCON_PDRUNCFG_PDEN_SRAM1_2_3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_SRAM1_2_3_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_SRAM1_2_3_MASK
)

	)

9911 
	#SYSCON_PDRUNCFG_PDEN_USB_RAM_MASK
 (0x10000U)

	)

9912 
	#SYSCON_PDRUNCFG_PDEN_USB_RAM_SHIFT
 (16U)

	)

9913 
	#SYSCON_PDRUNCFG_PDEN_USB_RAM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_USB_RAM_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_USB_RAM_MASK
)

	)

9914 
	#SYSCON_PDRUNCFG_PDEN_ROM_MASK
 (0x20000U)

	)

9915 
	#SYSCON_PDRUNCFG_PDEN_ROM_SHIFT
 (17U)

	)

9916 
	#SYSCON_PDRUNCFG_PDEN_ROM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_ROM_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_ROM_MASK
)

	)

9917 
	#SYSCON_PDRUNCFG_PDEN_VDDA_MASK
 (0x80000U)

	)

9918 
	#SYSCON_PDRUNCFG_PDEN_VDDA_SHIFT
 (19U)

	)

9919 
	#SYSCON_PDRUNCFG_PDEN_VDDA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_VDDA_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_VDDA_MASK
)

	)

9920 
	#SYSCON_PDRUNCFG_PDEN_WDT_OSC_MASK
 (0x100000U)

	)

9921 
	#SYSCON_PDRUNCFG_PDEN_WDT_OSC_SHIFT
 (20U)

	)

9922 
	#SYSCON_PDRUNCFG_PDEN_WDT_OSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_WDT_OSC_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_WDT_OSC_MASK
)

	)

9923 
	#SYSCON_PDRUNCFG_PDEN_USB0_PHY_MASK
 (0x200000U)

	)

9924 
	#SYSCON_PDRUNCFG_PDEN_USB0_PHY_SHIFT
 (21U)

	)

9925 
	#SYSCON_PDRUNCFG_PDEN_USB0_PHY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_USB0_PHY_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_USB0_PHY_MASK
)

	)

9926 
	#SYSCON_PDRUNCFG_PDEN_SYS_PLL_MASK
 (0x400000U)

	)

9927 
	#SYSCON_PDRUNCFG_PDEN_SYS_PLL_SHIFT
 (22U)

	)

9928 
	#SYSCON_PDRUNCFG_PDEN_SYS_PLL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_SYS_PLL_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_SYS_PLL_MASK
)

	)

9929 
	#SYSCON_PDRUNCFG_PDEN_VREFP_MASK
 (0x800000U)

	)

9930 
	#SYSCON_PDRUNCFG_PDEN_VREFP_SHIFT
 (23U)

	)

9931 
	#SYSCON_PDRUNCFG_PDEN_VREFP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_VREFP_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_VREFP_MASK
)

	)

9932 
	#SYSCON_PDRUNCFG_PDEN_VD3_MASK
 (0x4000000U)

	)

9933 
	#SYSCON_PDRUNCFG_PDEN_VD3_SHIFT
 (26U)

	)

9934 
	#SYSCON_PDRUNCFG_PDEN_VD3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_VD3_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_VD3_MASK
)

	)

9935 
	#SYSCON_PDRUNCFG_PDEN_VD4_MASK
 (0x8000000U)

	)

9936 
	#SYSCON_PDRUNCFG_PDEN_VD4_SHIFT
 (27U)

	)

9937 
	#SYSCON_PDRUNCFG_PDEN_VD4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_VD4_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_VD4_MASK
)

	)

9938 
	#SYSCON_PDRUNCFG_PDEN_VD5_MASK
 (0x10000000U)

	)

9939 
	#SYSCON_PDRUNCFG_PDEN_VD5_SHIFT
 (28U)

	)

9940 
	#SYSCON_PDRUNCFG_PDEN_VD5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_VD5_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_VD5_MASK
)

	)

9941 
	#SYSCON_PDRUNCFG_PDEN_VD6_MASK
 (0x20000000U)

	)

9942 
	#SYSCON_PDRUNCFG_PDEN_VD6_SHIFT
 (29U)

	)

9943 
	#SYSCON_PDRUNCFG_PDEN_VD6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFG_PDEN_VD6_SHIFT
)Ë& 
SYSCON_PDRUNCFG_PDEN_VD6_MASK
)

	)

9946 
	#SYSCON_PDRUNCFG_COUNT
 (2U)

	)

9949 
	#SYSCON_PDRUNCFGSET_PDEN_USB1_PHY_MASK
 (0x1U)

	)

9950 
	#SYSCON_PDRUNCFGSET_PDEN_USB1_PHY_SHIFT
 (0U)

	)

9951 
	#SYSCON_PDRUNCFGSET_PDEN_USB1_PHY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_USB1_PHY_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_USB1_PHY_MASK
)

	)

9952 
	#SYSCON_PDRUNCFGSET_PDEN_USB1_PLL_MASK
 (0x2U)

	)

9953 
	#SYSCON_PDRUNCFGSET_PDEN_USB1_PLL_SHIFT
 (1U)

	)

9954 
	#SYSCON_PDRUNCFGSET_PDEN_USB1_PLL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_USB1_PLL_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_USB1_PLL_MASK
)

	)

9955 
	#SYSCON_PDRUNCFGSET_PDEN_AUD_PLL_MASK
 (0x4U)

	)

9956 
	#SYSCON_PDRUNCFGSET_PDEN_AUD_PLL_SHIFT
 (2U)

	)

9957 
	#SYSCON_PDRUNCFGSET_PDEN_AUD_PLL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_AUD_PLL_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_AUD_PLL_MASK
)

	)

9958 
	#SYSCON_PDRUNCFGSET_PDEN_SYSOSC_MASK
 (0x8U)

	)

9959 
	#SYSCON_PDRUNCFGSET_PDEN_SYSOSC_SHIFT
 (3U)

	)

9960 
	#SYSCON_PDRUNCFGSET_PDEN_SYSOSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_SYSOSC_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_SYSOSC_MASK
)

	)

9961 
	#SYSCON_PDRUNCFGSET_PDEN_FRO_MASK
 (0x10U)

	)

9962 
	#SYSCON_PDRUNCFGSET_PDEN_FRO_SHIFT
 (4U)

	)

9963 
	#SYSCON_PDRUNCFGSET_PDEN_FRO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_FRO_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_FRO_MASK
)

	)

9964 
	#SYSCON_PDRUNCFGSET_PDEN_EEPROM_MASK
 (0x20U)

	)

9965 
	#SYSCON_PDRUNCFGSET_PDEN_EEPROM_SHIFT
 (5U)

	)

9966 
	#SYSCON_PDRUNCFGSET_PDEN_EEPROM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_EEPROM_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_EEPROM_MASK
)

	)

9967 
	#SYSCON_PDRUNCFGSET_PDEN_TS_MASK
 (0x40U)

	)

9968 
	#SYSCON_PDRUNCFGSET_PDEN_TS_SHIFT
 (6U)

	)

9969 
	#SYSCON_PDRUNCFGSET_PDEN_TS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_TS_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_TS_MASK
)

	)

9970 
	#SYSCON_PDRUNCFGSET_PDEN_BOD_RST_MASK
 (0x80U)

	)

9971 
	#SYSCON_PDRUNCFGSET_PDEN_BOD_RST_SHIFT
 (7U)

	)

9972 
	#SYSCON_PDRUNCFGSET_PDEN_BOD_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_BOD_RST_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_BOD_RST_MASK
)

	)

9973 
	#SYSCON_PDRUNCFGSET_PDEN_RNG_MASK
 (0x80U)

	)

9974 
	#SYSCON_PDRUNCFGSET_PDEN_RNG_SHIFT
 (7U)

	)

9975 
	#SYSCON_PDRUNCFGSET_PDEN_RNG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_RNG_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_RNG_MASK
)

	)

9976 
	#SYSCON_PDRUNCFGSET_PDEN_BOD_INTR_MASK
 (0x100U)

	)

9977 
	#SYSCON_PDRUNCFGSET_PDEN_BOD_INTR_SHIFT
 (8U)

	)

9978 
	#SYSCON_PDRUNCFGSET_PDEN_BOD_INTR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_BOD_INTR_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_BOD_INTR_MASK
)

	)

9979 
	#SYSCON_PDRUNCFGSET_PDEN_VD2_ANA_MASK
 (0x200U)

	)

9980 
	#SYSCON_PDRUNCFGSET_PDEN_VD2_ANA_SHIFT
 (9U)

	)

9981 
	#SYSCON_PDRUNCFGSET_PDEN_VD2_ANA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_VD2_ANA_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_VD2_ANA_MASK
)

	)

9982 
	#SYSCON_PDRUNCFGSET_PDEN_ADC0_MASK
 (0x400U)

	)

9983 
	#SYSCON_PDRUNCFGSET_PDEN_ADC0_SHIFT
 (10U)

	)

9984 
	#SYSCON_PDRUNCFGSET_PDEN_ADC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_ADC0_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_ADC0_MASK
)

	)

9985 
	#SYSCON_PDRUNCFGSET_PDEN_SRAMX_MASK
 (0x2000U)

	)

9986 
	#SYSCON_PDRUNCFGSET_PDEN_SRAMX_SHIFT
 (13U)

	)

9987 
	#SYSCON_PDRUNCFGSET_PDEN_SRAMX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_SRAMX_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_SRAMX_MASK
)

	)

9988 
	#SYSCON_PDRUNCFGSET_PDEN_SRAM0_MASK
 (0x4000U)

	)

9989 
	#SYSCON_PDRUNCFGSET_PDEN_SRAM0_SHIFT
 (14U)

	)

9990 
	#SYSCON_PDRUNCFGSET_PDEN_SRAM0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_SRAM0_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_SRAM0_MASK
)

	)

9991 
	#SYSCON_PDRUNCFGSET_PDEN_SRAM1_2_3_MASK
 (0x8000U)

	)

9992 
	#SYSCON_PDRUNCFGSET_PDEN_SRAM1_2_3_SHIFT
 (15U)

	)

9993 
	#SYSCON_PDRUNCFGSET_PDEN_SRAM1_2_3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_SRAM1_2_3_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_SRAM1_2_3_MASK
)

	)

9994 
	#SYSCON_PDRUNCFGSET_PDEN_USB_RAM_MASK
 (0x10000U)

	)

9995 
	#SYSCON_PDRUNCFGSET_PDEN_USB_RAM_SHIFT
 (16U)

	)

9996 
	#SYSCON_PDRUNCFGSET_PDEN_USB_RAM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_USB_RAM_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_USB_RAM_MASK
)

	)

9997 
	#SYSCON_PDRUNCFGSET_PDEN_ROM_MASK
 (0x20000U)

	)

9998 
	#SYSCON_PDRUNCFGSET_PDEN_ROM_SHIFT
 (17U)

	)

9999 
	#SYSCON_PDRUNCFGSET_PDEN_ROM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_ROM_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_ROM_MASK
)

	)

10000 
	#SYSCON_PDRUNCFGSET_PDEN_VDDA_MASK
 (0x80000U)

	)

10001 
	#SYSCON_PDRUNCFGSET_PDEN_VDDA_SHIFT
 (19U)

	)

10002 
	#SYSCON_PDRUNCFGSET_PDEN_VDDA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_VDDA_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_VDDA_MASK
)

	)

10003 
	#SYSCON_PDRUNCFGSET_PDEN_WDT_OSC_MASK
 (0x100000U)

	)

10004 
	#SYSCON_PDRUNCFGSET_PDEN_WDT_OSC_SHIFT
 (20U)

	)

10005 
	#SYSCON_PDRUNCFGSET_PDEN_WDT_OSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_WDT_OSC_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_WDT_OSC_MASK
)

	)

10006 
	#SYSCON_PDRUNCFGSET_PDEN_USB0_PHY_MASK
 (0x200000U)

	)

10007 
	#SYSCON_PDRUNCFGSET_PDEN_USB0_PHY_SHIFT
 (21U)

	)

10008 
	#SYSCON_PDRUNCFGSET_PDEN_USB0_PHY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_USB0_PHY_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_USB0_PHY_MASK
)

	)

10009 
	#SYSCON_PDRUNCFGSET_PDEN_SYS_PLL_MASK
 (0x400000U)

	)

10010 
	#SYSCON_PDRUNCFGSET_PDEN_SYS_PLL_SHIFT
 (22U)

	)

10011 
	#SYSCON_PDRUNCFGSET_PDEN_SYS_PLL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_SYS_PLL_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_SYS_PLL_MASK
)

	)

10012 
	#SYSCON_PDRUNCFGSET_PDEN_VREFP_MASK
 (0x800000U)

	)

10013 
	#SYSCON_PDRUNCFGSET_PDEN_VREFP_SHIFT
 (23U)

	)

10014 
	#SYSCON_PDRUNCFGSET_PDEN_VREFP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_VREFP_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_VREFP_MASK
)

	)

10015 
	#SYSCON_PDRUNCFGSET_PDEN_VD3_MASK
 (0x4000000U)

	)

10016 
	#SYSCON_PDRUNCFGSET_PDEN_VD3_SHIFT
 (26U)

	)

10017 
	#SYSCON_PDRUNCFGSET_PDEN_VD3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_VD3_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_VD3_MASK
)

	)

10018 
	#SYSCON_PDRUNCFGSET_PDEN_VD4_MASK
 (0x8000000U)

	)

10019 
	#SYSCON_PDRUNCFGSET_PDEN_VD4_SHIFT
 (27U)

	)

10020 
	#SYSCON_PDRUNCFGSET_PDEN_VD4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_VD4_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_VD4_MASK
)

	)

10021 
	#SYSCON_PDRUNCFGSET_PDEN_VD5_MASK
 (0x10000000U)

	)

10022 
	#SYSCON_PDRUNCFGSET_PDEN_VD5_SHIFT
 (28U)

	)

10023 
	#SYSCON_PDRUNCFGSET_PDEN_VD5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_VD5_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_VD5_MASK
)

	)

10024 
	#SYSCON_PDRUNCFGSET_PDEN_VD6_MASK
 (0x20000000U)

	)

10025 
	#SYSCON_PDRUNCFGSET_PDEN_VD6_SHIFT
 (29U)

	)

10026 
	#SYSCON_PDRUNCFGSET_PDEN_VD6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGSET_PDEN_VD6_SHIFT
)Ë& 
SYSCON_PDRUNCFGSET_PDEN_VD6_MASK
)

	)

10029 
	#SYSCON_PDRUNCFGSET_COUNT
 (2U)

	)

10032 
	#SYSCON_PDRUNCFGCLR_PDEN_USB1_PHY_MASK
 (0x1U)

	)

10033 
	#SYSCON_PDRUNCFGCLR_PDEN_USB1_PHY_SHIFT
 (0U)

	)

10034 
	#SYSCON_PDRUNCFGCLR_PDEN_USB1_PHY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_USB1_PHY_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_USB1_PHY_MASK
)

	)

10035 
	#SYSCON_PDRUNCFGCLR_PDEN_USB1_PLL_MASK
 (0x2U)

	)

10036 
	#SYSCON_PDRUNCFGCLR_PDEN_USB1_PLL_SHIFT
 (1U)

	)

10037 
	#SYSCON_PDRUNCFGCLR_PDEN_USB1_PLL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_USB1_PLL_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_USB1_PLL_MASK
)

	)

10038 
	#SYSCON_PDRUNCFGCLR_PDEN_AUD_PLL_MASK
 (0x4U)

	)

10039 
	#SYSCON_PDRUNCFGCLR_PDEN_AUD_PLL_SHIFT
 (2U)

	)

10040 
	#SYSCON_PDRUNCFGCLR_PDEN_AUD_PLL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_AUD_PLL_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_AUD_PLL_MASK
)

	)

10041 
	#SYSCON_PDRUNCFGCLR_PDEN_SYSOSC_MASK
 (0x8U)

	)

10042 
	#SYSCON_PDRUNCFGCLR_PDEN_SYSOSC_SHIFT
 (3U)

	)

10043 
	#SYSCON_PDRUNCFGCLR_PDEN_SYSOSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_SYSOSC_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_SYSOSC_MASK
)

	)

10044 
	#SYSCON_PDRUNCFGCLR_PDEN_FRO_MASK
 (0x10U)

	)

10045 
	#SYSCON_PDRUNCFGCLR_PDEN_FRO_SHIFT
 (4U)

	)

10046 
	#SYSCON_PDRUNCFGCLR_PDEN_FRO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_FRO_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_FRO_MASK
)

	)

10047 
	#SYSCON_PDRUNCFGCLR_PDEN_EEPROM_MASK
 (0x20U)

	)

10048 
	#SYSCON_PDRUNCFGCLR_PDEN_EEPROM_SHIFT
 (5U)

	)

10049 
	#SYSCON_PDRUNCFGCLR_PDEN_EEPROM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_EEPROM_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_EEPROM_MASK
)

	)

10050 
	#SYSCON_PDRUNCFGCLR_PDEN_TS_MASK
 (0x40U)

	)

10051 
	#SYSCON_PDRUNCFGCLR_PDEN_TS_SHIFT
 (6U)

	)

10052 
	#SYSCON_PDRUNCFGCLR_PDEN_TS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_TS_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_TS_MASK
)

	)

10053 
	#SYSCON_PDRUNCFGCLR_PDEN_BOD_RST_MASK
 (0x80U)

	)

10054 
	#SYSCON_PDRUNCFGCLR_PDEN_BOD_RST_SHIFT
 (7U)

	)

10055 
	#SYSCON_PDRUNCFGCLR_PDEN_BOD_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_BOD_RST_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_BOD_RST_MASK
)

	)

10056 
	#SYSCON_PDRUNCFGCLR_PDEN_RNG_MASK
 (0x80U)

	)

10057 
	#SYSCON_PDRUNCFGCLR_PDEN_RNG_SHIFT
 (7U)

	)

10058 
	#SYSCON_PDRUNCFGCLR_PDEN_RNG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_RNG_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_RNG_MASK
)

	)

10059 
	#SYSCON_PDRUNCFGCLR_PDEN_BOD_INTR_MASK
 (0x100U)

	)

10060 
	#SYSCON_PDRUNCFGCLR_PDEN_BOD_INTR_SHIFT
 (8U)

	)

10061 
	#SYSCON_PDRUNCFGCLR_PDEN_BOD_INTR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_BOD_INTR_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_BOD_INTR_MASK
)

	)

10062 
	#SYSCON_PDRUNCFGCLR_PDEN_VD2_ANA_MASK
 (0x200U)

	)

10063 
	#SYSCON_PDRUNCFGCLR_PDEN_VD2_ANA_SHIFT
 (9U)

	)

10064 
	#SYSCON_PDRUNCFGCLR_PDEN_VD2_ANA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_VD2_ANA_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_VD2_ANA_MASK
)

	)

10065 
	#SYSCON_PDRUNCFGCLR_PDEN_ADC0_MASK
 (0x400U)

	)

10066 
	#SYSCON_PDRUNCFGCLR_PDEN_ADC0_SHIFT
 (10U)

	)

10067 
	#SYSCON_PDRUNCFGCLR_PDEN_ADC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_ADC0_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_ADC0_MASK
)

	)

10068 
	#SYSCON_PDRUNCFGCLR_PDEN_SRAMX_MASK
 (0x2000U)

	)

10069 
	#SYSCON_PDRUNCFGCLR_PDEN_SRAMX_SHIFT
 (13U)

	)

10070 
	#SYSCON_PDRUNCFGCLR_PDEN_SRAMX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_SRAMX_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_SRAMX_MASK
)

	)

10071 
	#SYSCON_PDRUNCFGCLR_PDEN_SRAM0_MASK
 (0x4000U)

	)

10072 
	#SYSCON_PDRUNCFGCLR_PDEN_SRAM0_SHIFT
 (14U)

	)

10073 
	#SYSCON_PDRUNCFGCLR_PDEN_SRAM0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_SRAM0_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_SRAM0_MASK
)

	)

10074 
	#SYSCON_PDRUNCFGCLR_PDEN_SRAM1_2_3_MASK
 (0x8000U)

	)

10075 
	#SYSCON_PDRUNCFGCLR_PDEN_SRAM1_2_3_SHIFT
 (15U)

	)

10076 
	#SYSCON_PDRUNCFGCLR_PDEN_SRAM1_2_3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_SRAM1_2_3_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_SRAM1_2_3_MASK
)

	)

10077 
	#SYSCON_PDRUNCFGCLR_PDEN_USB_RAM_MASK
 (0x10000U)

	)

10078 
	#SYSCON_PDRUNCFGCLR_PDEN_USB_RAM_SHIFT
 (16U)

	)

10079 
	#SYSCON_PDRUNCFGCLR_PDEN_USB_RAM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_USB_RAM_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_USB_RAM_MASK
)

	)

10080 
	#SYSCON_PDRUNCFGCLR_PDEN_ROM_MASK
 (0x20000U)

	)

10081 
	#SYSCON_PDRUNCFGCLR_PDEN_ROM_SHIFT
 (17U)

	)

10082 
	#SYSCON_PDRUNCFGCLR_PDEN_ROM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_ROM_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_ROM_MASK
)

	)

10083 
	#SYSCON_PDRUNCFGCLR_PDEN_VDDA_MASK
 (0x80000U)

	)

10084 
	#SYSCON_PDRUNCFGCLR_PDEN_VDDA_SHIFT
 (19U)

	)

10085 
	#SYSCON_PDRUNCFGCLR_PDEN_VDDA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_VDDA_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_VDDA_MASK
)

	)

10086 
	#SYSCON_PDRUNCFGCLR_PDEN_WDT_OSC_MASK
 (0x100000U)

	)

10087 
	#SYSCON_PDRUNCFGCLR_PDEN_WDT_OSC_SHIFT
 (20U)

	)

10088 
	#SYSCON_PDRUNCFGCLR_PDEN_WDT_OSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_WDT_OSC_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_WDT_OSC_MASK
)

	)

10089 
	#SYSCON_PDRUNCFGCLR_PDEN_USB0_PHY_MASK
 (0x200000U)

	)

10090 
	#SYSCON_PDRUNCFGCLR_PDEN_USB0_PHY_SHIFT
 (21U)

	)

10091 
	#SYSCON_PDRUNCFGCLR_PDEN_USB0_PHY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_USB0_PHY_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_USB0_PHY_MASK
)

	)

10092 
	#SYSCON_PDRUNCFGCLR_PDEN_SYS_PLL_MASK
 (0x400000U)

	)

10093 
	#SYSCON_PDRUNCFGCLR_PDEN_SYS_PLL_SHIFT
 (22U)

	)

10094 
	#SYSCON_PDRUNCFGCLR_PDEN_SYS_PLL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_SYS_PLL_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_SYS_PLL_MASK
)

	)

10095 
	#SYSCON_PDRUNCFGCLR_PDEN_VREFP_MASK
 (0x800000U)

	)

10096 
	#SYSCON_PDRUNCFGCLR_PDEN_VREFP_SHIFT
 (23U)

	)

10097 
	#SYSCON_PDRUNCFGCLR_PDEN_VREFP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_VREFP_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_VREFP_MASK
)

	)

10098 
	#SYSCON_PDRUNCFGCLR_PDEN_VD3_MASK
 (0x4000000U)

	)

10099 
	#SYSCON_PDRUNCFGCLR_PDEN_VD3_SHIFT
 (26U)

	)

10100 
	#SYSCON_PDRUNCFGCLR_PDEN_VD3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_VD3_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_VD3_MASK
)

	)

10101 
	#SYSCON_PDRUNCFGCLR_PDEN_VD4_MASK
 (0x8000000U)

	)

10102 
	#SYSCON_PDRUNCFGCLR_PDEN_VD4_SHIFT
 (27U)

	)

10103 
	#SYSCON_PDRUNCFGCLR_PDEN_VD4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_VD4_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_VD4_MASK
)

	)

10104 
	#SYSCON_PDRUNCFGCLR_PDEN_VD5_MASK
 (0x10000000U)

	)

10105 
	#SYSCON_PDRUNCFGCLR_PDEN_VD5_SHIFT
 (28U)

	)

10106 
	#SYSCON_PDRUNCFGCLR_PDEN_VD5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_VD5_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_VD5_MASK
)

	)

10107 
	#SYSCON_PDRUNCFGCLR_PDEN_VD6_MASK
 (0x20000000U)

	)

10108 
	#SYSCON_PDRUNCFGCLR_PDEN_VD6_SHIFT
 (29U)

	)

10109 
	#SYSCON_PDRUNCFGCLR_PDEN_VD6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_PDRUNCFGCLR_PDEN_VD6_SHIFT
)Ë& 
SYSCON_PDRUNCFGCLR_PDEN_VD6_MASK
)

	)

10112 
	#SYSCON_PDRUNCFGCLR_COUNT
 (2U)

	)

10115 
	#SYSCON_STARTER_WDT_BOD_MASK
 (0x1U)

	)

10116 
	#SYSCON_STARTER_WDT_BOD_SHIFT
 (0U)

	)

10117 
	#SYSCON_STARTER_WDT_BOD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_WDT_BOD_SHIFT
)Ë& 
SYSCON_STARTER_WDT_BOD_MASK
)

	)

10118 
	#SYSCON_STARTER_PINT4_MASK
 (0x1U)

	)

10119 
	#SYSCON_STARTER_PINT4_SHIFT
 (0U)

	)

10120 
	#SYSCON_STARTER_PINT4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_PINT4_SHIFT
)Ë& 
SYSCON_STARTER_PINT4_MASK
)

	)

10121 
	#SYSCON_STARTER_PINT5_MASK
 (0x2U)

	)

10122 
	#SYSCON_STARTER_PINT5_SHIFT
 (1U)

	)

10123 
	#SYSCON_STARTER_PINT5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_PINT5_SHIFT
)Ë& 
SYSCON_STARTER_PINT5_MASK
)

	)

10124 
	#SYSCON_STARTER_DMA_MASK
 (0x2U)

	)

10125 
	#SYSCON_STARTER_DMA_SHIFT
 (1U)

	)

10126 
	#SYSCON_STARTER_DMA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_DMA_SHIFT
)Ë& 
SYSCON_STARTER_DMA_MASK
)

	)

10127 
	#SYSCON_STARTER_GINT0_MASK
 (0x4U)

	)

10128 
	#SYSCON_STARTER_GINT0_SHIFT
 (2U)

	)

10129 
	#SYSCON_STARTER_GINT0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_GINT0_SHIFT
)Ë& 
SYSCON_STARTER_GINT0_MASK
)

	)

10130 
	#SYSCON_STARTER_PINT6_MASK
 (0x4U)

	)

10131 
	#SYSCON_STARTER_PINT6_SHIFT
 (2U)

	)

10132 
	#SYSCON_STARTER_PINT6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_PINT6_SHIFT
)Ë& 
SYSCON_STARTER_PINT6_MASK
)

	)

10133 
	#SYSCON_STARTER_GINT1_MASK
 (0x8U)

	)

10134 
	#SYSCON_STARTER_GINT1_SHIFT
 (3U)

	)

10135 
	#SYSCON_STARTER_GINT1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_GINT1_SHIFT
)Ë& 
SYSCON_STARTER_GINT1_MASK
)

	)

10136 
	#SYSCON_STARTER_PINT7_MASK
 (0x8U)

	)

10137 
	#SYSCON_STARTER_PINT7_SHIFT
 (3U)

	)

10138 
	#SYSCON_STARTER_PINT7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_PINT7_SHIFT
)Ë& 
SYSCON_STARTER_PINT7_MASK
)

	)

10139 
	#SYSCON_STARTER_CTIMER2_MASK
 (0x10U)

	)

10140 
	#SYSCON_STARTER_CTIMER2_SHIFT
 (4U)

	)

10141 
	#SYSCON_STARTER_CTIMER2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_CTIMER2_SHIFT
)Ë& 
SYSCON_STARTER_CTIMER2_MASK
)

	)

10142 
	#SYSCON_STARTER_PIN_INT0_MASK
 (0x10U)

	)

10143 
	#SYSCON_STARTER_PIN_INT0_SHIFT
 (4U)

	)

10144 
	#SYSCON_STARTER_PIN_INT0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_PIN_INT0_SHIFT
)Ë& 
SYSCON_STARTER_PIN_INT0_MASK
)

	)

10145 
	#SYSCON_STARTER_CTIMER4_MASK
 (0x20U)

	)

10146 
	#SYSCON_STARTER_CTIMER4_SHIFT
 (5U)

	)

10147 
	#SYSCON_STARTER_CTIMER4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_CTIMER4_SHIFT
)Ë& 
SYSCON_STARTER_CTIMER4_MASK
)

	)

10148 
	#SYSCON_STARTER_PIN_INT1_MASK
 (0x20U)

	)

10149 
	#SYSCON_STARTER_PIN_INT1_SHIFT
 (5U)

	)

10150 
	#SYSCON_STARTER_PIN_INT1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_PIN_INT1_SHIFT
)Ë& 
SYSCON_STARTER_PIN_INT1_MASK
)

	)

10151 
	#SYSCON_STARTER_PIN_INT2_MASK
 (0x40U)

	)

10152 
	#SYSCON_STARTER_PIN_INT2_SHIFT
 (6U)

	)

10153 
	#SYSCON_STARTER_PIN_INT2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_PIN_INT2_SHIFT
)Ë& 
SYSCON_STARTER_PIN_INT2_MASK
)

	)

10154 
	#SYSCON_STARTER_PIN_INT3_MASK
 (0x80U)

	)

10155 
	#SYSCON_STARTER_PIN_INT3_SHIFT
 (7U)

	)

10156 
	#SYSCON_STARTER_PIN_INT3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_PIN_INT3_SHIFT
)Ë& 
SYSCON_STARTER_PIN_INT3_MASK
)

	)

10157 
	#SYSCON_STARTER_SPIFI_MASK
 (0x80U)

	)

10158 
	#SYSCON_STARTER_SPIFI_SHIFT
 (7U)

	)

10159 
	#SYSCON_STARTER_SPIFI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_SPIFI_SHIFT
)Ë& 
SYSCON_STARTER_SPIFI_MASK
)

	)

10160 
	#SYSCON_STARTER_FLEXCOMM8_MASK
 (0x100U)

	)

10161 
	#SYSCON_STARTER_FLEXCOMM8_SHIFT
 (8U)

	)

10162 
	#SYSCON_STARTER_FLEXCOMM8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_FLEXCOMM8_SHIFT
)Ë& 
SYSCON_STARTER_FLEXCOMM8_MASK
)

	)

10163 
	#SYSCON_STARTER_UTICK_MASK
 (0x100U)

	)

10164 
	#SYSCON_STARTER_UTICK_SHIFT
 (8U)

	)

10165 
	#SYSCON_STARTER_UTICK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_UTICK_SHIFT
)Ë& 
SYSCON_STARTER_UTICK_MASK
)

	)

10166 
	#SYSCON_STARTER_MRT_MASK
 (0x200U)

	)

10167 
	#SYSCON_STARTER_MRT_SHIFT
 (9U)

	)

10168 
	#SYSCON_STARTER_MRT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_MRT_SHIFT
)Ë& 
SYSCON_STARTER_MRT_MASK
)

	)

10169 
	#SYSCON_STARTER_FLEXCOMM9_MASK
 (0x200U)

	)

10170 
	#SYSCON_STARTER_FLEXCOMM9_SHIFT
 (9U)

	)

10171 
	#SYSCON_STARTER_FLEXCOMM9
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_FLEXCOMM9_SHIFT
)Ë& 
SYSCON_STARTER_FLEXCOMM9_MASK
)

	)

10172 
	#SYSCON_STARTER_CTIMER0_MASK
 (0x400U)

	)

10173 
	#SYSCON_STARTER_CTIMER0_SHIFT
 (10U)

	)

10174 
	#SYSCON_STARTER_CTIMER0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_CTIMER0_SHIFT
)Ë& 
SYSCON_STARTER_CTIMER0_MASK
)

	)

10175 
	#SYSCON_STARTER_CTIMER1_MASK
 (0x800U)

	)

10176 
	#SYSCON_STARTER_CTIMER1_SHIFT
 (11U)

	)

10177 
	#SYSCON_STARTER_CTIMER1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_CTIMER1_SHIFT
)Ë& 
SYSCON_STARTER_CTIMER1_MASK
)

	)

10178 
	#SYSCON_STARTER_SCT0_MASK
 (0x1000U)

	)

10179 
	#SYSCON_STARTER_SCT0_SHIFT
 (12U)

	)

10180 
	#SYSCON_STARTER_SCT0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_SCT0_SHIFT
)Ë& 
SYSCON_STARTER_SCT0_MASK
)

	)

10181 
	#SYSCON_STARTER_CTIMER3_MASK
 (0x2000U)

	)

10182 
	#SYSCON_STARTER_CTIMER3_SHIFT
 (13U)

	)

10183 
	#SYSCON_STARTER_CTIMER3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_CTIMER3_SHIFT
)Ë& 
SYSCON_STARTER_CTIMER3_MASK
)

	)

10184 
	#SYSCON_STARTER_FLEXCOMM0_MASK
 (0x4000U)

	)

10185 
	#SYSCON_STARTER_FLEXCOMM0_SHIFT
 (14U)

	)

10186 
	#SYSCON_STARTER_FLEXCOMM0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_FLEXCOMM0_SHIFT
)Ë& 
SYSCON_STARTER_FLEXCOMM0_MASK
)

	)

10187 
	#SYSCON_STARTER_FLEXCOMM1_MASK
 (0x8000U)

	)

10188 
	#SYSCON_STARTER_FLEXCOMM1_SHIFT
 (15U)

	)

10189 
	#SYSCON_STARTER_FLEXCOMM1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_FLEXCOMM1_SHIFT
)Ë& 
SYSCON_STARTER_FLEXCOMM1_MASK
)

	)

10190 
	#SYSCON_STARTER_USB1_MASK
 (0x8000U)

	)

10191 
	#SYSCON_STARTER_USB1_SHIFT
 (15U)

	)

10192 
	#SYSCON_STARTER_USB1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_USB1_SHIFT
)Ë& 
SYSCON_STARTER_USB1_MASK
)

	)

10193 
	#SYSCON_STARTER_FLEXCOMM2_MASK
 (0x10000U)

	)

10194 
	#SYSCON_STARTER_FLEXCOMM2_SHIFT
 (16U)

	)

10195 
	#SYSCON_STARTER_FLEXCOMM2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_FLEXCOMM2_SHIFT
)Ë& 
SYSCON_STARTER_FLEXCOMM2_MASK
)

	)

10196 
	#SYSCON_STARTER_USB1_ACT_MASK
 (0x10000U)

	)

10197 
	#SYSCON_STARTER_USB1_ACT_SHIFT
 (16U)

	)

10198 
	#SYSCON_STARTER_USB1_ACT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_USB1_ACT_SHIFT
)Ë& 
SYSCON_STARTER_USB1_ACT_MASK
)

	)

10199 
	#SYSCON_STARTER_ENET_INT1_MASK
 (0x20000U)

	)

10200 
	#SYSCON_STARTER_ENET_INT1_SHIFT
 (17U)

	)

10201 
	#SYSCON_STARTER_ENET_INT1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_ENET_INT1_SHIFT
)Ë& 
SYSCON_STARTER_ENET_INT1_MASK
)

	)

10202 
	#SYSCON_STARTER_FLEXCOMM3_MASK
 (0x20000U)

	)

10203 
	#SYSCON_STARTER_FLEXCOMM3_SHIFT
 (17U)

	)

10204 
	#SYSCON_STARTER_FLEXCOMM3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_FLEXCOMM3_SHIFT
)Ë& 
SYSCON_STARTER_FLEXCOMM3_MASK
)

	)

10205 
	#SYSCON_STARTER_ENET_INT2_MASK
 (0x40000U)

	)

10206 
	#SYSCON_STARTER_ENET_INT2_SHIFT
 (18U)

	)

10207 
	#SYSCON_STARTER_ENET_INT2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_ENET_INT2_SHIFT
)Ë& 
SYSCON_STARTER_ENET_INT2_MASK
)

	)

10208 
	#SYSCON_STARTER_FLEXCOMM4_MASK
 (0x40000U)

	)

10209 
	#SYSCON_STARTER_FLEXCOMM4_SHIFT
 (18U)

	)

10210 
	#SYSCON_STARTER_FLEXCOMM4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_FLEXCOMM4_SHIFT
)Ë& 
SYSCON_STARTER_FLEXCOMM4_MASK
)

	)

10211 
	#SYSCON_STARTER_ENET_INT0_MASK
 (0x80000U)

	)

10212 
	#SYSCON_STARTER_ENET_INT0_SHIFT
 (19U)

	)

10213 
	#SYSCON_STARTER_ENET_INT0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_ENET_INT0_SHIFT
)Ë& 
SYSCON_STARTER_ENET_INT0_MASK
)

	)

10214 
	#SYSCON_STARTER_FLEXCOMM5_MASK
 (0x80000U)

	)

10215 
	#SYSCON_STARTER_FLEXCOMM5_SHIFT
 (19U)

	)

10216 
	#SYSCON_STARTER_FLEXCOMM5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_FLEXCOMM5_SHIFT
)Ë& 
SYSCON_STARTER_FLEXCOMM5_MASK
)

	)

10217 
	#SYSCON_STARTER_FLEXCOMM6_MASK
 (0x100000U)

	)

10218 
	#SYSCON_STARTER_FLEXCOMM6_SHIFT
 (20U)

	)

10219 
	#SYSCON_STARTER_FLEXCOMM6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_FLEXCOMM6_SHIFT
)Ë& 
SYSCON_STARTER_FLEXCOMM6_MASK
)

	)

10220 
	#SYSCON_STARTER_FLEXCOMM7_MASK
 (0x200000U)

	)

10221 
	#SYSCON_STARTER_FLEXCOMM7_SHIFT
 (21U)

	)

10222 
	#SYSCON_STARTER_FLEXCOMM7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_FLEXCOMM7_SHIFT
)Ë& 
SYSCON_STARTER_FLEXCOMM7_MASK
)

	)

10223 
	#SYSCON_STARTER_ADC0_SEQA_MASK
 (0x400000U)

	)

10224 
	#SYSCON_STARTER_ADC0_SEQA_SHIFT
 (22U)

	)

10225 
	#SYSCON_STARTER_ADC0_SEQA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_ADC0_SEQA_SHIFT
)Ë& 
SYSCON_STARTER_ADC0_SEQA_MASK
)

	)

10226 
	#SYSCON_STARTER_SMARTCARD0_MASK
 (0x800000U)

	)

10227 
	#SYSCON_STARTER_SMARTCARD0_SHIFT
 (23U)

	)

10228 
	#SYSCON_STARTER_SMARTCARD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_SMARTCARD0_SHIFT
)Ë& 
SYSCON_STARTER_SMARTCARD0_MASK
)

	)

10229 
	#SYSCON_STARTER_ADC0_SEQB_MASK
 (0x800000U)

	)

10230 
	#SYSCON_STARTER_ADC0_SEQB_SHIFT
 (23U)

	)

10231 
	#SYSCON_STARTER_ADC0_SEQB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_ADC0_SEQB_SHIFT
)Ë& 
SYSCON_STARTER_ADC0_SEQB_MASK
)

	)

10232 
	#SYSCON_STARTER_ADC0_THCMP_MASK
 (0x1000000U)

	)

10233 
	#SYSCON_STARTER_ADC0_THCMP_SHIFT
 (24U)

	)

10234 
	#SYSCON_STARTER_ADC0_THCMP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_ADC0_THCMP_SHIFT
)Ë& 
SYSCON_STARTER_ADC0_THCMP_MASK
)

	)

10235 
	#SYSCON_STARTER_SMARTCARD1_MASK
 (0x1000000U)

	)

10236 
	#SYSCON_STARTER_SMARTCARD1_SHIFT
 (24U)

	)

10237 
	#SYSCON_STARTER_SMARTCARD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_SMARTCARD1_SHIFT
)Ë& 
SYSCON_STARTER_SMARTCARD1_MASK
)

	)

10238 
	#SYSCON_STARTER_DMIC_MASK
 (0x2000000U)

	)

10239 
	#SYSCON_STARTER_DMIC_SHIFT
 (25U)

	)

10240 
	#SYSCON_STARTER_DMIC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_DMIC_SHIFT
)Ë& 
SYSCON_STARTER_DMIC_MASK
)

	)

10241 
	#SYSCON_STARTER_HWVAD_MASK
 (0x4000000U)

	)

10242 
	#SYSCON_STARTER_HWVAD_SHIFT
 (26U)

	)

10243 
	#SYSCON_STARTER_HWVAD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_HWVAD_SHIFT
)Ë& 
SYSCON_STARTER_HWVAD_MASK
)

	)

10244 
	#SYSCON_STARTER_USB0_NEEDCLK_MASK
 (0x8000000U)

	)

10245 
	#SYSCON_STARTER_USB0_NEEDCLK_SHIFT
 (27U)

	)

10246 
	#SYSCON_STARTER_USB0_NEEDCLK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_USB0_NEEDCLK_SHIFT
)Ë& 
SYSCON_STARTER_USB0_NEEDCLK_MASK
)

	)

10247 
	#SYSCON_STARTER_USB0_MASK
 (0x10000000U)

	)

10248 
	#SYSCON_STARTER_USB0_SHIFT
 (28U)

	)

10249 
	#SYSCON_STARTER_USB0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_USB0_SHIFT
)Ë& 
SYSCON_STARTER_USB0_MASK
)

	)

10250 
	#SYSCON_STARTER_RTC_MASK
 (0x20000000U)

	)

10251 
	#SYSCON_STARTER_RTC_SHIFT
 (29U)

	)

10252 
	#SYSCON_STARTER_RTC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTER_RTC_SHIFT
)Ë& 
SYSCON_STARTER_RTC_MASK
)

	)

10255 
	#SYSCON_STARTER_COUNT
 (2U)

	)

10258 
	#SYSCON_STARTERSET_START_SET_MASK
 (0xFFFFFFFFU)

	)

10259 
	#SYSCON_STARTERSET_START_SET_SHIFT
 (0U)

	)

10260 
	#SYSCON_STARTERSET_START_SET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTERSET_START_SET_SHIFT
)Ë& 
SYSCON_STARTERSET_START_SET_MASK
)

	)

10263 
	#SYSCON_STARTERSET_COUNT
 (2U)

	)

10266 
	#SYSCON_STARTERCLR_START_CLR_MASK
 (0xFFFFFFFFU)

	)

10267 
	#SYSCON_STARTERCLR_START_CLR_SHIFT
 (0U)

	)

10268 
	#SYSCON_STARTERCLR_START_CLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_STARTERCLR_START_CLR_SHIFT
)Ë& 
SYSCON_STARTERCLR_START_CLR_MASK
)

	)

10271 
	#SYSCON_STARTERCLR_COUNT
 (2U)

	)

10274 
	#SYSCON_HWWAKE_FORCEWAKE_MASK
 (0x1U)

	)

10275 
	#SYSCON_HWWAKE_FORCEWAKE_SHIFT
 (0U)

	)

10276 
	#SYSCON_HWWAKE_FORCEWAKE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_HWWAKE_FORCEWAKE_SHIFT
)Ë& 
SYSCON_HWWAKE_FORCEWAKE_MASK
)

	)

10277 
	#SYSCON_HWWAKE_FCWAKE_MASK
 (0x2U)

	)

10278 
	#SYSCON_HWWAKE_FCWAKE_SHIFT
 (1U)

	)

10279 
	#SYSCON_HWWAKE_FCWAKE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_HWWAKE_FCWAKE_SHIFT
)Ë& 
SYSCON_HWWAKE_FCWAKE_MASK
)

	)

10280 
	#SYSCON_HWWAKE_WAKEDMIC_MASK
 (0x4U)

	)

10281 
	#SYSCON_HWWAKE_WAKEDMIC_SHIFT
 (2U)

	)

10282 
	#SYSCON_HWWAKE_WAKEDMIC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_HWWAKE_WAKEDMIC_SHIFT
)Ë& 
SYSCON_HWWAKE_WAKEDMIC_MASK
)

	)

10283 
	#SYSCON_HWWAKE_WAKEDMA_MASK
 (0x8U)

	)

10284 
	#SYSCON_HWWAKE_WAKEDMA_SHIFT
 (3U)

	)

10285 
	#SYSCON_HWWAKE_WAKEDMA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_HWWAKE_WAKEDMA_SHIFT
)Ë& 
SYSCON_HWWAKE_WAKEDMA_MASK
)

	)

10288 
	#SYSCON_AUTOCGOR_RAM0X_MASK
 (0x2U)

	)

10289 
	#SYSCON_AUTOCGOR_RAM0X_SHIFT
 (1U)

	)

10290 
	#SYSCON_AUTOCGOR_RAM0X
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AUTOCGOR_RAM0X_SHIFT
)Ë& 
SYSCON_AUTOCGOR_RAM0X_MASK
)

	)

10291 
	#SYSCON_AUTOCGOR_RAM1_MASK
 (0x4U)

	)

10292 
	#SYSCON_AUTOCGOR_RAM1_SHIFT
 (2U)

	)

10293 
	#SYSCON_AUTOCGOR_RAM1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AUTOCGOR_RAM1_SHIFT
)Ë& 
SYSCON_AUTOCGOR_RAM1_MASK
)

	)

10294 
	#SYSCON_AUTOCGOR_RAM2_MASK
 (0x8U)

	)

10295 
	#SYSCON_AUTOCGOR_RAM2_SHIFT
 (3U)

	)

10296 
	#SYSCON_AUTOCGOR_RAM2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AUTOCGOR_RAM2_SHIFT
)Ë& 
SYSCON_AUTOCGOR_RAM2_MASK
)

	)

10297 
	#SYSCON_AUTOCGOR_RAM3_MASK
 (0x10U)

	)

10298 
	#SYSCON_AUTOCGOR_RAM3_SHIFT
 (4U)

	)

10299 
	#SYSCON_AUTOCGOR_RAM3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_AUTOCGOR_RAM3_SHIFT
)Ë& 
SYSCON_AUTOCGOR_RAM3_MASK
)

	)

10302 
	#SYSCON_JTAGIDCODE_JTAGID_MASK
 (0xFFFFFFFFU)

	)

10303 
	#SYSCON_JTAGIDCODE_JTAGID_SHIFT
 (0U)

	)

10304 
	#SYSCON_JTAGIDCODE_JTAGID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_JTAGIDCODE_JTAGID_SHIFT
)Ë& 
SYSCON_JTAGIDCODE_JTAGID_MASK
)

	)

10307 
	#SYSCON_DEVICE_ID0_PARTID_MASK
 (0xFFFFFFFFU)

	)

10308 
	#SYSCON_DEVICE_ID0_PARTID_SHIFT
 (0U)

	)

10309 
	#SYSCON_DEVICE_ID0_PARTID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_DEVICE_ID0_PARTID_SHIFT
)Ë& 
SYSCON_DEVICE_ID0_PARTID_MASK
)

	)

10312 
	#SYSCON_DEVICE_ID1_REVID_MASK
 (0xFFFFFFFFU)

	)

10313 
	#SYSCON_DEVICE_ID1_REVID_SHIFT
 (0U)

	)

10314 
	#SYSCON_DEVICE_ID1_REVID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_DEVICE_ID1_REVID_SHIFT
)Ë& 
SYSCON_DEVICE_ID1_REVID_MASK
)

	)

10317 
	#SYSCON_BODCTRL_BODRSTLEV_MASK
 (0x3U)

	)

10318 
	#SYSCON_BODCTRL_BODRSTLEV_SHIFT
 (0U)

	)

10319 
	#SYSCON_BODCTRL_BODRSTLEV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_BODCTRL_BODRSTLEV_SHIFT
)Ë& 
SYSCON_BODCTRL_BODRSTLEV_MASK
)

	)

10320 
	#SYSCON_BODCTRL_BODRSTENA_MASK
 (0x4U)

	)

10321 
	#SYSCON_BODCTRL_BODRSTENA_SHIFT
 (2U)

	)

10322 
	#SYSCON_BODCTRL_BODRSTENA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_BODCTRL_BODRSTENA_SHIFT
)Ë& 
SYSCON_BODCTRL_BODRSTENA_MASK
)

	)

10323 
	#SYSCON_BODCTRL_BODINTLEV_MASK
 (0x18U)

	)

10324 
	#SYSCON_BODCTRL_BODINTLEV_SHIFT
 (3U)

	)

10325 
	#SYSCON_BODCTRL_BODINTLEV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_BODCTRL_BODINTLEV_SHIFT
)Ë& 
SYSCON_BODCTRL_BODINTLEV_MASK
)

	)

10326 
	#SYSCON_BODCTRL_BODINTENA_MASK
 (0x20U)

	)

10327 
	#SYSCON_BODCTRL_BODINTENA_SHIFT
 (5U)

	)

10328 
	#SYSCON_BODCTRL_BODINTENA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_BODCTRL_BODINTENA_SHIFT
)Ë& 
SYSCON_BODCTRL_BODINTENA_MASK
)

	)

10329 
	#SYSCON_BODCTRL_BODRSTSTAT_MASK
 (0x40U)

	)

10330 
	#SYSCON_BODCTRL_BODRSTSTAT_SHIFT
 (6U)

	)

10331 
	#SYSCON_BODCTRL_BODRSTSTAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_BODCTRL_BODRSTSTAT_SHIFT
)Ë& 
SYSCON_BODCTRL_BODRSTSTAT_MASK
)

	)

10332 
	#SYSCON_BODCTRL_BODINTSTAT_MASK
 (0x80U)

	)

10333 
	#SYSCON_BODCTRL_BODINTSTAT_SHIFT
 (7U)

	)

10334 
	#SYSCON_BODCTRL_BODINTSTAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
SYSCON_BODCTRL_BODINTSTAT_SHIFT
)Ë& 
SYSCON_BODCTRL_BODINTSTAT_MASK
)

	)

10344 
	#SYSCON_BASE
 (0x40000000u)

	)

10346 
	#SYSCON
 ((
SYSCON_Ty≥
 *)
SYSCON_BASE
)

	)

10348 
	#SYSCON_BASE_ADDRS
 { 
SYSCON_BASE
 }

	)

10350 
	#SYSCON_BASE_PTRS
 { 
SYSCON
 }

	)

10368 
__IO
 
uöt32_t
 
	mCFG
;

10369 
__IO
 
uöt32_t
 
	mCTL
;

10370 
__IO
 
uöt32_t
 
	mSTAT
;

10371 
__IO
 
uöt32_t
 
	mINTENSET
;

10372 
__O
 
uöt32_t
 
	mINTENCLR
;

10373 
uöt8_t
 
	mRESERVED_0
[12];

10374 
__IO
 
uöt32_t
 
	mBRG
;

10375 
__I
 
uöt32_t
 
	mINTSTAT
;

10376 
__IO
 
uöt32_t
 
	mOSR
;

10377 
__IO
 
uöt32_t
 
	mADDR
;

10378 
uöt8_t
 
	mRESERVED_1
[3536];

10379 
__IO
 
uöt32_t
 
	mFIFOCFG
;

10380 
__IO
 
uöt32_t
 
	mFIFOSTAT
;

10381 
__IO
 
uöt32_t
 
	mFIFOTRIG
;

10382 
uöt8_t
 
	mRESERVED_2
[4];

10383 
__IO
 
uöt32_t
 
	mFIFOINTENSET
;

10384 
__IO
 
uöt32_t
 
	mFIFOINTENCLR
;

10385 
__I
 
uöt32_t
 
	mFIFOINTSTAT
;

10386 
uöt8_t
 
	mRESERVED_3
[4];

10387 
__IO
 
uöt32_t
 
	mFIFOWR
;

10388 
uöt8_t
 
	mRESERVED_4
[12];

10389 
__I
 
uöt32_t
 
	mFIFORD
;

10390 
uöt8_t
 
	mRESERVED_5
[12];

10391 
__I
 
uöt32_t
 
	mFIFORDNOPOP
;

10392 
uöt8_t
 
	mRESERVED_6
[440];

10393 
__I
 
uöt32_t
 
	mID
;

10394 } 
	tUSART_Ty≥
;

10406 
	#USART_CFG_ENABLE_MASK
 (0x1U)

	)

10407 
	#USART_CFG_ENABLE_SHIFT
 (0U)

	)

10408 
	#USART_CFG_ENABLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CFG_ENABLE_SHIFT
)Ë& 
USART_CFG_ENABLE_MASK
)

	)

10409 
	#USART_CFG_DATALEN_MASK
 (0xCU)

	)

10410 
	#USART_CFG_DATALEN_SHIFT
 (2U)

	)

10411 
	#USART_CFG_DATALEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CFG_DATALEN_SHIFT
)Ë& 
USART_CFG_DATALEN_MASK
)

	)

10412 
	#USART_CFG_PARITYSEL_MASK
 (0x30U)

	)

10413 
	#USART_CFG_PARITYSEL_SHIFT
 (4U)

	)

10414 
	#USART_CFG_PARITYSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CFG_PARITYSEL_SHIFT
)Ë& 
USART_CFG_PARITYSEL_MASK
)

	)

10415 
	#USART_CFG_STOPLEN_MASK
 (0x40U)

	)

10416 
	#USART_CFG_STOPLEN_SHIFT
 (6U)

	)

10417 
	#USART_CFG_STOPLEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CFG_STOPLEN_SHIFT
)Ë& 
USART_CFG_STOPLEN_MASK
)

	)

10418 
	#USART_CFG_MODE32K_MASK
 (0x80U)

	)

10419 
	#USART_CFG_MODE32K_SHIFT
 (7U)

	)

10420 
	#USART_CFG_MODE32K
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CFG_MODE32K_SHIFT
)Ë& 
USART_CFG_MODE32K_MASK
)

	)

10421 
	#USART_CFG_LINMODE_MASK
 (0x100U)

	)

10422 
	#USART_CFG_LINMODE_SHIFT
 (8U)

	)

10423 
	#USART_CFG_LINMODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CFG_LINMODE_SHIFT
)Ë& 
USART_CFG_LINMODE_MASK
)

	)

10424 
	#USART_CFG_CTSEN_MASK
 (0x200U)

	)

10425 
	#USART_CFG_CTSEN_SHIFT
 (9U)

	)

10426 
	#USART_CFG_CTSEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CFG_CTSEN_SHIFT
)Ë& 
USART_CFG_CTSEN_MASK
)

	)

10427 
	#USART_CFG_SYNCEN_MASK
 (0x800U)

	)

10428 
	#USART_CFG_SYNCEN_SHIFT
 (11U)

	)

10429 
	#USART_CFG_SYNCEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CFG_SYNCEN_SHIFT
)Ë& 
USART_CFG_SYNCEN_MASK
)

	)

10430 
	#USART_CFG_CLKPOL_MASK
 (0x1000U)

	)

10431 
	#USART_CFG_CLKPOL_SHIFT
 (12U)

	)

10432 
	#USART_CFG_CLKPOL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CFG_CLKPOL_SHIFT
)Ë& 
USART_CFG_CLKPOL_MASK
)

	)

10433 
	#USART_CFG_SYNCMST_MASK
 (0x4000U)

	)

10434 
	#USART_CFG_SYNCMST_SHIFT
 (14U)

	)

10435 
	#USART_CFG_SYNCMST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CFG_SYNCMST_SHIFT
)Ë& 
USART_CFG_SYNCMST_MASK
)

	)

10436 
	#USART_CFG_LOOP_MASK
 (0x8000U)

	)

10437 
	#USART_CFG_LOOP_SHIFT
 (15U)

	)

10438 
	#USART_CFG_LOOP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CFG_LOOP_SHIFT
)Ë& 
USART_CFG_LOOP_MASK
)

	)

10439 
	#USART_CFG_OETA_MASK
 (0x40000U)

	)

10440 
	#USART_CFG_OETA_SHIFT
 (18U)

	)

10441 
	#USART_CFG_OETA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CFG_OETA_SHIFT
)Ë& 
USART_CFG_OETA_MASK
)

	)

10442 
	#USART_CFG_AUTOADDR_MASK
 (0x80000U)

	)

10443 
	#USART_CFG_AUTOADDR_SHIFT
 (19U)

	)

10444 
	#USART_CFG_AUTOADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CFG_AUTOADDR_SHIFT
)Ë& 
USART_CFG_AUTOADDR_MASK
)

	)

10445 
	#USART_CFG_OESEL_MASK
 (0x100000U)

	)

10446 
	#USART_CFG_OESEL_SHIFT
 (20U)

	)

10447 
	#USART_CFG_OESEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CFG_OESEL_SHIFT
)Ë& 
USART_CFG_OESEL_MASK
)

	)

10448 
	#USART_CFG_OEPOL_MASK
 (0x200000U)

	)

10449 
	#USART_CFG_OEPOL_SHIFT
 (21U)

	)

10450 
	#USART_CFG_OEPOL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CFG_OEPOL_SHIFT
)Ë& 
USART_CFG_OEPOL_MASK
)

	)

10451 
	#USART_CFG_RXPOL_MASK
 (0x400000U)

	)

10452 
	#USART_CFG_RXPOL_SHIFT
 (22U)

	)

10453 
	#USART_CFG_RXPOL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CFG_RXPOL_SHIFT
)Ë& 
USART_CFG_RXPOL_MASK
)

	)

10454 
	#USART_CFG_TXPOL_MASK
 (0x800000U)

	)

10455 
	#USART_CFG_TXPOL_SHIFT
 (23U)

	)

10456 
	#USART_CFG_TXPOL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CFG_TXPOL_SHIFT
)Ë& 
USART_CFG_TXPOL_MASK
)

	)

10459 
	#USART_CTL_TXBRKEN_MASK
 (0x2U)

	)

10460 
	#USART_CTL_TXBRKEN_SHIFT
 (1U)

	)

10461 
	#USART_CTL_TXBRKEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CTL_TXBRKEN_SHIFT
)Ë& 
USART_CTL_TXBRKEN_MASK
)

	)

10462 
	#USART_CTL_ADDRDET_MASK
 (0x4U)

	)

10463 
	#USART_CTL_ADDRDET_SHIFT
 (2U)

	)

10464 
	#USART_CTL_ADDRDET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CTL_ADDRDET_SHIFT
)Ë& 
USART_CTL_ADDRDET_MASK
)

	)

10465 
	#USART_CTL_TXDIS_MASK
 (0x40U)

	)

10466 
	#USART_CTL_TXDIS_SHIFT
 (6U)

	)

10467 
	#USART_CTL_TXDIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CTL_TXDIS_SHIFT
)Ë& 
USART_CTL_TXDIS_MASK
)

	)

10468 
	#USART_CTL_CC_MASK
 (0x100U)

	)

10469 
	#USART_CTL_CC_SHIFT
 (8U)

	)

10470 
	#USART_CTL_CC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CTL_CC_SHIFT
)Ë& 
USART_CTL_CC_MASK
)

	)

10471 
	#USART_CTL_CLRCCONRX_MASK
 (0x200U)

	)

10472 
	#USART_CTL_CLRCCONRX_SHIFT
 (9U)

	)

10473 
	#USART_CTL_CLRCCONRX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CTL_CLRCCONRX_SHIFT
)Ë& 
USART_CTL_CLRCCONRX_MASK
)

	)

10474 
	#USART_CTL_AUTOBAUD_MASK
 (0x10000U)

	)

10475 
	#USART_CTL_AUTOBAUD_SHIFT
 (16U)

	)

10476 
	#USART_CTL_AUTOBAUD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_CTL_AUTOBAUD_SHIFT
)Ë& 
USART_CTL_AUTOBAUD_MASK
)

	)

10479 
	#USART_STAT_RXIDLE_MASK
 (0x2U)

	)

10480 
	#USART_STAT_RXIDLE_SHIFT
 (1U)

	)

10481 
	#USART_STAT_RXIDLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_STAT_RXIDLE_SHIFT
)Ë& 
USART_STAT_RXIDLE_MASK
)

	)

10482 
	#USART_STAT_TXIDLE_MASK
 (0x8U)

	)

10483 
	#USART_STAT_TXIDLE_SHIFT
 (3U)

	)

10484 
	#USART_STAT_TXIDLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_STAT_TXIDLE_SHIFT
)Ë& 
USART_STAT_TXIDLE_MASK
)

	)

10485 
	#USART_STAT_CTS_MASK
 (0x10U)

	)

10486 
	#USART_STAT_CTS_SHIFT
 (4U)

	)

10487 
	#USART_STAT_CTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_STAT_CTS_SHIFT
)Ë& 
USART_STAT_CTS_MASK
)

	)

10488 
	#USART_STAT_DELTACTS_MASK
 (0x20U)

	)

10489 
	#USART_STAT_DELTACTS_SHIFT
 (5U)

	)

10490 
	#USART_STAT_DELTACTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_STAT_DELTACTS_SHIFT
)Ë& 
USART_STAT_DELTACTS_MASK
)

	)

10491 
	#USART_STAT_TXDISSTAT_MASK
 (0x40U)

	)

10492 
	#USART_STAT_TXDISSTAT_SHIFT
 (6U)

	)

10493 
	#USART_STAT_TXDISSTAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_STAT_TXDISSTAT_SHIFT
)Ë& 
USART_STAT_TXDISSTAT_MASK
)

	)

10494 
	#USART_STAT_RXBRK_MASK
 (0x400U)

	)

10495 
	#USART_STAT_RXBRK_SHIFT
 (10U)

	)

10496 
	#USART_STAT_RXBRK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_STAT_RXBRK_SHIFT
)Ë& 
USART_STAT_RXBRK_MASK
)

	)

10497 
	#USART_STAT_DELTARXBRK_MASK
 (0x800U)

	)

10498 
	#USART_STAT_DELTARXBRK_SHIFT
 (11U)

	)

10499 
	#USART_STAT_DELTARXBRK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_STAT_DELTARXBRK_SHIFT
)Ë& 
USART_STAT_DELTARXBRK_MASK
)

	)

10500 
	#USART_STAT_START_MASK
 (0x1000U)

	)

10501 
	#USART_STAT_START_SHIFT
 (12U)

	)

10502 
	#USART_STAT_START
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_STAT_START_SHIFT
)Ë& 
USART_STAT_START_MASK
)

	)

10503 
	#USART_STAT_FRAMERRINT_MASK
 (0x2000U)

	)

10504 
	#USART_STAT_FRAMERRINT_SHIFT
 (13U)

	)

10505 
	#USART_STAT_FRAMERRINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_STAT_FRAMERRINT_SHIFT
)Ë& 
USART_STAT_FRAMERRINT_MASK
)

	)

10506 
	#USART_STAT_PARITYERRINT_MASK
 (0x4000U)

	)

10507 
	#USART_STAT_PARITYERRINT_SHIFT
 (14U)

	)

10508 
	#USART_STAT_PARITYERRINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_STAT_PARITYERRINT_SHIFT
)Ë& 
USART_STAT_PARITYERRINT_MASK
)

	)

10509 
	#USART_STAT_RXNOISEINT_MASK
 (0x8000U)

	)

10510 
	#USART_STAT_RXNOISEINT_SHIFT
 (15U)

	)

10511 
	#USART_STAT_RXNOISEINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_STAT_RXNOISEINT_SHIFT
)Ë& 
USART_STAT_RXNOISEINT_MASK
)

	)

10512 
	#USART_STAT_ABERR_MASK
 (0x10000U)

	)

10513 
	#USART_STAT_ABERR_SHIFT
 (16U)

	)

10514 
	#USART_STAT_ABERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_STAT_ABERR_SHIFT
)Ë& 
USART_STAT_ABERR_MASK
)

	)

10517 
	#USART_INTENSET_TXIDLEEN_MASK
 (0x8U)

	)

10518 
	#USART_INTENSET_TXIDLEEN_SHIFT
 (3U)

	)

10519 
	#USART_INTENSET_TXIDLEEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTENSET_TXIDLEEN_SHIFT
)Ë& 
USART_INTENSET_TXIDLEEN_MASK
)

	)

10520 
	#USART_INTENSET_DELTACTSEN_MASK
 (0x20U)

	)

10521 
	#USART_INTENSET_DELTACTSEN_SHIFT
 (5U)

	)

10522 
	#USART_INTENSET_DELTACTSEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTENSET_DELTACTSEN_SHIFT
)Ë& 
USART_INTENSET_DELTACTSEN_MASK
)

	)

10523 
	#USART_INTENSET_TXDISEN_MASK
 (0x40U)

	)

10524 
	#USART_INTENSET_TXDISEN_SHIFT
 (6U)

	)

10525 
	#USART_INTENSET_TXDISEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTENSET_TXDISEN_SHIFT
)Ë& 
USART_INTENSET_TXDISEN_MASK
)

	)

10526 
	#USART_INTENSET_DELTARXBRKEN_MASK
 (0x800U)

	)

10527 
	#USART_INTENSET_DELTARXBRKEN_SHIFT
 (11U)

	)

10528 
	#USART_INTENSET_DELTARXBRKEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTENSET_DELTARXBRKEN_SHIFT
)Ë& 
USART_INTENSET_DELTARXBRKEN_MASK
)

	)

10529 
	#USART_INTENSET_STARTEN_MASK
 (0x1000U)

	)

10530 
	#USART_INTENSET_STARTEN_SHIFT
 (12U)

	)

10531 
	#USART_INTENSET_STARTEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTENSET_STARTEN_SHIFT
)Ë& 
USART_INTENSET_STARTEN_MASK
)

	)

10532 
	#USART_INTENSET_FRAMERREN_MASK
 (0x2000U)

	)

10533 
	#USART_INTENSET_FRAMERREN_SHIFT
 (13U)

	)

10534 
	#USART_INTENSET_FRAMERREN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTENSET_FRAMERREN_SHIFT
)Ë& 
USART_INTENSET_FRAMERREN_MASK
)

	)

10535 
	#USART_INTENSET_PARITYERREN_MASK
 (0x4000U)

	)

10536 
	#USART_INTENSET_PARITYERREN_SHIFT
 (14U)

	)

10537 
	#USART_INTENSET_PARITYERREN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTENSET_PARITYERREN_SHIFT
)Ë& 
USART_INTENSET_PARITYERREN_MASK
)

	)

10538 
	#USART_INTENSET_RXNOISEEN_MASK
 (0x8000U)

	)

10539 
	#USART_INTENSET_RXNOISEEN_SHIFT
 (15U)

	)

10540 
	#USART_INTENSET_RXNOISEEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTENSET_RXNOISEEN_SHIFT
)Ë& 
USART_INTENSET_RXNOISEEN_MASK
)

	)

10541 
	#USART_INTENSET_ABERREN_MASK
 (0x10000U)

	)

10542 
	#USART_INTENSET_ABERREN_SHIFT
 (16U)

	)

10543 
	#USART_INTENSET_ABERREN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTENSET_ABERREN_SHIFT
)Ë& 
USART_INTENSET_ABERREN_MASK
)

	)

10546 
	#USART_INTENCLR_TXIDLECLR_MASK
 (0x8U)

	)

10547 
	#USART_INTENCLR_TXIDLECLR_SHIFT
 (3U)

	)

10548 
	#USART_INTENCLR_TXIDLECLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTENCLR_TXIDLECLR_SHIFT
)Ë& 
USART_INTENCLR_TXIDLECLR_MASK
)

	)

10549 
	#USART_INTENCLR_DELTACTSCLR_MASK
 (0x20U)

	)

10550 
	#USART_INTENCLR_DELTACTSCLR_SHIFT
 (5U)

	)

10551 
	#USART_INTENCLR_DELTACTSCLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTENCLR_DELTACTSCLR_SHIFT
)Ë& 
USART_INTENCLR_DELTACTSCLR_MASK
)

	)

10552 
	#USART_INTENCLR_TXDISCLR_MASK
 (0x40U)

	)

10553 
	#USART_INTENCLR_TXDISCLR_SHIFT
 (6U)

	)

10554 
	#USART_INTENCLR_TXDISCLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTENCLR_TXDISCLR_SHIFT
)Ë& 
USART_INTENCLR_TXDISCLR_MASK
)

	)

10555 
	#USART_INTENCLR_DELTARXBRKCLR_MASK
 (0x800U)

	)

10556 
	#USART_INTENCLR_DELTARXBRKCLR_SHIFT
 (11U)

	)

10557 
	#USART_INTENCLR_DELTARXBRKCLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTENCLR_DELTARXBRKCLR_SHIFT
)Ë& 
USART_INTENCLR_DELTARXBRKCLR_MASK
)

	)

10558 
	#USART_INTENCLR_STARTCLR_MASK
 (0x1000U)

	)

10559 
	#USART_INTENCLR_STARTCLR_SHIFT
 (12U)

	)

10560 
	#USART_INTENCLR_STARTCLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTENCLR_STARTCLR_SHIFT
)Ë& 
USART_INTENCLR_STARTCLR_MASK
)

	)

10561 
	#USART_INTENCLR_FRAMERRCLR_MASK
 (0x2000U)

	)

10562 
	#USART_INTENCLR_FRAMERRCLR_SHIFT
 (13U)

	)

10563 
	#USART_INTENCLR_FRAMERRCLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTENCLR_FRAMERRCLR_SHIFT
)Ë& 
USART_INTENCLR_FRAMERRCLR_MASK
)

	)

10564 
	#USART_INTENCLR_PARITYERRCLR_MASK
 (0x4000U)

	)

10565 
	#USART_INTENCLR_PARITYERRCLR_SHIFT
 (14U)

	)

10566 
	#USART_INTENCLR_PARITYERRCLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTENCLR_PARITYERRCLR_SHIFT
)Ë& 
USART_INTENCLR_PARITYERRCLR_MASK
)

	)

10567 
	#USART_INTENCLR_RXNOISECLR_MASK
 (0x8000U)

	)

10568 
	#USART_INTENCLR_RXNOISECLR_SHIFT
 (15U)

	)

10569 
	#USART_INTENCLR_RXNOISECLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTENCLR_RXNOISECLR_SHIFT
)Ë& 
USART_INTENCLR_RXNOISECLR_MASK
)

	)

10570 
	#USART_INTENCLR_ABERRCLR_MASK
 (0x10000U)

	)

10571 
	#USART_INTENCLR_ABERRCLR_SHIFT
 (16U)

	)

10572 
	#USART_INTENCLR_ABERRCLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTENCLR_ABERRCLR_SHIFT
)Ë& 
USART_INTENCLR_ABERRCLR_MASK
)

	)

10575 
	#USART_BRG_BRGVAL_MASK
 (0xFFFFU)

	)

10576 
	#USART_BRG_BRGVAL_SHIFT
 (0U)

	)

10577 
	#USART_BRG_BRGVAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_BRG_BRGVAL_SHIFT
)Ë& 
USART_BRG_BRGVAL_MASK
)

	)

10580 
	#USART_INTSTAT_TXIDLE_MASK
 (0x8U)

	)

10581 
	#USART_INTSTAT_TXIDLE_SHIFT
 (3U)

	)

10582 
	#USART_INTSTAT_TXIDLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTSTAT_TXIDLE_SHIFT
)Ë& 
USART_INTSTAT_TXIDLE_MASK
)

	)

10583 
	#USART_INTSTAT_DELTACTS_MASK
 (0x20U)

	)

10584 
	#USART_INTSTAT_DELTACTS_SHIFT
 (5U)

	)

10585 
	#USART_INTSTAT_DELTACTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTSTAT_DELTACTS_SHIFT
)Ë& 
USART_INTSTAT_DELTACTS_MASK
)

	)

10586 
	#USART_INTSTAT_TXDISINT_MASK
 (0x40U)

	)

10587 
	#USART_INTSTAT_TXDISINT_SHIFT
 (6U)

	)

10588 
	#USART_INTSTAT_TXDISINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTSTAT_TXDISINT_SHIFT
)Ë& 
USART_INTSTAT_TXDISINT_MASK
)

	)

10589 
	#USART_INTSTAT_DELTARXBRK_MASK
 (0x800U)

	)

10590 
	#USART_INTSTAT_DELTARXBRK_SHIFT
 (11U)

	)

10591 
	#USART_INTSTAT_DELTARXBRK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTSTAT_DELTARXBRK_SHIFT
)Ë& 
USART_INTSTAT_DELTARXBRK_MASK
)

	)

10592 
	#USART_INTSTAT_START_MASK
 (0x1000U)

	)

10593 
	#USART_INTSTAT_START_SHIFT
 (12U)

	)

10594 
	#USART_INTSTAT_START
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTSTAT_START_SHIFT
)Ë& 
USART_INTSTAT_START_MASK
)

	)

10595 
	#USART_INTSTAT_FRAMERRINT_MASK
 (0x2000U)

	)

10596 
	#USART_INTSTAT_FRAMERRINT_SHIFT
 (13U)

	)

10597 
	#USART_INTSTAT_FRAMERRINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTSTAT_FRAMERRINT_SHIFT
)Ë& 
USART_INTSTAT_FRAMERRINT_MASK
)

	)

10598 
	#USART_INTSTAT_PARITYERRINT_MASK
 (0x4000U)

	)

10599 
	#USART_INTSTAT_PARITYERRINT_SHIFT
 (14U)

	)

10600 
	#USART_INTSTAT_PARITYERRINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTSTAT_PARITYERRINT_SHIFT
)Ë& 
USART_INTSTAT_PARITYERRINT_MASK
)

	)

10601 
	#USART_INTSTAT_RXNOISEINT_MASK
 (0x8000U)

	)

10602 
	#USART_INTSTAT_RXNOISEINT_SHIFT
 (15U)

	)

10603 
	#USART_INTSTAT_RXNOISEINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTSTAT_RXNOISEINT_SHIFT
)Ë& 
USART_INTSTAT_RXNOISEINT_MASK
)

	)

10604 
	#USART_INTSTAT_ABERRINT_MASK
 (0x10000U)

	)

10605 
	#USART_INTSTAT_ABERRINT_SHIFT
 (16U)

	)

10606 
	#USART_INTSTAT_ABERRINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_INTSTAT_ABERRINT_SHIFT
)Ë& 
USART_INTSTAT_ABERRINT_MASK
)

	)

10609 
	#USART_OSR_OSRVAL_MASK
 (0xFU)

	)

10610 
	#USART_OSR_OSRVAL_SHIFT
 (0U)

	)

10611 
	#USART_OSR_OSRVAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_OSR_OSRVAL_SHIFT
)Ë& 
USART_OSR_OSRVAL_MASK
)

	)

10614 
	#USART_ADDR_ADDRESS_MASK
 (0xFFU)

	)

10615 
	#USART_ADDR_ADDRESS_SHIFT
 (0U)

	)

10616 
	#USART_ADDR_ADDRESS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_ADDR_ADDRESS_SHIFT
)Ë& 
USART_ADDR_ADDRESS_MASK
)

	)

10619 
	#USART_FIFOCFG_ENABLETX_MASK
 (0x1U)

	)

10620 
	#USART_FIFOCFG_ENABLETX_SHIFT
 (0U)

	)

10621 
	#USART_FIFOCFG_ENABLETX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOCFG_ENABLETX_SHIFT
)Ë& 
USART_FIFOCFG_ENABLETX_MASK
)

	)

10622 
	#USART_FIFOCFG_ENABLERX_MASK
 (0x2U)

	)

10623 
	#USART_FIFOCFG_ENABLERX_SHIFT
 (1U)

	)

10624 
	#USART_FIFOCFG_ENABLERX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOCFG_ENABLERX_SHIFT
)Ë& 
USART_FIFOCFG_ENABLERX_MASK
)

	)

10625 
	#USART_FIFOCFG_SIZE_MASK
 (0x30U)

	)

10626 
	#USART_FIFOCFG_SIZE_SHIFT
 (4U)

	)

10627 
	#USART_FIFOCFG_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOCFG_SIZE_SHIFT
)Ë& 
USART_FIFOCFG_SIZE_MASK
)

	)

10628 
	#USART_FIFOCFG_DMATX_MASK
 (0x1000U)

	)

10629 
	#USART_FIFOCFG_DMATX_SHIFT
 (12U)

	)

10630 
	#USART_FIFOCFG_DMATX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOCFG_DMATX_SHIFT
)Ë& 
USART_FIFOCFG_DMATX_MASK
)

	)

10631 
	#USART_FIFOCFG_DMARX_MASK
 (0x2000U)

	)

10632 
	#USART_FIFOCFG_DMARX_SHIFT
 (13U)

	)

10633 
	#USART_FIFOCFG_DMARX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOCFG_DMARX_SHIFT
)Ë& 
USART_FIFOCFG_DMARX_MASK
)

	)

10634 
	#USART_FIFOCFG_WAKETX_MASK
 (0x4000U)

	)

10635 
	#USART_FIFOCFG_WAKETX_SHIFT
 (14U)

	)

10636 
	#USART_FIFOCFG_WAKETX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOCFG_WAKETX_SHIFT
)Ë& 
USART_FIFOCFG_WAKETX_MASK
)

	)

10637 
	#USART_FIFOCFG_WAKERX_MASK
 (0x8000U)

	)

10638 
	#USART_FIFOCFG_WAKERX_SHIFT
 (15U)

	)

10639 
	#USART_FIFOCFG_WAKERX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOCFG_WAKERX_SHIFT
)Ë& 
USART_FIFOCFG_WAKERX_MASK
)

	)

10640 
	#USART_FIFOCFG_EMPTYTX_MASK
 (0x10000U)

	)

10641 
	#USART_FIFOCFG_EMPTYTX_SHIFT
 (16U)

	)

10642 
	#USART_FIFOCFG_EMPTYTX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOCFG_EMPTYTX_SHIFT
)Ë& 
USART_FIFOCFG_EMPTYTX_MASK
)

	)

10643 
	#USART_FIFOCFG_EMPTYRX_MASK
 (0x20000U)

	)

10644 
	#USART_FIFOCFG_EMPTYRX_SHIFT
 (17U)

	)

10645 
	#USART_FIFOCFG_EMPTYRX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOCFG_EMPTYRX_SHIFT
)Ë& 
USART_FIFOCFG_EMPTYRX_MASK
)

	)

10646 
	#USART_FIFOCFG_POPDBG_MASK
 (0x40000U)

	)

10647 
	#USART_FIFOCFG_POPDBG_SHIFT
 (18U)

	)

10648 
	#USART_FIFOCFG_POPDBG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOCFG_POPDBG_SHIFT
)Ë& 
USART_FIFOCFG_POPDBG_MASK
)

	)

10651 
	#USART_FIFOSTAT_TXERR_MASK
 (0x1U)

	)

10652 
	#USART_FIFOSTAT_TXERR_SHIFT
 (0U)

	)

10653 
	#USART_FIFOSTAT_TXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOSTAT_TXERR_SHIFT
)Ë& 
USART_FIFOSTAT_TXERR_MASK
)

	)

10654 
	#USART_FIFOSTAT_RXERR_MASK
 (0x2U)

	)

10655 
	#USART_FIFOSTAT_RXERR_SHIFT
 (1U)

	)

10656 
	#USART_FIFOSTAT_RXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOSTAT_RXERR_SHIFT
)Ë& 
USART_FIFOSTAT_RXERR_MASK
)

	)

10657 
	#USART_FIFOSTAT_PERINT_MASK
 (0x8U)

	)

10658 
	#USART_FIFOSTAT_PERINT_SHIFT
 (3U)

	)

10659 
	#USART_FIFOSTAT_PERINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOSTAT_PERINT_SHIFT
)Ë& 
USART_FIFOSTAT_PERINT_MASK
)

	)

10660 
	#USART_FIFOSTAT_TXEMPTY_MASK
 (0x10U)

	)

10661 
	#USART_FIFOSTAT_TXEMPTY_SHIFT
 (4U)

	)

10662 
	#USART_FIFOSTAT_TXEMPTY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOSTAT_TXEMPTY_SHIFT
)Ë& 
USART_FIFOSTAT_TXEMPTY_MASK
)

	)

10663 
	#USART_FIFOSTAT_TXNOTFULL_MASK
 (0x20U)

	)

10664 
	#USART_FIFOSTAT_TXNOTFULL_SHIFT
 (5U)

	)

10665 
	#USART_FIFOSTAT_TXNOTFULL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOSTAT_TXNOTFULL_SHIFT
)Ë& 
USART_FIFOSTAT_TXNOTFULL_MASK
)

	)

10666 
	#USART_FIFOSTAT_RXNOTEMPTY_MASK
 (0x40U)

	)

10667 
	#USART_FIFOSTAT_RXNOTEMPTY_SHIFT
 (6U)

	)

10668 
	#USART_FIFOSTAT_RXNOTEMPTY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOSTAT_RXNOTEMPTY_SHIFT
)Ë& 
USART_FIFOSTAT_RXNOTEMPTY_MASK
)

	)

10669 
	#USART_FIFOSTAT_RXFULL_MASK
 (0x80U)

	)

10670 
	#USART_FIFOSTAT_RXFULL_SHIFT
 (7U)

	)

10671 
	#USART_FIFOSTAT_RXFULL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOSTAT_RXFULL_SHIFT
)Ë& 
USART_FIFOSTAT_RXFULL_MASK
)

	)

10672 
	#USART_FIFOSTAT_TXLVL_MASK
 (0x1F00U)

	)

10673 
	#USART_FIFOSTAT_TXLVL_SHIFT
 (8U)

	)

10674 
	#USART_FIFOSTAT_TXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOSTAT_TXLVL_SHIFT
)Ë& 
USART_FIFOSTAT_TXLVL_MASK
)

	)

10675 
	#USART_FIFOSTAT_RXLVL_MASK
 (0x1F0000U)

	)

10676 
	#USART_FIFOSTAT_RXLVL_SHIFT
 (16U)

	)

10677 
	#USART_FIFOSTAT_RXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOSTAT_RXLVL_SHIFT
)Ë& 
USART_FIFOSTAT_RXLVL_MASK
)

	)

10680 
	#USART_FIFOTRIG_TXLVLENA_MASK
 (0x1U)

	)

10681 
	#USART_FIFOTRIG_TXLVLENA_SHIFT
 (0U)

	)

10682 
	#USART_FIFOTRIG_TXLVLENA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOTRIG_TXLVLENA_SHIFT
)Ë& 
USART_FIFOTRIG_TXLVLENA_MASK
)

	)

10683 
	#USART_FIFOTRIG_RXLVLENA_MASK
 (0x2U)

	)

10684 
	#USART_FIFOTRIG_RXLVLENA_SHIFT
 (1U)

	)

10685 
	#USART_FIFOTRIG_RXLVLENA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOTRIG_RXLVLENA_SHIFT
)Ë& 
USART_FIFOTRIG_RXLVLENA_MASK
)

	)

10686 
	#USART_FIFOTRIG_TXLVL_MASK
 (0xF00U)

	)

10687 
	#USART_FIFOTRIG_TXLVL_SHIFT
 (8U)

	)

10688 
	#USART_FIFOTRIG_TXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOTRIG_TXLVL_SHIFT
)Ë& 
USART_FIFOTRIG_TXLVL_MASK
)

	)

10689 
	#USART_FIFOTRIG_RXLVL_MASK
 (0xF0000U)

	)

10690 
	#USART_FIFOTRIG_RXLVL_SHIFT
 (16U)

	)

10691 
	#USART_FIFOTRIG_RXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOTRIG_RXLVL_SHIFT
)Ë& 
USART_FIFOTRIG_RXLVL_MASK
)

	)

10694 
	#USART_FIFOINTENSET_TXERR_MASK
 (0x1U)

	)

10695 
	#USART_FIFOINTENSET_TXERR_SHIFT
 (0U)

	)

10696 
	#USART_FIFOINTENSET_TXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOINTENSET_TXERR_SHIFT
)Ë& 
USART_FIFOINTENSET_TXERR_MASK
)

	)

10697 
	#USART_FIFOINTENSET_RXERR_MASK
 (0x2U)

	)

10698 
	#USART_FIFOINTENSET_RXERR_SHIFT
 (1U)

	)

10699 
	#USART_FIFOINTENSET_RXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOINTENSET_RXERR_SHIFT
)Ë& 
USART_FIFOINTENSET_RXERR_MASK
)

	)

10700 
	#USART_FIFOINTENSET_TXLVL_MASK
 (0x4U)

	)

10701 
	#USART_FIFOINTENSET_TXLVL_SHIFT
 (2U)

	)

10702 
	#USART_FIFOINTENSET_TXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOINTENSET_TXLVL_SHIFT
)Ë& 
USART_FIFOINTENSET_TXLVL_MASK
)

	)

10703 
	#USART_FIFOINTENSET_RXLVL_MASK
 (0x8U)

	)

10704 
	#USART_FIFOINTENSET_RXLVL_SHIFT
 (3U)

	)

10705 
	#USART_FIFOINTENSET_RXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOINTENSET_RXLVL_SHIFT
)Ë& 
USART_FIFOINTENSET_RXLVL_MASK
)

	)

10708 
	#USART_FIFOINTENCLR_TXERR_MASK
 (0x1U)

	)

10709 
	#USART_FIFOINTENCLR_TXERR_SHIFT
 (0U)

	)

10710 
	#USART_FIFOINTENCLR_TXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOINTENCLR_TXERR_SHIFT
)Ë& 
USART_FIFOINTENCLR_TXERR_MASK
)

	)

10711 
	#USART_FIFOINTENCLR_RXERR_MASK
 (0x2U)

	)

10712 
	#USART_FIFOINTENCLR_RXERR_SHIFT
 (1U)

	)

10713 
	#USART_FIFOINTENCLR_RXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOINTENCLR_RXERR_SHIFT
)Ë& 
USART_FIFOINTENCLR_RXERR_MASK
)

	)

10714 
	#USART_FIFOINTENCLR_TXLVL_MASK
 (0x4U)

	)

10715 
	#USART_FIFOINTENCLR_TXLVL_SHIFT
 (2U)

	)

10716 
	#USART_FIFOINTENCLR_TXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOINTENCLR_TXLVL_SHIFT
)Ë& 
USART_FIFOINTENCLR_TXLVL_MASK
)

	)

10717 
	#USART_FIFOINTENCLR_RXLVL_MASK
 (0x8U)

	)

10718 
	#USART_FIFOINTENCLR_RXLVL_SHIFT
 (3U)

	)

10719 
	#USART_FIFOINTENCLR_RXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOINTENCLR_RXLVL_SHIFT
)Ë& 
USART_FIFOINTENCLR_RXLVL_MASK
)

	)

10722 
	#USART_FIFOINTSTAT_TXERR_MASK
 (0x1U)

	)

10723 
	#USART_FIFOINTSTAT_TXERR_SHIFT
 (0U)

	)

10724 
	#USART_FIFOINTSTAT_TXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOINTSTAT_TXERR_SHIFT
)Ë& 
USART_FIFOINTSTAT_TXERR_MASK
)

	)

10725 
	#USART_FIFOINTSTAT_RXERR_MASK
 (0x2U)

	)

10726 
	#USART_FIFOINTSTAT_RXERR_SHIFT
 (1U)

	)

10727 
	#USART_FIFOINTSTAT_RXERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOINTSTAT_RXERR_SHIFT
)Ë& 
USART_FIFOINTSTAT_RXERR_MASK
)

	)

10728 
	#USART_FIFOINTSTAT_TXLVL_MASK
 (0x4U)

	)

10729 
	#USART_FIFOINTSTAT_TXLVL_SHIFT
 (2U)

	)

10730 
	#USART_FIFOINTSTAT_TXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOINTSTAT_TXLVL_SHIFT
)Ë& 
USART_FIFOINTSTAT_TXLVL_MASK
)

	)

10731 
	#USART_FIFOINTSTAT_RXLVL_MASK
 (0x8U)

	)

10732 
	#USART_FIFOINTSTAT_RXLVL_SHIFT
 (3U)

	)

10733 
	#USART_FIFOINTSTAT_RXLVL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOINTSTAT_RXLVL_SHIFT
)Ë& 
USART_FIFOINTSTAT_RXLVL_MASK
)

	)

10734 
	#USART_FIFOINTSTAT_PERINT_MASK
 (0x10U)

	)

10735 
	#USART_FIFOINTSTAT_PERINT_SHIFT
 (4U)

	)

10736 
	#USART_FIFOINTSTAT_PERINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOINTSTAT_PERINT_SHIFT
)Ë& 
USART_FIFOINTSTAT_PERINT_MASK
)

	)

10739 
	#USART_FIFOWR_TXDATA_MASK
 (0x1FFU)

	)

10740 
	#USART_FIFOWR_TXDATA_SHIFT
 (0U)

	)

10741 
	#USART_FIFOWR_TXDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFOWR_TXDATA_SHIFT
)Ë& 
USART_FIFOWR_TXDATA_MASK
)

	)

10744 
	#USART_FIFORD_RXDATA_MASK
 (0x1FFU)

	)

10745 
	#USART_FIFORD_RXDATA_SHIFT
 (0U)

	)

10746 
	#USART_FIFORD_RXDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFORD_RXDATA_SHIFT
)Ë& 
USART_FIFORD_RXDATA_MASK
)

	)

10747 
	#USART_FIFORD_FRAMERR_MASK
 (0x2000U)

	)

10748 
	#USART_FIFORD_FRAMERR_SHIFT
 (13U)

	)

10749 
	#USART_FIFORD_FRAMERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFORD_FRAMERR_SHIFT
)Ë& 
USART_FIFORD_FRAMERR_MASK
)

	)

10750 
	#USART_FIFORD_PARITYERR_MASK
 (0x4000U)

	)

10751 
	#USART_FIFORD_PARITYERR_SHIFT
 (14U)

	)

10752 
	#USART_FIFORD_PARITYERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFORD_PARITYERR_SHIFT
)Ë& 
USART_FIFORD_PARITYERR_MASK
)

	)

10753 
	#USART_FIFORD_RXNOISE_MASK
 (0x8000U)

	)

10754 
	#USART_FIFORD_RXNOISE_SHIFT
 (15U)

	)

10755 
	#USART_FIFORD_RXNOISE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFORD_RXNOISE_SHIFT
)Ë& 
USART_FIFORD_RXNOISE_MASK
)

	)

10758 
	#USART_FIFORDNOPOP_RXDATA_MASK
 (0x1FFU)

	)

10759 
	#USART_FIFORDNOPOP_RXDATA_SHIFT
 (0U)

	)

10760 
	#USART_FIFORDNOPOP_RXDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFORDNOPOP_RXDATA_SHIFT
)Ë& 
USART_FIFORDNOPOP_RXDATA_MASK
)

	)

10761 
	#USART_FIFORDNOPOP_FRAMERR_MASK
 (0x2000U)

	)

10762 
	#USART_FIFORDNOPOP_FRAMERR_SHIFT
 (13U)

	)

10763 
	#USART_FIFORDNOPOP_FRAMERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFORDNOPOP_FRAMERR_SHIFT
)Ë& 
USART_FIFORDNOPOP_FRAMERR_MASK
)

	)

10764 
	#USART_FIFORDNOPOP_PARITYERR_MASK
 (0x4000U)

	)

10765 
	#USART_FIFORDNOPOP_PARITYERR_SHIFT
 (14U)

	)

10766 
	#USART_FIFORDNOPOP_PARITYERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFORDNOPOP_PARITYERR_SHIFT
)Ë& 
USART_FIFORDNOPOP_PARITYERR_MASK
)

	)

10767 
	#USART_FIFORDNOPOP_RXNOISE_MASK
 (0x8000U)

	)

10768 
	#USART_FIFORDNOPOP_RXNOISE_SHIFT
 (15U)

	)

10769 
	#USART_FIFORDNOPOP_RXNOISE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_FIFORDNOPOP_RXNOISE_SHIFT
)Ë& 
USART_FIFORDNOPOP_RXNOISE_MASK
)

	)

10772 
	#USART_ID_APERTURE_MASK
 (0xFFU)

	)

10773 
	#USART_ID_APERTURE_SHIFT
 (0U)

	)

10774 
	#USART_ID_APERTURE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_ID_APERTURE_SHIFT
)Ë& 
USART_ID_APERTURE_MASK
)

	)

10775 
	#USART_ID_MINOR_REV_MASK
 (0xF00U)

	)

10776 
	#USART_ID_MINOR_REV_SHIFT
 (8U)

	)

10777 
	#USART_ID_MINOR_REV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_ID_MINOR_REV_SHIFT
)Ë& 
USART_ID_MINOR_REV_MASK
)

	)

10778 
	#USART_ID_MAJOR_REV_MASK
 (0xF000U)

	)

10779 
	#USART_ID_MAJOR_REV_SHIFT
 (12U)

	)

10780 
	#USART_ID_MAJOR_REV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_ID_MAJOR_REV_SHIFT
)Ë& 
USART_ID_MAJOR_REV_MASK
)

	)

10781 
	#USART_ID_ID_MASK
 (0xFFFF0000U)

	)

10782 
	#USART_ID_ID_SHIFT
 (16U)

	)

10783 
	#USART_ID_ID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USART_ID_ID_SHIFT
)Ë& 
USART_ID_ID_MASK
)

	)

10793 
	#USART0_BASE
 (0x40086000u)

	)

10795 
	#USART0
 ((
USART_Ty≥
 *)
USART0_BASE
)

	)

10797 
	#USART1_BASE
 (0x40087000u)

	)

10799 
	#USART1
 ((
USART_Ty≥
 *)
USART1_BASE
)

	)

10801 
	#USART2_BASE
 (0x40088000u)

	)

10803 
	#USART2
 ((
USART_Ty≥
 *)
USART2_BASE
)

	)

10805 
	#USART3_BASE
 (0x40089000u)

	)

10807 
	#USART3
 ((
USART_Ty≥
 *)
USART3_BASE
)

	)

10809 
	#USART4_BASE
 (0x4008A000u)

	)

10811 
	#USART4
 ((
USART_Ty≥
 *)
USART4_BASE
)

	)

10813 
	#USART5_BASE
 (0x40096000u)

	)

10815 
	#USART5
 ((
USART_Ty≥
 *)
USART5_BASE
)

	)

10817 
	#USART6_BASE
 (0x40097000u)

	)

10819 
	#USART6
 ((
USART_Ty≥
 *)
USART6_BASE
)

	)

10821 
	#USART7_BASE
 (0x40098000u)

	)

10823 
	#USART7
 ((
USART_Ty≥
 *)
USART7_BASE
)

	)

10825 
	#USART8_BASE
 (0x40099000u)

	)

10827 
	#USART8
 ((
USART_Ty≥
 *)
USART8_BASE
)

	)

10829 
	#USART9_BASE
 (0x4009A000u)

	)

10831 
	#USART9
 ((
USART_Ty≥
 *)
USART9_BASE
)

	)

10833 
	#USART_BASE_ADDRS
 { 
USART0_BASE
, 
USART1_BASE
, 
USART2_BASE
, 
USART3_BASE
, 
USART4_BASE
, 
USART5_BASE
, 
USART6_BASE
, 
USART7_BASE
, 
USART8_BASE
, 
USART9_BASE
 }

	)

10835 
	#USART_BASE_PTRS
 { 
USART0
, 
USART1
, 
USART2
, 
USART3
, 
USART4
, 
USART5
, 
USART6
, 
USART7
, 
USART8
, 
USART9
 }

	)

10837 
	#USART_IRQS
 { 
FLEXCOMM0_IRQn
, 
FLEXCOMM1_IRQn
, 
FLEXCOMM2_IRQn
, 
FLEXCOMM3_IRQn
, 
FLEXCOMM4_IRQn
, 
FLEXCOMM5_IRQn
, 
FLEXCOMM6_IRQn
, 
FLEXCOMM7_IRQn
, 
FLEXCOMM8_IRQn
, 
FLEXCOMM9_IRQn
 }

	)

10855 
__IO
 
uöt32_t
 
	mDEVCMDSTAT
;

10856 
__IO
 
uöt32_t
 
	mINFO
;

10857 
__IO
 
uöt32_t
 
	mEPLISTSTART
;

10858 
__IO
 
uöt32_t
 
	mDATABUFSTART
;

10859 
__IO
 
uöt32_t
 
	mLPM
;

10860 
__IO
 
uöt32_t
 
	mEPSKIP
;

10861 
__IO
 
uöt32_t
 
	mEPINUSE
;

10862 
__IO
 
uöt32_t
 
	mEPBUFCFG
;

10863 
__IO
 
uöt32_t
 
	mINTSTAT
;

10864 
__IO
 
uöt32_t
 
	mINTEN
;

10865 
__IO
 
uöt32_t
 
	mINTSETSTAT
;

10866 
uöt8_t
 
	mRESERVED_0
[8];

10867 
__IO
 
uöt32_t
 
	mEPTOGGLE
;

10868 } 
	tUSB_Ty≥
;

10880 
	#USB_DEVCMDSTAT_DEV_ADDR_MASK
 (0x7FU)

	)

10881 
	#USB_DEVCMDSTAT_DEV_ADDR_SHIFT
 (0U)

	)

10882 
	#USB_DEVCMDSTAT_DEV_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_DEVCMDSTAT_DEV_ADDR_SHIFT
)Ë& 
USB_DEVCMDSTAT_DEV_ADDR_MASK
)

	)

10883 
	#USB_DEVCMDSTAT_DEV_EN_MASK
 (0x80U)

	)

10884 
	#USB_DEVCMDSTAT_DEV_EN_SHIFT
 (7U)

	)

10885 
	#USB_DEVCMDSTAT_DEV_EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_DEVCMDSTAT_DEV_EN_SHIFT
)Ë& 
USB_DEVCMDSTAT_DEV_EN_MASK
)

	)

10886 
	#USB_DEVCMDSTAT_SETUP_MASK
 (0x100U)

	)

10887 
	#USB_DEVCMDSTAT_SETUP_SHIFT
 (8U)

	)

10888 
	#USB_DEVCMDSTAT_SETUP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_DEVCMDSTAT_SETUP_SHIFT
)Ë& 
USB_DEVCMDSTAT_SETUP_MASK
)

	)

10889 
	#USB_DEVCMDSTAT_FORCE_NEEDCLK_MASK
 (0x200U)

	)

10890 
	#USB_DEVCMDSTAT_FORCE_NEEDCLK_SHIFT
 (9U)

	)

10891 
	#USB_DEVCMDSTAT_FORCE_NEEDCLK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_DEVCMDSTAT_FORCE_NEEDCLK_SHIFT
)Ë& 
USB_DEVCMDSTAT_FORCE_NEEDCLK_MASK
)

	)

10892 
	#USB_DEVCMDSTAT_LPM_SUP_MASK
 (0x800U)

	)

10893 
	#USB_DEVCMDSTAT_LPM_SUP_SHIFT
 (11U)

	)

10894 
	#USB_DEVCMDSTAT_LPM_SUP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_DEVCMDSTAT_LPM_SUP_SHIFT
)Ë& 
USB_DEVCMDSTAT_LPM_SUP_MASK
)

	)

10895 
	#USB_DEVCMDSTAT_INTONNAK_AO_MASK
 (0x1000U)

	)

10896 
	#USB_DEVCMDSTAT_INTONNAK_AO_SHIFT
 (12U)

	)

10897 
	#USB_DEVCMDSTAT_INTONNAK_AO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_DEVCMDSTAT_INTONNAK_AO_SHIFT
)Ë& 
USB_DEVCMDSTAT_INTONNAK_AO_MASK
)

	)

10898 
	#USB_DEVCMDSTAT_INTONNAK_AI_MASK
 (0x2000U)

	)

10899 
	#USB_DEVCMDSTAT_INTONNAK_AI_SHIFT
 (13U)

	)

10900 
	#USB_DEVCMDSTAT_INTONNAK_AI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_DEVCMDSTAT_INTONNAK_AI_SHIFT
)Ë& 
USB_DEVCMDSTAT_INTONNAK_AI_MASK
)

	)

10901 
	#USB_DEVCMDSTAT_INTONNAK_CO_MASK
 (0x4000U)

	)

10902 
	#USB_DEVCMDSTAT_INTONNAK_CO_SHIFT
 (14U)

	)

10903 
	#USB_DEVCMDSTAT_INTONNAK_CO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_DEVCMDSTAT_INTONNAK_CO_SHIFT
)Ë& 
USB_DEVCMDSTAT_INTONNAK_CO_MASK
)

	)

10904 
	#USB_DEVCMDSTAT_INTONNAK_CI_MASK
 (0x8000U)

	)

10905 
	#USB_DEVCMDSTAT_INTONNAK_CI_SHIFT
 (15U)

	)

10906 
	#USB_DEVCMDSTAT_INTONNAK_CI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_DEVCMDSTAT_INTONNAK_CI_SHIFT
)Ë& 
USB_DEVCMDSTAT_INTONNAK_CI_MASK
)

	)

10907 
	#USB_DEVCMDSTAT_DCON_MASK
 (0x10000U)

	)

10908 
	#USB_DEVCMDSTAT_DCON_SHIFT
 (16U)

	)

10909 
	#USB_DEVCMDSTAT_DCON
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_DEVCMDSTAT_DCON_SHIFT
)Ë& 
USB_DEVCMDSTAT_DCON_MASK
)

	)

10910 
	#USB_DEVCMDSTAT_DSUS_MASK
 (0x20000U)

	)

10911 
	#USB_DEVCMDSTAT_DSUS_SHIFT
 (17U)

	)

10912 
	#USB_DEVCMDSTAT_DSUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_DEVCMDSTAT_DSUS_SHIFT
)Ë& 
USB_DEVCMDSTAT_DSUS_MASK
)

	)

10913 
	#USB_DEVCMDSTAT_LPM_SUS_MASK
 (0x80000U)

	)

10914 
	#USB_DEVCMDSTAT_LPM_SUS_SHIFT
 (19U)

	)

10915 
	#USB_DEVCMDSTAT_LPM_SUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_DEVCMDSTAT_LPM_SUS_SHIFT
)Ë& 
USB_DEVCMDSTAT_LPM_SUS_MASK
)

	)

10916 
	#USB_DEVCMDSTAT_LPM_REWP_MASK
 (0x100000U)

	)

10917 
	#USB_DEVCMDSTAT_LPM_REWP_SHIFT
 (20U)

	)

10918 
	#USB_DEVCMDSTAT_LPM_REWP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_DEVCMDSTAT_LPM_REWP_SHIFT
)Ë& 
USB_DEVCMDSTAT_LPM_REWP_MASK
)

	)

10919 
	#USB_DEVCMDSTAT_DCON_C_MASK
 (0x1000000U)

	)

10920 
	#USB_DEVCMDSTAT_DCON_C_SHIFT
 (24U)

	)

10921 
	#USB_DEVCMDSTAT_DCON_C
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_DEVCMDSTAT_DCON_C_SHIFT
)Ë& 
USB_DEVCMDSTAT_DCON_C_MASK
)

	)

10922 
	#USB_DEVCMDSTAT_DSUS_C_MASK
 (0x2000000U)

	)

10923 
	#USB_DEVCMDSTAT_DSUS_C_SHIFT
 (25U)

	)

10924 
	#USB_DEVCMDSTAT_DSUS_C
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_DEVCMDSTAT_DSUS_C_SHIFT
)Ë& 
USB_DEVCMDSTAT_DSUS_C_MASK
)

	)

10925 
	#USB_DEVCMDSTAT_DRES_C_MASK
 (0x4000000U)

	)

10926 
	#USB_DEVCMDSTAT_DRES_C_SHIFT
 (26U)

	)

10927 
	#USB_DEVCMDSTAT_DRES_C
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_DEVCMDSTAT_DRES_C_SHIFT
)Ë& 
USB_DEVCMDSTAT_DRES_C_MASK
)

	)

10928 
	#USB_DEVCMDSTAT_VBUSDEBOUNCED_MASK
 (0x10000000U)

	)

10929 
	#USB_DEVCMDSTAT_VBUSDEBOUNCED_SHIFT
 (28U)

	)

10930 
	#USB_DEVCMDSTAT_VBUSDEBOUNCED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_DEVCMDSTAT_VBUSDEBOUNCED_SHIFT
)Ë& 
USB_DEVCMDSTAT_VBUSDEBOUNCED_MASK
)

	)

10933 
	#USB_INFO_FRAME_NR_MASK
 (0x7FFU)

	)

10934 
	#USB_INFO_FRAME_NR_SHIFT
 (0U)

	)

10935 
	#USB_INFO_FRAME_NR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_INFO_FRAME_NR_SHIFT
)Ë& 
USB_INFO_FRAME_NR_MASK
)

	)

10936 
	#USB_INFO_ERR_CODE_MASK
 (0x7800U)

	)

10937 
	#USB_INFO_ERR_CODE_SHIFT
 (11U)

	)

10938 
	#USB_INFO_ERR_CODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_INFO_ERR_CODE_SHIFT
)Ë& 
USB_INFO_ERR_CODE_MASK
)

	)

10939 
	#USB_INFO_MINREV_MASK
 (0xFF0000U)

	)

10940 
	#USB_INFO_MINREV_SHIFT
 (16U)

	)

10941 
	#USB_INFO_MINREV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_INFO_MINREV_SHIFT
)Ë& 
USB_INFO_MINREV_MASK
)

	)

10942 
	#USB_INFO_MAJREV_MASK
 (0xFF000000U)

	)

10943 
	#USB_INFO_MAJREV_SHIFT
 (24U)

	)

10944 
	#USB_INFO_MAJREV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_INFO_MAJREV_SHIFT
)Ë& 
USB_INFO_MAJREV_MASK
)

	)

10947 
	#USB_EPLISTSTART_EP_LIST_MASK
 (0xFFFFFF00U)

	)

10948 
	#USB_EPLISTSTART_EP_LIST_SHIFT
 (8U)

	)

10949 
	#USB_EPLISTSTART_EP_LIST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_EPLISTSTART_EP_LIST_SHIFT
)Ë& 
USB_EPLISTSTART_EP_LIST_MASK
)

	)

10952 
	#USB_DATABUFSTART_DA_BUF_MASK
 (0xFFC00000U)

	)

10953 
	#USB_DATABUFSTART_DA_BUF_SHIFT
 (22U)

	)

10954 
	#USB_DATABUFSTART_DA_BUF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_DATABUFSTART_DA_BUF_SHIFT
)Ë& 
USB_DATABUFSTART_DA_BUF_MASK
)

	)

10957 
	#USB_LPM_HIRD_HW_MASK
 (0xFU)

	)

10958 
	#USB_LPM_HIRD_HW_SHIFT
 (0U)

	)

10959 
	#USB_LPM_HIRD_HW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_LPM_HIRD_HW_SHIFT
)Ë& 
USB_LPM_HIRD_HW_MASK
)

	)

10960 
	#USB_LPM_HIRD_SW_MASK
 (0xF0U)

	)

10961 
	#USB_LPM_HIRD_SW_SHIFT
 (4U)

	)

10962 
	#USB_LPM_HIRD_SW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_LPM_HIRD_SW_SHIFT
)Ë& 
USB_LPM_HIRD_SW_MASK
)

	)

10963 
	#USB_LPM_DATA_PENDING_MASK
 (0x100U)

	)

10964 
	#USB_LPM_DATA_PENDING_SHIFT
 (8U)

	)

10965 
	#USB_LPM_DATA_PENDING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_LPM_DATA_PENDING_SHIFT
)Ë& 
USB_LPM_DATA_PENDING_MASK
)

	)

10968 
	#USB_EPSKIP_SKIP_MASK
 (0x3FFU)

	)

10969 
	#USB_EPSKIP_SKIP_SHIFT
 (0U)

	)

10970 
	#USB_EPSKIP_SKIP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_EPSKIP_SKIP_SHIFT
)Ë& 
USB_EPSKIP_SKIP_MASK
)

	)

10973 
	#USB_EPINUSE_BUF_MASK
 (0x3FCU)

	)

10974 
	#USB_EPINUSE_BUF_SHIFT
 (2U)

	)

10975 
	#USB_EPINUSE_BUF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_EPINUSE_BUF_SHIFT
)Ë& 
USB_EPINUSE_BUF_MASK
)

	)

10978 
	#USB_EPBUFCFG_BUF_SB_MASK
 (0x3FCU)

	)

10979 
	#USB_EPBUFCFG_BUF_SB_SHIFT
 (2U)

	)

10980 
	#USB_EPBUFCFG_BUF_SB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_EPBUFCFG_BUF_SB_SHIFT
)Ë& 
USB_EPBUFCFG_BUF_SB_MASK
)

	)

10983 
	#USB_INTSTAT_EP0OUT_MASK
 (0x1U)

	)

10984 
	#USB_INTSTAT_EP0OUT_SHIFT
 (0U)

	)

10985 
	#USB_INTSTAT_EP0OUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_INTSTAT_EP0OUT_SHIFT
)Ë& 
USB_INTSTAT_EP0OUT_MASK
)

	)

10986 
	#USB_INTSTAT_EP0IN_MASK
 (0x2U)

	)

10987 
	#USB_INTSTAT_EP0IN_SHIFT
 (1U)

	)

10988 
	#USB_INTSTAT_EP0IN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_INTSTAT_EP0IN_SHIFT
)Ë& 
USB_INTSTAT_EP0IN_MASK
)

	)

10989 
	#USB_INTSTAT_EP1OUT_MASK
 (0x4U)

	)

10990 
	#USB_INTSTAT_EP1OUT_SHIFT
 (2U)

	)

10991 
	#USB_INTSTAT_EP1OUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_INTSTAT_EP1OUT_SHIFT
)Ë& 
USB_INTSTAT_EP1OUT_MASK
)

	)

10992 
	#USB_INTSTAT_EP1IN_MASK
 (0x8U)

	)

10993 
	#USB_INTSTAT_EP1IN_SHIFT
 (3U)

	)

10994 
	#USB_INTSTAT_EP1IN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_INTSTAT_EP1IN_SHIFT
)Ë& 
USB_INTSTAT_EP1IN_MASK
)

	)

10995 
	#USB_INTSTAT_EP2OUT_MASK
 (0x10U)

	)

10996 
	#USB_INTSTAT_EP2OUT_SHIFT
 (4U)

	)

10997 
	#USB_INTSTAT_EP2OUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_INTSTAT_EP2OUT_SHIFT
)Ë& 
USB_INTSTAT_EP2OUT_MASK
)

	)

10998 
	#USB_INTSTAT_EP2IN_MASK
 (0x20U)

	)

10999 
	#USB_INTSTAT_EP2IN_SHIFT
 (5U)

	)

11000 
	#USB_INTSTAT_EP2IN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_INTSTAT_EP2IN_SHIFT
)Ë& 
USB_INTSTAT_EP2IN_MASK
)

	)

11001 
	#USB_INTSTAT_EP3OUT_MASK
 (0x40U)

	)

11002 
	#USB_INTSTAT_EP3OUT_SHIFT
 (6U)

	)

11003 
	#USB_INTSTAT_EP3OUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_INTSTAT_EP3OUT_SHIFT
)Ë& 
USB_INTSTAT_EP3OUT_MASK
)

	)

11004 
	#USB_INTSTAT_EP3IN_MASK
 (0x80U)

	)

11005 
	#USB_INTSTAT_EP3IN_SHIFT
 (7U)

	)

11006 
	#USB_INTSTAT_EP3IN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_INTSTAT_EP3IN_SHIFT
)Ë& 
USB_INTSTAT_EP3IN_MASK
)

	)

11007 
	#USB_INTSTAT_EP4OUT_MASK
 (0x100U)

	)

11008 
	#USB_INTSTAT_EP4OUT_SHIFT
 (8U)

	)

11009 
	#USB_INTSTAT_EP4OUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_INTSTAT_EP4OUT_SHIFT
)Ë& 
USB_INTSTAT_EP4OUT_MASK
)

	)

11010 
	#USB_INTSTAT_EP4IN_MASK
 (0x200U)

	)

11011 
	#USB_INTSTAT_EP4IN_SHIFT
 (9U)

	)

11012 
	#USB_INTSTAT_EP4IN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_INTSTAT_EP4IN_SHIFT
)Ë& 
USB_INTSTAT_EP4IN_MASK
)

	)

11013 
	#USB_INTSTAT_FRAME_INT_MASK
 (0x40000000U)

	)

11014 
	#USB_INTSTAT_FRAME_INT_SHIFT
 (30U)

	)

11015 
	#USB_INTSTAT_FRAME_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_INTSTAT_FRAME_INT_SHIFT
)Ë& 
USB_INTSTAT_FRAME_INT_MASK
)

	)

11016 
	#USB_INTSTAT_DEV_INT_MASK
 (0x80000000U)

	)

11017 
	#USB_INTSTAT_DEV_INT_SHIFT
 (31U)

	)

11018 
	#USB_INTSTAT_DEV_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_INTSTAT_DEV_INT_SHIFT
)Ë& 
USB_INTSTAT_DEV_INT_MASK
)

	)

11021 
	#USB_INTEN_EP_INT_EN_MASK
 (0x3FFU)

	)

11022 
	#USB_INTEN_EP_INT_EN_SHIFT
 (0U)

	)

11023 
	#USB_INTEN_EP_INT_EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_INTEN_EP_INT_EN_SHIFT
)Ë& 
USB_INTEN_EP_INT_EN_MASK
)

	)

11024 
	#USB_INTEN_FRAME_INT_EN_MASK
 (0x40000000U)

	)

11025 
	#USB_INTEN_FRAME_INT_EN_SHIFT
 (30U)

	)

11026 
	#USB_INTEN_FRAME_INT_EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_INTEN_FRAME_INT_EN_SHIFT
)Ë& 
USB_INTEN_FRAME_INT_EN_MASK
)

	)

11027 
	#USB_INTEN_DEV_INT_EN_MASK
 (0x80000000U)

	)

11028 
	#USB_INTEN_DEV_INT_EN_SHIFT
 (31U)

	)

11029 
	#USB_INTEN_DEV_INT_EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_INTEN_DEV_INT_EN_SHIFT
)Ë& 
USB_INTEN_DEV_INT_EN_MASK
)

	)

11032 
	#USB_INTSETSTAT_EP_SET_INT_MASK
 (0x3FFU)

	)

11033 
	#USB_INTSETSTAT_EP_SET_INT_SHIFT
 (0U)

	)

11034 
	#USB_INTSETSTAT_EP_SET_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_INTSETSTAT_EP_SET_INT_SHIFT
)Ë& 
USB_INTSETSTAT_EP_SET_INT_MASK
)

	)

11035 
	#USB_INTSETSTAT_FRAME_SET_INT_MASK
 (0x40000000U)

	)

11036 
	#USB_INTSETSTAT_FRAME_SET_INT_SHIFT
 (30U)

	)

11037 
	#USB_INTSETSTAT_FRAME_SET_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_INTSETSTAT_FRAME_SET_INT_SHIFT
)Ë& 
USB_INTSETSTAT_FRAME_SET_INT_MASK
)

	)

11038 
	#USB_INTSETSTAT_DEV_SET_INT_MASK
 (0x80000000U)

	)

11039 
	#USB_INTSETSTAT_DEV_SET_INT_SHIFT
 (31U)

	)

11040 
	#USB_INTSETSTAT_DEV_SET_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_INTSETSTAT_DEV_SET_INT_SHIFT
)Ë& 
USB_INTSETSTAT_DEV_SET_INT_MASK
)

	)

11043 
	#USB_EPTOGGLE_TOGGLE_MASK
 (0x3FFU)

	)

11044 
	#USB_EPTOGGLE_TOGGLE_SHIFT
 (0U)

	)

11045 
	#USB_EPTOGGLE_TOGGLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USB_EPTOGGLE_TOGGLE_SHIFT
)Ë& 
USB_EPTOGGLE_TOGGLE_MASK
)

	)

11055 
	#USB0_BASE
 (0x40084000u)

	)

11057 
	#USB0
 ((
USB_Ty≥
 *)
USB0_BASE
)

	)

11059 
	#USB_BASE_ADDRS
 { 
USB0_BASE
 }

	)

11061 
	#USB_BASE_PTRS
 { 
USB0
 }

	)

11063 
	#USB_IRQS
 { 
USB0_IRQn
 }

	)

11064 
	#USB_NEEDCLK_IRQS
 { 
USB0_NEEDCLK_IRQn
 }

	)

11082 
__I
 
uöt32_t
 
	mHCREVISION
;

11083 
__IO
 
uöt32_t
 
	mHCCONTROL
;

11084 
__IO
 
uöt32_t
 
	mHCCOMMANDSTATUS
;

11085 
__IO
 
uöt32_t
 
	mHCINTERRUPTSTATUS
;

11086 
__IO
 
uöt32_t
 
	mHCINTERRUPTENABLE
;

11087 
__IO
 
uöt32_t
 
	mHCINTERRUPTDISABLE
;

11088 
__IO
 
uöt32_t
 
	mHCHCCA
;

11089 
__IO
 
uöt32_t
 
	mHCPERIODCURRENTED
;

11090 
__IO
 
uöt32_t
 
	mHCCONTROLHEADED
;

11091 
__IO
 
uöt32_t
 
	mHCCONTROLCURRENTED
;

11092 
__IO
 
uöt32_t
 
	mHCBULKHEADED
;

11093 
__IO
 
uöt32_t
 
	mHCBULKCURRENTED
;

11094 
__IO
 
uöt32_t
 
	mHCDONEHEAD
;

11095 
__IO
 
uöt32_t
 
	mHCFMINTERVAL
;

11096 
__IO
 
uöt32_t
 
	mHCFMREMAINING
;

11097 
__IO
 
uöt32_t
 
	mHCFMNUMBER
;

11098 
__IO
 
uöt32_t
 
	mHCPERIODICSTART
;

11099 
__IO
 
uöt32_t
 
	mHCLSTHRESHOLD
;

11100 
__IO
 
uöt32_t
 
	mHCRHDESCRIPTORA
;

11101 
__IO
 
uöt32_t
 
	mHCRHDESCRIPTORB
;

11102 
__IO
 
uöt32_t
 
	mHCRHSTATUS
;

11103 
__IO
 
uöt32_t
 
	mHCRHPORTSTATUS
;

11104 
uöt8_t
 
	mRESERVED_0
[4];

11105 
__IO
 
uöt32_t
 
	mPORTMODE
;

11106 } 
	tUSBFSH_Ty≥
;

11118 
	#USBFSH_HCREVISION_REV_MASK
 (0xFFU)

	)

11119 
	#USBFSH_HCREVISION_REV_SHIFT
 (0U)

	)

11120 
	#USBFSH_HCREVISION_REV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCREVISION_REV_SHIFT
)Ë& 
USBFSH_HCREVISION_REV_MASK
)

	)

11123 
	#USBFSH_HCCONTROL_CBSR_MASK
 (0x3U)

	)

11124 
	#USBFSH_HCCONTROL_CBSR_SHIFT
 (0U)

	)

11125 
	#USBFSH_HCCONTROL_CBSR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCCONTROL_CBSR_SHIFT
)Ë& 
USBFSH_HCCONTROL_CBSR_MASK
)

	)

11126 
	#USBFSH_HCCONTROL_PLE_MASK
 (0x4U)

	)

11127 
	#USBFSH_HCCONTROL_PLE_SHIFT
 (2U)

	)

11128 
	#USBFSH_HCCONTROL_PLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCCONTROL_PLE_SHIFT
)Ë& 
USBFSH_HCCONTROL_PLE_MASK
)

	)

11129 
	#USBFSH_HCCONTROL_IE_MASK
 (0x8U)

	)

11130 
	#USBFSH_HCCONTROL_IE_SHIFT
 (3U)

	)

11131 
	#USBFSH_HCCONTROL_IE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCCONTROL_IE_SHIFT
)Ë& 
USBFSH_HCCONTROL_IE_MASK
)

	)

11132 
	#USBFSH_HCCONTROL_CLE_MASK
 (0x10U)

	)

11133 
	#USBFSH_HCCONTROL_CLE_SHIFT
 (4U)

	)

11134 
	#USBFSH_HCCONTROL_CLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCCONTROL_CLE_SHIFT
)Ë& 
USBFSH_HCCONTROL_CLE_MASK
)

	)

11135 
	#USBFSH_HCCONTROL_BLE_MASK
 (0x20U)

	)

11136 
	#USBFSH_HCCONTROL_BLE_SHIFT
 (5U)

	)

11137 
	#USBFSH_HCCONTROL_BLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCCONTROL_BLE_SHIFT
)Ë& 
USBFSH_HCCONTROL_BLE_MASK
)

	)

11138 
	#USBFSH_HCCONTROL_HCFS_MASK
 (0xC0U)

	)

11139 
	#USBFSH_HCCONTROL_HCFS_SHIFT
 (6U)

	)

11140 
	#USBFSH_HCCONTROL_HCFS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCCONTROL_HCFS_SHIFT
)Ë& 
USBFSH_HCCONTROL_HCFS_MASK
)

	)

11141 
	#USBFSH_HCCONTROL_IR_MASK
 (0x100U)

	)

11142 
	#USBFSH_HCCONTROL_IR_SHIFT
 (8U)

	)

11143 
	#USBFSH_HCCONTROL_IR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCCONTROL_IR_SHIFT
)Ë& 
USBFSH_HCCONTROL_IR_MASK
)

	)

11144 
	#USBFSH_HCCONTROL_RWC_MASK
 (0x200U)

	)

11145 
	#USBFSH_HCCONTROL_RWC_SHIFT
 (9U)

	)

11146 
	#USBFSH_HCCONTROL_RWC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCCONTROL_RWC_SHIFT
)Ë& 
USBFSH_HCCONTROL_RWC_MASK
)

	)

11147 
	#USBFSH_HCCONTROL_RWE_MASK
 (0x400U)

	)

11148 
	#USBFSH_HCCONTROL_RWE_SHIFT
 (10U)

	)

11149 
	#USBFSH_HCCONTROL_RWE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCCONTROL_RWE_SHIFT
)Ë& 
USBFSH_HCCONTROL_RWE_MASK
)

	)

11152 
	#USBFSH_HCCOMMANDSTATUS_HCR_MASK
 (0x1U)

	)

11153 
	#USBFSH_HCCOMMANDSTATUS_HCR_SHIFT
 (0U)

	)

11154 
	#USBFSH_HCCOMMANDSTATUS_HCR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCCOMMANDSTATUS_HCR_SHIFT
)Ë& 
USBFSH_HCCOMMANDSTATUS_HCR_MASK
)

	)

11155 
	#USBFSH_HCCOMMANDSTATUS_CLF_MASK
 (0x2U)

	)

11156 
	#USBFSH_HCCOMMANDSTATUS_CLF_SHIFT
 (1U)

	)

11157 
	#USBFSH_HCCOMMANDSTATUS_CLF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCCOMMANDSTATUS_CLF_SHIFT
)Ë& 
USBFSH_HCCOMMANDSTATUS_CLF_MASK
)

	)

11158 
	#USBFSH_HCCOMMANDSTATUS_BLF_MASK
 (0x4U)

	)

11159 
	#USBFSH_HCCOMMANDSTATUS_BLF_SHIFT
 (2U)

	)

11160 
	#USBFSH_HCCOMMANDSTATUS_BLF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCCOMMANDSTATUS_BLF_SHIFT
)Ë& 
USBFSH_HCCOMMANDSTATUS_BLF_MASK
)

	)

11161 
	#USBFSH_HCCOMMANDSTATUS_OCR_MASK
 (0x8U)

	)

11162 
	#USBFSH_HCCOMMANDSTATUS_OCR_SHIFT
 (3U)

	)

11163 
	#USBFSH_HCCOMMANDSTATUS_OCR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCCOMMANDSTATUS_OCR_SHIFT
)Ë& 
USBFSH_HCCOMMANDSTATUS_OCR_MASK
)

	)

11164 
	#USBFSH_HCCOMMANDSTATUS_SOC_MASK
 (0xC0U)

	)

11165 
	#USBFSH_HCCOMMANDSTATUS_SOC_SHIFT
 (6U)

	)

11166 
	#USBFSH_HCCOMMANDSTATUS_SOC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCCOMMANDSTATUS_SOC_SHIFT
)Ë& 
USBFSH_HCCOMMANDSTATUS_SOC_MASK
)

	)

11169 
	#USBFSH_HCINTERRUPTSTATUS_SO_MASK
 (0x1U)

	)

11170 
	#USBFSH_HCINTERRUPTSTATUS_SO_SHIFT
 (0U)

	)

11171 
	#USBFSH_HCINTERRUPTSTATUS_SO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTSTATUS_SO_SHIFT
)Ë& 
USBFSH_HCINTERRUPTSTATUS_SO_MASK
)

	)

11172 
	#USBFSH_HCINTERRUPTSTATUS_WDH_MASK
 (0x2U)

	)

11173 
	#USBFSH_HCINTERRUPTSTATUS_WDH_SHIFT
 (1U)

	)

11174 
	#USBFSH_HCINTERRUPTSTATUS_WDH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTSTATUS_WDH_SHIFT
)Ë& 
USBFSH_HCINTERRUPTSTATUS_WDH_MASK
)

	)

11175 
	#USBFSH_HCINTERRUPTSTATUS_SF_MASK
 (0x4U)

	)

11176 
	#USBFSH_HCINTERRUPTSTATUS_SF_SHIFT
 (2U)

	)

11177 
	#USBFSH_HCINTERRUPTSTATUS_SF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTSTATUS_SF_SHIFT
)Ë& 
USBFSH_HCINTERRUPTSTATUS_SF_MASK
)

	)

11178 
	#USBFSH_HCINTERRUPTSTATUS_RD_MASK
 (0x8U)

	)

11179 
	#USBFSH_HCINTERRUPTSTATUS_RD_SHIFT
 (3U)

	)

11180 
	#USBFSH_HCINTERRUPTSTATUS_RD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTSTATUS_RD_SHIFT
)Ë& 
USBFSH_HCINTERRUPTSTATUS_RD_MASK
)

	)

11181 
	#USBFSH_HCINTERRUPTSTATUS_UE_MASK
 (0x10U)

	)

11182 
	#USBFSH_HCINTERRUPTSTATUS_UE_SHIFT
 (4U)

	)

11183 
	#USBFSH_HCINTERRUPTSTATUS_UE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTSTATUS_UE_SHIFT
)Ë& 
USBFSH_HCINTERRUPTSTATUS_UE_MASK
)

	)

11184 
	#USBFSH_HCINTERRUPTSTATUS_FNO_MASK
 (0x20U)

	)

11185 
	#USBFSH_HCINTERRUPTSTATUS_FNO_SHIFT
 (5U)

	)

11186 
	#USBFSH_HCINTERRUPTSTATUS_FNO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTSTATUS_FNO_SHIFT
)Ë& 
USBFSH_HCINTERRUPTSTATUS_FNO_MASK
)

	)

11187 
	#USBFSH_HCINTERRUPTSTATUS_RHSC_MASK
 (0x40U)

	)

11188 
	#USBFSH_HCINTERRUPTSTATUS_RHSC_SHIFT
 (6U)

	)

11189 
	#USBFSH_HCINTERRUPTSTATUS_RHSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTSTATUS_RHSC_SHIFT
)Ë& 
USBFSH_HCINTERRUPTSTATUS_RHSC_MASK
)

	)

11190 
	#USBFSH_HCINTERRUPTSTATUS_OC_MASK
 (0xFFFFFC00U)

	)

11191 
	#USBFSH_HCINTERRUPTSTATUS_OC_SHIFT
 (10U)

	)

11192 
	#USBFSH_HCINTERRUPTSTATUS_OC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTSTATUS_OC_SHIFT
)Ë& 
USBFSH_HCINTERRUPTSTATUS_OC_MASK
)

	)

11195 
	#USBFSH_HCINTERRUPTENABLE_SO_MASK
 (0x1U)

	)

11196 
	#USBFSH_HCINTERRUPTENABLE_SO_SHIFT
 (0U)

	)

11197 
	#USBFSH_HCINTERRUPTENABLE_SO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTENABLE_SO_SHIFT
)Ë& 
USBFSH_HCINTERRUPTENABLE_SO_MASK
)

	)

11198 
	#USBFSH_HCINTERRUPTENABLE_WDH_MASK
 (0x2U)

	)

11199 
	#USBFSH_HCINTERRUPTENABLE_WDH_SHIFT
 (1U)

	)

11200 
	#USBFSH_HCINTERRUPTENABLE_WDH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTENABLE_WDH_SHIFT
)Ë& 
USBFSH_HCINTERRUPTENABLE_WDH_MASK
)

	)

11201 
	#USBFSH_HCINTERRUPTENABLE_SF_MASK
 (0x4U)

	)

11202 
	#USBFSH_HCINTERRUPTENABLE_SF_SHIFT
 (2U)

	)

11203 
	#USBFSH_HCINTERRUPTENABLE_SF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTENABLE_SF_SHIFT
)Ë& 
USBFSH_HCINTERRUPTENABLE_SF_MASK
)

	)

11204 
	#USBFSH_HCINTERRUPTENABLE_RD_MASK
 (0x8U)

	)

11205 
	#USBFSH_HCINTERRUPTENABLE_RD_SHIFT
 (3U)

	)

11206 
	#USBFSH_HCINTERRUPTENABLE_RD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTENABLE_RD_SHIFT
)Ë& 
USBFSH_HCINTERRUPTENABLE_RD_MASK
)

	)

11207 
	#USBFSH_HCINTERRUPTENABLE_UE_MASK
 (0x10U)

	)

11208 
	#USBFSH_HCINTERRUPTENABLE_UE_SHIFT
 (4U)

	)

11209 
	#USBFSH_HCINTERRUPTENABLE_UE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTENABLE_UE_SHIFT
)Ë& 
USBFSH_HCINTERRUPTENABLE_UE_MASK
)

	)

11210 
	#USBFSH_HCINTERRUPTENABLE_FNO_MASK
 (0x20U)

	)

11211 
	#USBFSH_HCINTERRUPTENABLE_FNO_SHIFT
 (5U)

	)

11212 
	#USBFSH_HCINTERRUPTENABLE_FNO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTENABLE_FNO_SHIFT
)Ë& 
USBFSH_HCINTERRUPTENABLE_FNO_MASK
)

	)

11213 
	#USBFSH_HCINTERRUPTENABLE_RHSC_MASK
 (0x40U)

	)

11214 
	#USBFSH_HCINTERRUPTENABLE_RHSC_SHIFT
 (6U)

	)

11215 
	#USBFSH_HCINTERRUPTENABLE_RHSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTENABLE_RHSC_SHIFT
)Ë& 
USBFSH_HCINTERRUPTENABLE_RHSC_MASK
)

	)

11216 
	#USBFSH_HCINTERRUPTENABLE_OC_MASK
 (0x40000000U)

	)

11217 
	#USBFSH_HCINTERRUPTENABLE_OC_SHIFT
 (30U)

	)

11218 
	#USBFSH_HCINTERRUPTENABLE_OC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTENABLE_OC_SHIFT
)Ë& 
USBFSH_HCINTERRUPTENABLE_OC_MASK
)

	)

11219 
	#USBFSH_HCINTERRUPTENABLE_MIE_MASK
 (0x80000000U)

	)

11220 
	#USBFSH_HCINTERRUPTENABLE_MIE_SHIFT
 (31U)

	)

11221 
	#USBFSH_HCINTERRUPTENABLE_MIE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTENABLE_MIE_SHIFT
)Ë& 
USBFSH_HCINTERRUPTENABLE_MIE_MASK
)

	)

11224 
	#USBFSH_HCINTERRUPTDISABLE_SO_MASK
 (0x1U)

	)

11225 
	#USBFSH_HCINTERRUPTDISABLE_SO_SHIFT
 (0U)

	)

11226 
	#USBFSH_HCINTERRUPTDISABLE_SO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTDISABLE_SO_SHIFT
)Ë& 
USBFSH_HCINTERRUPTDISABLE_SO_MASK
)

	)

11227 
	#USBFSH_HCINTERRUPTDISABLE_WDH_MASK
 (0x2U)

	)

11228 
	#USBFSH_HCINTERRUPTDISABLE_WDH_SHIFT
 (1U)

	)

11229 
	#USBFSH_HCINTERRUPTDISABLE_WDH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTDISABLE_WDH_SHIFT
)Ë& 
USBFSH_HCINTERRUPTDISABLE_WDH_MASK
)

	)

11230 
	#USBFSH_HCINTERRUPTDISABLE_SF_MASK
 (0x4U)

	)

11231 
	#USBFSH_HCINTERRUPTDISABLE_SF_SHIFT
 (2U)

	)

11232 
	#USBFSH_HCINTERRUPTDISABLE_SF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTDISABLE_SF_SHIFT
)Ë& 
USBFSH_HCINTERRUPTDISABLE_SF_MASK
)

	)

11233 
	#USBFSH_HCINTERRUPTDISABLE_RD_MASK
 (0x8U)

	)

11234 
	#USBFSH_HCINTERRUPTDISABLE_RD_SHIFT
 (3U)

	)

11235 
	#USBFSH_HCINTERRUPTDISABLE_RD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTDISABLE_RD_SHIFT
)Ë& 
USBFSH_HCINTERRUPTDISABLE_RD_MASK
)

	)

11236 
	#USBFSH_HCINTERRUPTDISABLE_UE_MASK
 (0x10U)

	)

11237 
	#USBFSH_HCINTERRUPTDISABLE_UE_SHIFT
 (4U)

	)

11238 
	#USBFSH_HCINTERRUPTDISABLE_UE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTDISABLE_UE_SHIFT
)Ë& 
USBFSH_HCINTERRUPTDISABLE_UE_MASK
)

	)

11239 
	#USBFSH_HCINTERRUPTDISABLE_FNO_MASK
 (0x20U)

	)

11240 
	#USBFSH_HCINTERRUPTDISABLE_FNO_SHIFT
 (5U)

	)

11241 
	#USBFSH_HCINTERRUPTDISABLE_FNO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTDISABLE_FNO_SHIFT
)Ë& 
USBFSH_HCINTERRUPTDISABLE_FNO_MASK
)

	)

11242 
	#USBFSH_HCINTERRUPTDISABLE_RHSC_MASK
 (0x40U)

	)

11243 
	#USBFSH_HCINTERRUPTDISABLE_RHSC_SHIFT
 (6U)

	)

11244 
	#USBFSH_HCINTERRUPTDISABLE_RHSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTDISABLE_RHSC_SHIFT
)Ë& 
USBFSH_HCINTERRUPTDISABLE_RHSC_MASK
)

	)

11245 
	#USBFSH_HCINTERRUPTDISABLE_OC_MASK
 (0x40000000U)

	)

11246 
	#USBFSH_HCINTERRUPTDISABLE_OC_SHIFT
 (30U)

	)

11247 
	#USBFSH_HCINTERRUPTDISABLE_OC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTDISABLE_OC_SHIFT
)Ë& 
USBFSH_HCINTERRUPTDISABLE_OC_MASK
)

	)

11248 
	#USBFSH_HCINTERRUPTDISABLE_MIE_MASK
 (0x80000000U)

	)

11249 
	#USBFSH_HCINTERRUPTDISABLE_MIE_SHIFT
 (31U)

	)

11250 
	#USBFSH_HCINTERRUPTDISABLE_MIE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCINTERRUPTDISABLE_MIE_SHIFT
)Ë& 
USBFSH_HCINTERRUPTDISABLE_MIE_MASK
)

	)

11253 
	#USBFSH_HCHCCA_HCCA_MASK
 (0xFFFFFF00U)

	)

11254 
	#USBFSH_HCHCCA_HCCA_SHIFT
 (8U)

	)

11255 
	#USBFSH_HCHCCA_HCCA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCHCCA_HCCA_SHIFT
)Ë& 
USBFSH_HCHCCA_HCCA_MASK
)

	)

11258 
	#USBFSH_HCPERIODCURRENTED_PCED_MASK
 (0xFFFFFFF0U)

	)

11259 
	#USBFSH_HCPERIODCURRENTED_PCED_SHIFT
 (4U)

	)

11260 
	#USBFSH_HCPERIODCURRENTED_PCED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCPERIODCURRENTED_PCED_SHIFT
)Ë& 
USBFSH_HCPERIODCURRENTED_PCED_MASK
)

	)

11263 
	#USBFSH_HCCONTROLHEADED_CHED_MASK
 (0xFFFFFFF0U)

	)

11264 
	#USBFSH_HCCONTROLHEADED_CHED_SHIFT
 (4U)

	)

11265 
	#USBFSH_HCCONTROLHEADED_CHED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCCONTROLHEADED_CHED_SHIFT
)Ë& 
USBFSH_HCCONTROLHEADED_CHED_MASK
)

	)

11268 
	#USBFSH_HCCONTROLCURRENTED_CCED_MASK
 (0xFFFFFFF0U)

	)

11269 
	#USBFSH_HCCONTROLCURRENTED_CCED_SHIFT
 (4U)

	)

11270 
	#USBFSH_HCCONTROLCURRENTED_CCED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCCONTROLCURRENTED_CCED_SHIFT
)Ë& 
USBFSH_HCCONTROLCURRENTED_CCED_MASK
)

	)

11273 
	#USBFSH_HCBULKHEADED_BHED_MASK
 (0xFFFFFFF0U)

	)

11274 
	#USBFSH_HCBULKHEADED_BHED_SHIFT
 (4U)

	)

11275 
	#USBFSH_HCBULKHEADED_BHED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCBULKHEADED_BHED_SHIFT
)Ë& 
USBFSH_HCBULKHEADED_BHED_MASK
)

	)

11278 
	#USBFSH_HCBULKCURRENTED_BCED_MASK
 (0xFFFFFFF0U)

	)

11279 
	#USBFSH_HCBULKCURRENTED_BCED_SHIFT
 (4U)

	)

11280 
	#USBFSH_HCBULKCURRENTED_BCED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCBULKCURRENTED_BCED_SHIFT
)Ë& 
USBFSH_HCBULKCURRENTED_BCED_MASK
)

	)

11283 
	#USBFSH_HCDONEHEAD_DH_MASK
 (0xFFFFFFF0U)

	)

11284 
	#USBFSH_HCDONEHEAD_DH_SHIFT
 (4U)

	)

11285 
	#USBFSH_HCDONEHEAD_DH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCDONEHEAD_DH_SHIFT
)Ë& 
USBFSH_HCDONEHEAD_DH_MASK
)

	)

11288 
	#USBFSH_HCFMINTERVAL_FI_MASK
 (0x3FFFU)

	)

11289 
	#USBFSH_HCFMINTERVAL_FI_SHIFT
 (0U)

	)

11290 
	#USBFSH_HCFMINTERVAL_FI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCFMINTERVAL_FI_SHIFT
)Ë& 
USBFSH_HCFMINTERVAL_FI_MASK
)

	)

11291 
	#USBFSH_HCFMINTERVAL_FSMPS_MASK
 (0x7FFF0000U)

	)

11292 
	#USBFSH_HCFMINTERVAL_FSMPS_SHIFT
 (16U)

	)

11293 
	#USBFSH_HCFMINTERVAL_FSMPS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCFMINTERVAL_FSMPS_SHIFT
)Ë& 
USBFSH_HCFMINTERVAL_FSMPS_MASK
)

	)

11294 
	#USBFSH_HCFMINTERVAL_FIT_MASK
 (0x80000000U)

	)

11295 
	#USBFSH_HCFMINTERVAL_FIT_SHIFT
 (31U)

	)

11296 
	#USBFSH_HCFMINTERVAL_FIT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCFMINTERVAL_FIT_SHIFT
)Ë& 
USBFSH_HCFMINTERVAL_FIT_MASK
)

	)

11299 
	#USBFSH_HCFMREMAINING_FR_MASK
 (0x3FFFU)

	)

11300 
	#USBFSH_HCFMREMAINING_FR_SHIFT
 (0U)

	)

11301 
	#USBFSH_HCFMREMAINING_FR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCFMREMAINING_FR_SHIFT
)Ë& 
USBFSH_HCFMREMAINING_FR_MASK
)

	)

11302 
	#USBFSH_HCFMREMAINING_FRT_MASK
 (0x80000000U)

	)

11303 
	#USBFSH_HCFMREMAINING_FRT_SHIFT
 (31U)

	)

11304 
	#USBFSH_HCFMREMAINING_FRT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCFMREMAINING_FRT_SHIFT
)Ë& 
USBFSH_HCFMREMAINING_FRT_MASK
)

	)

11307 
	#USBFSH_HCFMNUMBER_FN_MASK
 (0xFFFFU)

	)

11308 
	#USBFSH_HCFMNUMBER_FN_SHIFT
 (0U)

	)

11309 
	#USBFSH_HCFMNUMBER_FN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCFMNUMBER_FN_SHIFT
)Ë& 
USBFSH_HCFMNUMBER_FN_MASK
)

	)

11312 
	#USBFSH_HCPERIODICSTART_PS_MASK
 (0x3FFFU)

	)

11313 
	#USBFSH_HCPERIODICSTART_PS_SHIFT
 (0U)

	)

11314 
	#USBFSH_HCPERIODICSTART_PS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCPERIODICSTART_PS_SHIFT
)Ë& 
USBFSH_HCPERIODICSTART_PS_MASK
)

	)

11317 
	#USBFSH_HCLSTHRESHOLD_LST_MASK
 (0xFFFU)

	)

11318 
	#USBFSH_HCLSTHRESHOLD_LST_SHIFT
 (0U)

	)

11319 
	#USBFSH_HCLSTHRESHOLD_LST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCLSTHRESHOLD_LST_SHIFT
)Ë& 
USBFSH_HCLSTHRESHOLD_LST_MASK
)

	)

11322 
	#USBFSH_HCRHDESCRIPTORA_NDP_MASK
 (0xFFU)

	)

11323 
	#USBFSH_HCRHDESCRIPTORA_NDP_SHIFT
 (0U)

	)

11324 
	#USBFSH_HCRHDESCRIPTORA_NDP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHDESCRIPTORA_NDP_SHIFT
)Ë& 
USBFSH_HCRHDESCRIPTORA_NDP_MASK
)

	)

11325 
	#USBFSH_HCRHDESCRIPTORA_PSM_MASK
 (0x100U)

	)

11326 
	#USBFSH_HCRHDESCRIPTORA_PSM_SHIFT
 (8U)

	)

11327 
	#USBFSH_HCRHDESCRIPTORA_PSM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHDESCRIPTORA_PSM_SHIFT
)Ë& 
USBFSH_HCRHDESCRIPTORA_PSM_MASK
)

	)

11328 
	#USBFSH_HCRHDESCRIPTORA_NPS_MASK
 (0x200U)

	)

11329 
	#USBFSH_HCRHDESCRIPTORA_NPS_SHIFT
 (9U)

	)

11330 
	#USBFSH_HCRHDESCRIPTORA_NPS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHDESCRIPTORA_NPS_SHIFT
)Ë& 
USBFSH_HCRHDESCRIPTORA_NPS_MASK
)

	)

11331 
	#USBFSH_HCRHDESCRIPTORA_DT_MASK
 (0x400U)

	)

11332 
	#USBFSH_HCRHDESCRIPTORA_DT_SHIFT
 (10U)

	)

11333 
	#USBFSH_HCRHDESCRIPTORA_DT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHDESCRIPTORA_DT_SHIFT
)Ë& 
USBFSH_HCRHDESCRIPTORA_DT_MASK
)

	)

11334 
	#USBFSH_HCRHDESCRIPTORA_OCPM_MASK
 (0x800U)

	)

11335 
	#USBFSH_HCRHDESCRIPTORA_OCPM_SHIFT
 (11U)

	)

11336 
	#USBFSH_HCRHDESCRIPTORA_OCPM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHDESCRIPTORA_OCPM_SHIFT
)Ë& 
USBFSH_HCRHDESCRIPTORA_OCPM_MASK
)

	)

11337 
	#USBFSH_HCRHDESCRIPTORA_NOCP_MASK
 (0x1000U)

	)

11338 
	#USBFSH_HCRHDESCRIPTORA_NOCP_SHIFT
 (12U)

	)

11339 
	#USBFSH_HCRHDESCRIPTORA_NOCP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHDESCRIPTORA_NOCP_SHIFT
)Ë& 
USBFSH_HCRHDESCRIPTORA_NOCP_MASK
)

	)

11340 
	#USBFSH_HCRHDESCRIPTORA_POTPGT_MASK
 (0xFF000000U)

	)

11341 
	#USBFSH_HCRHDESCRIPTORA_POTPGT_SHIFT
 (24U)

	)

11342 
	#USBFSH_HCRHDESCRIPTORA_POTPGT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHDESCRIPTORA_POTPGT_SHIFT
)Ë& 
USBFSH_HCRHDESCRIPTORA_POTPGT_MASK
)

	)

11345 
	#USBFSH_HCRHDESCRIPTORB_DR_MASK
 (0xFFFFU)

	)

11346 
	#USBFSH_HCRHDESCRIPTORB_DR_SHIFT
 (0U)

	)

11347 
	#USBFSH_HCRHDESCRIPTORB_DR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHDESCRIPTORB_DR_SHIFT
)Ë& 
USBFSH_HCRHDESCRIPTORB_DR_MASK
)

	)

11348 
	#USBFSH_HCRHDESCRIPTORB_PPCM_MASK
 (0xFFFF0000U)

	)

11349 
	#USBFSH_HCRHDESCRIPTORB_PPCM_SHIFT
 (16U)

	)

11350 
	#USBFSH_HCRHDESCRIPTORB_PPCM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHDESCRIPTORB_PPCM_SHIFT
)Ë& 
USBFSH_HCRHDESCRIPTORB_PPCM_MASK
)

	)

11353 
	#USBFSH_HCRHSTATUS_LPS_MASK
 (0x1U)

	)

11354 
	#USBFSH_HCRHSTATUS_LPS_SHIFT
 (0U)

	)

11355 
	#USBFSH_HCRHSTATUS_LPS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHSTATUS_LPS_SHIFT
)Ë& 
USBFSH_HCRHSTATUS_LPS_MASK
)

	)

11356 
	#USBFSH_HCRHSTATUS_OCI_MASK
 (0x2U)

	)

11357 
	#USBFSH_HCRHSTATUS_OCI_SHIFT
 (1U)

	)

11358 
	#USBFSH_HCRHSTATUS_OCI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHSTATUS_OCI_SHIFT
)Ë& 
USBFSH_HCRHSTATUS_OCI_MASK
)

	)

11359 
	#USBFSH_HCRHSTATUS_DRWE_MASK
 (0x8000U)

	)

11360 
	#USBFSH_HCRHSTATUS_DRWE_SHIFT
 (15U)

	)

11361 
	#USBFSH_HCRHSTATUS_DRWE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHSTATUS_DRWE_SHIFT
)Ë& 
USBFSH_HCRHSTATUS_DRWE_MASK
)

	)

11362 
	#USBFSH_HCRHSTATUS_LPSC_MASK
 (0x10000U)

	)

11363 
	#USBFSH_HCRHSTATUS_LPSC_SHIFT
 (16U)

	)

11364 
	#USBFSH_HCRHSTATUS_LPSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHSTATUS_LPSC_SHIFT
)Ë& 
USBFSH_HCRHSTATUS_LPSC_MASK
)

	)

11365 
	#USBFSH_HCRHSTATUS_OCIC_MASK
 (0x20000U)

	)

11366 
	#USBFSH_HCRHSTATUS_OCIC_SHIFT
 (17U)

	)

11367 
	#USBFSH_HCRHSTATUS_OCIC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHSTATUS_OCIC_SHIFT
)Ë& 
USBFSH_HCRHSTATUS_OCIC_MASK
)

	)

11368 
	#USBFSH_HCRHSTATUS_CRWE_MASK
 (0x80000000U)

	)

11369 
	#USBFSH_HCRHSTATUS_CRWE_SHIFT
 (31U)

	)

11370 
	#USBFSH_HCRHSTATUS_CRWE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHSTATUS_CRWE_SHIFT
)Ë& 
USBFSH_HCRHSTATUS_CRWE_MASK
)

	)

11373 
	#USBFSH_HCRHPORTSTATUS_CCS_MASK
 (0x1U)

	)

11374 
	#USBFSH_HCRHPORTSTATUS_CCS_SHIFT
 (0U)

	)

11375 
	#USBFSH_HCRHPORTSTATUS_CCS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHPORTSTATUS_CCS_SHIFT
)Ë& 
USBFSH_HCRHPORTSTATUS_CCS_MASK
)

	)

11376 
	#USBFSH_HCRHPORTSTATUS_PES_MASK
 (0x2U)

	)

11377 
	#USBFSH_HCRHPORTSTATUS_PES_SHIFT
 (1U)

	)

11378 
	#USBFSH_HCRHPORTSTATUS_PES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHPORTSTATUS_PES_SHIFT
)Ë& 
USBFSH_HCRHPORTSTATUS_PES_MASK
)

	)

11379 
	#USBFSH_HCRHPORTSTATUS_PSS_MASK
 (0x4U)

	)

11380 
	#USBFSH_HCRHPORTSTATUS_PSS_SHIFT
 (2U)

	)

11381 
	#USBFSH_HCRHPORTSTATUS_PSS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHPORTSTATUS_PSS_SHIFT
)Ë& 
USBFSH_HCRHPORTSTATUS_PSS_MASK
)

	)

11382 
	#USBFSH_HCRHPORTSTATUS_POCI_MASK
 (0x8U)

	)

11383 
	#USBFSH_HCRHPORTSTATUS_POCI_SHIFT
 (3U)

	)

11384 
	#USBFSH_HCRHPORTSTATUS_POCI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHPORTSTATUS_POCI_SHIFT
)Ë& 
USBFSH_HCRHPORTSTATUS_POCI_MASK
)

	)

11385 
	#USBFSH_HCRHPORTSTATUS_PRS_MASK
 (0x10U)

	)

11386 
	#USBFSH_HCRHPORTSTATUS_PRS_SHIFT
 (4U)

	)

11387 
	#USBFSH_HCRHPORTSTATUS_PRS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHPORTSTATUS_PRS_SHIFT
)Ë& 
USBFSH_HCRHPORTSTATUS_PRS_MASK
)

	)

11388 
	#USBFSH_HCRHPORTSTATUS_PPS_MASK
 (0x100U)

	)

11389 
	#USBFSH_HCRHPORTSTATUS_PPS_SHIFT
 (8U)

	)

11390 
	#USBFSH_HCRHPORTSTATUS_PPS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHPORTSTATUS_PPS_SHIFT
)Ë& 
USBFSH_HCRHPORTSTATUS_PPS_MASK
)

	)

11391 
	#USBFSH_HCRHPORTSTATUS_LSDA_MASK
 (0x200U)

	)

11392 
	#USBFSH_HCRHPORTSTATUS_LSDA_SHIFT
 (9U)

	)

11393 
	#USBFSH_HCRHPORTSTATUS_LSDA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHPORTSTATUS_LSDA_SHIFT
)Ë& 
USBFSH_HCRHPORTSTATUS_LSDA_MASK
)

	)

11394 
	#USBFSH_HCRHPORTSTATUS_CSC_MASK
 (0x10000U)

	)

11395 
	#USBFSH_HCRHPORTSTATUS_CSC_SHIFT
 (16U)

	)

11396 
	#USBFSH_HCRHPORTSTATUS_CSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHPORTSTATUS_CSC_SHIFT
)Ë& 
USBFSH_HCRHPORTSTATUS_CSC_MASK
)

	)

11397 
	#USBFSH_HCRHPORTSTATUS_PESC_MASK
 (0x20000U)

	)

11398 
	#USBFSH_HCRHPORTSTATUS_PESC_SHIFT
 (17U)

	)

11399 
	#USBFSH_HCRHPORTSTATUS_PESC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHPORTSTATUS_PESC_SHIFT
)Ë& 
USBFSH_HCRHPORTSTATUS_PESC_MASK
)

	)

11400 
	#USBFSH_HCRHPORTSTATUS_PSSC_MASK
 (0x40000U)

	)

11401 
	#USBFSH_HCRHPORTSTATUS_PSSC_SHIFT
 (18U)

	)

11402 
	#USBFSH_HCRHPORTSTATUS_PSSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHPORTSTATUS_PSSC_SHIFT
)Ë& 
USBFSH_HCRHPORTSTATUS_PSSC_MASK
)

	)

11403 
	#USBFSH_HCRHPORTSTATUS_OCIC_MASK
 (0x80000U)

	)

11404 
	#USBFSH_HCRHPORTSTATUS_OCIC_SHIFT
 (19U)

	)

11405 
	#USBFSH_HCRHPORTSTATUS_OCIC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHPORTSTATUS_OCIC_SHIFT
)Ë& 
USBFSH_HCRHPORTSTATUS_OCIC_MASK
)

	)

11406 
	#USBFSH_HCRHPORTSTATUS_PRSC_MASK
 (0x100000U)

	)

11407 
	#USBFSH_HCRHPORTSTATUS_PRSC_SHIFT
 (20U)

	)

11408 
	#USBFSH_HCRHPORTSTATUS_PRSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_HCRHPORTSTATUS_PRSC_SHIFT
)Ë& 
USBFSH_HCRHPORTSTATUS_PRSC_MASK
)

	)

11411 
	#USBFSH_PORTMODE_ID_MASK
 (0x1U)

	)

11412 
	#USBFSH_PORTMODE_ID_SHIFT
 (0U)

	)

11413 
	#USBFSH_PORTMODE_ID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_PORTMODE_ID_SHIFT
)Ë& 
USBFSH_PORTMODE_ID_MASK
)

	)

11414 
	#USBFSH_PORTMODE_ID_EN_MASK
 (0x100U)

	)

11415 
	#USBFSH_PORTMODE_ID_EN_SHIFT
 (8U)

	)

11416 
	#USBFSH_PORTMODE_ID_EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_PORTMODE_ID_EN_SHIFT
)Ë& 
USBFSH_PORTMODE_ID_EN_MASK
)

	)

11417 
	#USBFSH_PORTMODE_DEV_ENABLE_MASK
 (0x10000U)

	)

11418 
	#USBFSH_PORTMODE_DEV_ENABLE_SHIFT
 (16U)

	)

11419 
	#USBFSH_PORTMODE_DEV_ENABLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBFSH_PORTMODE_DEV_ENABLE_SHIFT
)Ë& 
USBFSH_PORTMODE_DEV_ENABLE_MASK
)

	)

11429 
	#USBFSH_BASE
 (0x400A2000u)

	)

11431 
	#USBFSH
 ((
USBFSH_Ty≥
 *)
USBFSH_BASE
)

	)

11433 
	#USBFSH_BASE_ADDRS
 { 
USBFSH_BASE
 }

	)

11435 
	#USBFSH_BASE_PTRS
 { 
USBFSH
 }

	)

11437 
	#USBFSH_IRQS
 { 
USB0_IRQn
 }

	)

11438 
	#USBFSH_NEEDCLK_IRQS
 { 
USB0_NEEDCLK_IRQn
 }

	)

11456 
__IO
 
uöt32_t
 
	mDEVCMDSTAT
;

11457 
__I
 
uöt32_t
 
	mINFO
;

11458 
__IO
 
uöt32_t
 
	mEPLISTSTART
;

11459 
__I
 
uöt32_t
 
	mDATABUFSTART
;

11460 
__IO
 
uöt32_t
 
	mLPM
;

11461 
__IO
 
uöt32_t
 
	mEPSKIP
;

11462 
__IO
 
uöt32_t
 
	mEPINUSE
;

11463 
__IO
 
uöt32_t
 
	mEPBUFCFG
;

11464 
__IO
 
uöt32_t
 
	mINTSTAT
;

11465 
__IO
 
uöt32_t
 
	mINTEN
;

11466 
__IO
 
uöt32_t
 
	mINTSETSTAT
;

11467 
uöt8_t
 
	mRESERVED_0
[8];

11468 
__I
 
uöt32_t
 
	mEPTOGGLE
;

11469 
uöt8_t
 
	mRESERVED_1
[4];

11470 
__IO
 
uöt32_t
 
	mULPIDEBUG
;

11471 } 
	tUSBHSD_Ty≥
;

11483 
	#USBHSD_DEVCMDSTAT_DEV_ADDR_MASK
 (0x7FU)

	)

11484 
	#USBHSD_DEVCMDSTAT_DEV_ADDR_SHIFT
 (0U)

	)

11485 
	#USBHSD_DEVCMDSTAT_DEV_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_DEVCMDSTAT_DEV_ADDR_SHIFT
)Ë& 
USBHSD_DEVCMDSTAT_DEV_ADDR_MASK
)

	)

11486 
	#USBHSD_DEVCMDSTAT_DEV_EN_MASK
 (0x80U)

	)

11487 
	#USBHSD_DEVCMDSTAT_DEV_EN_SHIFT
 (7U)

	)

11488 
	#USBHSD_DEVCMDSTAT_DEV_EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_DEVCMDSTAT_DEV_EN_SHIFT
)Ë& 
USBHSD_DEVCMDSTAT_DEV_EN_MASK
)

	)

11489 
	#USBHSD_DEVCMDSTAT_SETUP_MASK
 (0x100U)

	)

11490 
	#USBHSD_DEVCMDSTAT_SETUP_SHIFT
 (8U)

	)

11491 
	#USBHSD_DEVCMDSTAT_SETUP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_DEVCMDSTAT_SETUP_SHIFT
)Ë& 
USBHSD_DEVCMDSTAT_SETUP_MASK
)

	)

11492 
	#USBHSD_DEVCMDSTAT_FORCE_NEEDCLK_MASK
 (0x200U)

	)

11493 
	#USBHSD_DEVCMDSTAT_FORCE_NEEDCLK_SHIFT
 (9U)

	)

11494 
	#USBHSD_DEVCMDSTAT_FORCE_NEEDCLK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_DEVCMDSTAT_FORCE_NEEDCLK_SHIFT
)Ë& 
USBHSD_DEVCMDSTAT_FORCE_NEEDCLK_MASK
)

	)

11495 
	#USBHSD_DEVCMDSTAT_FORCE_VBUS_MASK
 (0x400U)

	)

11496 
	#USBHSD_DEVCMDSTAT_FORCE_VBUS_SHIFT
 (10U)

	)

11497 
	#USBHSD_DEVCMDSTAT_FORCE_VBUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_DEVCMDSTAT_FORCE_VBUS_SHIFT
)Ë& 
USBHSD_DEVCMDSTAT_FORCE_VBUS_MASK
)

	)

11498 
	#USBHSD_DEVCMDSTAT_LPM_SUP_MASK
 (0x800U)

	)

11499 
	#USBHSD_DEVCMDSTAT_LPM_SUP_SHIFT
 (11U)

	)

11500 
	#USBHSD_DEVCMDSTAT_LPM_SUP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_DEVCMDSTAT_LPM_SUP_SHIFT
)Ë& 
USBHSD_DEVCMDSTAT_LPM_SUP_MASK
)

	)

11501 
	#USBHSD_DEVCMDSTAT_INTONNAK_AO_MASK
 (0x1000U)

	)

11502 
	#USBHSD_DEVCMDSTAT_INTONNAK_AO_SHIFT
 (12U)

	)

11503 
	#USBHSD_DEVCMDSTAT_INTONNAK_AO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_DEVCMDSTAT_INTONNAK_AO_SHIFT
)Ë& 
USBHSD_DEVCMDSTAT_INTONNAK_AO_MASK
)

	)

11504 
	#USBHSD_DEVCMDSTAT_INTONNAK_AI_MASK
 (0x2000U)

	)

11505 
	#USBHSD_DEVCMDSTAT_INTONNAK_AI_SHIFT
 (13U)

	)

11506 
	#USBHSD_DEVCMDSTAT_INTONNAK_AI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_DEVCMDSTAT_INTONNAK_AI_SHIFT
)Ë& 
USBHSD_DEVCMDSTAT_INTONNAK_AI_MASK
)

	)

11507 
	#USBHSD_DEVCMDSTAT_INTONNAK_CO_MASK
 (0x4000U)

	)

11508 
	#USBHSD_DEVCMDSTAT_INTONNAK_CO_SHIFT
 (14U)

	)

11509 
	#USBHSD_DEVCMDSTAT_INTONNAK_CO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_DEVCMDSTAT_INTONNAK_CO_SHIFT
)Ë& 
USBHSD_DEVCMDSTAT_INTONNAK_CO_MASK
)

	)

11510 
	#USBHSD_DEVCMDSTAT_INTONNAK_CI_MASK
 (0x8000U)

	)

11511 
	#USBHSD_DEVCMDSTAT_INTONNAK_CI_SHIFT
 (15U)

	)

11512 
	#USBHSD_DEVCMDSTAT_INTONNAK_CI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_DEVCMDSTAT_INTONNAK_CI_SHIFT
)Ë& 
USBHSD_DEVCMDSTAT_INTONNAK_CI_MASK
)

	)

11513 
	#USBHSD_DEVCMDSTAT_DCON_MASK
 (0x10000U)

	)

11514 
	#USBHSD_DEVCMDSTAT_DCON_SHIFT
 (16U)

	)

11515 
	#USBHSD_DEVCMDSTAT_DCON
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_DEVCMDSTAT_DCON_SHIFT
)Ë& 
USBHSD_DEVCMDSTAT_DCON_MASK
)

	)

11516 
	#USBHSD_DEVCMDSTAT_DSUS_MASK
 (0x20000U)

	)

11517 
	#USBHSD_DEVCMDSTAT_DSUS_SHIFT
 (17U)

	)

11518 
	#USBHSD_DEVCMDSTAT_DSUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_DEVCMDSTAT_DSUS_SHIFT
)Ë& 
USBHSD_DEVCMDSTAT_DSUS_MASK
)

	)

11519 
	#USBHSD_DEVCMDSTAT_LPM_SUS_MASK
 (0x80000U)

	)

11520 
	#USBHSD_DEVCMDSTAT_LPM_SUS_SHIFT
 (19U)

	)

11521 
	#USBHSD_DEVCMDSTAT_LPM_SUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_DEVCMDSTAT_LPM_SUS_SHIFT
)Ë& 
USBHSD_DEVCMDSTAT_LPM_SUS_MASK
)

	)

11522 
	#USBHSD_DEVCMDSTAT_LPM_REWP_MASK
 (0x100000U)

	)

11523 
	#USBHSD_DEVCMDSTAT_LPM_REWP_SHIFT
 (20U)

	)

11524 
	#USBHSD_DEVCMDSTAT_LPM_REWP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_DEVCMDSTAT_LPM_REWP_SHIFT
)Ë& 
USBHSD_DEVCMDSTAT_LPM_REWP_MASK
)

	)

11525 
	#USBHSD_DEVCMDSTAT_S≥ed_MASK
 (0xC00000U)

	)

11526 
	#USBHSD_DEVCMDSTAT_S≥ed_SHIFT
 (22U)

	)

11527 
	#USBHSD_DEVCMDSTAT_S≥ed
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_DEVCMDSTAT_S≥ed_SHIFT
)Ë& 
USBHSD_DEVCMDSTAT_S≥ed_MASK
)

	)

11528 
	#USBHSD_DEVCMDSTAT_DCON_C_MASK
 (0x1000000U)

	)

11529 
	#USBHSD_DEVCMDSTAT_DCON_C_SHIFT
 (24U)

	)

11530 
	#USBHSD_DEVCMDSTAT_DCON_C
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_DEVCMDSTAT_DCON_C_SHIFT
)Ë& 
USBHSD_DEVCMDSTAT_DCON_C_MASK
)

	)

11531 
	#USBHSD_DEVCMDSTAT_DSUS_C_MASK
 (0x2000000U)

	)

11532 
	#USBHSD_DEVCMDSTAT_DSUS_C_SHIFT
 (25U)

	)

11533 
	#USBHSD_DEVCMDSTAT_DSUS_C
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_DEVCMDSTAT_DSUS_C_SHIFT
)Ë& 
USBHSD_DEVCMDSTAT_DSUS_C_MASK
)

	)

11534 
	#USBHSD_DEVCMDSTAT_DRES_C_MASK
 (0x4000000U)

	)

11535 
	#USBHSD_DEVCMDSTAT_DRES_C_SHIFT
 (26U)

	)

11536 
	#USBHSD_DEVCMDSTAT_DRES_C
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_DEVCMDSTAT_DRES_C_SHIFT
)Ë& 
USBHSD_DEVCMDSTAT_DRES_C_MASK
)

	)

11537 
	#USBHSD_DEVCMDSTAT_VBUS_DEBOUNCED_MASK
 (0x10000000U)

	)

11538 
	#USBHSD_DEVCMDSTAT_VBUS_DEBOUNCED_SHIFT
 (28U)

	)

11539 
	#USBHSD_DEVCMDSTAT_VBUS_DEBOUNCED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_DEVCMDSTAT_VBUS_DEBOUNCED_SHIFT
)Ë& 
USBHSD_DEVCMDSTAT_VBUS_DEBOUNCED_MASK
)

	)

11540 
	#USBHSD_DEVCMDSTAT_PHY_TEST_MODE_MASK
 (0xE0000000U)

	)

11541 
	#USBHSD_DEVCMDSTAT_PHY_TEST_MODE_SHIFT
 (29U)

	)

11542 
	#USBHSD_DEVCMDSTAT_PHY_TEST_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_DEVCMDSTAT_PHY_TEST_MODE_SHIFT
)Ë& 
USBHSD_DEVCMDSTAT_PHY_TEST_MODE_MASK
)

	)

11545 
	#USBHSD_INFO_FRAME_NR_MASK
 (0x7FFU)

	)

11546 
	#USBHSD_INFO_FRAME_NR_SHIFT
 (0U)

	)

11547 
	#USBHSD_INFO_FRAME_NR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INFO_FRAME_NR_SHIFT
)Ë& 
USBHSD_INFO_FRAME_NR_MASK
)

	)

11548 
	#USBHSD_INFO_ERR_CODE_MASK
 (0x7800U)

	)

11549 
	#USBHSD_INFO_ERR_CODE_SHIFT
 (11U)

	)

11550 
	#USBHSD_INFO_ERR_CODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INFO_ERR_CODE_SHIFT
)Ë& 
USBHSD_INFO_ERR_CODE_MASK
)

	)

11551 
	#USBHSD_INFO_Möªv_MASK
 (0xFF0000U)

	)

11552 
	#USBHSD_INFO_Möªv_SHIFT
 (16U)

	)

11553 
	#USBHSD_INFO_Möªv
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INFO_Möªv_SHIFT
)Ë& 
USBHSD_INFO_Möªv_MASK
)

	)

11554 
	#USBHSD_INFO_Majªv_MASK
 (0xFF000000U)

	)

11555 
	#USBHSD_INFO_Majªv_SHIFT
 (24U)

	)

11556 
	#USBHSD_INFO_Majªv
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INFO_Majªv_SHIFT
)Ë& 
USBHSD_INFO_Majªv_MASK
)

	)

11559 
	#USBHSD_EPLISTSTART_EP_LIST_PRG_MASK
 (0xFFF00U)

	)

11560 
	#USBHSD_EPLISTSTART_EP_LIST_PRG_SHIFT
 (8U)

	)

11561 
	#USBHSD_EPLISTSTART_EP_LIST_PRG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_EPLISTSTART_EP_LIST_PRG_SHIFT
)Ë& 
USBHSD_EPLISTSTART_EP_LIST_PRG_MASK
)

	)

11562 
	#USBHSD_EPLISTSTART_EP_LIST_FIXED_MASK
 (0xFFF00000U)

	)

11563 
	#USBHSD_EPLISTSTART_EP_LIST_FIXED_SHIFT
 (20U)

	)

11564 
	#USBHSD_EPLISTSTART_EP_LIST_FIXED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_EPLISTSTART_EP_LIST_FIXED_SHIFT
)Ë& 
USBHSD_EPLISTSTART_EP_LIST_FIXED_MASK
)

	)

11567 
	#USBHSD_DATABUFSTART_DA_BUF_MASK
 (0xFFFFFFFFU)

	)

11568 
	#USBHSD_DATABUFSTART_DA_BUF_SHIFT
 (0U)

	)

11569 
	#USBHSD_DATABUFSTART_DA_BUF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_DATABUFSTART_DA_BUF_SHIFT
)Ë& 
USBHSD_DATABUFSTART_DA_BUF_MASK
)

	)

11572 
	#USBHSD_LPM_HIRD_HW_MASK
 (0xFU)

	)

11573 
	#USBHSD_LPM_HIRD_HW_SHIFT
 (0U)

	)

11574 
	#USBHSD_LPM_HIRD_HW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_LPM_HIRD_HW_SHIFT
)Ë& 
USBHSD_LPM_HIRD_HW_MASK
)

	)

11575 
	#USBHSD_LPM_HIRD_SW_MASK
 (0xF0U)

	)

11576 
	#USBHSD_LPM_HIRD_SW_SHIFT
 (4U)

	)

11577 
	#USBHSD_LPM_HIRD_SW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_LPM_HIRD_SW_SHIFT
)Ë& 
USBHSD_LPM_HIRD_SW_MASK
)

	)

11578 
	#USBHSD_LPM_DATA_PENDING_MASK
 (0x100U)

	)

11579 
	#USBHSD_LPM_DATA_PENDING_SHIFT
 (8U)

	)

11580 
	#USBHSD_LPM_DATA_PENDING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_LPM_DATA_PENDING_SHIFT
)Ë& 
USBHSD_LPM_DATA_PENDING_MASK
)

	)

11583 
	#USBHSD_EPSKIP_SKIP_MASK
 (0xFFFU)

	)

11584 
	#USBHSD_EPSKIP_SKIP_SHIFT
 (0U)

	)

11585 
	#USBHSD_EPSKIP_SKIP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_EPSKIP_SKIP_SHIFT
)Ë& 
USBHSD_EPSKIP_SKIP_MASK
)

	)

11588 
	#USBHSD_EPINUSE_BUF_MASK
 (0xFFCU)

	)

11589 
	#USBHSD_EPINUSE_BUF_SHIFT
 (2U)

	)

11590 
	#USBHSD_EPINUSE_BUF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_EPINUSE_BUF_SHIFT
)Ë& 
USBHSD_EPINUSE_BUF_MASK
)

	)

11593 
	#USBHSD_EPBUFCFG_BUF_SB_MASK
 (0xFFCU)

	)

11594 
	#USBHSD_EPBUFCFG_BUF_SB_SHIFT
 (2U)

	)

11595 
	#USBHSD_EPBUFCFG_BUF_SB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_EPBUFCFG_BUF_SB_SHIFT
)Ë& 
USBHSD_EPBUFCFG_BUF_SB_MASK
)

	)

11598 
	#USBHSD_INTSTAT_EP0OUT_MASK
 (0x1U)

	)

11599 
	#USBHSD_INTSTAT_EP0OUT_SHIFT
 (0U)

	)

11600 
	#USBHSD_INTSTAT_EP0OUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INTSTAT_EP0OUT_SHIFT
)Ë& 
USBHSD_INTSTAT_EP0OUT_MASK
)

	)

11601 
	#USBHSD_INTSTAT_EP0IN_MASK
 (0x2U)

	)

11602 
	#USBHSD_INTSTAT_EP0IN_SHIFT
 (1U)

	)

11603 
	#USBHSD_INTSTAT_EP0IN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INTSTAT_EP0IN_SHIFT
)Ë& 
USBHSD_INTSTAT_EP0IN_MASK
)

	)

11604 
	#USBHSD_INTSTAT_EP1OUT_MASK
 (0x4U)

	)

11605 
	#USBHSD_INTSTAT_EP1OUT_SHIFT
 (2U)

	)

11606 
	#USBHSD_INTSTAT_EP1OUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INTSTAT_EP1OUT_SHIFT
)Ë& 
USBHSD_INTSTAT_EP1OUT_MASK
)

	)

11607 
	#USBHSD_INTSTAT_EP1IN_MASK
 (0x8U)

	)

11608 
	#USBHSD_INTSTAT_EP1IN_SHIFT
 (3U)

	)

11609 
	#USBHSD_INTSTAT_EP1IN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INTSTAT_EP1IN_SHIFT
)Ë& 
USBHSD_INTSTAT_EP1IN_MASK
)

	)

11610 
	#USBHSD_INTSTAT_EP2OUT_MASK
 (0x10U)

	)

11611 
	#USBHSD_INTSTAT_EP2OUT_SHIFT
 (4U)

	)

11612 
	#USBHSD_INTSTAT_EP2OUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INTSTAT_EP2OUT_SHIFT
)Ë& 
USBHSD_INTSTAT_EP2OUT_MASK
)

	)

11613 
	#USBHSD_INTSTAT_EP2IN_MASK
 (0x20U)

	)

11614 
	#USBHSD_INTSTAT_EP2IN_SHIFT
 (5U)

	)

11615 
	#USBHSD_INTSTAT_EP2IN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INTSTAT_EP2IN_SHIFT
)Ë& 
USBHSD_INTSTAT_EP2IN_MASK
)

	)

11616 
	#USBHSD_INTSTAT_EP3OUT_MASK
 (0x40U)

	)

11617 
	#USBHSD_INTSTAT_EP3OUT_SHIFT
 (6U)

	)

11618 
	#USBHSD_INTSTAT_EP3OUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INTSTAT_EP3OUT_SHIFT
)Ë& 
USBHSD_INTSTAT_EP3OUT_MASK
)

	)

11619 
	#USBHSD_INTSTAT_EP3IN_MASK
 (0x80U)

	)

11620 
	#USBHSD_INTSTAT_EP3IN_SHIFT
 (7U)

	)

11621 
	#USBHSD_INTSTAT_EP3IN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INTSTAT_EP3IN_SHIFT
)Ë& 
USBHSD_INTSTAT_EP3IN_MASK
)

	)

11622 
	#USBHSD_INTSTAT_EP4OUT_MASK
 (0x100U)

	)

11623 
	#USBHSD_INTSTAT_EP4OUT_SHIFT
 (8U)

	)

11624 
	#USBHSD_INTSTAT_EP4OUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INTSTAT_EP4OUT_SHIFT
)Ë& 
USBHSD_INTSTAT_EP4OUT_MASK
)

	)

11625 
	#USBHSD_INTSTAT_EP4IN_MASK
 (0x200U)

	)

11626 
	#USBHSD_INTSTAT_EP4IN_SHIFT
 (9U)

	)

11627 
	#USBHSD_INTSTAT_EP4IN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INTSTAT_EP4IN_SHIFT
)Ë& 
USBHSD_INTSTAT_EP4IN_MASK
)

	)

11628 
	#USBHSD_INTSTAT_EP5OUT_MASK
 (0x400U)

	)

11629 
	#USBHSD_INTSTAT_EP5OUT_SHIFT
 (10U)

	)

11630 
	#USBHSD_INTSTAT_EP5OUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INTSTAT_EP5OUT_SHIFT
)Ë& 
USBHSD_INTSTAT_EP5OUT_MASK
)

	)

11631 
	#USBHSD_INTSTAT_EP5IN_MASK
 (0x800U)

	)

11632 
	#USBHSD_INTSTAT_EP5IN_SHIFT
 (11U)

	)

11633 
	#USBHSD_INTSTAT_EP5IN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INTSTAT_EP5IN_SHIFT
)Ë& 
USBHSD_INTSTAT_EP5IN_MASK
)

	)

11634 
	#USBHSD_INTSTAT_FRAME_INT_MASK
 (0x40000000U)

	)

11635 
	#USBHSD_INTSTAT_FRAME_INT_SHIFT
 (30U)

	)

11636 
	#USBHSD_INTSTAT_FRAME_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INTSTAT_FRAME_INT_SHIFT
)Ë& 
USBHSD_INTSTAT_FRAME_INT_MASK
)

	)

11637 
	#USBHSD_INTSTAT_DEV_INT_MASK
 (0x80000000U)

	)

11638 
	#USBHSD_INTSTAT_DEV_INT_SHIFT
 (31U)

	)

11639 
	#USBHSD_INTSTAT_DEV_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INTSTAT_DEV_INT_SHIFT
)Ë& 
USBHSD_INTSTAT_DEV_INT_MASK
)

	)

11642 
	#USBHSD_INTEN_EP_INT_EN_MASK
 (0xFFFU)

	)

11643 
	#USBHSD_INTEN_EP_INT_EN_SHIFT
 (0U)

	)

11644 
	#USBHSD_INTEN_EP_INT_EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INTEN_EP_INT_EN_SHIFT
)Ë& 
USBHSD_INTEN_EP_INT_EN_MASK
)

	)

11645 
	#USBHSD_INTEN_FRAME_INT_EN_MASK
 (0x40000000U)

	)

11646 
	#USBHSD_INTEN_FRAME_INT_EN_SHIFT
 (30U)

	)

11647 
	#USBHSD_INTEN_FRAME_INT_EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INTEN_FRAME_INT_EN_SHIFT
)Ë& 
USBHSD_INTEN_FRAME_INT_EN_MASK
)

	)

11648 
	#USBHSD_INTEN_DEV_INT_EN_MASK
 (0x80000000U)

	)

11649 
	#USBHSD_INTEN_DEV_INT_EN_SHIFT
 (31U)

	)

11650 
	#USBHSD_INTEN_DEV_INT_EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INTEN_DEV_INT_EN_SHIFT
)Ë& 
USBHSD_INTEN_DEV_INT_EN_MASK
)

	)

11653 
	#USBHSD_INTSETSTAT_EP_SET_INT_MASK
 (0xFFFU)

	)

11654 
	#USBHSD_INTSETSTAT_EP_SET_INT_SHIFT
 (0U)

	)

11655 
	#USBHSD_INTSETSTAT_EP_SET_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INTSETSTAT_EP_SET_INT_SHIFT
)Ë& 
USBHSD_INTSETSTAT_EP_SET_INT_MASK
)

	)

11656 
	#USBHSD_INTSETSTAT_FRAME_SET_INT_MASK
 (0x40000000U)

	)

11657 
	#USBHSD_INTSETSTAT_FRAME_SET_INT_SHIFT
 (30U)

	)

11658 
	#USBHSD_INTSETSTAT_FRAME_SET_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INTSETSTAT_FRAME_SET_INT_SHIFT
)Ë& 
USBHSD_INTSETSTAT_FRAME_SET_INT_MASK
)

	)

11659 
	#USBHSD_INTSETSTAT_DEV_SET_INT_MASK
 (0x80000000U)

	)

11660 
	#USBHSD_INTSETSTAT_DEV_SET_INT_SHIFT
 (31U)

	)

11661 
	#USBHSD_INTSETSTAT_DEV_SET_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_INTSETSTAT_DEV_SET_INT_SHIFT
)Ë& 
USBHSD_INTSETSTAT_DEV_SET_INT_MASK
)

	)

11664 
	#USBHSD_EPTOGGLE_TOGGLE_MASK
 (0x3FFFFFFFU)

	)

11665 
	#USBHSD_EPTOGGLE_TOGGLE_SHIFT
 (0U)

	)

11666 
	#USBHSD_EPTOGGLE_TOGGLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_EPTOGGLE_TOGGLE_SHIFT
)Ë& 
USBHSD_EPTOGGLE_TOGGLE_MASK
)

	)

11669 
	#USBHSD_ULPIDEBUG_PHY_ADDR_MASK
 (0xFFU)

	)

11670 
	#USBHSD_ULPIDEBUG_PHY_ADDR_SHIFT
 (0U)

	)

11671 
	#USBHSD_ULPIDEBUG_PHY_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_ULPIDEBUG_PHY_ADDR_SHIFT
)Ë& 
USBHSD_ULPIDEBUG_PHY_ADDR_MASK
)

	)

11672 
	#USBHSD_ULPIDEBUG_PHY_WDATA_MASK
 (0xFF00U)

	)

11673 
	#USBHSD_ULPIDEBUG_PHY_WDATA_SHIFT
 (8U)

	)

11674 
	#USBHSD_ULPIDEBUG_PHY_WDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_ULPIDEBUG_PHY_WDATA_SHIFT
)Ë& 
USBHSD_ULPIDEBUG_PHY_WDATA_MASK
)

	)

11675 
	#USBHSD_ULPIDEBUG_PHY_RDATA_MASK
 (0xFF0000U)

	)

11676 
	#USBHSD_ULPIDEBUG_PHY_RDATA_SHIFT
 (16U)

	)

11677 
	#USBHSD_ULPIDEBUG_PHY_RDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_ULPIDEBUG_PHY_RDATA_SHIFT
)Ë& 
USBHSD_ULPIDEBUG_PHY_RDATA_MASK
)

	)

11678 
	#USBHSD_ULPIDEBUG_PHY_RW_MASK
 (0x1000000U)

	)

11679 
	#USBHSD_ULPIDEBUG_PHY_RW_SHIFT
 (24U)

	)

11680 
	#USBHSD_ULPIDEBUG_PHY_RW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_ULPIDEBUG_PHY_RW_SHIFT
)Ë& 
USBHSD_ULPIDEBUG_PHY_RW_MASK
)

	)

11681 
	#USBHSD_ULPIDEBUG_PHY_ACCESS_MASK
 (0x2000000U)

	)

11682 
	#USBHSD_ULPIDEBUG_PHY_ACCESS_SHIFT
 (25U)

	)

11683 
	#USBHSD_ULPIDEBUG_PHY_ACCESS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_ULPIDEBUG_PHY_ACCESS_SHIFT
)Ë& 
USBHSD_ULPIDEBUG_PHY_ACCESS_MASK
)

	)

11684 
	#USBHSD_ULPIDEBUG_PHY_MODE_MASK
 (0x80000000U)

	)

11685 
	#USBHSD_ULPIDEBUG_PHY_MODE_SHIFT
 (31U)

	)

11686 
	#USBHSD_ULPIDEBUG_PHY_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSD_ULPIDEBUG_PHY_MODE_SHIFT
)Ë& 
USBHSD_ULPIDEBUG_PHY_MODE_MASK
)

	)

11696 
	#USBHSD_BASE
 (0x40094000u)

	)

11698 
	#USBHSD
 ((
USBHSD_Ty≥
 *)
USBHSD_BASE
)

	)

11700 
	#USBHSD_BASE_ADDRS
 { 
USBHSD_BASE
 }

	)

11702 
	#USBHSD_BASE_PTRS
 { 
USBHSD
 }

	)

11704 
	#USBHSD_IRQS
 { 
USB1_IRQn
 }

	)

11705 
	#USBHSD_NEEDCLK_IRQS
 { 
USB1_NEEDCLK_IRQn
 }

	)

11723 
__I
 
uöt32_t
 
	mCAPLENGTH_CHIPID
;

11724 
__I
 
uöt32_t
 
	mHCSPARAMS
;

11725 
__I
 
uöt32_t
 
	mHCCPARAMS
;

11726 
__IO
 
uöt32_t
 
	mFLADJ_FRINDEX
;

11727 
__IO
 
uöt32_t
 
	mATL_PTD_BASE_ADDR
;

11728 
__IO
 
uöt32_t
 
	mISO_PTD_BASE_ADDR
;

11729 
__IO
 
uöt32_t
 
	mINT_PTD_BASE_ADDR
;

11730 
__IO
 
uöt32_t
 
	mDATA_PAYLOAD_BASE_ADDR
;

11731 
__IO
 
uöt32_t
 
	mUSBCMD
;

11732 
__IO
 
uöt32_t
 
	mUSBSTS
;

11733 
__IO
 
uöt32_t
 
	mUSBINTR
;

11734 
__IO
 
uöt32_t
 
	mPORTSC1
;

11735 
__IO
 
uöt32_t
 
	mATL_PTD_DONE_MAP
;

11736 
__IO
 
uöt32_t
 
	mATL_PTD_SKIP_MAP
;

11737 
__IO
 
uöt32_t
 
	mISO_PTD_DONE_MAP
;

11738 
__IO
 
uöt32_t
 
	mISO_PTD_SKIP_MAP
;

11739 
__IO
 
uöt32_t
 
	mINT_PTD_DONE_MAP
;

11740 
__IO
 
uöt32_t
 
	mINT_PTD_SKIP_MAP
;

11741 
__IO
 
uöt32_t
 
	mLAST_PTD_INUSE
;

11742 
__IO
 
uöt32_t
 
	mUTMIPLUS_ULPI_DEBUG
;

11743 
__IO
 
uöt32_t
 
	mPORTMODE
;

11744 } 
	tUSBHSH_Ty≥
;

11756 
	#USBHSH_CAPLENGTH_CHIPID_CAPLENGTH_MASK
 (0xFFU)

	)

11757 
	#USBHSH_CAPLENGTH_CHIPID_CAPLENGTH_SHIFT
 (0U)

	)

11758 
	#USBHSH_CAPLENGTH_CHIPID_CAPLENGTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_CAPLENGTH_CHIPID_CAPLENGTH_SHIFT
)Ë& 
USBHSH_CAPLENGTH_CHIPID_CAPLENGTH_MASK
)

	)

11759 
	#USBHSH_CAPLENGTH_CHIPID_CHIPID_MASK
 (0xFFFF0000U)

	)

11760 
	#USBHSH_CAPLENGTH_CHIPID_CHIPID_SHIFT
 (16U)

	)

11761 
	#USBHSH_CAPLENGTH_CHIPID_CHIPID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_CAPLENGTH_CHIPID_CHIPID_SHIFT
)Ë& 
USBHSH_CAPLENGTH_CHIPID_CHIPID_MASK
)

	)

11764 
	#USBHSH_HCSPARAMS_N_PORTS_MASK
 (0xFU)

	)

11765 
	#USBHSH_HCSPARAMS_N_PORTS_SHIFT
 (0U)

	)

11766 
	#USBHSH_HCSPARAMS_N_PORTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_HCSPARAMS_N_PORTS_SHIFT
)Ë& 
USBHSH_HCSPARAMS_N_PORTS_MASK
)

	)

11767 
	#USBHSH_HCSPARAMS_PPC_MASK
 (0x10U)

	)

11768 
	#USBHSH_HCSPARAMS_PPC_SHIFT
 (4U)

	)

11769 
	#USBHSH_HCSPARAMS_PPC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_HCSPARAMS_PPC_SHIFT
)Ë& 
USBHSH_HCSPARAMS_PPC_MASK
)

	)

11770 
	#USBHSH_HCSPARAMS_P_INDICATOR_MASK
 (0x10000U)

	)

11771 
	#USBHSH_HCSPARAMS_P_INDICATOR_SHIFT
 (16U)

	)

11772 
	#USBHSH_HCSPARAMS_P_INDICATOR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_HCSPARAMS_P_INDICATOR_SHIFT
)Ë& 
USBHSH_HCSPARAMS_P_INDICATOR_MASK
)

	)

11775 
	#USBHSH_HCCPARAMS_LPMC_MASK
 (0x20000U)

	)

11776 
	#USBHSH_HCCPARAMS_LPMC_SHIFT
 (17U)

	)

11777 
	#USBHSH_HCCPARAMS_LPMC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_HCCPARAMS_LPMC_SHIFT
)Ë& 
USBHSH_HCCPARAMS_LPMC_MASK
)

	)

11780 
	#USBHSH_FLADJ_FRINDEX_FLADJ_MASK
 (0x3FU)

	)

11781 
	#USBHSH_FLADJ_FRINDEX_FLADJ_SHIFT
 (0U)

	)

11782 
	#USBHSH_FLADJ_FRINDEX_FLADJ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_FLADJ_FRINDEX_FLADJ_SHIFT
)Ë& 
USBHSH_FLADJ_FRINDEX_FLADJ_MASK
)

	)

11783 
	#USBHSH_FLADJ_FRINDEX_FRINDEX_MASK
 (0x3FFF0000U)

	)

11784 
	#USBHSH_FLADJ_FRINDEX_FRINDEX_SHIFT
 (16U)

	)

11785 
	#USBHSH_FLADJ_FRINDEX_FRINDEX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_FLADJ_FRINDEX_FRINDEX_SHIFT
)Ë& 
USBHSH_FLADJ_FRINDEX_FRINDEX_MASK
)

	)

11788 
	#USBHSH_ATL_PTD_BASE_ADDR_ATL_CUR_MASK
 (0x1F0U)

	)

11789 
	#USBHSH_ATL_PTD_BASE_ADDR_ATL_CUR_SHIFT
 (4U)

	)

11790 
	#USBHSH_ATL_PTD_BASE_ADDR_ATL_CUR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_ATL_PTD_BASE_ADDR_ATL_CUR_SHIFT
)Ë& 
USBHSH_ATL_PTD_BASE_ADDR_ATL_CUR_MASK
)

	)

11791 
	#USBHSH_ATL_PTD_BASE_ADDR_ATL_BASE_MASK
 (0xFFFFFE00U)

	)

11792 
	#USBHSH_ATL_PTD_BASE_ADDR_ATL_BASE_SHIFT
 (9U)

	)

11793 
	#USBHSH_ATL_PTD_BASE_ADDR_ATL_BASE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_ATL_PTD_BASE_ADDR_ATL_BASE_SHIFT
)Ë& 
USBHSH_ATL_PTD_BASE_ADDR_ATL_BASE_MASK
)

	)

11796 
	#USBHSH_ISO_PTD_BASE_ADDR_ISO_FIRST_MASK
 (0x3E0U)

	)

11797 
	#USBHSH_ISO_PTD_BASE_ADDR_ISO_FIRST_SHIFT
 (5U)

	)

11798 
	#USBHSH_ISO_PTD_BASE_ADDR_ISO_FIRST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_ISO_PTD_BASE_ADDR_ISO_FIRST_SHIFT
)Ë& 
USBHSH_ISO_PTD_BASE_ADDR_ISO_FIRST_MASK
)

	)

11799 
	#USBHSH_ISO_PTD_BASE_ADDR_ISO_BASE_MASK
 (0xFFFFFC00U)

	)

11800 
	#USBHSH_ISO_PTD_BASE_ADDR_ISO_BASE_SHIFT
 (10U)

	)

11801 
	#USBHSH_ISO_PTD_BASE_ADDR_ISO_BASE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_ISO_PTD_BASE_ADDR_ISO_BASE_SHIFT
)Ë& 
USBHSH_ISO_PTD_BASE_ADDR_ISO_BASE_MASK
)

	)

11804 
	#USBHSH_INT_PTD_BASE_ADDR_INT_FIRST_MASK
 (0x3E0U)

	)

11805 
	#USBHSH_INT_PTD_BASE_ADDR_INT_FIRST_SHIFT
 (5U)

	)

11806 
	#USBHSH_INT_PTD_BASE_ADDR_INT_FIRST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_INT_PTD_BASE_ADDR_INT_FIRST_SHIFT
)Ë& 
USBHSH_INT_PTD_BASE_ADDR_INT_FIRST_MASK
)

	)

11807 
	#USBHSH_INT_PTD_BASE_ADDR_INT_BASE_MASK
 (0xFFFFFC00U)

	)

11808 
	#USBHSH_INT_PTD_BASE_ADDR_INT_BASE_SHIFT
 (10U)

	)

11809 
	#USBHSH_INT_PTD_BASE_ADDR_INT_BASE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_INT_PTD_BASE_ADDR_INT_BASE_SHIFT
)Ë& 
USBHSH_INT_PTD_BASE_ADDR_INT_BASE_MASK
)

	)

11812 
	#USBHSH_DATA_PAYLOAD_BASE_ADDR_DAT_BASE_MASK
 (0xFFFF0000U)

	)

11813 
	#USBHSH_DATA_PAYLOAD_BASE_ADDR_DAT_BASE_SHIFT
 (16U)

	)

11814 
	#USBHSH_DATA_PAYLOAD_BASE_ADDR_DAT_BASE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_DATA_PAYLOAD_BASE_ADDR_DAT_BASE_SHIFT
)Ë& 
USBHSH_DATA_PAYLOAD_BASE_ADDR_DAT_BASE_MASK
)

	)

11817 
	#USBHSH_USBCMD_RS_MASK
 (0x1U)

	)

11818 
	#USBHSH_USBCMD_RS_SHIFT
 (0U)

	)

11819 
	#USBHSH_USBCMD_RS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_USBCMD_RS_SHIFT
)Ë& 
USBHSH_USBCMD_RS_MASK
)

	)

11820 
	#USBHSH_USBCMD_HCRESET_MASK
 (0x2U)

	)

11821 
	#USBHSH_USBCMD_HCRESET_SHIFT
 (1U)

	)

11822 
	#USBHSH_USBCMD_HCRESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_USBCMD_HCRESET_SHIFT
)Ë& 
USBHSH_USBCMD_HCRESET_MASK
)

	)

11823 
	#USBHSH_USBCMD_FLS_MASK
 (0xCU)

	)

11824 
	#USBHSH_USBCMD_FLS_SHIFT
 (2U)

	)

11825 
	#USBHSH_USBCMD_FLS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_USBCMD_FLS_SHIFT
)Ë& 
USBHSH_USBCMD_FLS_MASK
)

	)

11826 
	#USBHSH_USBCMD_LHCR_MASK
 (0x80U)

	)

11827 
	#USBHSH_USBCMD_LHCR_SHIFT
 (7U)

	)

11828 
	#USBHSH_USBCMD_LHCR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_USBCMD_LHCR_SHIFT
)Ë& 
USBHSH_USBCMD_LHCR_MASK
)

	)

11829 
	#USBHSH_USBCMD_ATL_EN_MASK
 (0x100U)

	)

11830 
	#USBHSH_USBCMD_ATL_EN_SHIFT
 (8U)

	)

11831 
	#USBHSH_USBCMD_ATL_EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_USBCMD_ATL_EN_SHIFT
)Ë& 
USBHSH_USBCMD_ATL_EN_MASK
)

	)

11832 
	#USBHSH_USBCMD_ISO_EN_MASK
 (0x200U)

	)

11833 
	#USBHSH_USBCMD_ISO_EN_SHIFT
 (9U)

	)

11834 
	#USBHSH_USBCMD_ISO_EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_USBCMD_ISO_EN_SHIFT
)Ë& 
USBHSH_USBCMD_ISO_EN_MASK
)

	)

11835 
	#USBHSH_USBCMD_INT_EN_MASK
 (0x400U)

	)

11836 
	#USBHSH_USBCMD_INT_EN_SHIFT
 (10U)

	)

11837 
	#USBHSH_USBCMD_INT_EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_USBCMD_INT_EN_SHIFT
)Ë& 
USBHSH_USBCMD_INT_EN_MASK
)

	)

11838 
	#USBHSH_USBCMD_HIRD_MASK
 (0xF000000U)

	)

11839 
	#USBHSH_USBCMD_HIRD_SHIFT
 (24U)

	)

11840 
	#USBHSH_USBCMD_HIRD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_USBCMD_HIRD_SHIFT
)Ë& 
USBHSH_USBCMD_HIRD_MASK
)

	)

11841 
	#USBHSH_USBCMD_LPM_RWU_MASK
 (0x10000000U)

	)

11842 
	#USBHSH_USBCMD_LPM_RWU_SHIFT
 (28U)

	)

11843 
	#USBHSH_USBCMD_LPM_RWU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_USBCMD_LPM_RWU_SHIFT
)Ë& 
USBHSH_USBCMD_LPM_RWU_MASK
)

	)

11846 
	#USBHSH_USBSTS_PCD_MASK
 (0x4U)

	)

11847 
	#USBHSH_USBSTS_PCD_SHIFT
 (2U)

	)

11848 
	#USBHSH_USBSTS_PCD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_USBSTS_PCD_SHIFT
)Ë& 
USBHSH_USBSTS_PCD_MASK
)

	)

11849 
	#USBHSH_USBSTS_FLR_MASK
 (0x8U)

	)

11850 
	#USBHSH_USBSTS_FLR_SHIFT
 (3U)

	)

11851 
	#USBHSH_USBSTS_FLR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_USBSTS_FLR_SHIFT
)Ë& 
USBHSH_USBSTS_FLR_MASK
)

	)

11852 
	#USBHSH_USBSTS_ATL_IRQ_MASK
 (0x10000U)

	)

11853 
	#USBHSH_USBSTS_ATL_IRQ_SHIFT
 (16U)

	)

11854 
	#USBHSH_USBSTS_ATL_IRQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_USBSTS_ATL_IRQ_SHIFT
)Ë& 
USBHSH_USBSTS_ATL_IRQ_MASK
)

	)

11855 
	#USBHSH_USBSTS_ISO_IRQ_MASK
 (0x20000U)

	)

11856 
	#USBHSH_USBSTS_ISO_IRQ_SHIFT
 (17U)

	)

11857 
	#USBHSH_USBSTS_ISO_IRQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_USBSTS_ISO_IRQ_SHIFT
)Ë& 
USBHSH_USBSTS_ISO_IRQ_MASK
)

	)

11858 
	#USBHSH_USBSTS_INT_IRQ_MASK
 (0x40000U)

	)

11859 
	#USBHSH_USBSTS_INT_IRQ_SHIFT
 (18U)

	)

11860 
	#USBHSH_USBSTS_INT_IRQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_USBSTS_INT_IRQ_SHIFT
)Ë& 
USBHSH_USBSTS_INT_IRQ_MASK
)

	)

11861 
	#USBHSH_USBSTS_SOF_IRQ_MASK
 (0x80000U)

	)

11862 
	#USBHSH_USBSTS_SOF_IRQ_SHIFT
 (19U)

	)

11863 
	#USBHSH_USBSTS_SOF_IRQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_USBSTS_SOF_IRQ_SHIFT
)Ë& 
USBHSH_USBSTS_SOF_IRQ_MASK
)

	)

11866 
	#USBHSH_USBINTR_PCDE_MASK
 (0x4U)

	)

11867 
	#USBHSH_USBINTR_PCDE_SHIFT
 (2U)

	)

11868 
	#USBHSH_USBINTR_PCDE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_USBINTR_PCDE_SHIFT
)Ë& 
USBHSH_USBINTR_PCDE_MASK
)

	)

11869 
	#USBHSH_USBINTR_FLRE_MASK
 (0x8U)

	)

11870 
	#USBHSH_USBINTR_FLRE_SHIFT
 (3U)

	)

11871 
	#USBHSH_USBINTR_FLRE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_USBINTR_FLRE_SHIFT
)Ë& 
USBHSH_USBINTR_FLRE_MASK
)

	)

11872 
	#USBHSH_USBINTR_ATL_IRQ_E_MASK
 (0x10000U)

	)

11873 
	#USBHSH_USBINTR_ATL_IRQ_E_SHIFT
 (16U)

	)

11874 
	#USBHSH_USBINTR_ATL_IRQ_E
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_USBINTR_ATL_IRQ_E_SHIFT
)Ë& 
USBHSH_USBINTR_ATL_IRQ_E_MASK
)

	)

11875 
	#USBHSH_USBINTR_ISO_IRQ_E_MASK
 (0x20000U)

	)

11876 
	#USBHSH_USBINTR_ISO_IRQ_E_SHIFT
 (17U)

	)

11877 
	#USBHSH_USBINTR_ISO_IRQ_E
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_USBINTR_ISO_IRQ_E_SHIFT
)Ë& 
USBHSH_USBINTR_ISO_IRQ_E_MASK
)

	)

11878 
	#USBHSH_USBINTR_INT_IRQ_E_MASK
 (0x40000U)

	)

11879 
	#USBHSH_USBINTR_INT_IRQ_E_SHIFT
 (18U)

	)

11880 
	#USBHSH_USBINTR_INT_IRQ_E
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_USBINTR_INT_IRQ_E_SHIFT
)Ë& 
USBHSH_USBINTR_INT_IRQ_E_MASK
)

	)

11881 
	#USBHSH_USBINTR_SOF_E_MASK
 (0x80000U)

	)

11882 
	#USBHSH_USBINTR_SOF_E_SHIFT
 (19U)

	)

11883 
	#USBHSH_USBINTR_SOF_E
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_USBINTR_SOF_E_SHIFT
)Ë& 
USBHSH_USBINTR_SOF_E_MASK
)

	)

11886 
	#USBHSH_PORTSC1_CCS_MASK
 (0x1U)

	)

11887 
	#USBHSH_PORTSC1_CCS_SHIFT
 (0U)

	)

11888 
	#USBHSH_PORTSC1_CCS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTSC1_CCS_SHIFT
)Ë& 
USBHSH_PORTSC1_CCS_MASK
)

	)

11889 
	#USBHSH_PORTSC1_CSC_MASK
 (0x2U)

	)

11890 
	#USBHSH_PORTSC1_CSC_SHIFT
 (1U)

	)

11891 
	#USBHSH_PORTSC1_CSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTSC1_CSC_SHIFT
)Ë& 
USBHSH_PORTSC1_CSC_MASK
)

	)

11892 
	#USBHSH_PORTSC1_PED_MASK
 (0x4U)

	)

11893 
	#USBHSH_PORTSC1_PED_SHIFT
 (2U)

	)

11894 
	#USBHSH_PORTSC1_PED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTSC1_PED_SHIFT
)Ë& 
USBHSH_PORTSC1_PED_MASK
)

	)

11895 
	#USBHSH_PORTSC1_PEDC_MASK
 (0x8U)

	)

11896 
	#USBHSH_PORTSC1_PEDC_SHIFT
 (3U)

	)

11897 
	#USBHSH_PORTSC1_PEDC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTSC1_PEDC_SHIFT
)Ë& 
USBHSH_PORTSC1_PEDC_MASK
)

	)

11898 
	#USBHSH_PORTSC1_OCA_MASK
 (0x10U)

	)

11899 
	#USBHSH_PORTSC1_OCA_SHIFT
 (4U)

	)

11900 
	#USBHSH_PORTSC1_OCA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTSC1_OCA_SHIFT
)Ë& 
USBHSH_PORTSC1_OCA_MASK
)

	)

11901 
	#USBHSH_PORTSC1_OCC_MASK
 (0x20U)

	)

11902 
	#USBHSH_PORTSC1_OCC_SHIFT
 (5U)

	)

11903 
	#USBHSH_PORTSC1_OCC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTSC1_OCC_SHIFT
)Ë& 
USBHSH_PORTSC1_OCC_MASK
)

	)

11904 
	#USBHSH_PORTSC1_FPR_MASK
 (0x40U)

	)

11905 
	#USBHSH_PORTSC1_FPR_SHIFT
 (6U)

	)

11906 
	#USBHSH_PORTSC1_FPR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTSC1_FPR_SHIFT
)Ë& 
USBHSH_PORTSC1_FPR_MASK
)

	)

11907 
	#USBHSH_PORTSC1_SUSP_MASK
 (0x80U)

	)

11908 
	#USBHSH_PORTSC1_SUSP_SHIFT
 (7U)

	)

11909 
	#USBHSH_PORTSC1_SUSP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTSC1_SUSP_SHIFT
)Ë& 
USBHSH_PORTSC1_SUSP_MASK
)

	)

11910 
	#USBHSH_PORTSC1_PR_MASK
 (0x100U)

	)

11911 
	#USBHSH_PORTSC1_PR_SHIFT
 (8U)

	)

11912 
	#USBHSH_PORTSC1_PR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTSC1_PR_SHIFT
)Ë& 
USBHSH_PORTSC1_PR_MASK
)

	)

11913 
	#USBHSH_PORTSC1_SUS_L1_MASK
 (0x200U)

	)

11914 
	#USBHSH_PORTSC1_SUS_L1_SHIFT
 (9U)

	)

11915 
	#USBHSH_PORTSC1_SUS_L1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTSC1_SUS_L1_SHIFT
)Ë& 
USBHSH_PORTSC1_SUS_L1_MASK
)

	)

11916 
	#USBHSH_PORTSC1_LS_MASK
 (0xC00U)

	)

11917 
	#USBHSH_PORTSC1_LS_SHIFT
 (10U)

	)

11918 
	#USBHSH_PORTSC1_LS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTSC1_LS_SHIFT
)Ë& 
USBHSH_PORTSC1_LS_MASK
)

	)

11919 
	#USBHSH_PORTSC1_PP_MASK
 (0x1000U)

	)

11920 
	#USBHSH_PORTSC1_PP_SHIFT
 (12U)

	)

11921 
	#USBHSH_PORTSC1_PP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTSC1_PP_SHIFT
)Ë& 
USBHSH_PORTSC1_PP_MASK
)

	)

11922 
	#USBHSH_PORTSC1_PIC_MASK
 (0xC000U)

	)

11923 
	#USBHSH_PORTSC1_PIC_SHIFT
 (14U)

	)

11924 
	#USBHSH_PORTSC1_PIC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTSC1_PIC_SHIFT
)Ë& 
USBHSH_PORTSC1_PIC_MASK
)

	)

11925 
	#USBHSH_PORTSC1_PTC_MASK
 (0xF0000U)

	)

11926 
	#USBHSH_PORTSC1_PTC_SHIFT
 (16U)

	)

11927 
	#USBHSH_PORTSC1_PTC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTSC1_PTC_SHIFT
)Ë& 
USBHSH_PORTSC1_PTC_MASK
)

	)

11928 
	#USBHSH_PORTSC1_PSPD_MASK
 (0x300000U)

	)

11929 
	#USBHSH_PORTSC1_PSPD_SHIFT
 (20U)

	)

11930 
	#USBHSH_PORTSC1_PSPD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTSC1_PSPD_SHIFT
)Ë& 
USBHSH_PORTSC1_PSPD_MASK
)

	)

11931 
	#USBHSH_PORTSC1_WOO_MASK
 (0x400000U)

	)

11932 
	#USBHSH_PORTSC1_WOO_SHIFT
 (22U)

	)

11933 
	#USBHSH_PORTSC1_WOO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTSC1_WOO_SHIFT
)Ë& 
USBHSH_PORTSC1_WOO_MASK
)

	)

11934 
	#USBHSH_PORTSC1_SUS_STAT_MASK
 (0x1800000U)

	)

11935 
	#USBHSH_PORTSC1_SUS_STAT_SHIFT
 (23U)

	)

11936 
	#USBHSH_PORTSC1_SUS_STAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTSC1_SUS_STAT_SHIFT
)Ë& 
USBHSH_PORTSC1_SUS_STAT_MASK
)

	)

11937 
	#USBHSH_PORTSC1_DEV_ADD_MASK
 (0xFE000000U)

	)

11938 
	#USBHSH_PORTSC1_DEV_ADD_SHIFT
 (25U)

	)

11939 
	#USBHSH_PORTSC1_DEV_ADD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTSC1_DEV_ADD_SHIFT
)Ë& 
USBHSH_PORTSC1_DEV_ADD_MASK
)

	)

11942 
	#USBHSH_ATL_PTD_DONE_MAP_ATL_DONE_MASK
 (0xFFFFFFFFU)

	)

11943 
	#USBHSH_ATL_PTD_DONE_MAP_ATL_DONE_SHIFT
 (0U)

	)

11944 
	#USBHSH_ATL_PTD_DONE_MAP_ATL_DONE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_ATL_PTD_DONE_MAP_ATL_DONE_SHIFT
)Ë& 
USBHSH_ATL_PTD_DONE_MAP_ATL_DONE_MASK
)

	)

11947 
	#USBHSH_ATL_PTD_SKIP_MAP_ATL_SKIP_MASK
 (0xFFFFFFFFU)

	)

11948 
	#USBHSH_ATL_PTD_SKIP_MAP_ATL_SKIP_SHIFT
 (0U)

	)

11949 
	#USBHSH_ATL_PTD_SKIP_MAP_ATL_SKIP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_ATL_PTD_SKIP_MAP_ATL_SKIP_SHIFT
)Ë& 
USBHSH_ATL_PTD_SKIP_MAP_ATL_SKIP_MASK
)

	)

11952 
	#USBHSH_ISO_PTD_DONE_MAP_ISO_DONE_MASK
 (0xFFFFFFFFU)

	)

11953 
	#USBHSH_ISO_PTD_DONE_MAP_ISO_DONE_SHIFT
 (0U)

	)

11954 
	#USBHSH_ISO_PTD_DONE_MAP_ISO_DONE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_ISO_PTD_DONE_MAP_ISO_DONE_SHIFT
)Ë& 
USBHSH_ISO_PTD_DONE_MAP_ISO_DONE_MASK
)

	)

11957 
	#USBHSH_ISO_PTD_SKIP_MAP_ISO_SKIP_MASK
 (0xFFFFFFFFU)

	)

11958 
	#USBHSH_ISO_PTD_SKIP_MAP_ISO_SKIP_SHIFT
 (0U)

	)

11959 
	#USBHSH_ISO_PTD_SKIP_MAP_ISO_SKIP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_ISO_PTD_SKIP_MAP_ISO_SKIP_SHIFT
)Ë& 
USBHSH_ISO_PTD_SKIP_MAP_ISO_SKIP_MASK
)

	)

11962 
	#USBHSH_INT_PTD_DONE_MAP_INT_DONE_MASK
 (0xFFFFFFFFU)

	)

11963 
	#USBHSH_INT_PTD_DONE_MAP_INT_DONE_SHIFT
 (0U)

	)

11964 
	#USBHSH_INT_PTD_DONE_MAP_INT_DONE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_INT_PTD_DONE_MAP_INT_DONE_SHIFT
)Ë& 
USBHSH_INT_PTD_DONE_MAP_INT_DONE_MASK
)

	)

11967 
	#USBHSH_INT_PTD_SKIP_MAP_INT_SKIP_MASK
 (0xFFFFFFFFU)

	)

11968 
	#USBHSH_INT_PTD_SKIP_MAP_INT_SKIP_SHIFT
 (0U)

	)

11969 
	#USBHSH_INT_PTD_SKIP_MAP_INT_SKIP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_INT_PTD_SKIP_MAP_INT_SKIP_SHIFT
)Ë& 
USBHSH_INT_PTD_SKIP_MAP_INT_SKIP_MASK
)

	)

11972 
	#USBHSH_LAST_PTD_INUSE_ATL_LAST_MASK
 (0x1FU)

	)

11973 
	#USBHSH_LAST_PTD_INUSE_ATL_LAST_SHIFT
 (0U)

	)

11974 
	#USBHSH_LAST_PTD_INUSE_ATL_LAST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_LAST_PTD_INUSE_ATL_LAST_SHIFT
)Ë& 
USBHSH_LAST_PTD_INUSE_ATL_LAST_MASK
)

	)

11975 
	#USBHSH_LAST_PTD_INUSE_ISO_LAST_MASK
 (0x1F00U)

	)

11976 
	#USBHSH_LAST_PTD_INUSE_ISO_LAST_SHIFT
 (8U)

	)

11977 
	#USBHSH_LAST_PTD_INUSE_ISO_LAST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_LAST_PTD_INUSE_ISO_LAST_SHIFT
)Ë& 
USBHSH_LAST_PTD_INUSE_ISO_LAST_MASK
)

	)

11978 
	#USBHSH_LAST_PTD_INUSE_INT_LAST_MASK
 (0x1F0000U)

	)

11979 
	#USBHSH_LAST_PTD_INUSE_INT_LAST_SHIFT
 (16U)

	)

11980 
	#USBHSH_LAST_PTD_INUSE_INT_LAST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_LAST_PTD_INUSE_INT_LAST_SHIFT
)Ë& 
USBHSH_LAST_PTD_INUSE_INT_LAST_MASK
)

	)

11983 
	#USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_ADDR_MASK
 (0xFFU)

	)

11984 
	#USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_ADDR_SHIFT
 (0U)

	)

11985 
	#USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_ADDR_SHIFT
)Ë& 
USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_ADDR_MASK
)

	)

11986 
	#USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_WDATA_MASK
 (0xFF00U)

	)

11987 
	#USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_WDATA_SHIFT
 (8U)

	)

11988 
	#USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_WDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_WDATA_SHIFT
)Ë& 
USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_WDATA_MASK
)

	)

11989 
	#USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_RDATA_MASK
 (0xFF0000U)

	)

11990 
	#USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_RDATA_SHIFT
 (16U)

	)

11991 
	#USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_RDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_RDATA_SHIFT
)Ë& 
USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_RDATA_MASK
)

	)

11992 
	#USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_RW_MASK
 (0x1000000U)

	)

11993 
	#USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_RW_SHIFT
 (24U)

	)

11994 
	#USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_RW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_RW_SHIFT
)Ë& 
USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_RW_MASK
)

	)

11995 
	#USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_ACCESS_MASK
 (0x2000000U)

	)

11996 
	#USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_ACCESS_SHIFT
 (25U)

	)

11997 
	#USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_ACCESS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_ACCESS_SHIFT
)Ë& 
USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_ACCESS_MASK
)

	)

11998 
	#USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_MODE_MASK
 (0x80000000U)

	)

11999 
	#USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_MODE_SHIFT
 (31U)

	)

12000 
	#USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_MODE_SHIFT
)Ë& 
USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_MODE_MASK
)

	)

12003 
	#USBHSH_PORTMODE_ID0_MASK
 (0x1U)

	)

12004 
	#USBHSH_PORTMODE_ID0_SHIFT
 (0U)

	)

12005 
	#USBHSH_PORTMODE_ID0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTMODE_ID0_SHIFT
)Ë& 
USBHSH_PORTMODE_ID0_MASK
)

	)

12006 
	#USBHSH_PORTMODE_ID0_EN_MASK
 (0x100U)

	)

12007 
	#USBHSH_PORTMODE_ID0_EN_SHIFT
 (8U)

	)

12008 
	#USBHSH_PORTMODE_ID0_EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTMODE_ID0_EN_SHIFT
)Ë& 
USBHSH_PORTMODE_ID0_EN_MASK
)

	)

12009 
	#USBHSH_PORTMODE_DEV_ENABLE_MASK
 (0x10000U)

	)

12010 
	#USBHSH_PORTMODE_DEV_ENABLE_SHIFT
 (16U)

	)

12011 
	#USBHSH_PORTMODE_DEV_ENABLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTMODE_DEV_ENABLE_SHIFT
)Ë& 
USBHSH_PORTMODE_DEV_ENABLE_MASK
)

	)

12012 
	#USBHSH_PORTMODE_SW_CTRL_PDCOM_MASK
 (0x40000U)

	)

12013 
	#USBHSH_PORTMODE_SW_CTRL_PDCOM_SHIFT
 (18U)

	)

12014 
	#USBHSH_PORTMODE_SW_CTRL_PDCOM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTMODE_SW_CTRL_PDCOM_SHIFT
)Ë& 
USBHSH_PORTMODE_SW_CTRL_PDCOM_MASK
)

	)

12015 
	#USBHSH_PORTMODE_SW_PDCOM_MASK
 (0x80000U)

	)

12016 
	#USBHSH_PORTMODE_SW_PDCOM_SHIFT
 (19U)

	)

12017 
	#USBHSH_PORTMODE_SW_PDCOM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
USBHSH_PORTMODE_SW_PDCOM_SHIFT
)Ë& 
USBHSH_PORTMODE_SW_PDCOM_MASK
)

	)

12027 
	#USBHSH_BASE
 (0x400A3000u)

	)

12029 
	#USBHSH
 ((
USBHSH_Ty≥
 *)
USBHSH_BASE
)

	)

12031 
	#USBHSH_BASE_ADDRS
 { 
USBHSH_BASE
 }

	)

12033 
	#USBHSH_BASE_PTRS
 { 
USBHSH
 }

	)

12035 
	#USBHSH_IRQS
 { 
USB1_IRQn
 }

	)

12036 
	#USBHSH_NEEDCLK_IRQS
 { 
USB1_NEEDCLK_IRQn
 }

	)

12054 
__IO
 
uöt32_t
 
	mCTRL
;

12055 
__IO
 
uöt32_t
 
	mSTAT
;

12056 
__IO
 
uöt32_t
 
	mCFG
;

12057 
__O
 
uöt32_t
 
	mCAPCLR
;

12058 
__I
 
uöt32_t
 
	mCAP
[4];

12059 } 
	tUTICK_Ty≥
;

12071 
	#UTICK_CTRL_DELAYVAL_MASK
 (0x7FFFFFFFU)

	)

12072 
	#UTICK_CTRL_DELAYVAL_SHIFT
 (0U)

	)

12073 
	#UTICK_CTRL_DELAYVAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
UTICK_CTRL_DELAYVAL_SHIFT
)Ë& 
UTICK_CTRL_DELAYVAL_MASK
)

	)

12074 
	#UTICK_CTRL_REPEAT_MASK
 (0x80000000U)

	)

12075 
	#UTICK_CTRL_REPEAT_SHIFT
 (31U)

	)

12076 
	#UTICK_CTRL_REPEAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
UTICK_CTRL_REPEAT_SHIFT
)Ë& 
UTICK_CTRL_REPEAT_MASK
)

	)

12079 
	#UTICK_STAT_INTR_MASK
 (0x1U)

	)

12080 
	#UTICK_STAT_INTR_SHIFT
 (0U)

	)

12081 
	#UTICK_STAT_INTR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
UTICK_STAT_INTR_SHIFT
)Ë& 
UTICK_STAT_INTR_MASK
)

	)

12082 
	#UTICK_STAT_ACTIVE_MASK
 (0x2U)

	)

12083 
	#UTICK_STAT_ACTIVE_SHIFT
 (1U)

	)

12084 
	#UTICK_STAT_ACTIVE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
UTICK_STAT_ACTIVE_SHIFT
)Ë& 
UTICK_STAT_ACTIVE_MASK
)

	)

12087 
	#UTICK_CFG_CAPEN0_MASK
 (0x1U)

	)

12088 
	#UTICK_CFG_CAPEN0_SHIFT
 (0U)

	)

12089 
	#UTICK_CFG_CAPEN0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
UTICK_CFG_CAPEN0_SHIFT
)Ë& 
UTICK_CFG_CAPEN0_MASK
)

	)

12090 
	#UTICK_CFG_CAPEN1_MASK
 (0x2U)

	)

12091 
	#UTICK_CFG_CAPEN1_SHIFT
 (1U)

	)

12092 
	#UTICK_CFG_CAPEN1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
UTICK_CFG_CAPEN1_SHIFT
)Ë& 
UTICK_CFG_CAPEN1_MASK
)

	)

12093 
	#UTICK_CFG_CAPEN2_MASK
 (0x4U)

	)

12094 
	#UTICK_CFG_CAPEN2_SHIFT
 (2U)

	)

12095 
	#UTICK_CFG_CAPEN2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
UTICK_CFG_CAPEN2_SHIFT
)Ë& 
UTICK_CFG_CAPEN2_MASK
)

	)

12096 
	#UTICK_CFG_CAPEN3_MASK
 (0x8U)

	)

12097 
	#UTICK_CFG_CAPEN3_SHIFT
 (3U)

	)

12098 
	#UTICK_CFG_CAPEN3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
UTICK_CFG_CAPEN3_SHIFT
)Ë& 
UTICK_CFG_CAPEN3_MASK
)

	)

12099 
	#UTICK_CFG_CAPPOL0_MASK
 (0x100U)

	)

12100 
	#UTICK_CFG_CAPPOL0_SHIFT
 (8U)

	)

12101 
	#UTICK_CFG_CAPPOL0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
UTICK_CFG_CAPPOL0_SHIFT
)Ë& 
UTICK_CFG_CAPPOL0_MASK
)

	)

12102 
	#UTICK_CFG_CAPPOL1_MASK
 (0x200U)

	)

12103 
	#UTICK_CFG_CAPPOL1_SHIFT
 (9U)

	)

12104 
	#UTICK_CFG_CAPPOL1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
UTICK_CFG_CAPPOL1_SHIFT
)Ë& 
UTICK_CFG_CAPPOL1_MASK
)

	)

12105 
	#UTICK_CFG_CAPPOL2_MASK
 (0x400U)

	)

12106 
	#UTICK_CFG_CAPPOL2_SHIFT
 (10U)

	)

12107 
	#UTICK_CFG_CAPPOL2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
UTICK_CFG_CAPPOL2_SHIFT
)Ë& 
UTICK_CFG_CAPPOL2_MASK
)

	)

12108 
	#UTICK_CFG_CAPPOL3_MASK
 (0x800U)

	)

12109 
	#UTICK_CFG_CAPPOL3_SHIFT
 (11U)

	)

12110 
	#UTICK_CFG_CAPPOL3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
UTICK_CFG_CAPPOL3_SHIFT
)Ë& 
UTICK_CFG_CAPPOL3_MASK
)

	)

12113 
	#UTICK_CAPCLR_CAPCLR0_MASK
 (0x1U)

	)

12114 
	#UTICK_CAPCLR_CAPCLR0_SHIFT
 (0U)

	)

12115 
	#UTICK_CAPCLR_CAPCLR0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
UTICK_CAPCLR_CAPCLR0_SHIFT
)Ë& 
UTICK_CAPCLR_CAPCLR0_MASK
)

	)

12116 
	#UTICK_CAPCLR_CAPCLR1_MASK
 (0x2U)

	)

12117 
	#UTICK_CAPCLR_CAPCLR1_SHIFT
 (1U)

	)

12118 
	#UTICK_CAPCLR_CAPCLR1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
UTICK_CAPCLR_CAPCLR1_SHIFT
)Ë& 
UTICK_CAPCLR_CAPCLR1_MASK
)

	)

12119 
	#UTICK_CAPCLR_CAPCLR2_MASK
 (0x4U)

	)

12120 
	#UTICK_CAPCLR_CAPCLR2_SHIFT
 (2U)

	)

12121 
	#UTICK_CAPCLR_CAPCLR2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
UTICK_CAPCLR_CAPCLR2_SHIFT
)Ë& 
UTICK_CAPCLR_CAPCLR2_MASK
)

	)

12122 
	#UTICK_CAPCLR_CAPCLR3_MASK
 (0x8U)

	)

12123 
	#UTICK_CAPCLR_CAPCLR3_SHIFT
 (3U)

	)

12124 
	#UTICK_CAPCLR_CAPCLR3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
UTICK_CAPCLR_CAPCLR3_SHIFT
)Ë& 
UTICK_CAPCLR_CAPCLR3_MASK
)

	)

12127 
	#UTICK_CAP_CAP_VALUE_MASK
 (0x7FFFFFFFU)

	)

12128 
	#UTICK_CAP_CAP_VALUE_SHIFT
 (0U)

	)

12129 
	#UTICK_CAP_CAP_VALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
UTICK_CAP_CAP_VALUE_SHIFT
)Ë& 
UTICK_CAP_CAP_VALUE_MASK
)

	)

12130 
	#UTICK_CAP_VALID_MASK
 (0x80000000U)

	)

12131 
	#UTICK_CAP_VALID_SHIFT
 (31U)

	)

12132 
	#UTICK_CAP_VALID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
UTICK_CAP_VALID_SHIFT
)Ë& 
UTICK_CAP_VALID_MASK
)

	)

12135 
	#UTICK_CAP_COUNT
 (4U)

	)

12145 
	#UTICK0_BASE
 (0x4000E000u)

	)

12147 
	#UTICK0
 ((
UTICK_Ty≥
 *)
UTICK0_BASE
)

	)

12149 
	#UTICK_BASE_ADDRS
 { 
UTICK0_BASE
 }

	)

12151 
	#UTICK_BASE_PTRS
 { 
UTICK0
 }

	)

12153 
	#UTICK_IRQS
 { 
UTICK0_IRQn
 }

	)

12171 
__IO
 
uöt32_t
 
	mMOD
;

12172 
__IO
 
uöt32_t
 
	mTC
;

12173 
__O
 
uöt32_t
 
	mFEED
;

12174 
__I
 
uöt32_t
 
	mTV
;

12175 
uöt8_t
 
	mRESERVED_0
[4];

12176 
__IO
 
uöt32_t
 
	mWARNINT
;

12177 
__IO
 
uöt32_t
 
	mWINDOW
;

12178 } 
	tWWDT_Ty≥
;

12190 
	#WWDT_MOD_WDEN_MASK
 (0x1U)

	)

12191 
	#WWDT_MOD_WDEN_SHIFT
 (0U)

	)

12192 
	#WWDT_MOD_WDEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
WWDT_MOD_WDEN_SHIFT
)Ë& 
WWDT_MOD_WDEN_MASK
)

	)

12193 
	#WWDT_MOD_WDRESET_MASK
 (0x2U)

	)

12194 
	#WWDT_MOD_WDRESET_SHIFT
 (1U)

	)

12195 
	#WWDT_MOD_WDRESET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
WWDT_MOD_WDRESET_SHIFT
)Ë& 
WWDT_MOD_WDRESET_MASK
)

	)

12196 
	#WWDT_MOD_WDTOF_MASK
 (0x4U)

	)

12197 
	#WWDT_MOD_WDTOF_SHIFT
 (2U)

	)

12198 
	#WWDT_MOD_WDTOF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
WWDT_MOD_WDTOF_SHIFT
)Ë& 
WWDT_MOD_WDTOF_MASK
)

	)

12199 
	#WWDT_MOD_WDINT_MASK
 (0x8U)

	)

12200 
	#WWDT_MOD_WDINT_SHIFT
 (3U)

	)

12201 
	#WWDT_MOD_WDINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
WWDT_MOD_WDINT_SHIFT
)Ë& 
WWDT_MOD_WDINT_MASK
)

	)

12202 
	#WWDT_MOD_WDPROTECT_MASK
 (0x10U)

	)

12203 
	#WWDT_MOD_WDPROTECT_SHIFT
 (4U)

	)

12204 
	#WWDT_MOD_WDPROTECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
WWDT_MOD_WDPROTECT_SHIFT
)Ë& 
WWDT_MOD_WDPROTECT_MASK
)

	)

12205 
	#WWDT_MOD_LOCK_MASK
 (0x20U)

	)

12206 
	#WWDT_MOD_LOCK_SHIFT
 (5U)

	)

12207 
	#WWDT_MOD_LOCK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
WWDT_MOD_LOCK_SHIFT
)Ë& 
WWDT_MOD_LOCK_MASK
)

	)

12210 
	#WWDT_TC_COUNT_MASK
 (0xFFFFFFU)

	)

12211 
	#WWDT_TC_COUNT_SHIFT
 (0U)

	)

12212 
	#WWDT_TC_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
WWDT_TC_COUNT_SHIFT
)Ë& 
WWDT_TC_COUNT_MASK
)

	)

12215 
	#WWDT_FEED_FEED_MASK
 (0xFFU)

	)

12216 
	#WWDT_FEED_FEED_SHIFT
 (0U)

	)

12217 
	#WWDT_FEED_FEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
WWDT_FEED_FEED_SHIFT
)Ë& 
WWDT_FEED_FEED_MASK
)

	)

12220 
	#WWDT_TV_COUNT_MASK
 (0xFFFFFFU)

	)

12221 
	#WWDT_TV_COUNT_SHIFT
 (0U)

	)

12222 
	#WWDT_TV_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
WWDT_TV_COUNT_SHIFT
)Ë& 
WWDT_TV_COUNT_MASK
)

	)

12225 
	#WWDT_WARNINT_WARNINT_MASK
 (0x3FFU)

	)

12226 
	#WWDT_WARNINT_WARNINT_SHIFT
 (0U)

	)

12227 
	#WWDT_WARNINT_WARNINT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
WWDT_WARNINT_WARNINT_SHIFT
)Ë& 
WWDT_WARNINT_WARNINT_MASK
)

	)

12230 
	#WWDT_WINDOW_WINDOW_MASK
 (0xFFFFFFU)

	)

12231 
	#WWDT_WINDOW_WINDOW_SHIFT
 (0U)

	)

12232 
	#WWDT_WINDOW_WINDOW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x)Ë<< 
WWDT_WINDOW_WINDOW_SHIFT
)Ë& 
WWDT_WINDOW_WINDOW_MASK
)

	)

12242 
	#WWDT_BASE
 (0x4000C000u)

	)

12244 
	#WWDT
 ((
WWDT_Ty≥
 *)
WWDT_BASE
)

	)

12246 
	#WWDT_BASE_ADDRS
 { 
WWDT_BASE
 }

	)

12248 
	#WWDT_BASE_PTRS
 { 
WWDT
 }

	)

12250 
	#WWDT_IRQS
 { 
WDT_BOD_IRQn
 }

	)

12261 #i‡
deföed
(
__ARMCC_VERSION
)

12262 #¥agm®
p›


12263 #ñi‡
deföed
(
__GNUC__
)

12265 #ñi‡
deföed
(
__IAR_SYSTEMS_ICC__
)

12266 #¥agm®
œnguage
=

12268 #îr‹ 
NŸ
 
suµ‹ãd
 
compûî
 
ty≥


12285 #i‡
deföed
(
__ARMCC_VERSION
)

12286 #i‡(
__ARMCC_VERSION
 >= 6010050)

12287 #¥agm®
˛™g
 
sy°em_hódî


12289 #ñi‡
deföed
(
__IAR_SYSTEMS_ICC__
)

12290 #¥agm®
sy°em_ö˛ude


12299 
	#NXP_VAL2FLD
(
fõld
, 
vÆue
Ë(((vÆueË<< (fõld ## 
_SHIFT
)Ë& (fõld ## 
_MASK
))

	)

12306 
	#NXP_FLD2VAL
(
fõld
, 
vÆue
Ë(((vÆueË& (fõld ## 
_MASK
)Ë>> (fõld ## 
_SHIFT
))

	)

12323 
	#EMC_CS0_BASE
 (0x80000000u)

	)

12324 
	#EMC_CS1_BASE
 (0x90000000u)

	)

12325 
	#EMC_CS2_BASE
 (0x98000000u)

	)

12326 
	#EMC_CS3_BASE
 (0x9C000000u)

	)

12327 
	#EMC_DYCS0_BASE
 (0xA0000000u)

	)

12328 
	#EMC_DYCS1_BASE
 (0xB0000000u)

	)

12329 
	#EMC_DYCS2_BASE
 (0xC0000000u)

	)

12330 
	#EMC_DYCS3_BASE
 (0xD0000000u)

	)

12331 
	#EMC_CS_ADDRESS
 {
EMC_CS0_BASE
, 
EMC_CS1_BASE
, 
EMC_CS2_BASE
, 
EMC_CS3_BASE
}

	)

12332 
	#EMC_DYCS_ADDRESS
 {
EMC_DYCS0_BASE
, 
EMC_DYCS1_BASE
, 
EMC_DYCS2_BASE
, 
EMC_DYCS3_BASE
}

	)

12336 
uöt32_t
 (*
ŸpInô
)();

12337 
uöt32_t
 (*
ŸpE«bÀB™kWrôeMask
)(uöt32_à
	mb™kMask
);

12338 
uöt32_t
 (*
ŸpDißbÀB™kWrôeMask
)(uöt32_à
	mb™kMask
);

12339 
uöt32_t
 (*
ŸpE«bÀB™kWrôeLock
)(uöt32_à
	mb™kIndex
, uöt32_à
	mªgE«bÀMask
, uöt32_à
	mªgDißbÀMask
,

12340 
uöt32_t
 
	mlockWrôe
);

12341 
uöt32_t
 (*
ŸpE«bÀB™kRódLock
)(uöt32_à
	mb™kIndex
, uöt32_à
	mªgE«bÀMask
, uöt32_à
	mªgDißbÀMask
,

12342 
uöt32_t
 
	mlockWrôe
);

12343 
uöt32_t
 (*
ŸpProgømReg
)(uöt32_à
	mb™kIndex
, uöt32_à
	mªgIndex
, uöt32_à
	mvÆue
);

12344 
uöt32_t
 
	mRESERVED_0
[5];

12345 
uöt32_t
 (*
∫gRód
)();

12346 
uöt32_t
 (*
ŸpGëDrivîVîsi⁄
)();

12347 } 
	tOTP_API_Ty≥
;

12351 
__I
 
uöt32_t
 
	musbdApiBa£
;

12352 
uöt32_t
 
	mRESERVED_0
[13];

12353 
__I
 
OTP_API_Ty≥
 *
	mŸpApiBa£
;

12354 
__I
 
uöt32_t
 
	m´sApiBa£
;

12355 
__I
 
uöt32_t
 
	m£cuªApiBa£
;

12356 } 
	tROM_API_Ty≥
;

12359 
	#ROM_API_BASE
 (0x03000200u)

	)

12361 
	#ROM_API
 (*(
ROM_API_Ty≥
**Ë
ROM_API_BASE
)

	)

12363 
	#OTP_API
 (
ROM_API
->
ŸpApiBa£
)

	)

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_adc.c

35 
	~"f¶_adc.h
"

36 
	~"f¶_˛ock.h
"

38 
ADC_Ty≥
 *c⁄° 
	gs_adcBa£s
[] = 
ADC_BASE_PTRS
;

39 #i‡!(
deföed
(
FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL
) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

40 c⁄° 
˛ock_ù_«me_t
 
	gs_adcClocks
[] = 
ADC_CLOCKS
;

43 
uöt32_t
 
	$ADC_GëIn°™˚
(
ADC_Ty≥
 *
ba£
)

45 
uöt32_t
 
ö°™˚
;

48 
ö°™˚
 = 0; in°™˚ < 
	`ARRAY_SIZE
(
s_adcBa£s
); instance++)

50 i‡(
s_adcBa£s
[
ö°™˚
] =
ba£
)

56 
	`as£π
(
ö°™˚
 < 
	`ARRAY_SIZE
(
s_adcBa£s
));

58  
ö°™˚
;

59 
	}
}

61 
	$ADC_Inô
(
ADC_Ty≥
 *
ba£
, c⁄° 
adc_c⁄fig_t
 *
c⁄fig
)

63 
	`as£π
(
c⁄fig
 !
NULL
);

65 
uöt32_t
 
tmp32
 = 0U;

67 #i‡!(
	`deföed
(
FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL
) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

69 
	`CLOCK_E«bÀClock
(
s_adcClocks
[
	`ADC_GëIn°™˚
(
ba£
)]);

73 
ba£
->
INTEN
 = 0U;

76 
tmp32
 = 
	`ADC_CTRL_CLKDIV
(
c⁄fig
->
˛ockDividîNumbî
);

79 
c⁄fig
->
˛ockMode
)

81 
kADC_ClockAsynchr⁄ousMode
:

82 
tmp32
 |
ADC_CTRL_ASYNMODE_MASK
;

89 
tmp32
 |
	`ADC_CTRL_RESOL
(
c⁄fig
->
ªsﬁuti⁄
);

92 i‡(
c⁄fig
->
íabÀBy∑ssCÆibøti⁄
)

94 
tmp32
 |
ADC_CTRL_BYPASSCAL_MASK
;

98 
tmp32
 |
	`ADC_CTRL_TSAMP
(
c⁄fig
->
ßm∂eTimeNumbî
);

100 
ba£
->
CTRL
 = 
tmp32
;

101 
	}
}

103 
	$ADC_GëDeÁu…C⁄fig
(
adc_c⁄fig_t
 *
c⁄fig
)

105 
c⁄fig
->
˛ockMode
 = 
kADC_ClockSynchr⁄ousMode
;

106 
c⁄fig
->
˛ockDividîNumbî
 = 0U;

107 
c⁄fig
->
ªsﬁuti⁄
 = 
kADC_Resﬁuti⁄12bô
;

108 
c⁄fig
->
íabÀBy∑ssCÆibøti⁄
 = 
Ál£
;

109 
c⁄fig
->
ßm∂eTimeNumbî
 = 0U;

110 
	}
}

112 
	$ADC_Deöô
(
ADC_Ty≥
 *
ba£
)

114 #i‡!(
	`deföed
(
FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL
) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

116 
	`CLOCK_DißbÀClock
(
s_adcClocks
[
	`ADC_GëIn°™˚
(
ba£
)]);

118 
	}
}

120 
boﬁ
 
	$ADC_DoSñfCÆibøti⁄
(
ADC_Ty≥
 *
ba£
)

122 
uöt32_t
 
i
;

127 
ba£
->
STARTUP
 = 
ADC_STARTUP_ADC_ENA_MASK
;

128 
i
 = 0U; i < 0x10; i++)

130 
	`__ASM
("NOP");

132 i‡(!(
ba£
->
STARTUP
 & 
ADC_STARTUP_ADC_ENA_MASK
))

134  
Ál£
;

138 i‡((
ADC_CALIB_CALREQD_MASK
 =(
ba£
->
CALIB
 & ADC_CALIB_CALREQD_MASK)) &&

139 (0U =(
ba£
->
CTRL
 & 
ADC_CTRL_BYPASSCAL_MASK
)))

142 
ba£
->
CALIB
 = 
ADC_CALIB_CALIB_MASK
;

143 
i
 = 0xF0000;

144 (
ADC_CALIB_CALIB_MASK
 =(
ba£
->
CALIB
 & ADC_CALIB_CALIB_MASK)Ë&& (--
i
))

147 i‡(
i
 == 0U)

149  
Ál£
;

154 
ba£
->
STARTUP
 |
ADC_STARTUP_ADC_INIT_MASK
;

155 
i
 = 0x7FFFF;

156 (
ADC_STARTUP_ADC_INIT_MASK
 =(
ba£
->
STARTUP
 & ADC_STARTUP_ADC_INIT_MASK)Ë&& (--
i
))

159 i‡(
i
 == 0U)

161  
Ál£
;

164  
åue
;

165 
	}
}

167 
	$ADC_SëC⁄vSeqAC⁄fig
(
ADC_Ty≥
 *
ba£
, c⁄° 
adc_c⁄v_£q_c⁄fig_t
 *
c⁄fig
)

169 
	`as£π
(
c⁄fig
 !
NULL
);

171 
uöt32_t
 
tmp32
;

173 
tmp32
 = 
	`ADC_SEQ_CTRL_CHANNELS
(
c⁄fig
->
ch™√lMask
)

174 | 
	`ADC_SEQ_CTRL_TRIGGER
(
c⁄fig
->
åiggîMask
);

177 
c⁄fig
->
åiggîPﬁ¨ôy
)

179 
kADC_TriggîPﬁ¨ôyPosôiveEdge
:

180 
tmp32
 |
ADC_SEQ_CTRL_TRIGPOL_MASK
;

187 i‡(
c⁄fig
->
íabÀSyncBy∑ss
)

189 
tmp32
 |
ADC_SEQ_CTRL_SYNCBYPASS_MASK
;

193 
c⁄fig
->
öãºu±Mode
)

195 
kADC_I¡îru±F‹EachSequí˚
:

196 
tmp32
 |
ADC_SEQ_CTRL_MODE_MASK
;

203 i‡(
c⁄fig
->
íabÀSögÀSãp
)

205 
tmp32
 |
ADC_SEQ_CTRL_SINGLESTEP_MASK
;

208 
ba£
->
SEQ_CTRL
[0] = 
tmp32
;

209 
	}
}

211 
	$ADC_SëC⁄vSeqBC⁄fig
(
ADC_Ty≥
 *
ba£
, c⁄° 
adc_c⁄v_£q_c⁄fig_t
 *
c⁄fig
)

213 
	`as£π
(
c⁄fig
 !
NULL
);

215 
uöt32_t
 
tmp32
;

217 
tmp32
 = 
	`ADC_SEQ_CTRL_CHANNELS
(
c⁄fig
->
ch™√lMask
)

218 | 
	`ADC_SEQ_CTRL_TRIGGER
(
c⁄fig
->
åiggîMask
);

221 
c⁄fig
->
åiggîPﬁ¨ôy
)

223 
kADC_TriggîPﬁ¨ôyPosôiveEdge
:

224 
tmp32
 |
ADC_SEQ_CTRL_TRIGPOL_MASK
;

231 i‡(
c⁄fig
->
íabÀSyncBy∑ss
)

233 
tmp32
 |
ADC_SEQ_CTRL_SYNCBYPASS_MASK
;

237 
c⁄fig
->
öãºu±Mode
)

239 
kADC_I¡îru±F‹EachSequí˚
:

240 
tmp32
 |
ADC_SEQ_CTRL_MODE_MASK
;

247 i‡(
c⁄fig
->
íabÀSögÀSãp
)

249 
tmp32
 |
ADC_SEQ_CTRL_SINGLESTEP_MASK
;

252 
ba£
->
SEQ_CTRL
[1] = 
tmp32
;

253 
	}
}

255 
boﬁ
 
	$ADC_GëC⁄vSeqAGlobÆC⁄vîsi⁄Resu…
(
ADC_Ty≥
 *
ba£
, 
adc_ªsu…_öfo_t
 *
öfo
)

257 
	`as£π
(
öfo
 !
NULL
);

259 
uöt32_t
 
tmp32
 = 
ba£
->
SEQ_GDAT
[0];

261 i‡(0U =(
ADC_SEQ_GDAT_DATAVALID_MASK
 & 
tmp32
))

263  
Ál£
;

266 
öfo
->
ªsu…
 = (
tmp32
 & 
ADC_SEQ_GDAT_RESULT_MASK
Ë>> 
ADC_SEQ_GDAT_RESULT_SHIFT
;

267 
öfo
->
thªshﬁdCom∑ªSètus
 =

268 (
adc_thªshﬁd_com∑ª_°©us_t
)((
tmp32
 & 
ADC_SEQ_GDAT_THCMPRANGE_MASK
Ë>> 
ADC_SEQ_GDAT_THCMPRANGE_SHIFT
);

269 
öfo
->
thªshﬁdC‹ssögSètus
 =

270 (
adc_thªshﬁd_¸ossög_°©us_t
)((
tmp32
 & 
ADC_SEQ_GDAT_THCMPCROSS_MASK
Ë>> 
ADC_SEQ_GDAT_THCMPCROSS_SHIFT
);

271 
öfo
->
ch™√lNumbî
 = (
tmp32
 & 
ADC_SEQ_GDAT_CHN_MASK
Ë>> 
ADC_SEQ_GDAT_CHN_SHIFT
;

272 
öfo
->
ovîrunFœg
 = ((
tmp32
 & 
ADC_SEQ_GDAT_OVERRUN_MASK
) == ADC_SEQ_GDAT_OVERRUN_MASK);

274  
åue
;

275 
	}
}

277 
boﬁ
 
	$ADC_GëC⁄vSeqBGlobÆC⁄vîsi⁄Resu…
(
ADC_Ty≥
 *
ba£
, 
adc_ªsu…_öfo_t
 *
öfo
)

279 
	`as£π
(
öfo
 !
NULL
);

281 
uöt32_t
 
tmp32
 = 
ba£
->
SEQ_GDAT
[1];

283 i‡(0U =(
ADC_SEQ_GDAT_DATAVALID_MASK
 & 
tmp32
))

285  
Ál£
;

288 
öfo
->
ªsu…
 = (
tmp32
 & 
ADC_SEQ_GDAT_RESULT_MASK
Ë>> 
ADC_SEQ_GDAT_RESULT_SHIFT
;

289 
öfo
->
thªshﬁdCom∑ªSètus
 =

290 (
adc_thªshﬁd_com∑ª_°©us_t
)((
tmp32
 & 
ADC_SEQ_GDAT_THCMPRANGE_MASK
Ë>> 
ADC_SEQ_GDAT_THCMPRANGE_SHIFT
);

291 
öfo
->
thªshﬁdC‹ssögSètus
 =

292 (
adc_thªshﬁd_¸ossög_°©us_t
)((
tmp32
 & 
ADC_SEQ_GDAT_THCMPCROSS_MASK
Ë>> 
ADC_SEQ_GDAT_THCMPCROSS_SHIFT
);

293 
öfo
->
ch™√lNumbî
 = (
tmp32
 & 
ADC_SEQ_GDAT_CHN_MASK
Ë>> 
ADC_SEQ_GDAT_CHN_SHIFT
;

294 
öfo
->
ovîrunFœg
 = ((
tmp32
 & 
ADC_SEQ_GDAT_OVERRUN_MASK
) == ADC_SEQ_GDAT_OVERRUN_MASK);

296  
åue
;

297 
	}
}

299 
boﬁ
 
	$ADC_GëCh™√lC⁄vîsi⁄Resu…
(
ADC_Ty≥
 *
ba£
, 
uöt32_t
 
ch™√l
, 
adc_ªsu…_öfo_t
 *
öfo
)

301 
	`as£π
(
öfo
 !
NULL
);

302 
	`as£π
(
ch™√l
 < 
ADC_DAT_COUNT
);

304 
uöt32_t
 
tmp32
 = 
ba£
->
DAT
[
ch™√l
];

306 i‡(0U =(
ADC_DAT_DATAVALID_MASK
 & 
tmp32
))

308  
Ál£
;

311 
öfo
->
ªsu…
 = (
tmp32
 & 
ADC_DAT_RESULT_MASK
Ë>> 
ADC_DAT_RESULT_SHIFT
;

312 
öfo
->
thªshﬁdCom∑ªSètus
 =

313 (
adc_thªshﬁd_com∑ª_°©us_t
)((
tmp32
 & 
ADC_DAT_THCMPRANGE_MASK
Ë>> 
ADC_DAT_THCMPRANGE_SHIFT
);

314 
öfo
->
thªshﬁdC‹ssögSètus
 =

315 (
adc_thªshﬁd_¸ossög_°©us_t
)((
tmp32
 & 
ADC_DAT_THCMPCROSS_MASK
Ë>> 
ADC_DAT_THCMPCROSS_SHIFT
);

316 
öfo
->
ch™√lNumbî
 = (
tmp32
 & 
ADC_DAT_CHANNEL_MASK
Ë>> 
ADC_DAT_CHANNEL_SHIFT
;

317 
öfo
->
ovîrunFœg
 = ((
tmp32
 & 
ADC_DAT_OVERRUN_MASK
) == ADC_DAT_OVERRUN_MASK);

319  
åue
;

320 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_adc.h

35 #i‚de‡
__FSL_ADC_H__


36 
	#__FSL_ADC_H__


	)

38 
	~"f¶_comm⁄.h
"

54 
	#LPC_ADC_DRIVER_VERSION
 (
	`MAKE_VERSION
(2, 1, 0))

	)

60 
	e_adc_°©us_Êags


62 
	mkADC_ThªshﬁdCom∑ªFœgOnChn0
 = 1U << 0U,

63 
	mkADC_ThªshﬁdCom∑ªFœgOnChn1
 = 1U << 1U,

64 
	mkADC_ThªshﬁdCom∑ªFœgOnChn2
 = 1U << 2U,

65 
	mkADC_ThªshﬁdCom∑ªFœgOnChn3
 = 1U << 3U,

66 
	mkADC_ThªshﬁdCom∑ªFœgOnChn4
 = 1U << 4U,

67 
	mkADC_ThªshﬁdCom∑ªFœgOnChn5
 = 1U << 5U,

68 
	mkADC_ThªshﬁdCom∑ªFœgOnChn6
 = 1U << 6U,

69 
	mkADC_ThªshﬁdCom∑ªFœgOnChn7
 = 1U << 7U,

70 
	mkADC_ThªshﬁdCom∑ªFœgOnChn8
 = 1U << 8U,

71 
	mkADC_ThªshﬁdCom∑ªFœgOnChn9
 = 1U << 9U,

72 
	mkADC_ThªshﬁdCom∑ªFœgOnChn10
 = 1U << 10U,

73 
	mkADC_ThªshﬁdCom∑ªFœgOnChn11
 = 1U << 11U,

74 
	mkADC_OvîrunFœgF‹Chn0
 =

76 
	mkADC_OvîrunFœgF‹Chn1
 =

78 
	mkADC_OvîrunFœgF‹Chn2
 =

80 
	mkADC_OvîrunFœgF‹Chn3
 =

82 
	mkADC_OvîrunFœgF‹Chn4
 =

84 
	mkADC_OvîrunFœgF‹Chn5
 =

86 
	mkADC_OvîrunFœgF‹Chn6
 =

88 
	mkADC_OvîrunFœgF‹Chn7
 =

90 
	mkADC_OvîrunFœgF‹Chn8
 =

92 
	mkADC_OvîrunFœgF‹Chn9
 =

94 
	mkADC_OvîrunFœgF‹Chn10
 =

96 
	mkADC_OvîrunFœgF‹Chn11
 =

98 
	mkADC_GlobÆOvîrunFœgF‹SeqA
 = 1U << 24U,

99 
	mkADC_GlobÆOvîrunFœgF‹SeqB
 = 1U << 25U,

100 
	mkADC_C⁄vSeqAI¡îru±Fœg
 = 1U << 28U,

101 
	mkADC_C⁄vSeqBI¡îru±Fœg
 = 1U << 29U,

102 
	mkADC_ThªshﬁdCom∑ªI¡îru±Fœg
 = 1U << 30U,

103 
	mkADC_OvîrunI¡îru±Fœg
 = 1U << 31U,

110 
	e_adc_öãºu±_íabÀ


112 
	mkADC_C⁄vSeqAI¡îru±E«bÀ
 = 
ADC_INTEN_SEQA_INTEN_MASK
,

114 
	mkADC_C⁄vSeqBI¡îru±E«bÀ
 = 
ADC_INTEN_SEQB_INTEN_MASK
,

116 
	mkADC_OvîrunI¡îru±E«bÀ
 = 
ADC_INTEN_OVR_INTEN_MASK
,

124 
	e_adc_˛ock_mode


126 
	mkADC_ClockSynchr⁄ousMode
 =

128 
	mkADC_ClockAsynchr⁄ousMode
 = 1U,

129 } 
	tadc_˛ock_mode_t
;

134 
	e_adc_ªsﬁuti⁄


136 
	mkADC_Resﬁuti⁄6bô
 = 0U,

137 
	mkADC_Resﬁuti⁄8bô
 = 1U,

138 
	mkADC_Resﬁuti⁄10bô
 = 2U,

139 
	mkADC_Resﬁuti⁄12bô
 = 3U,

140 } 
	tadc_ªsﬁuti⁄_t
;

145 
	e_adc_åiggî_pﬁ¨ôy


147 
	mkADC_TriggîPﬁ¨ôyNeg©iveEdge
 = 0U,

148 
	mkADC_TriggîPﬁ¨ôyPosôiveEdge
 = 1U,

149 } 
	tadc_åiggî_pﬁ¨ôy_t
;

154 
	e_adc_¥i‹ôy


156 
	mkADC_Pri‹ôyLow
 = 0U,

157 
	mkADC_Pri‹ôyHigh
 = 1U,

158 } 
	tadc_¥i‹ôy_t
;

163 
	e_adc_£q_öãºu±_mode


165 
	mkADC_I¡îru±F‹EachC⁄vîsi⁄
 = 0U,

167 
	mkADC_I¡îru±F‹EachSequí˚
 = 1U,

169 } 
	tadc_£q_öãºu±_mode_t
;

174 
	e_adc_thªshﬁd_com∑ª_°©us


176 
	mkADC_ThªshﬁdCom∑ªInR™ge
 = 0U,

177 
	mkADC_ThªshﬁdCom∑ªBñowR™ge
 = 1U,

178 
	mkADC_ThªshﬁdCom∑ªAboveR™ge
 = 2U,

179 } 
	tadc_thªshﬁd_com∑ª_°©us_t
;

184 
	e_adc_thªshﬁd_¸ossög_°©us


188 
	mkADC_ThªshﬁdCrossögNoDëe˘ed
 = 0U,

193 
	mkADC_ThªshﬁdCrossögDownw¨d
 = 2U,

198 
	mkADC_ThªshﬁdCrossögUpw¨d
 = 3U,

199 } 
	tadc_thªshﬁd_¸ossög_°©us_t
;

204 
	e_adc_thªshﬁd_öãºu±_mode


206 
	mkADC_ThªshﬁdI¡îru±DißbÀd
 = 0U,

207 
	mkADC_ThªshﬁdI¡îru±OnOutside
 = 1U,

208 
	mkADC_ThªshﬁdI¡îru±OnCrossög
 = 2U,

209 } 
	tadc_thªshﬁd_öãºu±_mode_t
;

214 
	s_adc_c⁄fig


216 
adc_˛ock_mode_t
 
	m˛ockMode
;

217 
uöt32_t
 
	m˛ockDividîNumbî
;

220 
adc_ªsﬁuti⁄_t
 
	mªsﬁuti⁄
;

221 
boﬁ
 
	míabÀBy∑ssCÆibøti⁄
;

225 
uöt32_t
 
	mßm∂eTimeNumbî
;

227 } 
	tadc_c⁄fig_t
;

232 
	s_adc_c⁄v_£q_c⁄fig


234 
uöt32_t
 
	mch™√lMask
;

237 
uöt32_t
 
	måiggîMask
;

239 
adc_åiggî_pﬁ¨ôy_t
 
	måiggîPﬁ¨ôy
;

240 
boﬁ
 
	míabÀSyncBy∑ss
;

243 
boﬁ
 
	míabÀSögÀSãp
;

246 
adc_£q_öãºu±_mode_t
 
	möãºu±Mode
;

247 } 
	tadc_c⁄v_£q_c⁄fig_t
;

252 
	s_adc_ªsu…_öfo


254 
uöt32_t
 
	mªsu…
;

255 
adc_thªshﬁd_com∑ª_°©us_t
 
	mthªshﬁdCom∑ªSètus
;

256 
adc_thªshﬁd_¸ossög_°©us_t
 
	mthªshﬁdC‹ssögSètus
;

257 
uöt32_t
 
	mch™√lNumbî
;

258 
boﬁ
 
	movîrunFœg
;

260 } 
	tadc_ªsu…_öfo_t
;

262 #i‡
deföed
(
__˝lu•lus
)

281 
ADC_Inô
(
ADC_Ty≥
 *
ba£
, c⁄° 
adc_c⁄fig_t
 *
c⁄fig
);

288 
ADC_Deöô
(
ADC_Ty≥
 *
ba£
);

303 
ADC_GëDeÁu…C⁄fig
(
adc_c⁄fig_t
 *
c⁄fig
);

312 
boﬁ
 
ADC_DoSñfCÆibøti⁄
(
ADC_Ty≥
 *
ba£
);

314 #i‡!(
deföed
(
FSL_FEATURE_ADC_HAS_NO_INSEL
) && FSL_FEATURE_ADC_HAS_NO_INSEL)

324 
ölöe
 
ADC_E«bÀTem≥øtuªSís‹
(
ADC_Ty≥
 *
ba£
, 
boﬁ
 
íabÀ
)

326 i‡(
íabÀ
)

328 
ba£
->
INSEL
 = (ba£->INSEL & ~
ADC_INSEL_SEL_MASK
Ë| 
ADC_INSEL_SEL
(0x3);

332 
ba£
->
INSEL
 = (ba£->INSEL & ~
ADC_INSEL_SEL_MASK
Ë| 
ADC_INSEL_SEL
(0);

353 
ölöe
 
ADC_E«bÀC⁄vSeqA
(
ADC_Ty≥
 *
ba£
, 
boﬁ
 
íabÀ
)

355 i‡(
íabÀ
)

357 
ba£
->
SEQ_CTRL
[0] |
ADC_SEQ_CTRL_SEQ_ENA_MASK
;

361 
ba£
->
SEQ_CTRL
[0] &~
ADC_SEQ_CTRL_SEQ_ENA_MASK
;

371 
ADC_SëC⁄vSeqAC⁄fig
(
ADC_Ty≥
 *
ba£
, c⁄° 
adc_c⁄v_£q_c⁄fig_t
 *
c⁄fig
);

378 
ölöe
 
ADC_DoSo·w¨eTriggîC⁄vSeqA
(
ADC_Ty≥
 *
ba£
)

380 
ba£
->
SEQ_CTRL
[0] |
ADC_SEQ_CTRL_START_MASK
;

394 
ölöe
 
ADC_E«bÀC⁄vSeqABur°Mode
(
ADC_Ty≥
 *
ba£
, 
boﬁ
 
íabÀ
)

396 i‡(
íabÀ
)

398 
ba£
->
SEQ_CTRL
[0] |
ADC_SEQ_CTRL_BURST_MASK
;

402 
ba£
->
SEQ_CTRL
[0] &~
ADC_SEQ_CTRL_BURST_MASK
;

411 
ölöe
 
ADC_SëC⁄vSeqAHighPri‹ôy
(
ADC_Ty≥
 *
ba£
)

413 
ba£
->
SEQ_CTRL
[0] |
ADC_SEQ_CTRL_LOWPRIO_MASK
;

433 
ölöe
 
ADC_E«bÀC⁄vSeqB
(
ADC_Ty≥
 *
ba£
, 
boﬁ
 
íabÀ
)

435 i‡(
íabÀ
)

437 
ba£
->
SEQ_CTRL
[1] |
ADC_SEQ_CTRL_SEQ_ENA_MASK
;

441 
ba£
->
SEQ_CTRL
[1] &~
ADC_SEQ_CTRL_SEQ_ENA_MASK
;

451 
ADC_SëC⁄vSeqBC⁄fig
(
ADC_Ty≥
 *
ba£
, c⁄° 
adc_c⁄v_£q_c⁄fig_t
 *
c⁄fig
);

458 
ölöe
 
ADC_DoSo·w¨eTriggîC⁄vSeqB
(
ADC_Ty≥
 *
ba£
)

460 
ba£
->
SEQ_CTRL
[1] |
ADC_SEQ_CTRL_START_MASK
;

474 
ölöe
 
ADC_E«bÀC⁄vSeqBBur°Mode
(
ADC_Ty≥
 *
ba£
, 
boﬁ
 
íabÀ
)

476 i‡(
íabÀ
)

478 
ba£
->
SEQ_CTRL
[1] |
ADC_SEQ_CTRL_BURST_MASK
;

482 
ba£
->
SEQ_CTRL
[1] &~
ADC_SEQ_CTRL_BURST_MASK
;

491 
ölöe
 
ADC_SëC⁄vSeqBHighPri‹ôy
(
ADC_Ty≥
 *
ba£
)

493 
ba£
->
SEQ_CTRL
[0] &~
ADC_SEQ_CTRL_LOWPRIO_MASK
;

511 
boﬁ
 
ADC_GëC⁄vSeqAGlobÆC⁄vîsi⁄Resu…
(
ADC_Ty≥
 *
ba£
, 
adc_ªsu…_öfo_t
 *
öfo
);

521 
boﬁ
 
ADC_GëC⁄vSeqBGlobÆC⁄vîsi⁄Resu…
(
ADC_Ty≥
 *
ba£
, 
adc_ªsu…_öfo_t
 *
öfo
);

532 
boﬁ
 
ADC_GëCh™√lC⁄vîsi⁄Resu…
(
ADC_Ty≥
 *
ba£
, 
uöt32_t
 
ch™√l
, 
adc_ªsu…_öfo_t
 *
öfo
);

548 
ölöe
 
ADC_SëThªshﬁdPaú0
(
ADC_Ty≥
 *
ba£
, 
uöt32_t
 
lowVÆue
, uöt32_à
highVÆue
)

550 
ba£
->
THR0_LOW
 = 
ADC_THR0_LOW_THRLOW
(
lowVÆue
);

551 
ba£
->
THR0_HIGH
 = 
ADC_THR0_HIGH_THRHIGH
(
highVÆue
);

561 
ölöe
 
ADC_SëThªshﬁdPaú1
(
ADC_Ty≥
 *
ba£
, 
uöt32_t
 
lowVÆue
, uöt32_à
highVÆue
)

563 
ba£
->
THR1_LOW
 = 
ADC_THR1_LOW_THRLOW
(
lowVÆue
);

564 
ba£
->
THR1_HIGH
 = 
ADC_THR1_HIGH_THRHIGH
(
highVÆue
);

573 
ölöe
 
ADC_SëCh™√lWôhThªshﬁdPaú0
(
ADC_Ty≥
 *
ba£
, 
uöt32_t
 
ch™√lMask
)

575 
ba£
->
CHAN_THRSEL
 &~(
ch™√lMask
);

584 
ölöe
 
ADC_SëCh™√lWôhThªshﬁdPaú1
(
ADC_Ty≥
 *
ba£
, 
uöt32_t
 
ch™√lMask
)

586 
ba£
->
CHAN_THRSEL
 |
ch™√lMask
;

602 
ölöe
 
ADC_E«bÀI¡îru±s
(
ADC_Ty≥
 *
ba£
, 
uöt32_t
 
mask
)

604 
ba£
->
INTEN
 |(0x7 & 
mask
);

613 
ölöe
 
ADC_DißbÀI¡îru±s
(
ADC_Ty≥
 *
ba£
, 
uöt32_t
 
mask
)

615 
ba£
->
INTEN
 &~(0x7 & 
mask
);

622 
ölöe
 
ADC_E«bÀShªshﬁdCom∑ªI¡îru±
(
ADC_Ty≥
 *
ba£
,

623 
uöt32_t
 
ch™√l
,

624 
adc_thªshﬁd_öãºu±_mode_t
 
mode
)

626 
ba£
->
INTEN
 = (ba£->INTEN & ~(0x3U << ((
ch™√l
 << 1UË+ 3U))Ë| ((
uöt32_t
)(
mode
) << ((channel << 1U) + 3U));

636 
ölöe
 
ADC_E«bÀThªshﬁdCom∑ªI¡îru±
(
ADC_Ty≥
 *
ba£
,

637 
uöt32_t
 
ch™√l
,

638 
adc_thªshﬁd_öãºu±_mode_t
 
mode
)

640 
ba£
->
INTEN
 = (ba£->INTEN & ~(0x3U << ((
ch™√l
 << 1UË+ 3U))Ë| ((
uöt32_t
)(
mode
) << ((channel << 1U) + 3U));

656 
ölöe
 
uöt32_t
 
ADC_GëSètusFœgs
(
ADC_Ty≥
 *
ba£
)

658  
ba£
->
FLAGS
;

667 
ölöe
 
ADC_CÀ¨SètusFœgs
(
ADC_Ty≥
 *
ba£
, 
uöt32_t
 
mask
)

669 
ba£
->
FLAGS
 = 
mask
;

674 #i‡
deföed
(
__˝lu•lus
)

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_clock.c

36 
	~"f¶_comm⁄.h
"

37 
	~"f¶_˛ock.h
"

38 
	~"f¶_powî.h
"

42 
	#NVALMAX
 (0x100U)

	)

43 
	#PVALMAX
 (0x20U)

	)

44 
	#MVALMAX
 (0x8000U)

	)

46 
	#USB_NVALMAX
 (0x4U)

	)

47 
	#USB_PVALMAX
 (0x8U)

	)

48 
	#USB_MVALMAX
 (0x100U)

	)

50 
	#PLL_MAX_N_DIV
 0x100U

	)

51 
	#USB_PLL_MAX_N_DIV
 0x100U

	)

53 
	#INDEX_SECTOR_TRIM48
 ((
uöt32_t
 *)0x01000448U)

	)

54 
	#INDEX_SECTOR_TRIM96
 ((
uöt32_t
 *)0x0100044CU)

	)

59 
	#PLL_MDEC_VAL_P
 (0UË

	)

60 
	#PLL_MDEC_VAL_M
 (0x1FFFFUL << 
PLL_MDEC_VAL_P
Ë

	)

61 
	#PLL_NDEC_VAL_P
 (0UË

	)

62 
	#PLL_NDEC_VAL_M
 (0x3FFUL << 
PLL_NDEC_VAL_P
)

	)

63 
	#PLL_PDEC_VAL_P
 (0UË

	)

64 
	#PLL_PDEC_VAL_M
 (0x7FUL << 
PLL_PDEC_VAL_P
)

	)

66 
	#PLL_MIN_CCO_FREQ_MHZ
 (275000000U)

	)

67 
	#PLL_MAX_CCO_FREQ_MHZ
 (550000000U)

	)

68 
	#PLL_LOWER_IN_LIMIT
 (4000UË

	)

69 
	#PLL_MIN_IN_SSMODE
 (2000000U)

	)

70 
	#PLL_MAX_IN_SSMODE
 (4000000U)

	)

73 
	#PLL_SSCG_MF_FREQ_VALUE
 4U

	)

74 
	#PLL_SSCG_MC_COMP_VALUE
 2U

	)

75 
	#PLL_SSCG_MR_DEPTH_VALUE
 4U

	)

76 
	#PLL_SSCG_DITHER_VALUE
 0U

	)

79 
	#USB_PLL_MIN_CCO_FREQ_MHZ
 (156000000U)

	)

80 
	#USB_PLL_MAX_CCO_FREQ_MHZ
 (320000000U)

	)

81 
	#USB_PLL_LOWER_IN_LIMIT
 (1000000UË

	)

83 
	#USB_PLL_MSEL_VAL_P
 (0UË

	)

84 
	#USB_PLL_MSEL_VAL_M
 (0xFFU)

	)

85 
	#USB_PLL_PSEL_VAL_P
 (8UË

	)

86 
	#USB_PLL_PSEL_VAL_M
 (0x3U)

	)

87 
	#USB_PLL_NSEL_VAL_P
 (10UË

	)

88 
	#USB_PLL_NSEL_VAL_M
 (0x3U)

	)

91 
	#SWITCH_USB_PSEL
(
x
Ë((x==0x0UË? 0x1U : (x==0x1UË? 0x02U : (x==0x2UË? 0x4U : (x==3UË? 0x8U : 0U)

	)

94 
	#PLL_NDEC_VAL_SET
(
vÆue
Ë((()(vÆueË<< 
PLL_NDEC_VAL_P
Ë& 
PLL_NDEC_VAL_M
)

	)

96 
	#PLL_PDEC_VAL_SET
(
vÆue
Ë((()(vÆueË<< 
PLL_PDEC_VAL_P
Ë& 
PLL_PDEC_VAL_M
)

	)

98 
	#PLL_MDEC_VAL_SET
(
vÆue
Ë((()(vÆueË<< 
PLL_MDEC_VAL_P
Ë& 
PLL_MDEC_VAL_M
)

	)

101 
	#USB_PLL_NSEL_VAL_SET
(
vÆue
Ë((()(vÆueË& 
USB_PLL_NSEL_VAL_M
Ë<< 
USB_PLL_NSEL_VAL_P
)

	)

103 
	#USB_PLL_PSEL_VAL_SET
(
vÆue
Ë((()(vÆueË& 
USB_PLL_PSEL_VAL_M
Ë<< 
USB_PLL_PSEL_VAL_P
)

	)

105 
	#USB_PLL_MSEL_VAL_SET
(
vÆue
Ë((()(vÆueË& 
USB_PLL_MSEL_VAL_M
Ë<< 
USB_PLL_MSEL_VAL_P
)

	)

108 
	#AUDIO_PLL_FRACT_MD_P
 (0U)

	)

109 
	#AUDIO_PLL_FRACT_MD_INT_P
 (15U)

	)

110 
	#AUDIO_PLL_FRACT_MD_M
 (0x7FFFUL << 
AUDIO_PLL_FRACT_MD_P
)

	)

111 
	#AUDIO_PLL_FRACT_MD_INT_M
 (0x7FUL << 
AUDIO_PLL_FRACT_MD_INT_P
)

	)

113 
	#AUDIO_PLL_MD_FRACT_SET
(
vÆue
Ë((()(vÆueË<< 
AUDIO_PLL_FRACT_MD_P
Ë& 
PLL_FRAC_MD_FRACT_M
)

	)

114 
	#AUDIO_PLL_MD_INT_SET
(
vÆue
Ë((()(vÆueË<< 
AUDIO_PLL_FRACT_MD_INT_P
Ë& 
AUDIO_PLL_FRACT_MD_INT_M
)

	)

118 
uöt32_t
 
	gs_PŒ_Fªq
;

119 
uöt32_t
 
	gs_Usb_PŒ_Fªq
;

120 
uöt32_t
 
	gs_Audio_PŒ_Fªq
;

126 c⁄° 
uöt32_t
 
	gg_I2S_M˛k_Fªq
 = 0U;

127 c⁄° 
uöt32_t
 
	gg_Ext_Clk_Fªq
 = 12000000U;

128 c⁄° 
uöt32_t
 
	gg_Lcd_Clk_In_Fªq
 = 0U;

138 
uöt32_t
 
∂lEncodeN
(uöt32_à
N
);

140 
uöt32_t
 
∂lDecodeN
(uöt32_à
NDEC
);

142 
uöt32_t
 
∂lEncodeP
(uöt32_à
P
);

144 
uöt32_t
 
∂lDecodeP
(uöt32_à
PDEC
);

146 
uöt32_t
 
∂lEncodeM
(uöt32_à
M
);

148 
uöt32_t
 
∂lDecodeM
(uöt32_à
MDEC
);

150 
∂lFödSñ
(
uöt32_t
 
M
, uöt32_à*
pSñP
, uöt32_à*
pSñI
, uöt32_à*
pSñR
);

152 
uöt32_t
 
födPŒPªDiv
(uöt32_à
˘æReg
, uöt32_à
nDecReg
);

154 
uöt32_t
 
födPŒPo°Div
(uöt32_à
˘æReg
, uöt32_à
pDecReg
);

156 
uöt32_t
 
födPŒMMu…
(uöt32_à
˘æReg
, uöt32_à
mDecReg
);

158 
Bö¨y2Fø˘i⁄Æ
(
uöt32_t
 
bö¨yP¨t
);

160 
uöt32_t
 
powî2CÆ
(uöt32_à
powîTimes
);

162 
uöt32_t
 
FödGª©e°Comm⁄Divis‹
(uöt32_à
m
, uöt32_à
n
);

164 
∂l_îr‹_t
 
CLOCK_GëPŒC⁄fig
(

165 
uöt32_t
 
föHz
, uöt32_à
foutHz
, 
∂l_£tup_t
 *
pSëup
);

168 
CLOCK_GëSy°emPLLOutFromSëupUpd©e
(
∂l_£tup_t
 *
pSëup
);

169 
CLOCK_GëAudioPLLOutFromSëupUpd©e
(
∂l_£tup_t
 *
pSëup
);

171 c⁄° 
uöt8_t
 
	gwdtFªqLookup
[32] = {0, 8, 12, 15, 18, 20, 24, 26, 28, 30, 32, 34, 36, 38, 40, 41, 42, 44, 45, 46,

178 
	$CLOCK_AâachClk
(
˛ock_©èch_id_t
 
c⁄√˘i⁄
)

180 
boﬁ
 
föÆ_des¸ùt‹
 = 
Ál£
;

181 
uöt8_t
 
mux
;

182 
uöt8_t
 
pos
;

183 
uöt32_t
 
i
;

184 vﬁ©ûê
uöt32_t
 *
pClkSñ
;

186 
pClkSñ
 = &(
SYSCON
->
MAINCLKSELA
);

188 
i
 = 0U; (ò<2UË&& (!
föÆ_des¸ùt‹
); i++)

190 
c⁄√˘i⁄
 = (
˛ock_©èch_id_t
)(c⁄√˘i⁄ >> (
i
 * 12U));

191 
mux
 = (
uöt8_t
)
c⁄√˘i⁄
;

192 i‡(
c⁄√˘i⁄
)

194 
pos
 = ((
c⁄√˘i⁄
 & 0xf00U) >> 8U) - 1U;

195 i‡(
mux
 =
CM_ASYNCAPB
)

197 
SYSCON
->
ASYNCAPBCTRL
 = 
	`SYSCON_ASYNCAPBCTRL_ENABLE
(1);

198 
ASYNC_SYSCON
->
ASYNCAPBCLKSELA
 = 
pos
;

202 
pClkSñ
[
mux
] = 
pos
;

207 
föÆ_des¸ùt‹
 = 
åue
;

210 
	}
}

213 
	$CLOCK_SëClkDiv
(
˛ock_div_«me_t
 
div_«me
, 
uöt32_t
 
divided_by_vÆue
, 
boﬁ
 
ª£t
)

215 vﬁ©ûê
uöt32_t
 *
pClkDiv
;

217 
pClkDiv
 = &(
SYSCON
->
SYSTICKCLKDIV
);

218 i‡(
ª£t
)

220 
pClkDiv
[
div_«me
] = 1U << 29U;

222 i‡(
divided_by_vÆue
 == 0U)

224 
pClkDiv
[
div_«me
] = 1U << 30U;

228 
pClkDiv
[
div_«me
] = (
divided_by_vÆue
 - 1U);

230 
	}
}

233 
°©us_t
 
	$CLOCK_SëupFROClockög
(
uöt32_t
 
iFªq
)

235 
uöt32_t
 
usb_adj
;

236 i‡((
iFªq
 != 12000000U) && (iFreq != 48000000U) && (iFreq != 96000000U))

238  
kSètus_Faû
;

241 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_FRO_EN
);

243 
usb_adj
 = ((
SYSCON
->
FROCTRL
Ë& 
SYSCON_FROCTRL_USBCLKADJ_MASK
Ë>> 
SYSCON_FROCTRL_USBCLKADJ_SHIFT
;

244 i‡(
iFªq
 > 12000000U)

246 i‡(
iFªq
 == 96000000U)

248 
SYSCON
->
FROCTRL
 = ((
SYSCON_FROCTRL_TRIM_MASK
 | 
SYSCON_FROCTRL_FREQTRIM_MASK
Ë& *
INDEX_SECTOR_TRIM96
) |

249 
	`SYSCON_FROCTRL_SEL
(1Ë| 
	`SYSCON_FROCTRL_WRTRIM
(1Ë| 
	`SYSCON_FROCTRL_USBCLKADJ
(
usb_adj
) |

250 
	`SYSCON_FROCTRL_HSPDCLK
(1);

254 
SYSCON
->
FROCTRL
 = ((
SYSCON_FROCTRL_TRIM_MASK
 | 
SYSCON_FROCTRL_FREQTRIM_MASK
Ë& *
INDEX_SECTOR_TRIM48
) |

255 
	`SYSCON_FROCTRL_SEL
(0Ë| 
	`SYSCON_FROCTRL_WRTRIM
(1Ë| 
	`SYSCON_FROCTRL_USBCLKADJ
(
usb_adj
) |

256 
	`SYSCON_FROCTRL_HSPDCLK
(1);

261 
SYSCON
->
FROCTRL
 &~
	`SYSCON_FROCTRL_HSPDCLK
(1);

265 
	}
}

268 
uöt32_t
 
	$CLOCK_GëClockOutClkFªq
()

270  (
SYSCON
->
CLKOUTSELA
 =0UË? 
	`CLOCK_GëC‹eSysClkFªq
():

271 (
SYSCON
->
CLKOUTSELA
 =1UË? 
	`CLOCK_GëExtClkFªq
():

272 (
SYSCON
->
CLKOUTSELA
 =2UË? 
	`CLOCK_GëWdtOscFªq
():

273 (
SYSCON
->
CLKOUTSELA
 =3UË? 
	`CLOCK_GëFroHfFªq
():

274 (
SYSCON
->
CLKOUTSELA
 =4UË? 
	`CLOCK_GëPŒOutFªq
():

275 (
SYSCON
->
CLKOUTSELA
 =5UË? 
	`CLOCK_GëUsbPŒOutFªq
():

276 (
SYSCON
->
CLKOUTSELA
 =6UË? 
	`CLOCK_GëAudioPŒOutFªq
():

277 (
SYSCON
->
CLKOUTSELA
 =7UË? 
	`CLOCK_GëOsc32KFªq
():0U;

278 
	}
}

281 
uöt32_t
 
	$CLOCK_GëSpifiClkFªq
()

283  (
SYSCON
->
SPIFICLKSEL
 =0UË? 
	`CLOCK_GëC‹eSysClkFªq
():

284 (
SYSCON
->
SPIFICLKSEL
 =1UË? 
	`CLOCK_GëPŒOutFªq
():

285 (
SYSCON
->
SPIFICLKSEL
 =2UË? 
	`CLOCK_GëUsbPŒOutFªq
():

286 (
SYSCON
->
SPIFICLKSEL
 =3UË? 
	`CLOCK_GëFroHfFªq
():

287 (
SYSCON
->
SPIFICLKSEL
 =4UË? 
	`CLOCK_GëAudioPŒOutFªq
():

288 (
SYSCON
->
SPIFICLKSEL
 == 7U) ? 0U:0U;

289 
	}
}

292 
uöt32_t
 
	$CLOCK_GëAdcClkFªq
()

294  (
SYSCON
->
ADCCLKSEL
 =0UË? 
	`CLOCK_GëFroHfFªq
():

295 (
SYSCON
->
ADCCLKSEL
 =1UË? 
	`CLOCK_GëPŒOutFªq
():

296 (
SYSCON
->
ADCCLKSEL
 =2UË? 
	`CLOCK_GëUsbPŒOutFªq
():

297 (
SYSCON
->
ADCCLKSEL
 =3UË? 
	`CLOCK_GëAudioPŒOutFªq
():

298 (
SYSCON
->
ADCCLKSEL
 == 7U) ? 0U:0U;

299 
	}
}

302 
uöt32_t
 
	$CLOCK_GëUsb0ClkFªq
()

304  (
SYSCON
->
USB0CLKSEL
 =0UË? 
	`CLOCK_GëFroHfFªq
():

305 (
SYSCON
->
USB0CLKSEL
 =1UË? 
	`CLOCK_GëPŒOutFªq
():

306 (
SYSCON
->
USB0CLKSEL
 =2UË? 
	`CLOCK_GëUsbPŒOutFªq
():

307 (
SYSCON
->
USB0CLKSEL
 == 7U) ? 0U:0U;

308 
	}
}

311 
uöt32_t
 
	$CLOCK_GëUsb1ClkFªq
()

314  (
SYSCON
->
USB1CLKSEL
 =0UË? 
	`CLOCK_GëC‹eSysClkFªq
():

315 (
SYSCON
->
USB1CLKSEL
 =1UË? 
	`CLOCK_GëPŒOutFªq
():

316 (
SYSCON
->
USB1CLKSEL
 =2UË? 
	`CLOCK_GëUsbPŒOutFªq
():

317 (
SYSCON
->
USB1CLKSEL
 == 7U) ? 0U:0U;

318 
	}
}

321 
uöt32_t
 
	$CLOCK_GëM˛kClkFªq
()

323  (
SYSCON
->
MCLKCLKSEL
 =0UË? 
	`CLOCK_GëFroHfFªq
(Ë/ ((SYSCON->
FROHFCLKDIV
 & 0xffu) + 1U):

324 (
SYSCON
->
MCLKCLKSEL
 =1UË? 
	`CLOCK_GëAudioPŒOutFªq
():

325 (
SYSCON
->
MCLKCLKSEL
 == 7U) ? 0U:0U;

326 
	}
}

329 
uöt32_t
 
	$CLOCK_GëS˘ClkFªq
()

331  (
SYSCON
->
SCTCLKSEL
 =0UË? 
	`CLOCK_GëC‹eSysClkFªq
():

332 (
SYSCON
->
SCTCLKSEL
 =1UË? 
	`CLOCK_GëPŒOutFªq
():

333 (
SYSCON
->
SCTCLKSEL
 =2UË? 
	`CLOCK_GëFroHfFªq
():

334 (
SYSCON
->
SCTCLKSEL
 =3UË? 
	`CLOCK_GëAudioPŒOutFªq
():

335 (
SYSCON
->
SCTCLKSEL
 == 7U) ? 0U:0U;

336 
	}
}

339 
uöt32_t
 
	$CLOCK_GëSdioClkFªq
()

341  (
SYSCON
->
SDIOCLKSEL
 =0UË? 
	`CLOCK_GëC‹eSysClkFªq
():

342 (
SYSCON
->
SDIOCLKSEL
 =1UË? 
	`CLOCK_GëPŒOutFªq
():

343 (
SYSCON
->
SDIOCLKSEL
 =2UË? 
	`CLOCK_GëUsbPŒOutFªq
():

344 (
SYSCON
->
SDIOCLKSEL
 =3UË? 
	`CLOCK_GëFroHfFªq
():

345 (
SYSCON
->
SDIOCLKSEL
 =4UË? 
	`CLOCK_GëAudioPŒOutFªq
():

346 (
SYSCON
->
SDIOCLKSEL
 == 7U) ? 0U:0U;

347 
	}
}

350 
uöt32_t
 
	$CLOCK_GëLcdClkFªq
()

352  (
SYSCON
->
LCDCLKSEL
 =0UË? 
	`CLOCK_GëC‹eSysClkFªq
():

353 (
SYSCON
->
LCDCLKSEL
 =1UË? 
	`CLOCK_GëLcdClkIn
():

354 (
SYSCON
->
LCDCLKSEL
 =2UË? 
	`CLOCK_GëFroHfFªq
():

355 (
SYSCON
->
LCDCLKSEL
 == 3U) ? 0U:0U;

356 
	}
}

359 
uöt32_t
 
	$CLOCK_GëLcdClkIn
()

361  
g_Lcd_Clk_In_Fªq
;

362 
	}
}

365 
uöt32_t
 
	$CLOCK_GëFro12MFªq
()

367  (
SYSCON
->
PDRUNCFG
[0] & 
SYSCON_PDRUNCFG_PDEN_FRO_MASK
) ? 0U : 12000000U;

368 
	}
}

371 
uöt32_t
 
	$CLOCK_GëExtClkFªq
()

373  
g_Ext_Clk_Fªq
;

374 
	}
}

377 
uöt32_t
 
	$CLOCK_GëWdtOscFªq
()

379 
uöt8_t
 
‰eq_£l
, 
div_£l
;

380 i‡(
SYSCON
->
PDRUNCFG
[0] & 
SYSCON_PDRUNCFG_PDEN_WDT_OSC_MASK
)

386 
div_£l
 = ((
SYSCON
->
WDTOSCCTRL
 & 0x1f) + 1) << 1;

387 
‰eq_£l
 = 
wdtFªqLookup
[((
SYSCON
->
WDTOSCCTRL
 & 
SYSCON_WDTOSCCTRL_FREQSEL_MASK
Ë>> 
SYSCON_WDTOSCCTRL_FREQSEL_SHIFT
)];

388  ((
uöt32_t
Ë
‰eq_£l
 * 50000U)/((uöt32_t)
div_£l
);

390 
	}
}

393 
uöt32_t
 
	$CLOCK_GëFroHfFªq
()

395  (
SYSCON
->
PDRUNCFG
[0] & 
SYSCON_PDRUNCFG_PDEN_FRO_MASK
) ? 0 :

396 !(
SYSCON
->
FROCTRL
 & 
SYSCON_FROCTRL_HSPDCLK_MASK
) ? 0 :

397 (
SYSCON
->
FROCTRL
 & 
SYSCON_FROCTRL_SEL_MASK
) ? 96000000U : 48000000U;

398 
	}
}

401 
uöt32_t
 
	$CLOCK_GëPŒOutFªq
()

403  
s_PŒ_Fªq
;

404 
	}
}

407 
uöt32_t
 
	$CLOCK_GëAudioPŒOutFªq
()

409  
s_Audio_PŒ_Fªq
;

410 
	}
}

413 
uöt32_t
 
	$CLOCK_GëUsbPŒOutFªq
()

415  
s_Usb_PŒ_Fªq
;

416 
	}
}

419 
uöt32_t
 
	$CLOCK_GëOsc32KFªq
()

421  
CLK_RTC_32K_CLK
;

422 
	}
}

425 
uöt32_t
 
	$CLOCK_GëC‹eSysClkFªq
()

427  ((
SYSCON
->
MAINCLKSELB
 =0UË&& (SYSCON->
MAINCLKSELA
 =0U)Ë? 
	`CLOCK_GëFro12MFªq
() :

428 ((
SYSCON
->
MAINCLKSELB
 =0UË&& (SYSCON->
MAINCLKSELA
 =1U)Ë? 
	`CLOCK_GëExtClkFªq
() :

429 ((
SYSCON
->
MAINCLKSELB
 =0UË&& (SYSCON->
MAINCLKSELA
 =2U)Ë? 
	`CLOCK_GëWdtOscFªq
() :

430 ((
SYSCON
->
MAINCLKSELB
 =0UË&& (SYSCON->
MAINCLKSELA
 =3U)Ë? 
	`CLOCK_GëFroHfFªq
() :

431 (
SYSCON
->
MAINCLKSELB
 =2UË? 
	`CLOCK_GëPŒOutFªq
() :

432 (
SYSCON
->
MAINCLKSELB
 =3UË? 
	`CLOCK_GëOsc32KFªq
() : 0U;

433 
	}
}

436 
uöt32_t
 
	$CLOCK_GëI2SMClkFªq
()

438  
g_I2S_M˛k_Fªq
;

439 
	}
}

442 
uöt32_t
 
	$CLOCK_GëAsyncApbClkFªq
()

444 
async_˛ock_§c_t
 
˛kSrc
;

445 
uöt32_t
 
˛kR©e
;

447 
˛kSrc
 = 
	`CLOCK_GëAsyncApbClkSrc
();

449 
˛kSrc
)

451 
kCLOCK_AsyncMaöClk
:

452 
˛kR©e
 = 
	`CLOCK_GëC‹eSysClkFªq
();

454 
kCLOCK_AsyncFro12Mhz
:

455 
˛kR©e
 = 
CLK_FRO_12MHZ
;

458 
˛kR©e
 = 0U;

462  
˛kR©e
;

463 
	}
}

466 
uöt32_t
 
	$CLOCK_GëFÀxCommClkFªq
(
uöt32_t
 
id
)

468  (
SYSCON
->
FCLKSEL
[
id
] =0UË? 
	`CLOCK_GëFro12MFªq
() :

469 (
SYSCON
->
FCLKSEL
[
id
] =1UË? 
	`CLOCK_GëFroHfFªq
() :

470 (
SYSCON
->
FCLKSEL
[
id
] =2UË? 
	`CLOCK_GëPŒOutFªq
() :

471 (
SYSCON
->
FCLKSEL
[
id
] =3UË? 
	`CLOCK_GëI2SMClkFªq
() :

472 (
SYSCON
->
FCLKSEL
[
id
] =4UË? 
	`CLOCK_GëFªq
(
kCLOCK_Frg
) : 0U;

473 
	}
}

476 
uöt32_t
 
	$CLOCK_GëFRGI≈utClock
()

478  (
SYSCON
->
FRGCLKSEL
 =0UË? 
	`CLOCK_GëC‹eSysClkFªq
() :

479 (
SYSCON
->
FRGCLKSEL
 =1UË? 
	`CLOCK_GëPŒOutFªq
() :

480 (
SYSCON
->
FRGCLKSEL
 =2UË? 
	`CLOCK_GëFro12MFªq
() :

481 (
SYSCON
->
FRGCLKSEL
 =3UË? 
	`CLOCK_GëFroHfFªq
() : 0U;

482 
	}
}

485 
uöt32_t
 
	$CLOCK_SëFRGClock
(
uöt32_t
 
‰eq
)

487 
uöt32_t
 
öput
 = 
	`CLOCK_GëFRGI≈utClock
();

488 
uöt32_t
 
mul
;

490 i‡((
‰eq
 > 48000000Ë|| (‰eq > 
öput
) || (input / freq >= 2))

497 
mul
 = ((
uöt64_t
)(
öput
 - 
‰eq
) * 256) / ((uint64_t)freq);

498 
SYSCON
->
FRGCTRL
 = (
mul
 << 
SYSCON_FRGCTRL_MULT_SHIFT
Ë| 
SYSCON_FRGCTRL_DIV_MASK
;

501 
	}
}

504 
uöt32_t
 
	$CLOCK_GëFªq
(
˛ock_«me_t
 
˛ockName
)

506 
uöt32_t
 
‰eq
;

507 
˛ockName
)

509 
kCLOCK_C‹eSysClk
:

510 
‰eq
 = 
	`CLOCK_GëC‹eSysClkFªq
();

512 
kCLOCK_BusClk
:

513 
‰eq
 = 
	`CLOCK_GëC‹eSysClkFªq
(Ë/ ((
SYSCON
->
AHBCLKDIV
 & 0xffU) + 1U);

515 
kCLOCK_ClockOut
:

516 
‰eq
 = 
	`CLOCK_GëClockOutClkFªq
(Ë/ ((
SYSCON
->
CLKOUTDIV
 & 0xffU) + 1U);

518 
kCLOCK_SpiFi
:

519 
‰eq
 = 
	`CLOCK_GëSpifiClkFªq
(Ë/ ((
SYSCON
->
SPIFICLKDIV
 & 0xffU) + 1U );

521 
kCLOCK_Adc
:

522 
‰eq
 = 
	`CLOCK_GëAdcClkFªq
(Ë/ ((
SYSCON
->
ADCCLKDIV
 & 0xffU) + 1U );

524 
kCLOCK_Usb0
:

525 
‰eq
 = 
	`CLOCK_GëUsb0ClkFªq
(Ë/ ((
SYSCON
->
USB0CLKDIV
 & 0xffU) + 1U );

527 
kCLOCK_Usb1
:

528 
‰eq
 = 
	`CLOCK_GëUsb1ClkFªq
(Ë/ ((
SYSCON
->
USB1CLKDIV
 & 0xffU) + 1U );

530 
kCLOCK_M˛k
:

531 
‰eq
 = 
	`CLOCK_GëM˛kClkFªq
(Ë/ ((
SYSCON
->
MCLKDIV
 & 0xffU) + 1U );

533 
kCLOCK_FroHf
:

534 
‰eq
 = 
	`CLOCK_GëFroHfFªq
();

536 
kCLOCK_Fro12M
:

537 
‰eq
 = 
	`CLOCK_GëFro12MFªq
();

539 
kCLOCK_ExtClk
:

540 
‰eq
 = 
	`CLOCK_GëExtClkFªq
();

542 
kCLOCK_PŒOut
:

543 
‰eq
 = 
	`CLOCK_GëPŒOutFªq
();

545 
kClock_WdtOsc
:

546 
‰eq
 = 
	`CLOCK_GëWdtOscFªq
();

548 
kCLOCK_Frg
:

549 
‰eq
 = (
SYSCON
->
FRGCLKSEL
 =0UË? 
	`CLOCK_GëC‹eSysClkFªq
() :

550 (
SYSCON
->
FRGCLKSEL
 =1UË? 
	`CLOCK_GëPŒOutFªq
() :

551 (
SYSCON
->
FRGCLKSEL
 =2UË? 
	`CLOCK_GëFro12MFªq
() :

552 (
SYSCON
->
FRGCLKSEL
 =3UË? 
	`CLOCK_GëFroHfFªq
() : 0U;

554 
kCLOCK_Dmic
:

555 
‰eq
 = (
SYSCON
->
DMICCLKSEL
 =0UË? 
	`CLOCK_GëFro12MFªq
() :

556 (
SYSCON
->
DMICCLKSEL
 =1UË? 
	`CLOCK_GëFroHfFªq
() :

557 (
SYSCON
->
DMICCLKSEL
 =2UË? 
	`CLOCK_GëPŒOutFªq
() :

558 (
SYSCON
->
DMICCLKSEL
 =3UË? 
	`CLOCK_GëI2SMClkFªq
() :

559 (
SYSCON
->
DMICCLKSEL
 =4UË? 
	`CLOCK_GëC‹eSysClkFªq
() :

560 (
SYSCON
->
DMICCLKSEL
 =5UË? 
	`CLOCK_GëWdtOscFªq
() : 0U;

561 
‰eq
 = fªq / ((
SYSCON
->
DMICCLKDIV
 & 0xffU) + 1U);

564 
kCLOCK_AsyncApbClk
:

565 
‰eq
 = 
	`CLOCK_GëAsyncApbClkFªq
();

567 
kCLOCK_S˘
:

568 
‰eq
 = 
	`CLOCK_GëS˘ClkFªq
(Ë/ ((
SYSCON
->
SCTCLKDIV
 & 0xffU) + 1U);

570 
kCLOCK_SDio
:

571 
‰eq
 = 
	`CLOCK_GëSdioClkFªq
(Ë/ ((
SYSCON
->
SDIOCLKDIV
 & 0xffU) + 1U);

573 
kCLOCK_EMC
:

574 
‰eq
 = 
	`CLOCK_GëC‹eSysClkFªq
(Ë/ ((
SYSCON
->
AHBCLKDIV
 & 0xffUË+ 1UË/ ((SYSCON->
EMCCLKDIV
 & 0xffU) + 1U);

576 
kCLOCK_LCD
:

577 
‰eq
 = 
	`CLOCK_GëLcdClkFªq
(Ë/ ((
SYSCON
->
LCDCLKDIV
 & 0xffU) + 1U);

579 
kCLOCK_MCAN0
:

580 
‰eq
 = 
	`CLOCK_GëC‹eSysClkFªq
(Ë/ ((
SYSCON
->
CAN0CLKDIV
 & 0xffU) + 1U);

582 
kCLOCK_MCAN1
:

583 
‰eq
 = 
	`CLOCK_GëC‹eSysClkFªq
(Ë/ ((
SYSCON
->
CAN1CLKDIV
 & 0xffU) + 1U);

585 
kCLOCK_FÀxI2S
:

586 
‰eq
 = 
	`CLOCK_GëI2SMClkFªq
();

588 
kCLOCK_FÀxcomm0
:

589 
‰eq
 = 
	`CLOCK_GëFÀxCommClkFªq
(0U);

591 
kCLOCK_FÀxcomm1
:

592 
‰eq
 = 
	`CLOCK_GëFÀxCommClkFªq
(1U);

594 
kCLOCK_FÀxcomm2
:

595 
‰eq
 = 
	`CLOCK_GëFÀxCommClkFªq
(2U);

597 
kCLOCK_FÀxcomm3
:

598 
‰eq
 = 
	`CLOCK_GëFÀxCommClkFªq
(3U);

600 
kCLOCK_FÀxcomm4
:

601 
‰eq
 = 
	`CLOCK_GëFÀxCommClkFªq
(4U);

603 
kCLOCK_FÀxcomm5
:

604 
‰eq
 = 
	`CLOCK_GëFÀxCommClkFªq
(5U);

606 
kCLOCK_FÀxcomm6
:

607 
‰eq
 = 
	`CLOCK_GëFÀxCommClkFªq
(6U);

609 
kCLOCK_FÀxcomm7
:

610 
‰eq
 = 
	`CLOCK_GëFÀxCommClkFªq
(7U);

612 
kCLOCK_FÀxcomm8
:

613 
‰eq
 = 
	`CLOCK_GëFÀxCommClkFªq
(8U);

615 
kCLOCK_FÀxcomm9
:

616 
‰eq
 = 
	`CLOCK_GëFÀxCommClkFªq
(9U);

619 
‰eq
 = 0U;

623  
‰eq
;

624 
	}
}

627 
	$CLOCK_SëFLASHAc˚ssCy˛esF‹Fªq
(
uöt32_t
 
iFªq
)

629 i‡(
iFªq
 <= 12000000U)

631 
	`CLOCK_SëFLASHAc˚ssCy˛es
(
kCLOCK_Fœsh1Cy˛e
);

633 i‡(
iFªq
 <= 24000000U)

635 
	`CLOCK_SëFLASHAc˚ssCy˛es
(
kCLOCK_Fœsh2Cy˛e
);

637 i‡(
iFªq
 <= 36000000U)

639 
	`CLOCK_SëFLASHAc˚ssCy˛es
(
kCLOCK_Fœsh3Cy˛e
);

641 i‡(
iFªq
 <= 60000000U)

643 
	`CLOCK_SëFLASHAc˚ssCy˛es
(
kCLOCK_Fœsh4Cy˛e
);

645 i‡(
iFªq
 <= 96000000U)

647 
	`CLOCK_SëFLASHAc˚ssCy˛es
(
kCLOCK_Fœsh5Cy˛e
);

649 i‡(
iFªq
 <= 120000000U)

651 
	`CLOCK_SëFLASHAc˚ssCy˛es
(
kCLOCK_Fœsh6Cy˛e
);

653 i‡(
iFªq
 <= 144000000U)

655 
	`CLOCK_SëFLASHAc˚ssCy˛es
(
kCLOCK_Fœsh7Cy˛e
);

657 i‡(
iFªq
 <= 168000000U)

659 
	`CLOCK_SëFLASHAc˚ssCy˛es
(
kCLOCK_Fœsh8Cy˛e
);

663 
	`CLOCK_SëFLASHAc˚ssCy˛es
(
kCLOCK_Fœsh9Cy˛e
);

665 
	}
}

668 
uöt32_t
 
	$∂lEncodeN
(
uöt32_t
 
N
)

670 
uöt32_t
 
x
, 
i
;

673 
N
)

676 
x
 = 0x3FFU;

680 
x
 = 0x302U;

684 
x
 = 0x202U;

688 
x
 = 0x080U;

689 
i
 = 
N
; i <
NVALMAX
; i++)

691 
x
 = (((x ^ (x >> 2U) ^ (x >> 3U) ^ (x >> 4U)) & 1U) << 7U) | ((x >> 1U) & 0x7FU);

696  
x
 & (
PLL_NDEC_VAL_M
 >> 
PLL_NDEC_VAL_P
);

697 
	}
}

700 
uöt32_t
 
	$∂lDecodeN
(
uöt32_t
 
NDEC
)

702 
uöt32_t
 
n
, 
x
, 
i
;

705 
NDEC
)

708 
n
 = 0U;

712 
n
 = 1U;

716 
n
 = 2U;

720 
x
 = 0x080U;

721 
n
 = 0xFFFFFFFFU;

722 
i
 = 
NVALMAX
; ((ò>3UË&& (
n
 == 0xFFFFFFFFU)); i--)

724 
x
 = (((x ^ (x >> 2U) ^ (x >> 3U) ^ (x >> 4U)) & 1U) << 7U) | ((x >> 1U) & 0x7FU);

725 i‡((
x
 & (
PLL_NDEC_VAL_M
 >> 
PLL_NDEC_VAL_P
)Ë=
NDEC
)

728 
n
 = 
i
;

734  
n
;

735 
	}
}

738 
uöt32_t
 
	$∂lEncodeP
(
uöt32_t
 
P
)

740 
uöt32_t
 
x
, 
i
;

743 
P
)

746 
x
 = 0x7FU;

750 
x
 = 0x62U;

754 
x
 = 0x42U;

758 
x
 = 0x10U;

759 
i
 = 
P
; i <
PVALMAX
; i++)

761 
x
 = (((x ^ (x >> 2U)) & 1U) << 4U) | ((x >> 1U) & 0xFU);

766  
x
 & (
PLL_PDEC_VAL_M
 >> 
PLL_PDEC_VAL_P
);

767 
	}
}

770 
uöt32_t
 
	$∂lDecodeP
(
uöt32_t
 
PDEC
)

772 
uöt32_t
 
p
, 
x
, 
i
;

775 
PDEC
)

778 
p
 = 0U;

782 
p
 = 1U;

786 
p
 = 2U;

790 
x
 = 0x10U;

791 
p
 = 0xFFFFFFFFU;

792 
i
 = 
PVALMAX
; ((ò>3UË&& (
p
 == 0xFFFFFFFFU)); i--)

794 
x
 = (((x ^ (x >> 2U)) & 1U) << 4U) | ((x >> 1U) & 0xFU);

795 i‡((
x
 & (
PLL_PDEC_VAL_M
 >> 
PLL_PDEC_VAL_P
)Ë=
PDEC
)

798 
p
 = 
i
;

804  
p
;

805 
	}
}

808 
uöt32_t
 
	$∂lEncodeM
(
uöt32_t
 
M
)

810 
uöt32_t
 
i
, 
x
;

813 
M
)

816 
x
 = 0x1FFFFU;

820 
x
 = 0x18003U;

824 
x
 = 0x10003U;

828 
x
 = 0x04000U;

829 
i
 = 
M
; i <
MVALMAX
; i++)

831 
x
 = (((x ^ (x >> 1U)) & 1U) << 14U) | ((x >> 1U) & 0x3FFFU);

836  
x
 & (
PLL_MDEC_VAL_M
 >> 
PLL_MDEC_VAL_P
);

837 
	}
}

840 
uöt32_t
 
	$∂lDecodeM
(
uöt32_t
 
MDEC
)

842 
uöt32_t
 
m
, 
i
, 
x
;

845 
MDEC
)

848 
m
 = 0U;

852 
m
 = 1U;

856 
m
 = 2U;

860 
x
 = 0x04000U;

861 
m
 = 0xFFFFFFFFU;

862 
i
 = 
MVALMAX
; ((ò>3UË&& (
m
 == 0xFFFFFFFFU)); i--)

864 
x
 = (((x ^ (x >> 1U)) & 1) << 14U) | ((x >> 1U) & 0x3FFFU);

865 i‡((
x
 & (
PLL_MDEC_VAL_M
 >> 
PLL_MDEC_VAL_P
)Ë=
MDEC
)

868 
m
 = 
i
;

874  
m
;

875 
	}
}

878 
	$∂lFödSñ
(
uöt32_t
 
M
, uöt32_à*
pSñP
, uöt32_à*
pSñI
, uöt32_à*
pSñR
)

881 i‡(
M
 < 60U)

883 *
pSñP
 = (
M
 >> 1U) + 1U;

887 *
pSñP
 = 
PVALMAX
 - 1U;

891 i‡(
M
 > 16384U)

893 *
pSñI
 = 1U;

895 i‡(
M
 > 8192U)

897 *
pSñI
 = 2U;

899 i‡(
M
 > 2048U)

901 *
pSñI
 = 4U;

903 i‡(
M
 >= 501U)

905 *
pSñI
 = 8U;

907 i‡(
M
 >= 60U)

909 *
pSñI
 = 4U * (1024U / (
M
 + 9U));

913 *
pSñI
 = (
M
 & 0x3CU) + 4U;

916 i‡(*
pSñI
 > ((0x3FUL << 
SYSCON_SYSPLLCTRL_SELI_SHIFT
) >> SYSCON_SYSPLLCTRL_SELI_SHIFT))

918 *
pSñI
 = ((0x3FUL << 
SYSCON_SYSPLLCTRL_SELI_SHIFT
) >> SYSCON_SYSPLLCTRL_SELI_SHIFT);

921 *
pSñR
 = 0U;

922 
	}
}

925 
uöt32_t
 
	$födPŒPªDiv
(
uöt32_t
 
˘æReg
, uöt32_à
nDecReg
)

927 
uöt32_t
 
¥eDiv
 = 1;

930 i‡((
˘æReg
 & (1UL << 
SYSCON_SYSPLLCTRL_DIRECTI_SHIFT
)) == 0U)

933 
¥eDiv
 = 
	`∂lDecodeN
(
nDecReg
 & 0x3FFU);

934 i‡(
¥eDiv
 == 0U)

936 
¥eDiv
 = 1U;

941  
¥eDiv
;

942 
	}
}

945 
uöt32_t
 
	$födPŒPo°Div
(
uöt32_t
 
˘æReg
, uöt32_à
pDecReg
)

947 
uöt32_t
 
po°Div
 = 1U;

950 i‡((
˘æReg
 & 
SYSCON_SYSPLLCTRL_DIRECTO_MASK
) == 0U)

953 
po°Div
 = 2U * 
	`∂lDecodeP
(
pDecReg
 & 0x7FU);

954 i‡(
po°Div
 == 0U)

956 
po°Div
 = 2U;

961  
po°Div
;

962 
	}
}

965 
uöt32_t
 
	$födPŒMMu…
(
uöt32_t
 
˘æReg
, uöt32_à
mDecReg
)

967 
uöt32_t
 
mMu…
 = 1U;

970 
mMu…
 = 
	`∂lDecodeM
(
mDecReg
 & 0x1FFFFU);

972 i‡(
mMu…
 == 0U)

974 
mMu…
 = 1U;

977  
mMu…
;

978 
	}
}

981 
uöt32_t
 
	$powî2CÆ
(
uöt32_t
 
powîTimes
)

983 i‡(
powîTimes
 == 0)

985  2 * 
	`powî2CÆ
(
powîTimes
 - 1);

986 
	}
}

989 
	$Bö¨y2Fø˘i⁄Æ
(
uöt32_t
 
bö¨yP¨t
)

991 
‰a˘i⁄Æ
 = 0;

992 
uöt32_t
 
i
 = 0; i <= 14; i++)

994 
‰a˘i⁄Æ
 +()((
bö¨yP¨t
 >> 
i
Ë& 0x1UË/ ()
	`powî2CÆ
(15 - i);

996  
‰a˘i⁄Æ
;

997 
	}
}

1000 
uöt32_t
 
	$FödGª©e°Comm⁄Divis‹
(
uöt32_t
 
m
, uöt32_à
n
)

1002 
uöt32_t
 
tmp
;

1004 
n
 != 0U)

1006 
tmp
 = 
n
;

1007 
n
 = 
m
 %Ç;

1008 
m
 = 
tmp
;

1011  
m
;

1012 
	}
}

1020 
∂l_îr‹_t
 
	$CLOCK_GëPŒC⁄figI¡î«l
(

1021 
uöt32_t
 
föHz
, uöt32_à
foutHz
, 
∂l_£tup_t
 *
pSëup
)

1023 
uöt32_t
 
nDivOutHz
, 
fccoHz
, 
mu…FccoDiv
;

1024 
uöt32_t
 
∂lPªDividî
, 
∂lMu…ùlõr
, 
∂lPo°Dividî
;

1025 
uöt32_t
 
∂lDúe˘I≈ut
, 
∂lDúe˘Ouçut
;

1026 
uöt32_t
 
∂lSñP
, 
∂lSñI
, 
∂lSñR
, 
u∂imoff
;

1029 
∂lPªDividî
 = 1U;

1030 
∂lPo°Dividî
 = 0U;

1031 
∂lDúe˘Ouçut
 = 1U;

1032 
mu…FccoDiv
 = 2U;

1035 i‡(
foutHz
 > 
PLL_MAX_CCO_FREQ_MHZ
)

1038  
kSètus_PLL_OuçutTooHigh
;

1040 i‡(
foutHz
 < (
PLL_MIN_CCO_FREQ_MHZ
 / (
PVALMAX
 << 1U)))

1043  
kSètus_PLL_OuçutTooLow
;

1047 i‡(
föHz
 < 
PLL_LOWER_IN_LIMIT
)

1050  
kSètus_PLL_I≈utTooLow
;

1056 
fccoHz
 = 
foutHz
;

1057 
fccoHz
 < 
PLL_MIN_CCO_FREQ_MHZ
)

1062 
∂lPo°Dividî
++;

1063 i‡(
∂lPo°Dividî
 > 
PVALMAX
)

1065  
kSètus_PLL_OutsideI¡Limô
;

1069 
fccoHz
 = 
foutHz
 * (
∂lPo°Dividî
 * 2U);

1070 
∂lDúe˘Ouçut
 = 0U;

1074 i‡((
föHz
 > 
PLL_LOWER_IN_LIMIT
Ë&& (
fccoHz
 >= finHz))

1076 
uöt32_t
 
a
 = 
	`FödGª©e°Comm⁄Divis‹
(
fccoHz
, (
mu…FccoDiv
 * 
föHz
));

1078 i‡(
a
 > 20000U)

1080 
a
 = (
mu…FccoDiv
 * 
föHz
) /á;

1081 i‡((
a
 !0UË&& (®< 
PLL_MAX_N_DIV
))

1083 
∂lPªDividî
 = 
a
;

1089 i‡(
∂lPªDividî
 > 1U)

1091 
∂lDúe˘I≈ut
 = 0U;

1095 
∂lDúe˘I≈ut
 = 1U;

1099 
nDivOutHz
 = (
föHz
 / 
∂lPªDividî
);

1100 
∂lMu…ùlõr
 = (
fccoHz
 / 
nDivOutHz
Ë/ 
mu…FccoDiv
;

1104 i‡((
nDivOutHz
 * ((
mu…FccoDiv
 * 
∂lMu…ùlõr
 * 2UË+ 1U)Ë< (
fccoHz
 * 2U))

1106 
∂lMu…ùlõr
++;

1110 
	`∂lFödSñ
(
∂lMu…ùlõr
, &
∂lSñP
, &
∂lSñI
, &
∂lSñR
);

1111 
u∂imoff
 = 0U;

1114 
pSëup
->
∂lmdec
 =

1115 
	`PLL_MDEC_VAL_SET
(
	`∂lEncodeM
(
∂lMu…ùlõr
)) ;

1118 
pSëup
->
∂ dec
 = 
	`PLL_NDEC_VAL_SET
(
	`∂lEncodeN
(
∂lPªDividî
));

1119 
pSëup
->
∂Õdec
 = 
	`PLL_PDEC_VAL_SET
(
	`∂lEncodeP
(
∂lPo°Dividî
));

1122 
pSëup
->
∂l˘æ
 = (
∂lSñR
 << 
SYSCON_SYSPLLCTRL_SELR_SHIFT
) |

1123 (
∂lSñI
 << 
SYSCON_SYSPLLCTRL_SELI_SHIFT
) |

1124 (
∂lSñP
 << 
SYSCON_SYSPLLCTRL_SELP_SHIFT
) |

1125 (0 << 
SYSCON_SYSPLLCTRL_BYPASS_SHIFT
) |

1126 (
u∂imoff
 << 
SYSCON_SYSPLLCTRL_UPLIMOFF_SHIFT
) |

1127 (
∂lDúe˘I≈ut
 << 
SYSCON_SYSPLLCTRL_DIRECTI_SHIFT
) |

1128 (
∂lDúe˘Ouçut
 << 
SYSCON_SYSPLLCTRL_DIRECTO_SHIFT
);

1130  
kSètus_PLL_Suc˚ss
;

1131 
	}
}

1133 #i‡(
deföed
(
CLOCK_USR_CFG_PLL_CONFIG_CACHE_COUNT
) && CLOCK_USR_CFG_PLL_CONFIG_CACHE_COUNT)

1135 
∂l_£tup_t
 
	ggPŒSëupCacheSåu˘
[
CLOCK_USR_CFG_PLL_CONFIG_CACHE_COUNT
];

1136 
uöt32_t
 
	ggFöHzCache
[
CLOCK_USR_CFG_PLL_CONFIG_CACHE_COUNT
] = {0};

1137 
uöt32_t
 
	ggFoutHzCache
[
CLOCK_USR_CFG_PLL_CONFIG_CACHE_COUNT
] = {0};

1138 
uöt32_t
 
	ggPŒSëupCacheIdx
 = 0U;

1144 
∂l_îr‹_t
 
	$CLOCK_GëPŒC⁄fig
(

1145 
uöt32_t
 
föHz
, uöt32_à
foutHz
, 
∂l_£tup_t
 *
pSëup
)

1147 
∂l_îr‹_t
 
ªtEº
;

1148 #i‡(
	`deföed
(
CLOCK_USR_CFG_PLL_CONFIG_CACHE_COUNT
) && CLOCK_USR_CFG_PLL_CONFIG_CACHE_COUNT)

1149 
uöt32_t
 
i
;

1151 
i
 = 0U; i < 
CLOCK_USR_CFG_PLL_CONFIG_CACHE_COUNT
; i++)

1153 i‡–(
föHz
 =
gFöHzCache
[
i
]Ë&& (
foutHz
 =
gFoutHzCache
[i]) )

1156 
pSëup
->
∂l˘æ
 = 
gPŒSëupCacheSåu˘
[
i
].pllctrl;

1157 
pSëup
->
∂ dec
 = 
gPŒSëupCacheSåu˘
[
i
].pllndec;

1158 
pSëup
->
∂Õdec
 = 
gPŒSëupCacheSåu˘
[
i
].pllpdec;

1159 
pSëup
->
∂lmdec
 = 
gPŒSëupCacheSåu˘
[
i
].pllmdec;

1160 
ªtEº
 = 
kSètus_PLL_Suc˚ss
;

1164 i‡(
i
 < 
CLOCK_USR_CFG_PLL_CONFIG_CACHE_COUNT
)

1166  
ªtEº
;

1171 
ªtEº
 = 
	`CLOCK_GëPŒC⁄figI¡î«l
(
föHz
, 
foutHz
, 
pSëup
);

1173 #i‡(
	`deföed
(
CLOCK_USR_CFG_PLL_CONFIG_CACHE_COUNT
) && CLOCK_USR_CFG_PLL_CONFIG_CACHE_COUNT)

1174 i‡(
kSètus_PLL_Suc˚ss
 =
ªtEº
)

1177 
gFöHzCache
[
gPŒSëupCacheIdx
] = 
föHz
;

1178 
gFoutHzCache
[
gPŒSëupCacheIdx
] = 
foutHz
;

1180 
gPŒSëupCacheSåu˘
[
gPŒSëupCacheIdx
].
∂l˘æ
 = 
pSëup
->pllctrl;

1181 
gPŒSëupCacheSåu˘
[
gPŒSëupCacheIdx
].
∂ dec
 = 
pSëup
->pllndec;

1182 
gPŒSëupCacheSåu˘
[
gPŒSëupCacheIdx
].
∂Õdec
 = 
pSëup
->pllpdec;

1183 
gPŒSëupCacheSåu˘
[
gPŒSëupCacheIdx
].
∂lmdec
 = 
pSëup
->pllmdec;

1185 
gPŒSëupCacheIdx
 = (gPŒSëupCacheIdx + 1UË% 
CLOCK_USR_CFG_PLL_CONFIG_CACHE_COUNT
;

1189  
ªtEº
;

1190 
	}
}

1193 
	$CLOCK_GëSy°emPLLOutFromSëupUpd©e
(
∂l_£tup_t
 *
pSëup
)

1195 
s_PŒ_Fªq
 = 
	`CLOCK_GëSy°emPLLOutFromSëup
(
pSëup
);

1196 
	}
}

1199 
	$CLOCK_GëAudioPLLOutFromSëupUpd©e
(
∂l_£tup_t
 *
pSëup
)

1201 
s_Audio_PŒ_Fªq
 = 
	`CLOCK_GëAudioPLLOutFromSëup
(
pSëup
);

1202 
	}
}

1205 
	$CLOCK_GëAudioPLLOutFromAudioFøcSëupUpd©e
(
∂l_£tup_t
 *
pSëup
)

1207 
s_Audio_PŒ_Fªq
 = 
	`CLOCK_GëAudioPLLOutFromFø˘Sëup
(
pSëup
);

1208 
	}
}

1211 
	$CLOCK_GëUsbPLLOutFromSëupUpd©e
(c⁄° 
usb_∂l_£tup_t
 *
pSëup
)

1213 
s_Usb_PŒ_Fªq
 = 
	`CLOCK_GëUsbPLLOutFromSëup
(
pSëup
);

1214 
	}
}

1217 
uöt32_t
 
	$CLOCK_GëSy°emPLLInClockR©e
()

1219 
uöt32_t
 
˛kR©e
 = 0U;

1221 (
SYSCON
->
SYSPLLCLKSEL
 & 
SYSCON_SYSPLLCLKSEL_SEL_MASK
))

1224 
˛kR©e
 = 
CLK_FRO_12MHZ
;

1228 
˛kR©e
 = 
	`CLOCK_GëExtClkFªq
();

1232 
˛kR©e
 = 
	`CLOCK_GëWdtOscFªq
();

1236 
˛kR©e
 = 
	`CLOCK_GëOsc32KFªq
();

1240 
˛kR©e
 = 0U;

1244  
˛kR©e
;

1245 
	}
}

1248 
uöt32_t
 
	$CLOCK_GëAudioPLLInClockR©e
()

1250 
uöt32_t
 
˛kR©e
 = 0U;

1252 (
SYSCON
->
AUDPLLCLKSEL
 & 
SYSCON_AUDPLLCLKSEL_SEL_MASK
))

1255 
˛kR©e
 = 
CLK_FRO_12MHZ
;

1259 
˛kR©e
 = 
	`CLOCK_GëExtClkFªq
();

1263 
˛kR©e
 = 0U;

1267  
˛kR©e
;

1268 
	}
}

1271 
uöt32_t
 
	$CLOCK_GëSy°emPLLOutFromSëup
(
∂l_£tup_t
 *
pSëup
)

1273 
uöt32_t
 
¥ediv
, 
po°div
, 
mMu…
, 
öPŒR©e
;

1274 
uöt64_t
 
w‹kR©e
;

1276 
öPŒR©e
 = 
	`CLOCK_GëSy°emPLLInClockR©e
();

1278 i‡((
pSëup
->
∂l˘æ
 & (
SYSCON_SYSPLLCTRL_BYPASS_MASK
)) == 0U)

1285 i‡(0U =(
pSëup
->
∂l˘æ
 & 
SYSCON_SYSPLLCTRL_DIRECTI_MASK
))

1287 
¥ediv
 = 
	`födPŒPªDiv
(
pSëup
->
∂l˘æ
,ÖSëup->
∂ dec
);

1291 
¥ediv
 = 1U;

1297 i‡(0U =(
pSëup
->
∂l˘æ
 & 
SYSCON_SYSPLLCTRL_DIRECTO_MASK
))

1299 
po°div
 = 
	`födPŒPo°Div
(
pSëup
->
∂l˘æ
,ÖSëup->
∂Õdec
);

1303 
po°div
 = 1U;

1306 
öPŒR©e
 = inPŒR©ê/ 
¥ediv
;

1309 
mMu…
 = 
	`födPŒMMu…
(
pSëup
->
∂l˘æ
,ÖSëup->
∂lmdec
);

1310 
w‹kR©e
 = (
uöt64_t
)
öPŒR©e
 * (uöt64_t)
mMu…
;

1312 
w‹kR©e
 = w‹kR©ê/ ((
uöt64_t
)
po°div
);

1313 
w‹kR©e
 = workRate * 2U;

1319 
w‹kR©e
 = (
uöt64_t
)
öPŒR©e
;

1322  (
uöt32_t
)
w‹kR©e
;

1323 
	}
}

1326 
uöt32_t
 
	$CLOCK_GëUsbPLLOutFromSëup
(c⁄° 
usb_∂l_£tup_t
 *
pSëup
)

1328 
uöt32_t
 
n£l
, 
p£l
, 
m£l
, 
öPŒR©e
;

1329 
uöt64_t
 
w‹kR©e
;

1330 
öPŒR©e
 = 
	`CLOCK_GëExtClkFªq
();

1331 
m£l
 = 
pSëup
->msel;

1332 
p£l
 = 
pSëup
->psel;

1333 
n£l
 = 
pSëup
->nsel;

1335 i‡(
pSëup
->
fb£l
 == 1U)

1338 
w‹kR©e
 = (
öPŒR©e
Ë* (
m£l
 + 1UË/ (
n£l
 + 1U);

1343 
w‹kR©e
 = (
öPŒR©e
 / (
n£l
 + 1U)Ë* (
m£l
 + 1UË/ (2U * 
	`SWITCH_USB_PSEL
(
p£l
));

1346  (
uöt32_t
)
w‹kR©e
;

1347 
	}
}

1350 
uöt32_t
 
	$CLOCK_GëAudioPLLOutFromSëup
(
∂l_£tup_t
 *
pSëup
)

1352 
uöt32_t
 
¥ediv
, 
po°div
, 
mMu…
, 
öPŒR©e
;

1353 
uöt64_t
 
w‹kR©e
;

1355 
öPŒR©e
 = 
	`CLOCK_GëAudioPLLInClockR©e
();

1356 i‡((
pSëup
->
∂l˘æ
 & (1UL << 
SYSCON_SYSPLLCTRL_BYPASS_SHIFT
)) == 0U)

1363 i‡(0U =(
pSëup
->
∂l˘æ
 & 
SYSCON_AUDPLLCTRL_DIRECTI_MASK
))

1365 
¥ediv
 = 
	`födPŒPªDiv
(
pSëup
->
∂l˘æ
,ÖSëup->
∂ dec
);

1369 
¥ediv
 = 1U;

1375 i‡(0U =(
pSëup
->
∂l˘æ
 & 
SYSCON_AUDPLLCTRL_DIRECTO_MASK
))

1377 
po°div
 = 
	`födPŒPo°Div
(
pSëup
->
∂l˘æ
,ÖSëup->
∂Õdec
);

1381 
po°div
 = 1U;

1384 
öPŒR©e
 = inPŒR©ê/ 
¥ediv
;

1387 
mMu…
 = 
	`födPŒMMu…
(
pSëup
->
∂l˘æ
,ÖSëup->
∂lmdec
);

1388 
w‹kR©e
 = (
uöt64_t
)
öPŒR©e
 * (uöt64_t)
mMu…
;

1390 
w‹kR©e
 = w‹kR©ê/ ((
uöt64_t
)
po°div
);

1391 
w‹kR©e
 = workRate * 2U;

1396 
w‹kR©e
 = (
uöt64_t
)
öPŒR©e
;

1399  (
uöt32_t
)
w‹kR©e
;

1400 
	}
}

1403 
uöt32_t
 
	$CLOCK_GëAudioPLLOutFromFø˘Sëup
(
∂l_£tup_t
 *
pSëup
)

1405 
uöt32_t
 
¥ediv
, 
po°div
, 
öPŒR©e
;

1406 
w‹kR©e
, 
mMu…Fa˘i⁄Æ
;

1408 
öPŒR©e
 = 
	`CLOCK_GëAudioPLLInClockR©e
();

1409 i‡((
pSëup
->
∂l˘æ
 & (1UL << 
SYSCON_SYSPLLCTRL_BYPASS_SHIFT
)) == 0U)

1416 i‡(0U =(
pSëup
->
∂l˘æ
 & 
SYSCON_AUDPLLCTRL_DIRECTI_MASK
))

1418 
¥ediv
 = 
	`födPŒPªDiv
(
pSëup
->
∂l˘æ
,ÖSëup->
∂ dec
);

1422 
¥ediv
 = 1U;

1428 i‡(0U =(
pSëup
->
∂l˘æ
 & 
SYSCON_AUDPLLCTRL_DIRECTO_MASK
))

1430 
po°div
 = 
	`födPŒPo°Div
(
pSëup
->
∂l˘æ
,ÖSëup->
∂Õdec
);

1434 
po°div
 = 1U;

1437 
öPŒR©e
 = inPŒR©ê/ 
¥ediv
;

1439 
mMu…Fa˘i⁄Æ
 = ()(
pSëup
->
aud∂l‰ac
 >> 15Ë+ ()
	`Bö¨y2Fø˘i⁄Æ
(pSetup->audpllfrac & 0x7FFFU);

1440 
w‹kR©e
 = ()
öPŒR©e
 * ()
mMu…Fa˘i⁄Æ
;

1442 
w‹kR©e
 = w‹kR©ê/ (()
po°div
);

1443 
w‹kR©e
 = workRate * 2U;

1448 
w‹kR©e
 = (
uöt64_t
)
öPŒR©e
;

1451  (
uöt32_t
)
w‹kR©e
;

1452 
	}
}

1455 
	$CLOCK_SëSt‹edPLLClockR©e
(
uöt32_t
 
øã
)

1457 
s_PŒ_Fªq
 = 
øã
;

1458 
	}
}

1461 
	$CLOCK_SëSt‹edAudioPLLClockR©e
(
uöt32_t
 
øã
)

1463 
s_Audio_PŒ_Fªq
 = 
øã
;

1464 
	}
}

1467 
	$CLOCK_SëSt‹edUsbPLLClockR©e
(
uöt32_t
 
øã
)

1469 
s_Usb_PŒ_Fªq
 = 
øã
;

1470 
	}
}

1473 
uöt32_t
 
	$CLOCK_GëSy°emPLLOutClockR©e
(
boﬁ
 
ªcompuã
)

1475 
∂l_£tup_t
 
Sëup
;

1476 
uöt32_t
 
øã
;

1478 i‡((
ªcompuã
Ë|| (
s_PŒ_Fªq
 == 0U))

1480 
Sëup
.
∂l˘æ
 = 
SYSCON
->
SYSPLLCTRL
;

1481 
Sëup
.
∂ dec
 = 
SYSCON
->
SYSPLLNDEC
;

1482 
Sëup
.
∂Õdec
 = 
SYSCON
->
SYSPLLPDEC
;

1483 
Sëup
.
∂lmdec
 = 
SYSCON
->
SYSPLLMDEC
;

1485 
	`CLOCK_GëSy°emPLLOutFromSëupUpd©e
(&
Sëup
);

1488 
øã
 = 
s_PŒ_Fªq
;

1490  
øã
;

1491 
	}
}

1494 
uöt32_t
 
	$CLOCK_GëAudioPLLOutClockR©e
(
boﬁ
 
ªcompuã
)

1496 
∂l_£tup_t
 
Sëup
;

1497 
uöt32_t
 
øã
;

1499 i‡((
ªcompuã
Ë|| (
s_Audio_PŒ_Fªq
 == 0U))

1501 
Sëup
.
∂l˘æ
 = 
SYSCON
->
AUDPLLCTRL
;

1502 
Sëup
.
∂ dec
 = 
SYSCON
->
AUDPLLNDEC
;

1503 
Sëup
.
∂Õdec
 = 
SYSCON
->
AUDPLLPDEC
;

1504 
Sëup
.
∂lmdec
 = 
SYSCON
->
AUDPLLMDEC
;

1506 
	`CLOCK_GëAudioPLLOutFromSëupUpd©e
(&
Sëup
);

1509 
øã
 = 
s_Audio_PŒ_Fªq
;

1510  
øã
;

1511 
	}
}

1514 
uöt32_t
 
	$CLOCK_GëUsbPLLOutClockR©e
(
boﬁ
 
ªcompuã
)

1516 
usb_∂l_£tup_t
 
Sëup
;

1517 
uöt32_t
 
øã
;

1519 i‡((
ªcompuã
Ë|| (
s_Usb_PŒ_Fªq
 == 0U))

1521 
Sëup
.
m£l
 = (
SYSCON
->
USBPLLCTRL
 >> 
SYSCON_USBPLLCTRL_MSEL_SHIFT
Ë& 
SYSCON_USBPLLCTRL_MSEL_MASK
;

1522 
Sëup
.
p£l
 = (
SYSCON
->
USBPLLCTRL
 >> 
SYSCON_USBPLLCTRL_PSEL_SHIFT
Ë& 
SYSCON_USBPLLCTRL_PSEL_MASK
;

1523 
Sëup
.
n£l
 = (
SYSCON
->
USBPLLCTRL
 >> 
SYSCON_USBPLLCTRL_NSEL_SHIFT
Ë& 
SYSCON_USBPLLCTRL_NSEL_MASK
;

1524 
Sëup
.
fb£l
 = (
SYSCON
->
USBPLLCTRL
 >> 
SYSCON_USBPLLCTRL_FBSEL_SHIFT
Ë& 
SYSCON_USBPLLCTRL_FBSEL_MASK
;

1525 
Sëup
.
by∑ss
 = (
SYSCON
->
USBPLLCTRL
 >> 
SYSCON_USBPLLCTRL_BYPASS_SHIFT
Ë& 
SYSCON_USBPLLCTRL_BYPASS_MASK
;

1526 
Sëup
.
dúe˘
 = (
SYSCON
->
USBPLLCTRL
 >> 
SYSCON_USBPLLCTRL_DIRECT_SHIFT
Ë& 
SYSCON_USBPLLCTRL_DIRECT_MASK
;

1527 
	`CLOCK_GëUsbPLLOutFromSëupUpd©e
(&
Sëup
);

1530 
øã
 = 
s_Usb_PŒ_Fªq
;

1531  
øã
;

1532 
	}
}

1535 
∂l_îr‹_t
 
	$CLOCK_SëupPLLD©a
(
∂l_c⁄fig_t
 *
pC⁄åﬁ
, 
∂l_£tup_t
 *
pSëup
)

1537 
uöt32_t
 
öR©e
;

1538 
∂l_îr‹_t
 
∂lEº‹
;

1541 i‡((
pC⁄åﬁ
->
Êags
 & 
PLL_CONFIGFLAG_USEINRATE
) != 0U)

1543 
öR©e
 = 
pC⁄åﬁ
->
öputR©e
;

1547 
öR©e
 = 
	`CLOCK_GëSy°emPLLInClockR©e
();

1551 
∂lEº‹
 = 
	`CLOCK_GëPŒC⁄fig
(
öR©e
, 
pC⁄åﬁ
->
desúedR©e
, 
pSëup
);

1552 
pSëup
->
∂lR©e
 = 
pC⁄åﬁ
->
desúedR©e
;

1553  
∂lEº‹
;

1554 
	}
}

1557 
∂l_îr‹_t
 
	$CLOCK_SëupSy°emPLLPªc
(
∂l_£tup_t
 *
pSëup
, 
uöt32_t
 
Êagcfg
)

1559 i‡((
SYSCON
->
SYSPLLCLKSEL
 & 
SYSCON_SYSPLLCLKSEL_SEL_MASK
) == 0x01U)

1562 
	`CLOCK_E«bÀ_SysOsc
(
åue
);

1565 
	`POWER_SëPLL
();

1567 
	`POWER_E«bÀPD
(
kPDRUNCFG_PD_SYS_PLL0
);

1569 
	`CLOCK_SëFLASHAc˚ssCy˛esF‹Fªq
(
pSëup
->
∂lR©e
);

1570 
pSëup
->
Êags
 = 
Êagcfg
;

1573 
SYSCON
->
SYSPLLCTRL
 = 
pSëup
->
∂l˘æ
;

1574 
SYSCON
->
SYSPLLNDEC
 = 
pSëup
->
∂ dec
;

1575 
SYSCON
->
SYSPLLNDEC
 = 
pSëup
->
∂ dec
 | (1U << 
SYSCON_SYSPLLNDEC_NREQ_SHIFT
);

1576 
SYSCON
->
SYSPLLPDEC
 = 
pSëup
->
∂Õdec
;

1577 
SYSCON
->
SYSPLLPDEC
 = 
pSëup
->
∂Õdec
 | (1U << 
SYSCON_SYSPLLPDEC_PREQ_SHIFT
);

1578 
SYSCON
->
SYSPLLMDEC
 = 
pSëup
->
∂lmdec
;

1579 
SYSCON
->
SYSPLLMDEC
 = 
pSëup
->
∂lmdec
 | (1U << 
SYSCON_SYSPLLMDEC_MREQ_SHIFT
);

1582 i‡((
pSëup
->
Êags
 & (
PLL_SETUPFLAG_POWERUP
 | 
PLL_SETUPFLAG_WAITLOCK
)) != 0U)

1585 vﬁ©ûê
uöt32_t
 
dñayX
;

1586 
uöt32_t
 
maxCCO
 = (1U << 18U) | 0x5dd2U;

1587 
uöt32_t
 
curSSCTRL
 = 
SYSCON
->
SYSPLLMDEC
 & ~(1U << 17U);

1590 
SYSCON
->
SYSPLLMDEC
 = 
maxCCO
;

1591 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_SYS_PLL0
);

1594 
SYSCON
->
SYSPLLMDEC
 = 
maxCCO
 | (1U << 17U);

1597 
dñayX
 = 0U; delayX < 172U; ++delayX)

1602 
SYSCON
->
SYSPLLMDEC
 = 
curSSCTRL
;

1605 
SYSCON
->
SYSPLLMDEC
 = 
curSSCTRL
 | (1U << 17U);

1608 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_SYS_PLL0
);

1610 i‡((
pSëup
->
Êags
 & 
PLL_SETUPFLAG_WAITLOCK
) != 0U)

1612 
	`CLOCK_IsSy°emPLLLocked
(Ë=
Ál£
)

1618 
	`CLOCK_GëSy°emPLLOutFromSëupUpd©e
(
pSëup
);

1621 i‡((
pSëup
->
Êags
 & 
PLL_SETUPFLAG_ADGVOLT
) != 0U)

1623 
	`POWER_SëVﬁègeF‹Fªq
(
s_PŒ_Fªq
);

1626  
kSètus_PLL_Suc˚ss
;

1627 
	}
}

1631 
∂l_îr‹_t
 
	$CLOCK_SëupAudioPLLPªc
(
∂l_£tup_t
 *
pSëup
, 
uöt32_t
 
Êagcfg
)

1633 i‡((
SYSCON
->
AUDPLLCLKSEL
 & 
SYSCON_AUDPLLCLKSEL_SEL_MASK
) == 0x01U)

1636 
	`CLOCK_E«bÀ_SysOsc
(
åue
);

1639 
	`POWER_SëPLL
();

1641 
	`POWER_E«bÀPD
(
kPDRUNCFG_PD_AUDIO_PLL
);

1643 
pSëup
->
Êags
 = 
Êagcfg
;

1646 
SYSCON
->
AUDPLLCTRL
 = 
pSëup
->
∂l˘æ
;

1647 
SYSCON
->
AUDPLLNDEC
 = 
pSëup
->
∂ dec
;

1648 
SYSCON
->
AUDPLLNDEC
 = 
pSëup
->
∂ dec
 | (1U << 
SYSCON_SYSPLLNDEC_NREQ_SHIFT
);

1649 
SYSCON
->
AUDPLLPDEC
 = 
pSëup
->
∂Õdec
;

1650 
SYSCON
->
AUDPLLPDEC
 = 
pSëup
->
∂Õdec
 | (1U << 
SYSCON_SYSPLLPDEC_PREQ_SHIFT
);

1651 
SYSCON
->
AUDPLLMDEC
 = 
pSëup
->
∂lmdec
;

1652 
SYSCON
->
AUDPLLMDEC
 = 
pSëup
->
∂lmdec
 | (1U << 
SYSCON_SYSPLLMDEC_MREQ_SHIFT
);

1653 
SYSCON
->
AUDPLLFRAC
 = 
	`SYSCON_AUDPLLFRAC_SEL_EXT
(1);

1656 i‡((
pSëup
->
Êags
 & (
PLL_SETUPFLAG_POWERUP
 | 
PLL_SETUPFLAG_WAITLOCK
)) != 0U)

1659 vﬁ©ûê
uöt32_t
 
dñayX
;

1660 
uöt32_t
 
maxCCO
 = (1U << 18U) | 0x5dd2U;

1661 
uöt32_t
 
curSSCTRL
 = 
SYSCON
->
AUDPLLMDEC
 & ~(1U << 17U);

1664 
SYSCON
->
AUDPLLMDEC
 = 
maxCCO
;

1665 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_AUDIO_PLL
);

1668 
SYSCON
->
AUDPLLMDEC
 = 
maxCCO
 | (1U << 17U);

1671 
dñayX
 = 0U; delayX < 172U; ++delayX)

1676 
SYSCON
->
AUDPLLMDEC
 = 
curSSCTRL
;

1679 
SYSCON
->
AUDPLLMDEC
 = 
curSSCTRL
 | (1U << 17U);

1682 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_AUDIO_PLL
);

1684 i‡((
pSëup
->
Êags
 & 
PLL_SETUPFLAG_WAITLOCK
) != 0U)

1686 
	`CLOCK_IsAudioPLLLocked
(Ë=
Ál£
)

1692 
	`CLOCK_GëAudioPLLOutFromSëupUpd©e
(
pSëup
);

1694  
kSètus_PLL_Suc˚ss
;

1695 
	}
}

1698 
∂l_îr‹_t
 
	$CLOCK_SëupAudioPLLPªcFø˘
(
∂l_£tup_t
 *
pSëup
, 
uöt32_t
 
Êagcfg
)

1700 i‡((
SYSCON
->
AUDPLLCLKSEL
 & 
SYSCON_AUDPLLCLKSEL_SEL_MASK
) == 0x01U)

1703 
	`CLOCK_E«bÀ_SysOsc
(
åue
);

1706 
	`POWER_SëPLL
();

1708 
	`POWER_E«bÀPD
(
kPDRUNCFG_PD_AUDIO_PLL
);

1710 
pSëup
->
Êags
 = 
Êagcfg
;

1713 
SYSCON
->
AUDPLLCTRL
 = 
pSëup
->
∂l˘æ
;

1714 
SYSCON
->
AUDPLLNDEC
 = 
pSëup
->
∂ dec
;

1715 
SYSCON
->
AUDPLLNDEC
 = 
pSëup
->
∂ dec
 | (1U << 
SYSCON_SYSPLLNDEC_NREQ_SHIFT
);

1716 
SYSCON
->
AUDPLLPDEC
 = 
pSëup
->
∂Õdec
;

1717 
SYSCON
->
AUDPLLPDEC
 = 
pSëup
->
∂Õdec
 | (1U << 
SYSCON_SYSPLLPDEC_PREQ_SHIFT
);

1718 
SYSCON
->
AUDPLLMDEC
 = 
pSëup
->
∂lmdec
;

1719 
SYSCON
->
AUDPLLFRAC
 = 
	`SYSCON_AUDPLLFRAC_SEL_EXT
(0);

1720 
SYSCON
->
AUDPLLFRAC
 = 
pSëup
->
aud∂l‰ac
;

1721 
SYSCON
->
AUDPLLFRAC
 = 
pSëup
->
aud∂l‰ac
 | (1U << 
SYSCON_AUDPLLFRAC_REQ_SHIFT
);

1724 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_AUDIO_PLL
);

1726 i‡((
pSëup
->
Êags
 & 
PLL_SETUPFLAG_WAITLOCK
) != 0U)

1728 
	`CLOCK_IsAudioPLLLocked
(Ë=
Ál£
)

1734 
	`CLOCK_GëAudioPLLOutFromAudioFøcSëupUpd©e
(
pSëup
);

1736  
kSètus_PLL_Suc˚ss
;

1737 
	}
}

1740 
∂l_îr‹_t
 
	$CLOCK_SëupAudioPLLD©a
(
∂l_c⁄fig_t
 *
pC⁄åﬁ
, 
∂l_£tup_t
 *
pSëup
)

1742 
uöt32_t
 
öR©e
;

1743 
∂l_îr‹_t
 
∂lEº‹
;

1746 i‡((
pC⁄åﬁ
->
Êags
 & 
PLL_CONFIGFLAG_USEINRATE
) != 0U)

1748 
öR©e
 = 
pC⁄åﬁ
->
öputR©e
;

1752 
öR©e
 = 
	`CLOCK_GëAudioPLLInClockR©e
();

1756 
∂lEº‹
 = 
	`CLOCK_GëPŒC⁄fig
(
öR©e
, 
pC⁄åﬁ
->
desúedR©e
, 
pSëup
);

1757 
pSëup
->
∂lR©e
 = 
pC⁄åﬁ
->
desúedR©e
;

1758  
∂lEº‹
;

1759 
	}
}

1764 
∂l_îr‹_t
 
	$CLOCK_SëPLLFªq
(c⁄° 
∂l_£tup_t
 *
pSëup
)

1766 i‡((
SYSCON
->
SYSPLLCLKSEL
 & 
SYSCON_SYSPLLCLKSEL_SEL_MASK
) == 0x01U)

1769 
	`CLOCK_E«bÀ_SysOsc
(
åue
);

1772 
	`POWER_SëPLL
();

1774 
	`POWER_E«bÀPD
(
kPDRUNCFG_PD_SYS_PLL0
);

1777 
SYSCON
->
SYSPLLCTRL
 = 
pSëup
->
∂l˘æ
;

1778 
SYSCON
->
SYSPLLNDEC
 = 
pSëup
->
∂ dec
;

1779 
SYSCON
->
SYSPLLNDEC
 = 
pSëup
->
∂ dec
 | (1U << 
SYSCON_SYSPLLNDEC_NREQ_SHIFT
);

1780 
SYSCON
->
SYSPLLPDEC
 = 
pSëup
->
∂Õdec
;

1781 
SYSCON
->
SYSPLLPDEC
 = 
pSëup
->
∂Õdec
 | (1U << 
SYSCON_SYSPLLPDEC_PREQ_SHIFT
);

1782 
SYSCON
->
SYSPLLMDEC
 = 
pSëup
->
∂lmdec
;

1783 
SYSCON
->
SYSPLLMDEC
 = 
pSëup
->
∂lmdec
 | (1U << 
SYSCON_SYSPLLMDEC_MREQ_SHIFT
);

1786 i‡((
pSëup
->
Êags
 & (
PLL_SETUPFLAG_POWERUP
 | 
PLL_SETUPFLAG_WAITLOCK
)) != 0)

1789 vﬁ©ûê
uöt32_t
 
dñayX
;

1790 
uöt32_t
 
maxCCO
 = (1U << 18U) | 0x5dd2U;

1791 
uöt32_t
 
curSSCTRL
 = 
SYSCON
->
SYSPLLMDEC
 & ~(1U << 17U);

1794 
SYSCON
->
SYSPLLMDEC
 = 
maxCCO
;

1795 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_SYS_PLL0
);

1798 
SYSCON
->
SYSPLLMDEC
 = 
maxCCO
 | (1U << 17U);

1801 
dñayX
 = 0U; delayX < 172U; ++delayX)

1806 
SYSCON
->
SYSPLLMDEC
 = 
curSSCTRL
;

1809 
SYSCON
->
SYSPLLMDEC
 = 
curSSCTRL
 | (1U << 17U);

1812 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_SYS_PLL0
);

1814 i‡((
pSëup
->
Êags
 & 
PLL_SETUPFLAG_WAITLOCK
) != 0U)

1816 
	`CLOCK_IsSy°emPLLLocked
(Ë=
Ál£
)

1822 
s_PŒ_Fªq
 = 
pSëup
->
∂lR©e
;

1824  
kSètus_PLL_Suc˚ss
;

1825 
	}
}

1828 
∂l_îr‹_t
 
	$CLOCK_SëAudioPLLFªq
(c⁄° 
∂l_£tup_t
 *
pSëup
)

1830 i‡((
SYSCON
->
AUDPLLCLKSEL
 & 
SYSCON_AUDPLLCLKSEL_SEL_MASK
) == 0x01U)

1833 
	`CLOCK_E«bÀ_SysOsc
(
åue
);

1836 
	`POWER_SëPLL
();

1838 
	`POWER_E«bÀPD
(
kPDRUNCFG_PD_AUDIO_PLL
);

1841 
SYSCON
->
AUDPLLCTRL
 = 
pSëup
->
∂l˘æ
;

1842 
SYSCON
->
AUDPLLFRAC
 = 
pSëup
->
aud∂l‰ac
;

1843 
SYSCON
->
AUDPLLFRAC
 = 
pSëup
->
aud∂l‰ac
 | (1U << 
SYSCON_AUDPLLFRAC_REQ_SHIFT
);

1844 
SYSCON
->
AUDPLLNDEC
 = 
pSëup
->
∂ dec
;

1845 
SYSCON
->
AUDPLLNDEC
 = 
pSëup
->
∂ dec
 | (1U << 
SYSCON_AUDPLLNDEC_NREQ_SHIFT
);

1846 
SYSCON
->
AUDPLLPDEC
 = 
pSëup
->
∂Õdec
;

1847 
SYSCON
->
AUDPLLPDEC
 = 
pSëup
->
∂Õdec
 | (1U << 
SYSCON_AUDPLLPDEC_PREQ_SHIFT
);

1848 
SYSCON
->
AUDPLLMDEC
 = 
pSëup
->
∂lmdec
;

1849 
SYSCON
->
AUDPLLMDEC
 = 
pSëup
->
∂lmdec
 | (1U << 
SYSCON_AUDPLLMDEC_MREQ_SHIFT
);

1850 
SYSCON
->
AUDPLLFRAC
 = 
	`SYSCON_AUDPLLFRAC_SEL_EXT
(1);

1853 i‡((
pSëup
->
Êags
 & (
PLL_SETUPFLAG_POWERUP
 | 
PLL_SETUPFLAG_WAITLOCK
)) != 0)

1856 vﬁ©ûê
uöt32_t
 
dñayX
;

1857 
uöt32_t
 
maxCCO
 = (1U << 18U) | 0x5dd2U;

1858 
uöt32_t
 
curSSCTRL
 = 
SYSCON
->
SYSPLLMDEC
 & ~(1U << 17U);

1861 
SYSCON
->
SYSPLLMDEC
 = 
maxCCO
;

1862 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_AUDIO_PLL
);

1865 
SYSCON
->
SYSPLLMDEC
 = 
maxCCO
 | (1U << 17U);

1868 
dñayX
 = 0U; delayX < 172U; ++delayX)

1873 
SYSCON
->
SYSPLLMDEC
 = 
curSSCTRL
;

1876 
SYSCON
->
SYSPLLMDEC
 = 
curSSCTRL
 | (1U << 17U);

1879 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_AUDIO_PLL
);

1881 i‡((
pSëup
->
Êags
 & 
PLL_SETUPFLAG_WAITLOCK
) != 0U)

1883 
	`CLOCK_IsAudioPLLLocked
(Ë=
Ál£
)

1889 
s_Audio_PŒ_Fªq
 = 
pSëup
->
∂lR©e
;

1891  
kSètus_PLL_Suc˚ss
;

1892 
	}
}

1895 
∂l_îr‹_t
 
	$CLOCK_SëUsbPLLFªq
(c⁄° 
usb_∂l_£tup_t
 *
pSëup
)

1897 
uöt32_t
 
usb∂l˘æ
, 
fccoHz
;

1898 
uöt8_t
 
m£l
, 
p£l
, 
n£l
;

1899 
boﬁ
 
∂lDúe˘I≈ut
, 
∂lDúe˘Ouçut
, 
∂lfb£l
;

1900 vﬁ©ûê
uöt32_t
 
dñayX
;

1902 
m£l
 = 
pSëup
->msel;

1903 
p£l
 = 
pSëup
->psel;

1904 
n£l
 = 
pSëup
->nsel;

1905 
∂lDúe˘I≈ut
 = 
pSëup
->
dúe˘
;

1906 
∂lDúe˘Ouçut
 = 
pSëup
->
by∑ss
;

1907 
∂lfb£l
 = 
pSëup
->
fb£l
;

1910 i‡(
pSëup
->
öputR©e
 < 
USB_PLL_LOWER_IN_LIMIT
 )

1912  
kSètus_PLL_I≈utTooLow
;

1915 i‡(
∂lfb£l
 == 1U)

1918 
fccoHz
 = (
pSëup
->
öputR©e
 / (
n£l
 + 1U)Ë* 2 * (
m£l
 + 1UË* 
	`SWITCH_USB_PSEL
(
p£l
) ;

1921 i‡(
fccoHz
 < 
USB_PLL_MIN_CCO_FREQ_MHZ
)

1923  
kSètus_PLL_CCOTooLow
;

1926 i‡(
fccoHz
 > 
USB_PLL_MAX_CCO_FREQ_MHZ
)

1928  
kSètus_PLL_CCOTooHigh
;

1934 
fccoHz
 = 
pSëup
->
öputR©e
 / (
n£l
 + 1UË* (
m£l
 + 1U);

1937 i‡(
fccoHz
 < 
USB_PLL_MIN_CCO_FREQ_MHZ
)

1939  
kSètus_PLL_CCOTooLow
;

1942 i‡(
fccoHz
 > 
USB_PLL_MAX_CCO_FREQ_MHZ
)

1944  
kSètus_PLL_CCOTooHigh
;

1951 
	`CLOCK_E«bÀ_SysOsc
(
åue
);

1954 
	`POWER_SëPLL
();

1957 
	`POWER_SëUsbPhy
();

1960 
	`POWER_E«bÀPD
(
kPDRUNCFG_PD_USB_PLL
);

1963 
usb∂l˘æ
 = 
	`USB_PLL_NSEL_VAL_SET
(
n£l
) |

1964 
	`USB_PLL_PSEL_VAL_SET
(
p£l
) |

1965 
	`USB_PLL_MSEL_VAL_SET
(
m£l
) |

1966 (
uöt32_t
)
∂lDúe˘I≈ut
 << 
SYSCON_USBPLLCTRL_BYPASS_SHIFT
 |

1967 (
uöt32_t
)
∂lDúe˘Ouçut
 << 
SYSCON_USBPLLCTRL_DIRECT_SHIFT
 |

1968 (
uöt32_t
)
∂lfb£l
 << 
SYSCON_USBPLLCTRL_FBSEL_SHIFT
;

1970 
SYSCON
->
USBPLLCTRL
 = 
usb∂l˘æ
;

1972 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_USB_PLL
);

1975 
dñayX
 = 0U; delayX < 172U; ++delayX)

1979 
	`CLOCK_IsUsbPLLLocked
(Ë=
Ál£
)

1982 
	`CLOCK_GëUsbPLLOutFromSëupUpd©e
(
pSëup
);

1983  
kSètus_PLL_Suc˚ss
;

1984 
	}
}

1987 
	$CLOCK_SëupSy°emPLLMu…
(
uöt32_t
 
mu…ùly_by
, uöt32_à
öput_‰eq
)

1989 
uöt32_t
 
cco_‰eq
 = 
öput_‰eq
 * 
mu…ùly_by
;

1990 
uöt32_t
 
pdec
 = 1U;

1991 
uöt32_t
 
£Ã
;

1992 
uöt32_t
 
£li
;

1993 
uöt32_t
 
£Õ
;

1994 
uöt32_t
 
mdec
, 
ndec
;

1996 
uöt32_t
 
dúe˘o
 = 
	`SYSCON_SYSPLLCTRL_DIRECTO
(1);

1998 
cco_‰eq
 < 275000000U)

2000 
mu…ùly_by
 <<= 1U;

2001 
pdec
 <<= 1U;

2002 
cco_‰eq
 = 
öput_‰eq
 * 
mu…ùly_by
;

2004 
£Ã
 = 0U;

2005 i‡(
mu…ùly_by
 < 60U)

2007 
£li
 = (
mu…ùly_by
 & 0x3cU) + 4U;

2008 
£Õ
 = (
mu…ùly_by
 >> 1U) + 1U;

2012 
£Õ
 = 31U;

2013 i‡(
mu…ùly_by
 > 16384U)

2015 
£li
 = 1U;

2017 i‡(
mu…ùly_by
 > 8192U)

2019 
£li
 = 2U;

2021 i‡(
mu…ùly_by
 > 2048U)

2023 
£li
 = 4U;

2025 i‡(
mu…ùly_by
 >= 501U)

2027 
£li
 = 8U;

2031 
£li
 = 4U * (1024U / (
mu…ùly_by
 + 9U));

2035 i‡(
pdec
 > 1U)

2037 
dúe˘o
 = 0U;

2038 
pdec
 =Ödec / 2U;

2040 
pdec
)

2043 
pdec
 = 0x62U;

2046 
pdec
 = 0x42U;

2049 
pdec
 = 0x02U;

2052 
pdec
 = 0x0bU;

2055 
pdec
 = 0x11U;

2058 
pdec
 = 0x08U;

2061 
pdec
 = 0x08U;

2066 
mdec
 = 
	`PLL_MDEC_VAL_SET
(
	`∂lEncodeM
(
mu…ùly_by
));

2067 
ndec
 = 0x302U;

2069 
SYSCON
->
SYSPLLCTRL
 = 
dúe˘o
 |

2070 (
£Ã
 << 
SYSCON_SYSPLLCTRL_SELR_SHIFT
Ë| (
£li
 << 
SYSCON_SYSPLLCTRL_SELI_SHIFT
) |

2071 (
£Õ
 << 
SYSCON_SYSPLLCTRL_SELP_SHIFT
);

2072 
SYSCON
->
SYSPLLPDEC
 = 
pdec
 | (1U << 7U);

2073 
SYSCON
->
SYSPLLNDEC
 = 
ndec
 | (1U << 10U);

2074 
SYSCON
->
SYSPLLMDEC
 = (1U << 17UË| 
mdec
;

2075 
	}
}

2078 
boﬁ
 
	$CLOCK_E«bÀUsbfs0Devi˚Clock
(
˛ock_usb_§c_t
 
§c
, 
uöt32_t
 
‰eq
)

2080 
boﬁ
 
ªt
 = 
åue
;

2082 
	`CLOCK_DißbÀClock
(
kCLOCK_Usbd0
);

2084 i‡(
kCLOCK_UsbSrcFro
 =
§c
)

2086 
‰eq
)

2089 
	`CLOCK_SëClkDiv
(
kCLOCK_DivUsb0Clk
, 2, 
Ál£
);

2093 
	`CLOCK_SëClkDiv
(
kCLOCK_DivUsb0Clk
, 1, 
Ál£
);

2097 
ªt
 = 
Ál£
;

2101 
SYSCON
->
FROCTRL
 = (SYSCON->FROCTRL & ~((0x01U << 15UË| (0xFU << 26U))Ë| 
SYSCON_FROCTRL_HSPDCLK_MASK
 |

2102 
SYSCON_FROCTRL_USBCLKADJ_MASK
;

2104 
	`CLOCK_AâachClk
(
kFRO_HF_to_USB0_CLK
);

2109 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_USB_PLL
);

2111 
usb_∂l_£tup_t
 
∂l_£tup
 = { 0x3FU, 0x01U, 0x03U, 
Ál£
, false, false, 12000000U };

2113 
	`CLOCK_SëUsbPLLFªq
(&
∂l_£tup
);

2114 
	`CLOCK_SëClkDiv
(
kCLOCK_DivUsb0Clk
,1U, 
Ál£
);

2115 
	`CLOCK_AâachClk
(
kUSB_PLL_to_USB0_CLK
);

2116 
uöt32_t
 
dñay
 = 100000;

2117 
dñay
 --)

2119 
	`__asm
("nop");

2122 
	`CLOCK_E«bÀClock
(
kCLOCK_Usbd0
);

2123 
	`CLOCK_E«bÀClock
(
kCLOCK_UsbRam1
);

2125  
ªt
;

2126 
	}
}

2129 
boﬁ
 
	$CLOCK_E«bÀUsbfs0Ho°Clock
(
˛ock_usb_§c_t
 
§c
, 
uöt32_t
 
‰eq
)

2131 
boﬁ
 
ªt
 = 
åue
;

2133 
	`CLOCK_DißbÀClock
(
kCLOCK_Usbhmr0
);

2134 
	`CLOCK_DißbÀClock
(
kCLOCK_Usbh¶0
);

2136 i‡(
kCLOCK_UsbSrcFro
 =
§c
)

2138 
‰eq
)

2141 
	`CLOCK_SëClkDiv
(
kCLOCK_DivUsb0Clk
, 2, 
Ál£
);

2145 
	`CLOCK_SëClkDiv
(
kCLOCK_DivUsb0Clk
, 1, 
Ál£
);

2149 
ªt
 = 
Ál£
;

2153 
SYSCON
->
FROCTRL
 = (SYSCON->FROCTRL & ~((0x01U << 15UË| (0xFU << 26U))Ë| 
SYSCON_FROCTRL_HSPDCLK_MASK
 |

2154 
SYSCON_FROCTRL_USBCLKADJ_MASK
;

2156 
	`CLOCK_AâachClk
(
kFRO_HF_to_USB0_CLK
);

2161 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_USB_PLL
);

2163 
usb_∂l_£tup_t
 
∂l_£tup
 = { 0x3FU, 0x01U, 0x03U, 
Ál£
, false, false, 12000000U };

2165 
	`CLOCK_SëUsbPLLFªq
(&
∂l_£tup
);

2166 
	`CLOCK_SëClkDiv
(
kCLOCK_DivUsb0Clk
,1U, 
Ál£
);

2167 
	`CLOCK_AâachClk
(
kUSB_PLL_to_USB0_CLK
);

2168 
uöt32_t
 
dñay
 = 100000;

2169 
dñay
 --)

2171 
	`__asm
("nop");

2174 
	`CLOCK_E«bÀClock
(
kCLOCK_Usbhmr0
);

2175 
	`CLOCK_E«bÀClock
(
kCLOCK_Usbh¶0
);

2176 
	`CLOCK_E«bÀClock
(
kCLOCK_UsbRam1
);

2178  
ªt
;

2179 
	}
}

2182 
boﬁ
 
	$CLOCK_E«bÀUsbhs0Devi˚Clock
(
˛ock_usb_§c_t
 
§c
, 
uöt32_t
 
‰eq
)

2184 
boﬁ
 
ªt
 = 
åue
;

2185 
uöt32_t
 
dñay
;

2186 
	`CLOCK_DißbÀClock
(
kCLOCK_Usbd1
);

2188 
	`POWER_SëUsbPhy
();

2189 i‡(
kCLOCK_UsbSrcFro
 =
§c
)

2191 
‰eq
)

2194 
	`CLOCK_SëClkDiv
(
kCLOCK_DivUsb1Clk
, 2, 
Ál£
);

2198 
	`CLOCK_SëClkDiv
(
kCLOCK_DivUsb1Clk
, 1, 
Ál£
);

2202 
ªt
 = 
Ál£
;

2206 
SYSCON
->
FROCTRL
 = (SYSCON->FROCTRL & ~((0x01U << 15UË| (0xFU << 26U))Ë| 
SYSCON_FROCTRL_HSPDCLK_MASK
 |

2207 
SYSCON_FROCTRL_USBCLKADJ_MASK
;

2209 
	`CLOCK_AâachClk
(
kFRO_HF_to_USB1_CLK
);

2213 
dñay
 = 100000;

2214 
dñay
 --)

2216 
	`__asm
("nop");

2218 
usb_∂l_£tup_t
 
∂l_£tup
 = { 0x3FU, 0x01U, 0x03U, 
Ál£
, false, false, 12000000U };

2220 
	`CLOCK_SëUsbPLLFªq
(&
∂l_£tup
);

2223 
	`CLOCK_SëClkDiv
(
kCLOCK_DivUsb1Clk
,1U, 
Ál£
);

2224 
	`CLOCK_AâachClk
(
kUSB_PLL_to_USB1_CLK
);

2227 
dñay
 = 100000;

2228 
dñay
 --)

2230 
	`__asm
("nop");

2233 
	`CLOCK_E«bÀClock
(
kCLOCK_Usbd1
);

2234 
	`CLOCK_E«bÀClock
(
kCLOCK_UsbRam1
);

2235 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_USB1_PHY
);

2236  
ªt
;

2237 
	}
}

2241 
boﬁ
 
	$CLOCK_E«bÀUsbhs0Ho°Clock
(
˛ock_usb_§c_t
 
§c
, 
uöt32_t
 
‰eq
)

2243 
boﬁ
 
ªt
 = 
åue
;

2244 
uöt32_t
 
dñay
;

2245 
	`CLOCK_DißbÀClock
(
kCLOCK_Usbh1
);

2247 
	`POWER_SëUsbPhy
();

2248 i‡(
kCLOCK_UsbSrcFro
 =
§c
)

2250 
‰eq
)

2253 
	`CLOCK_SëClkDiv
(
kCLOCK_DivUsb1Clk
, 2, 
Ál£
);

2257 
	`CLOCK_SëClkDiv
(
kCLOCK_DivUsb1Clk
, 1, 
Ál£
);

2261 
ªt
 = 
Ál£
;

2265 
SYSCON
->
FROCTRL
 = (SYSCON->FROCTRL & ~((0x01U << 15UË| (0xFU << 26U))Ë| 
SYSCON_FROCTRL_HSPDCLK_MASK
 |

2266 
SYSCON_FROCTRL_USBCLKADJ_MASK
;

2268 
	`CLOCK_AâachClk
(
kFRO_HF_to_USB1_CLK
);

2272 
dñay
 = 100000;

2273 
dñay
 --)

2275 
	`__asm
("nop");

2277 
usb_∂l_£tup_t
 
∂l_£tup
 = { 0x3FU, 0x01U, 0x03U, 
Ál£
, false, false, 12000000U };

2279 
	`CLOCK_SëUsbPLLFªq
(&
∂l_£tup
);

2282 
	`CLOCK_SëClkDiv
(
kCLOCK_DivUsb1Clk
,1U, 
Ál£
);

2283 
	`CLOCK_AâachClk
(
kUSB_PLL_to_USB1_CLK
);

2286 
dñay
 = 100000;

2287 
dñay
 --)

2289 
	`__asm
("nop");

2292 
	`CLOCK_E«bÀClock
(
kCLOCK_Usbh1
);

2293 
	`CLOCK_E«bÀClock
(
kCLOCK_UsbRam1
);

2294 
	`POWER_DißbÀPD
(
kPDRUNCFG_PD_USB1_PHY
);

2295  
ªt
;

2296 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_clock.h

36 #i‚de‡
_FSL_CLOCK_H_


37 
	#_FSL_CLOCK_H_


	)

39 
	~"f¶_devi˚_ªgi°îs.h
"

40 
	~<°döt.h
>

41 
	~<°dboﬁ.h
>

42 
	~<as£π.h
>

56 
	#FSL_CLOCK_DRIVER_VERSION
 (
	`MAKE_VERSION
(2, 0, 0))

	)

69 #i‡!(
deföed
(
FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL
))

70 
	#FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL
 0

	)

80 #i‚de‡
CLOCK_USR_CFG_PLL_CONFIG_CACHE_COUNT


81 
	#CLOCK_USR_CFG_PLL_CONFIG_CACHE_COUNT
 2U

	)

85 
	#ADC_CLOCKS
 \

87 
kCLOCK_Adc0
 \

88 }

	)

90 
	#ROM_CLOCKS
 \

92 
kCLOCK_Rom
 \

93 }

	)

95 
	#SRAM_CLOCKS
 \

97 
kCLOCK_Søm1
, 
kCLOCK_Søm2
, 
kCLOCK_Søm3
 \

98 }

	)

100 
	#FLASH_CLOCKS
 \

102 
kCLOCK_Fœsh
 \

103 }

	)

105 
	#FMC_CLOCKS
 \

107 
kCLOCK_Fmc
 \

108 }

	)

110 
	#EEPROM_CLOCKS
 \

112 
kCLOCK_Eïrom
 \

113 }

	)

115 
	#SPIFI_CLOCKS
 \

117 
kCLOCK_Spifi
 \

118 }

	)

120 
	#INPUTMUX_CLOCKS
 \

122 
kCLOCK_I≈utMux
 \

123 }

	)

125 
	#IOCON_CLOCKS
 \

127 
kCLOCK_Ioc⁄
 \

128 }

	)

130 
	#GPIO_CLOCKS
 \

132 
kCLOCK_Gpio0
,
kCLOCK_Gpio1
, 
kCLOCK_Gpio2
, 
kCLOCK_Gpio3
, 
kCLOCK_Gpio4
, 
kCLOCK_Gpio5
 \

133 }

	)

135 
	#PINT_CLOCKS
 \

137 
kCLOCK_Pöt
 \

138 }

	)

140 
	#GINT_CLOCKS
 \

142 
kCLOCK_Göt
, kCLOCK_Gint \

143 }

	)

145 
	#DMA_CLOCKS
 \

147 
kCLOCK_Dma
 \

148 }

	)

150 
	#CRC_CLOCKS
 \

152 
kCLOCK_Crc
 \

153 }

	)

155 
	#WWDT_CLOCKS
 \

157 
kCLOCK_Wwdt
 \

158 }

	)

160 
	#RTC_CLOCKS
 \

162 
kCLOCK_Rtc
 \

163 }

	)

165 
	#ADC0_CLOCKS
 \

167 
kCLOCK_Adc0
 \

168 }

	)

170 
	#MRT_CLOCKS
 \

172 
kCLOCK_Mπ
 \

173 }

	)

175 
	#RIT_CLOCKS
 \

177 
kCLOCK_Rô
 \

178 }

	)

180 
	#SCT_CLOCKS
 \

182 
kCLOCK_S˘0
 \

183 }

	)

185 
	#MCAN_CLOCKS
 \

187 
kCLOCK_Mˇn0
, 
kCLOCK_Mˇn1
 \

188 }

	)

190 
	#UTICK_CLOCKS
 \

192 
kCLOCK_Utick
 \

193 }

	)

195 
	#FLEXCOMM_CLOCKS
 \

197 
kCLOCK_FÀxComm0
, 
kCLOCK_FÀxComm1
, 
kCLOCK_FÀxComm2
, 
kCLOCK_FÀxComm3
, \

198 
kCLOCK_FÀxComm4
, 
kCLOCK_FÀxComm5
, 
kCLOCK_FÀxComm6
, 
kCLOCK_FÀxComm7
, \

199 
kCLOCK_FÀxComm8
, 
kCLOCK_FÀxComm9
 \

200 }

	)

202 
	#LPUART_CLOCKS
 \

204 
kCLOCK_MöU¨t0
, 
kCLOCK_MöU¨t1
, 
kCLOCK_MöU¨t2
, 
kCLOCK_MöU¨t3
, 
kCLOCK_MöU¨t4
, 
kCLOCK_MöU¨t5
, \

205 
kCLOCK_MöU¨t6
, 
kCLOCK_MöU¨t7
, 
kCLOCK_MöU¨t8
,
kCLOCK_MöU¨t9
 \

206 }

	)

209 
	#BI2C_CLOCKS
 \

211 
kCLOCK_BI2c0
, 
kCLOCK_BI2c1
, 
kCLOCK_BI2c2
, 
kCLOCK_BI2c3
, 
kCLOCK_BI2c4
, 
kCLOCK_BI2c5
, 
kCLOCK_BI2c6
, 
kCLOCK_BI2c7
, \

212 
kCLOCK_BI2c8
, 
kCLOCK_BI2c9
 \

213 }

	)

215 
	#LPSI_CLOCKS
 \

217 
kCLOCK_LSpi0
, 
kCLOCK_LSpi1
, 
kCLOCK_LSpi2
, 
kCLOCK_LSpi3
, 
kCLOCK_LSpi4
, 
kCLOCK_LSpi5
, 
kCLOCK_LSpi6
, 
kCLOCK_LSpi7
, \

218 
kCLOCK_LSpi8
, 
kCLOCK_LSpi9
 \

219 }

	)

221 
	#FLEXI2S_CLOCKS
 \

223 
kCLOCK_FÀxI2s0
, 
kCLOCK_FÀxI2s1
, 
kCLOCK_FÀxI2s2
, 
kCLOCK_FÀxI2s3
, 
kCLOCK_FÀxI2s4
, 
kCLOCK_FÀxI2s5
, \

224 
kCLOCK_FÀxI2s6
, 
kCLOCK_FÀxI2s7
, 
kCLOCK_FÀxI2s8
, 
kCLOCK_FÀxI2s9
 \

225 }

	)

227 
	#DMIC_CLOCKS
 \

229 
kCLOCK_DMic
 \

230 }

	)

232 
	#CTIMER_CLOCKS
 \

234 
kCLOCK_Ct32b0
, 
kCLOCK_Ct32b1
, 
kCLOCK_Ct32b2
, 
kCLOCK_Ct32b3
, 
kCLOCK_Ct32b4
 \

235 }

	)

237 
	#LCD_CLOCKS
 \

239 
kCLOCK_Lcd
 \

240 }

	)

242 
	#SDIO_CLOCKS
 \

244 
kCLOCK_Sdio
 \

245 }

	)

247 
	#USBRAM_CLOCKS
 \

249 
kCLOCK_UsbRam1
 \

250 }

	)

252 
	#EMC_CLOCKS
 \

254 
kCLOCK_Emc
 \

255 }

	)

257 
	#ETH_CLOCKS
 \

259 
kCLOCK_Eth
 \

260 }

	)

262 
	#AES_CLOCKS
 \

264 
kCLOCK_Aes
 \

265 }

	)

267 
	#OTP_CLOCKS
 \

269 
kCLOCK_Oç
 \

270 }

	)

272 
	#RNG_CLOCKS
 \

274 
kCLOCK_Rng
 \

275 }

	)

277 
	#USBHMR0_CLOCKS
 \

279 
kCLOCK_Usbhmr0
 \

280 }

	)

282 
	#USBHSL0_CLOCKS
 \

284 
kCLOCK_Usbh¶0
 \

285 }

	)

287 
	#SHA0_CLOCKS
 \

289 
kCLOCK_Sha0
 \

290 }

	)

292 
	#SMARTCARD_CLOCKS
 \

294 
kCLOCK_Sm¨tC¨d0
, 
kCLOCK_Sm¨tC¨d1
 \

295 }

	)

297 
	#USBD_CLOCKS
 \

299 
kCLOCK_Usbd0
, 
kCLOCK_Usbh1
, 
kCLOCK_Usbd1
 \

300 }

	)

302 
	#USBH_CLOCKS
 \

304 
kCLOCK_Usbh1
 \

305 }

	)

311 
	#CLK_GATE_REG_OFFSET_SHIFT
 8U

	)

312 
	#CLK_GATE_REG_OFFSET_MASK
 0xFFFFFF00U

	)

313 
	#CLK_GATE_BIT_SHIFT_SHIFT
 0U

	)

314 
	#CLK_GATE_BIT_SHIFT_MASK
 0x000000FFU

	)

316 
	#CLK_GATE_DEFINE
(
ªg_off£t
, 
bô_shi·
) \

317 ((((
ªg_off£t
Ë<< 
CLK_GATE_REG_OFFSET_SHIFT
Ë& 
CLK_GATE_REG_OFFSET_MASK
) | \

318 (((
bô_shi·
Ë<< 
CLK_GATE_BIT_SHIFT_SHIFT
Ë& 
CLK_GATE_BIT_SHIFT_MASK
))

	)

320 
	#CLK_GATE_ABSTRACT_REG_OFFSET
(
x
Ë(((
uöt32_t
)(x)&
CLK_GATE_REG_OFFSET_MASK
Ë>> 
CLK_GATE_REG_OFFSET_SHIFT
)

	)

321 
	#CLK_GATE_ABSTRACT_BITS_SHIFT
(
x
Ë(((
uöt32_t
)(x)&
CLK_GATE_BIT_SHIFT_MASK
Ë>> 
CLK_GATE_BIT_SHIFT_SHIFT
)

	)

323 
	#AHB_CLK_CTRL0
 0

	)

324 
	#AHB_CLK_CTRL1
 1

	)

325 
	#AHB_CLK_CTRL2
 2

	)

326 
	#ASYNC_CLK_CTRL0
 3

	)

329 
	e_˛ock_ù_«me


331 
	mkCLOCK_IpInvÆid
 = 0U,

332 
	mkCLOCK_Rom
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL0
, 1),

333 
	mkCLOCK_Søm1
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL0
, 3),

334 
	mkCLOCK_Søm2
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL0
, 4),

335 
	mkCLOCK_Søm3
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL0
, 5),

336 
	mkCLOCK_Fœsh
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL0
, 7),

337 
	mkCLOCK_Fmc
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL0
, 8),

338 
	mkCLOCK_Eïrom
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL0
, 9),

339 
	mkCLOCK_Spifi
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL0
, 10),

340 
	mkCLOCK_I≈utMux
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL0
, 11),

341 
	mkCLOCK_Ioc⁄
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL0
, 13),

342 
	mkCLOCK_Gpio0
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL0
, 14),

343 
	mkCLOCK_Gpio1
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL0
, 15),

344 
	mkCLOCK_Gpio2
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL0
, 16),

345 
	mkCLOCK_Gpio3
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL0
, 17),

346 
	mkCLOCK_Pöt
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL0
, 18),

347 
	mkCLOCK_Göt
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL0
, 19),

348 
	mkCLOCK_Dma
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL0
, 20),

349 
	mkCLOCK_Crc
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL0
, 21),

350 
	mkCLOCK_Wwdt
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL0
, 22),

351 
	mkCLOCK_Rtc
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL0
, 23),

352 
	mkCLOCK_Adc0
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL0
, 27),

353 
	mkCLOCK_Mπ
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 0),

354 
	mkCLOCK_Rô
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 1),

355 
	mkCLOCK_S˘0
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 2),

356 
	mkCLOCK_Mˇn0
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 7),

357 
	mkCLOCK_Mˇn1
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 8),

358 
	mkCLOCK_Utick
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 10),

359 
	mkCLOCK_FÀxComm0
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 11),

360 
	mkCLOCK_FÀxComm1
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 12),

361 
	mkCLOCK_FÀxComm2
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 13),

362 
	mkCLOCK_FÀxComm3
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 14),

363 
	mkCLOCK_FÀxComm4
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 15),

364 
	mkCLOCK_FÀxComm5
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 16),

365 
	mkCLOCK_FÀxComm6
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 17),

366 
	mkCLOCK_FÀxComm7
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 18),

367 
	mkCLOCK_MöU¨t0
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 11),

368 
	mkCLOCK_MöU¨t1
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 12),

369 
	mkCLOCK_MöU¨t2
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 13),

370 
	mkCLOCK_MöU¨t3
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 14),

371 
	mkCLOCK_MöU¨t4
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 15),

372 
	mkCLOCK_MöU¨t5
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 16),

373 
	mkCLOCK_MöU¨t6
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 17),

374 
	mkCLOCK_MöU¨t7
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 18),

375 
	mkCLOCK_LSpi0
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 11),

376 
	mkCLOCK_LSpi1
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 12),

377 
	mkCLOCK_LSpi2
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 13),

378 
	mkCLOCK_LSpi3
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 14),

379 
	mkCLOCK_LSpi4
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 15),

380 
	mkCLOCK_LSpi5
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 16),

381 
	mkCLOCK_LSpi6
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 17),

382 
	mkCLOCK_LSpi7
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 18),

383 
	mkCLOCK_BI2c0
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 11),

384 
	mkCLOCK_BI2c1
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 12),

385 
	mkCLOCK_BI2c2
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 13),

386 
	mkCLOCK_BI2c3
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 14),

387 
	mkCLOCK_BI2c4
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 15),

388 
	mkCLOCK_BI2c5
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 16),

389 
	mkCLOCK_BI2c6
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 17),

390 
	mkCLOCK_BI2c7
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 18),

391 
	mkCLOCK_FÀxI2s0
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 11),

392 
	mkCLOCK_FÀxI2s1
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 12),

393 
	mkCLOCK_FÀxI2s2
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 13),

394 
	mkCLOCK_FÀxI2s3
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 14),

395 
	mkCLOCK_FÀxI2s4
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 15),

396 
	mkCLOCK_FÀxI2s5
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 16),

397 
	mkCLOCK_FÀxI2s6
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 17),

398 
	mkCLOCK_FÀxI2s7
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 18),

399 
	mkCLOCK_DMic
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 19),

400 
	mkCLOCK_Ct32b2
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 22),

401 
	mkCLOCK_Usbd0
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 25),

402 
	mkCLOCK_Ct32b0
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 26),

403 
	mkCLOCK_Ct32b1
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 27),

404 
	mkCLOCK_BodyBüs0
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 29),

405 
	mkCLOCK_EzhArchB0
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL1
, 31),

406 
	mkCLOCK_Lcd
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 2),

407 
	mkCLOCK_Sdio
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 3),

408 
	mkCLOCK_Usbh1
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 4),

409 
	mkCLOCK_Usbd1
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 5),

410 
	mkCLOCK_UsbRam1
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 6),

411 
	mkCLOCK_Emc
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 7),

412 
	mkCLOCK_Eth
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
,8),

413 
	mkCLOCK_Gpio4
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 9),

414 
	mkCLOCK_Gpio5
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 10),

415 
	mkCLOCK_Aes
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 11),

416 
	mkCLOCK_Oç
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 12),

417 
	mkCLOCK_Rng
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 13),

418 
	mkCLOCK_FÀxComm8
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 14),

419 
	mkCLOCK_FÀxComm9
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 15),

420 
	mkCLOCK_MöU¨t8
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 14),

421 
	mkCLOCK_MöU¨t9
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 15),

422 
	mkCLOCK_LSpi8
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 14),

423 
	mkCLOCK_LSpi9
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 15),

424 
	mkCLOCK_BI2c8
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 14),

425 
	mkCLOCK_BI2c9
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 15),

426 
	mkCLOCK_FÀxI2s8
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 14),

427 
	mkCLOCK_FÀxI2s9
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 15),

428 
	mkCLOCK_Usbhmr0
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 16),

429 
	mkCLOCK_Usbh¶0
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 17),

430 
	mkCLOCK_Sha0
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 18),

431 
	mkCLOCK_Sm¨tC¨d0
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 19),

432 
	mkCLOCK_Sm¨tC¨d1
 = 
CLK_GATE_DEFINE
(
AHB_CLK_CTRL2
, 20),

434 
	mkCLOCK_Ct32b3
 = 
CLK_GATE_DEFINE
(
ASYNC_CLK_CTRL0
, 13),

435 
	mkCLOCK_Ct32b4
 = 
CLK_GATE_DEFINE
(
ASYNC_CLK_CTRL0
, 14)

436 } 
	t˛ock_ù_«me_t
;

439 
	e_˛ock_«me


441 
	mkCLOCK_C‹eSysClk
,

442 
	mkCLOCK_BusClk
,

443 
	mkCLOCK_ClockOut
,

444 
	mkCLOCK_FroHf
,

445 
	mkCLOCK_SpiFi
,

446 
	mkCLOCK_Adc
,

447 
	mkCLOCK_Usb0
,

448 
	mkCLOCK_Usb1
,

449 
	mkCLOCK_UsbPŒ
,

450 
	mkCLOCK_M˛k
,

451 
	mkCLOCK_S˘
,

452 
	mkCLOCK_SDio
,

453 
	mkCLOCK_EMC
,

454 
	mkCLOCK_LCD
,

455 
	mkCLOCK_MCAN0
,

456 
	mkCLOCK_MCAN1
,

457 
	mkCLOCK_Fro12M
,

458 
	mkCLOCK_ExtClk
,

459 
	mkCLOCK_PŒOut
,

460 
	mkCLOCK_UsbClk
,

461 
	mkClock_WdtOsc
,

462 
	mkCLOCK_Frg
,

463 
	mkCLOCK_Dmic
,

464 
	mkCLOCK_AsyncApbClk
,

465 
	mkCLOCK_FÀxI2S
,

466 
	mkCLOCK_FÀxcomm0
,

467 
	mkCLOCK_FÀxcomm1
,

468 
	mkCLOCK_FÀxcomm2
,

469 
	mkCLOCK_FÀxcomm3
,

470 
	mkCLOCK_FÀxcomm4
,

471 
	mkCLOCK_FÀxcomm5
,

472 
	mkCLOCK_FÀxcomm6
,

473 
	mkCLOCK_FÀxcomm7
,

474 
	mkCLOCK_FÀxcomm8
,

475 
	mkCLOCK_FÀxcomm9
,

477 } 
	t˛ock_«me_t
;

482 
	e_async_˛ock_§c


484 
	mkCLOCK_AsyncMaöClk
 = 0,

485 
	mkCLOCK_AsyncFro12Mhz
,

486 
	mkCLOCK_AsyncAudioPŒClk
,

487 
	mkCLOCK_AsyncI2cClkFc6
,

489 } 
	tasync_˛ock_§c_t
;

499 
	#MUX_A
(
m
, 
choi˚
Ë(((mË<< 0Ë| ((choi˚ + 1Ë<< 8))

	)

500 
	#MUX_B
(
m
, 
choi˚
Ë(((mË<< 12Ë| ((choi˚ + 1Ë<< 20))

	)

501 
	#MUX_C
(
m
, 
choi˚
Ë(((mË<< 24Ë| ((choi˚ + 1Ë<< 32))

	)

502 
	#MUX_D
(
m
, 
choi˚
Ë(((mË<< 36Ë| ((choi˚ + 1Ë<< 44))

	)

503 
	#MUX_E
(
m
, 
choi˚
Ë(((mË<< 48Ë| ((choi˚ + 1Ë<< 56))

	)

505 
	#CM_MAINCLKSELA
 0

	)

506 
	#CM_MAINCLKSELB
 1

	)

507 
	#CM_CLKOUTCLKSELA
 2

	)

508 
	#CM_SYSPLLCLKSEL
 4

	)

509 
	#CM_AUDPLLCLKSEL
 6

	)

510 
	#CM_SPIFICLKSEL
 8

	)

511 
	#CM_ADCASYNCCLKSEL
 9

	)

512 
	#CM_USB0CLKSEL
 10

	)

513 
	#CM_USB1CLKSEL
 11

	)

514 
	#CM_FXCOMCLKSEL0
 12

	)

515 
	#CM_FXCOMCLKSEL1
 13

	)

516 
	#CM_FXCOMCLKSEL2
 14

	)

517 
	#CM_FXCOMCLKSEL3
 15

	)

518 
	#CM_FXCOMCLKSEL4
 16

	)

519 
	#CM_FXCOMCLKSEL5
 17

	)

520 
	#CM_FXCOMCLKSEL6
 18

	)

521 
	#CM_FXCOMCLKSEL7
 19

	)

522 
	#CM_FXCOMCLKSEL8
 20

	)

523 
	#CM_FXCOMCLKSEL9
 21

	)

524 
	#CM_MCLKCLKSEL
 24

	)

525 
	#CM_FRGCLKSEL
 26

	)

526 
	#CM_DMICCLKSEL
 27

	)

527 
	#CM_SCTCLKSEL
 28

	)

528 
	#CM_LCDCLKSEL
 29

	)

529 
	#CM_SDIOCLKSEL
 30

	)

531 
	#CM_ASYNCAPB
 31

	)

533 
	e_˛ock_©èch_id


536 
	mkFRO12M_to_MAIN_CLK
 = 
MUX_A
(
CM_MAINCLKSELA
, 0Ë| 
MUX_B
(
CM_MAINCLKSELB
, 0),

537 
	mkEXT_CLK_to_MAIN_CLK
 = 
MUX_A
(
CM_MAINCLKSELA
, 1Ë| 
MUX_B
(
CM_MAINCLKSELB
, 0),

538 
	mkWDT_OSC_to_MAIN_CLK
 = 
MUX_A
(
CM_MAINCLKSELA
, 2Ë| 
MUX_B
(
CM_MAINCLKSELB
, 0),

539 
	mkFRO_HF_to_MAIN_CLK
 = 
MUX_A
(
CM_MAINCLKSELA
, 3Ë| 
MUX_B
(
CM_MAINCLKSELB
, 0),

540 
	mkSYS_PLL_to_MAIN_CLK
 = 
MUX_A
(
CM_MAINCLKSELB
, 2),

541 
	mkOSC32K_to_MAIN_CLK
 = 
MUX_A
(
CM_MAINCLKSELB
, 3),

543 
	mkMAIN_CLK_to_CLKOUT
 = 
MUX_A
(
CM_CLKOUTCLKSELA
, 0),

544 
	mkEXT_CLK_to_CLKOUT
 = 
MUX_A
(
CM_CLKOUTCLKSELA
, 1),

545 
	mkWDT_OSC_to_CLKOUT
 = 
MUX_A
(
CM_CLKOUTCLKSELA
, 2),

546 
	mkFRO_HF_to_CLKOUT
 = 
MUX_A
(
CM_CLKOUTCLKSELA
, 3),

547 
	mkSYS_PLL_to_CLKOUT
 = 
MUX_A
(
CM_CLKOUTCLKSELA
, 4),

548 
	mkUSB_PLL_to_CLKOUT
 = 
MUX_A
(
CM_CLKOUTCLKSELA
, 5),

549 
	mkAUDIO_PLL_to_CLKOUT
 = 
MUX_A
(
CM_CLKOUTCLKSELA
, 6),

550 
	mkOSC32K_OSC_to_CLKOUT
 = 
MUX_A
(
CM_CLKOUTCLKSELA
, 7),

552 
	mkFRO12M_to_SYS_PLL
 = 
MUX_A
(
CM_SYSPLLCLKSEL
, 0),

553 
	mkEXT_CLK_to_SYS_PLL
 = 
MUX_A
(
CM_SYSPLLCLKSEL
, 1),

554 
	mkWDT_OSC_to_SYS_PLL
 = 
MUX_A
(
CM_SYSPLLCLKSEL
, 2),

555 
	mkOSC32K_to_SYS_PLL
 = 
MUX_A
(
CM_SYSPLLCLKSEL
, 3),

556 
	mkNONE_to_SYS_PLL
 = 
MUX_A
(
CM_SYSPLLCLKSEL
, 7),

558 
	mkFRO12M_to_AUDIO_PLL
 = 
MUX_A
(
CM_AUDPLLCLKSEL
, 0),

559 
	mkEXT_CLK_to_AUDIO_PLL
 = 
MUX_A
(
CM_AUDPLLCLKSEL
, 1),

560 
	mkNONE_to_AUDIO_PLL
 = 
MUX_A
(
CM_AUDPLLCLKSEL
, 7),

562 
	mkMAIN_CLK_to_SPIFI_CLK
 = 
MUX_A
(
CM_SPIFICLKSEL
, 0),

563 
	mkSYS_PLL_to_SPIFI_CLK
 = 
MUX_A
(
CM_SPIFICLKSEL
, 1),

564 
	mkUSB_PLL_to_SPIFI_CLK
 = 
MUX_A
(
CM_SPIFICLKSEL
, 2),

565 
	mkFRO_HF_to_SPIFI_CLK
 = 
MUX_A
(
CM_SPIFICLKSEL
, 3),

566 
	mkAUDIO_PLL_to_SPIFI_CLK
 = 
MUX_A
(
CM_SPIFICLKSEL
, 4),

567 
	mkNONE_to_SPIFI_CLK
 = 
MUX_A
(
CM_SPIFICLKSEL
, 7),

569 
	mkFRO_HF_to_ADC_CLK
 = 
MUX_A
(
CM_ADCASYNCCLKSEL
, 0),

570 
	mkSYS_PLL_to_ADC_CLK
 = 
MUX_A
(
CM_ADCASYNCCLKSEL
, 1),

571 
	mkUSB_PLL_to_ADC_CLK
 = 
MUX_A
(
CM_ADCASYNCCLKSEL
, 2),

572 
	mkAUDIO_PLL_to_ADC_CLK
 = 
MUX_A
(
CM_ADCASYNCCLKSEL
, 3),

573 
	mkNONE_to_ADC_CLK
 = 
MUX_A
(
CM_ADCASYNCCLKSEL
, 7),

575 
	mkFRO_HF_to_USB0_CLK
 = 
MUX_A
(
CM_USB0CLKSEL
, 0),

576 
	mkSYS_PLL_to_USB0_CLK
 = 
MUX_A
(
CM_USB0CLKSEL
, 1),

577 
	mkUSB_PLL_to_USB0_CLK
 = 
MUX_A
(
CM_USB0CLKSEL
, 2),

578 
	mkNONE_to_USB0_CLK
 = 
MUX_A
(
CM_USB0CLKSEL
, 7),

580 
	mkFRO_HF_to_USB1_CLK
 = 
MUX_A
(
CM_USB1CLKSEL
, 0),

581 
	mkSYS_PLL_to_USB1_CLK
 = 
MUX_A
(
CM_USB1CLKSEL
, 1),

582 
	mkUSB_PLL_to_USB1_CLK
 = 
MUX_A
(
CM_USB1CLKSEL
, 2),

583 
	mkNONE_to_USB1_CLK
 = 
MUX_A
(
CM_USB1CLKSEL
, 7),

585 
	mkFRO12M_to_FLEXCOMM0
 = 
MUX_A
(
CM_FXCOMCLKSEL0
, 0),

586 
	mkFRO_HF_to_FLEXCOMM0
 = 
MUX_A
(
CM_FXCOMCLKSEL0
, 1),

587 
	mkAUDIO_PLL_to_FLEXCOMM0
 = 
MUX_A
(
CM_FXCOMCLKSEL0
, 2),

588 
	mkMCLK_to_FLEXCOMM0
 = 
MUX_A
(
CM_FXCOMCLKSEL0
, 3),

589 
	mkFRG_to_FLEXCOMM0
 = 
MUX_A
(
CM_FXCOMCLKSEL0
, 4),

590 
	mkNONE_to_FLEXCOMM0
 = 
MUX_A
(
CM_FXCOMCLKSEL0
, 7),

592 
	mkFRO12M_to_FLEXCOMM1
 = 
MUX_A
(
CM_FXCOMCLKSEL1
, 0),

593 
	mkFRO_HF_to_FLEXCOMM1
 = 
MUX_A
(
CM_FXCOMCLKSEL1
, 1),

594 
	mkAUDIO_PLL_to_FLEXCOMM1
 = 
MUX_A
(
CM_FXCOMCLKSEL1
, 2),

595 
	mkMCLK_to_FLEXCOMM1
 = 
MUX_A
(
CM_FXCOMCLKSEL1
, 3),

596 
	mkFRG_to_FLEXCOMM1
 = 
MUX_A
(
CM_FXCOMCLKSEL1
, 4),

597 
	mkNONE_to_FLEXCOMM1
 = 
MUX_A
(
CM_FXCOMCLKSEL1
, 7),

599 
	mkFRO12M_to_FLEXCOMM2
 = 
MUX_A
(
CM_FXCOMCLKSEL2
, 0),

600 
	mkFRO_HF_to_FLEXCOMM2
 = 
MUX_A
(
CM_FXCOMCLKSEL2
, 1),

601 
	mkAUDIO_PLL_to_FLEXCOMM2
 = 
MUX_A
(
CM_FXCOMCLKSEL2
, 2),

602 
	mkMCLK_to_FLEXCOMM2
 = 
MUX_A
(
CM_FXCOMCLKSEL2
, 3),

603 
	mkFRG_to_FLEXCOMM2
 = 
MUX_A
(
CM_FXCOMCLKSEL2
, 4),

604 
	mkNONE_to_FLEXCOMM2
 = 
MUX_A
(
CM_FXCOMCLKSEL2
, 7),

606 
	mkFRO12M_to_FLEXCOMM3
 = 
MUX_A
(
CM_FXCOMCLKSEL3
, 0),

607 
	mkFRO_HF_to_FLEXCOMM3
 = 
MUX_A
(
CM_FXCOMCLKSEL3
, 1),

608 
	mkAUDIO_PLL_to_FLEXCOMM3
 = 
MUX_A
(
CM_FXCOMCLKSEL3
, 2),

609 
	mkMCLK_to_FLEXCOMM3
 = 
MUX_A
(
CM_FXCOMCLKSEL3
, 3),

610 
	mkFRG_to_FLEXCOMM3
 = 
MUX_A
(
CM_FXCOMCLKSEL3
, 4),

611 
	mkNONE_to_FLEXCOMM3
 = 
MUX_A
(
CM_FXCOMCLKSEL3
, 7),

613 
	mkFRO12M_to_FLEXCOMM4
 = 
MUX_A
(
CM_FXCOMCLKSEL4
, 0),

614 
	mkFRO_HF_to_FLEXCOMM4
 = 
MUX_A
(
CM_FXCOMCLKSEL4
, 1),

615 
	mkAUDIO_PLL_to_FLEXCOMM4
 = 
MUX_A
(
CM_FXCOMCLKSEL4
, 2),

616 
	mkMCLK_to_FLEXCOMM4
 = 
MUX_A
(
CM_FXCOMCLKSEL4
, 3),

617 
	mkFRG_to_FLEXCOMM4
 = 
MUX_A
(
CM_FXCOMCLKSEL4
, 4),

618 
	mkNONE_to_FLEXCOMM4
 = 
MUX_A
(
CM_FXCOMCLKSEL4
, 7),

620 
	mkFRO12M_to_FLEXCOMM5
 = 
MUX_A
(
CM_FXCOMCLKSEL5
, 0),

621 
	mkFRO_HF_to_FLEXCOMM5
 = 
MUX_A
(
CM_FXCOMCLKSEL5
, 1),

622 
	mkAUDIO_PLL_to_FLEXCOMM5
 = 
MUX_A
(
CM_FXCOMCLKSEL5
, 2),

623 
	mkMCLK_to_FLEXCOMM5
 = 
MUX_A
(
CM_FXCOMCLKSEL5
, 3),

624 
	mkFRG_to_FLEXCOMM5
 = 
MUX_A
(
CM_FXCOMCLKSEL5
, 4),

625 
	mkNONE_to_FLEXCOMM5
 = 
MUX_A
(
CM_FXCOMCLKSEL5
, 7),

627 
	mkFRO12M_to_FLEXCOMM6
 = 
MUX_A
(
CM_FXCOMCLKSEL6
, 0),

628 
	mkFRO_HF_to_FLEXCOMM6
 = 
MUX_A
(
CM_FXCOMCLKSEL6
, 1),

629 
	mkAUDIO_PLL_to_FLEXCOMM6
 = 
MUX_A
(
CM_FXCOMCLKSEL6
, 2),

630 
	mkMCLK_to_FLEXCOMM6
 = 
MUX_A
(
CM_FXCOMCLKSEL6
, 3),

631 
	mkFRG_to_FLEXCOMM6
 = 
MUX_A
(
CM_FXCOMCLKSEL6
, 4),

632 
	mkNONE_to_FLEXCOMM6
 = 
MUX_A
(
CM_FXCOMCLKSEL6
, 7),

634 
	mkFRO12M_to_FLEXCOMM7
 = 
MUX_A
(
CM_FXCOMCLKSEL7
, 0),

635 
	mkFRO_HF_to_FLEXCOMM7
 = 
MUX_A
(
CM_FXCOMCLKSEL7
, 1),

636 
	mkAUDIO_PLL_to_FLEXCOMM7
 = 
MUX_A
(
CM_FXCOMCLKSEL7
, 2),

637 
	mkMCLK_to_FLEXCOMM7
 = 
MUX_A
(
CM_FXCOMCLKSEL7
, 3),

638 
	mkFRG_to_FLEXCOMM7
 = 
MUX_A
(
CM_FXCOMCLKSEL7
, 4),

639 
	mkNONE_to_FLEXCOMM7
 = 
MUX_A
(
CM_FXCOMCLKSEL7
, 7),

641 
	mkFRO12M_to_FLEXCOMM8
 = 
MUX_A
(
CM_FXCOMCLKSEL8
, 0),

642 
	mkFRO_HF_to_FLEXCOMM8
 = 
MUX_A
(
CM_FXCOMCLKSEL8
, 1),

643 
	mkAUDIO_PLL_to_FLEXCOMM8
 = 
MUX_A
(
CM_FXCOMCLKSEL8
, 2),

644 
	mkMCLK_to_FLEXCOMM8
 = 
MUX_A
(
CM_FXCOMCLKSEL8
, 3),

645 
	mkFRG_to_FLEXCOMM8
 = 
MUX_A
(
CM_FXCOMCLKSEL8
, 4),

646 
	mkNONE_to_FLEXCOMM8
 = 
MUX_A
(
CM_FXCOMCLKSEL8
, 7),

648 
	mkFRO12M_to_FLEXCOMM9
 = 
MUX_A
(
CM_FXCOMCLKSEL9
, 0),

649 
	mkFRO_HF_to_FLEXCOMM9
 = 
MUX_A
(
CM_FXCOMCLKSEL9
, 1),

650 
	mkAUDIO_PLL_to_FLEXCOMM9
 = 
MUX_A
(
CM_FXCOMCLKSEL9
, 2),

651 
	mkMCLK_to_FLEXCOMM9
 = 
MUX_A
(
CM_FXCOMCLKSEL9
, 3),

652 
	mkFRG_to_FLEXCOMM9
 = 
MUX_A
(
CM_FXCOMCLKSEL9
, 4),

653 
	mkNONE_to_FLEXCOMM9
 = 
MUX_A
(
CM_FXCOMCLKSEL9
, 7),

655 
	mkFRO_HF_to_MCLK
 = 
MUX_A
(
CM_MCLKCLKSEL
, 0),

656 
	mkAUDIO_PLL_to_MCLK
 = 
MUX_A
(
CM_MCLKCLKSEL
, 1),

657 
	mkNONE_to_MCLK
 = 
MUX_A
(
CM_MCLKCLKSEL
, 7),

659 
	mkMAIN_CLK_to_FRG
 = 
MUX_A
(
CM_FRGCLKSEL
, 0),

660 
	mkSYS_PLL_to_FRG
 = 
MUX_A
(
CM_FRGCLKSEL
, 1),

661 
	mkFRO12M_to_FRG
 = 
MUX_A
(
CM_FRGCLKSEL
, 2),

662 
	mkFRO_HF_to_FRG
 = 
MUX_A
(
CM_FRGCLKSEL
, 3),

663 
	mkNONE_to_FRG
 = 
MUX_A
(
CM_FRGCLKSEL
, 7),

665 
	mkFRO12M_to_DMIC
 = 
MUX_A
(
CM_DMICCLKSEL
, 0),

666 
	mkFRO_HF_DIV_to_DMIC
 = 
MUX_A
(
CM_DMICCLKSEL
, 1),

667 
	mkAUDIO_PLL_to_DMIC
 = 
MUX_A
(
CM_DMICCLKSEL
, 2),

668 
	mkMCLK_to_DMIC
 = 
MUX_A
(
CM_DMICCLKSEL
, 3),

669 
	mkNONE_to_DMIC
 = 
MUX_A
(
CM_DMICCLKSEL
, 7),

671 
	mkMCLK_to_SCT_CLK
 = 
MUX_A
(
CM_SCTCLKSEL
, 0),

672 
	mkSYS_PLL_to_SCT_CLK
 = 
MUX_A
(
CM_SCTCLKSEL
, 1),

673 
	mkFRO_HF_to_SCT_CLK
 = 
MUX_A
(
CM_SCTCLKSEL
, 2),

674 
	mkAUDIO_PLL_to_SCT_CLK
 = 
MUX_A
(
CM_SCTCLKSEL
, 3),

675 
	mkNONE_to_SCT_CLK
 = 
MUX_A
(
CM_SCTCLKSEL
, 7),

677 
	mkMCLK_to_SDIO_CLK
 = 
MUX_A
(
CM_SDIOCLKSEL
, 0),

678 
	mkSYS_PLL_to_SDIO_CLK
 = 
MUX_A
(
CM_SDIOCLKSEL
, 1),

679 
	mkUSB_PLL_to_SDIO_CLK
 = 
MUX_A
(
CM_SDIOCLKSEL
, 2),

680 
	mkFRO_HF_to_SDIO_CLK
 = 
MUX_A
(
CM_SDIOCLKSEL
, 3),

681 
	mkAUDIO_PLL_to_SDIO_CLK
 = 
MUX_A
(
CM_SDIOCLKSEL
, 4),

682 
	mkNONE_to_SDIO_CLK
 = 
MUX_A
(
CM_SDIOCLKSEL
, 7),

684 
	mkMCLK_to_LCD_CLK
 = 
MUX_A
(
CM_LCDCLKSEL
, 0),

685 
	mkLCDCLKIN_to_LCD_CLK
 = 
MUX_A
(
CM_LCDCLKSEL
, 1),

686 
	mkFRO_HF_to_LCD_CLK
 = 
MUX_A
(
CM_LCDCLKSEL
, 2),

687 
	mkNONE_to_LCD_CLK
 = 
MUX_A
(
CM_LCDCLKSEL
, 3),

689 
	mkMAIN_CLK_to_ASYNC_APB
 = 
MUX_A
(
CM_ASYNCAPB
, 0),

690 
	mkFRO12M_to_ASYNC_APB
 = 
MUX_A
(
CM_ASYNCAPB
, 1),

691 
	mkAUDIO_PLL_to_ASYNC_APB
 = 
MUX_A
(
CM_ASYNCAPB
, 2),

692 
	mkI2C_CLK_FC6_to_ASYNC_APB
 = 
MUX_A
(
CM_ASYNCAPB
, 3),

693 
	mkNONE_to_NONE
 = 0x80000000U,

694 } 
	t˛ock_©èch_id_t
;

697 
	e_˛ock_div_«me


699 
	mkCLOCK_DivSy°ickClk
 = 0,

700 
	mkCLOCK_DivArmTrClkDiv
 = 1,

701 
	mkCLOCK_DivC™0Clk
 = 2,

702 
	mkCLOCK_DivC™1Clk
 = 3,

703 
	mkCLOCK_DivSm¨tC¨d0Clk
 = 4,

704 
	mkCLOCK_DivSm¨tC¨d1Clk
 = 5,

705 
	mkCLOCK_DivAhbClk
 = 32,

706 
	mkCLOCK_DivClkOut
 = 33,

707 
	mkCLOCK_DivFrohfClk
 = 34,

708 
	mkCLOCK_DivSpifiClk
 = 36,

709 
	mkCLOCK_DivAdcAsyncClk
 = 37,

710 
	mkCLOCK_DivUsb0Clk
 = 38,

711 
	mkCLOCK_DivUsb1Clk
 = 39,

712 
	mkCLOCK_DivFrg
 = 40,

713 
	mkCLOCK_DivDmicClk
 = 42,

714 
	mkCLOCK_DivMClk
 = 43,

715 
	mkCLOCK_DivLcdClk
 = 44,

716 
	mkCLOCK_DivS˘Clk
 = 45,

717 
	mkCLOCK_DivEmcClk
 = 46,

718 
	mkCLOCK_DivSdioClk
 = 47

719 } 
	t˛ock_div_«me_t
;

725 #i‡
deföed
(
__˝lu•lus
)

729 
ölöe
 
CLOCK_E«bÀClock
(
˛ock_ù_«me_t
 
˛k
)

731 
uöt32_t
 
ödex
 = 
CLK_GATE_ABSTRACT_REG_OFFSET
(
˛k
);

732 i‡(
ödex
 < 3)

734 
SYSCON
->
AHBCLKCTRLSET
[
ödex
] = (1U << 
CLK_GATE_ABSTRACT_BITS_SHIFT
(
˛k
));

738 
SYSCON
->
ASYNCAPBCTRL
 = 
SYSCON_ASYNCAPBCTRL_ENABLE
(1);

739 
ASYNC_SYSCON
->
ASYNCAPBCLKCTRLSET
 = (1U << 
CLK_GATE_ABSTRACT_BITS_SHIFT
(
˛k
));

743 
ölöe
 
CLOCK_DißbÀClock
(
˛ock_ù_«me_t
 
˛k
)

745 
uöt32_t
 
ödex
 = 
CLK_GATE_ABSTRACT_REG_OFFSET
(
˛k
);

746 i‡(
ödex
 < 3)

748 
SYSCON
->
AHBCLKCTRLCLR
[
ödex
] = (1U << 
CLK_GATE_ABSTRACT_BITS_SHIFT
(
˛k
));

752 
ASYNC_SYSCON
->
ASYNCAPBCLKCTRLCLR
 = (1U << 
CLK_GATE_ABSTRACT_BITS_SHIFT
(
˛k
));

753 
SYSCON
->
ASYNCAPBCTRL
 = 
SYSCON_ASYNCAPBCTRL_ENABLE
(0);

760 
	e_˛ock_Êashtim


762 
kCLOCK_Fœsh1Cy˛e
 = 0,

763 
kCLOCK_Fœsh2Cy˛e
,

764 
kCLOCK_Fœsh3Cy˛e
,

765 
kCLOCK_Fœsh4Cy˛e
,

766 
kCLOCK_Fœsh5Cy˛e
,

767 
kCLOCK_Fœsh6Cy˛e
,

768 
kCLOCK_Fœsh7Cy˛e
,

769 
kCLOCK_Fœsh8Cy˛e
,

770 
kCLOCK_Fœsh9Cy˛e


771 } 
	t˛ock_Êashtim_t
;

778 
ölöe
 
CLOCK_SëFLASHAc˚ssCy˛es
(
˛ock_Êashtim_t
 
˛ks
)

780 
uöt32_t
 
tmp
;

782 
tmp
 = 
SYSCON
->
FLASHCFG
 & ~(
SYSCON_FLASHCFG_FLASHTIM_MASK
);

785 
SYSCON
->
FLASHCFG
 = 
tmp
 | ((
uöt32_t
)
˛ks
 << 
SYSCON_FLASHCFG_FLASHTIM_SHIFT
);

795 
°©us_t
 
CLOCK_SëupFROClockög
(
uöt32_t
 
iFªq
);

801 
CLOCK_AâachClk
(
˛ock_©èch_id_t
 
c⁄√˘i⁄
);

809 
CLOCK_SëClkDiv
(
˛ock_div_«me_t
 
div_«me
, 
uöt32_t
 
divided_by_vÆue
, 
boﬁ
 
ª£t
);

815 
CLOCK_SëFLASHAc˚ssCy˛esF‹Fªq
(
uöt32_t
 
iFªq
);

819 
uöt32_t
 
CLOCK_GëFªq
(
˛ock_«me_t
 
˛ockName
);

823 
uöt32_t
 
CLOCK_GëFro12MFªq
();

827 
uöt32_t
 
CLOCK_GëClockOutClkFªq
();

831 
uöt32_t
 
CLOCK_GëSpifiClkFªq
();

835 
uöt32_t
 
CLOCK_GëAdcClkFªq
();

839 
uöt32_t
 
CLOCK_GëUsb0ClkFªq
();

843 
uöt32_t
 
CLOCK_GëUsb1ClkFªq
();

847 
uöt32_t
 
CLOCK_GëM˛kClkFªq
();

851 
uöt32_t
 
CLOCK_GëS˘ClkFªq
();

855 
uöt32_t
 
CLOCK_GëSdioClkFªq
();

859 
uöt32_t
 
CLOCK_GëLcdClkFªq
();

863 
uöt32_t
 
CLOCK_GëLcdClkIn
();

867 
uöt32_t
 
CLOCK_GëExtClkFªq
();

871 
uöt32_t
 
CLOCK_GëWdtOscFªq
();

875 
uöt32_t
 
CLOCK_GëFroHfFªq
();

879 
uöt32_t
 
CLOCK_GëPŒOutFªq
();

883 
uöt32_t
 
CLOCK_GëUsbPŒOutFªq
();

887 
uöt32_t
 
CLOCK_GëAudioPŒOutFªq
();

891 
uöt32_t
 
CLOCK_GëOsc32KFªq
();

895 
uöt32_t
 
CLOCK_GëC‹eSysClkFªq
();

899 
uöt32_t
 
CLOCK_GëI2SMClkFªq
();

903 
uöt32_t
 
CLOCK_GëFÀxCommClkFªq
(uöt32_à
id
);

907 
__STATIC_INLINE
 
async_˛ock_§c_t
 
CLOCK_GëAsyncApbClkSrc
()

909  (
async_˛ock_§c_t
)(
ASYNC_SYSCON
->
ASYNCAPBCLKSELA
 & 0x3);

914 
uöt32_t
 
CLOCK_GëAsyncApbClkFªq
();

918 
uöt32_t
 
CLOCK_GëAudioPLLInClockR©e
();

922 
uöt32_t
 
CLOCK_GëSy°emPLLInClockR©e
();

931 
uöt32_t
 
CLOCK_GëSy°emPLLOutClockR©e
(
boﬁ
 
ªcompuã
);

940 
uöt32_t
 
CLOCK_GëAudioPLLOutClockR©e
(
boﬁ
 
ªcompuã
);

949 
uöt32_t
 
CLOCK_GëUSbPLLOutClockR©e
(
boﬁ
 
ªcompuã
);

955 
__STATIC_INLINE
 
CLOCK_SëBy∑ssPLL
(
boﬁ
 
by∑ss
)

957 i‡(
by∑ss
)

959 
SYSCON
->
SYSPLLCTRL
 |(1UL << 
SYSCON_SYSPLLCTRL_BYPASS_SHIFT
);

963 
SYSCON
->
SYSPLLCTRL
 &~(1UL << 
SYSCON_SYSPLLCTRL_BYPASS_SHIFT
);

970 
__STATIC_INLINE
 
boﬁ
 
CLOCK_IsSy°emPLLLocked
()

972  (
boﬁ
)((
SYSCON
->
SYSPLLSTAT
 & 
SYSCON_SYSPLLSTAT_LOCK_MASK
) != 0);

978 
__STATIC_INLINE
 
boﬁ
 
CLOCK_IsUsbPLLLocked
()

980  (
boﬁ
)((
SYSCON
->
USBPLLSTAT
 & 
SYSCON_USBPLLSTAT_LOCK_MASK
) != 0);

986 
__STATIC_INLINE
 
boﬁ
 
CLOCK_IsAudioPLLLocked
()

988  (
boﬁ
)((
SYSCON
->
AUDPLLSTAT
 & 
SYSCON_AUDPLLSTAT_LOCK_MASK
) != 0);

994 
__STATIC_INLINE
 
CLOCK_E«bÀ_SysOsc
(
boﬁ
 
íabÀ
)

996 if(
íabÀ
)

998 
SYSCON
->
PDRUNCFGCLR
[0] |
SYSCON_PDRUNCFG_PDEN_VD2_ANA_MASK
;

999 
SYSCON
->
PDRUNCFGCLR
[1] |
SYSCON_PDRUNCFG_PDEN_SYSOSC_MASK
;

1004 
SYSCON
->
PDRUNCFGSET
[0] = 
SYSCON_PDRUNCFG_PDEN_VD2_ANA_MASK
;

1005 
SYSCON
->
PDRUNCFGSET
[1] = 
SYSCON_PDRUNCFG_PDEN_SYSOSC_MASK
;

1014 
CLOCK_SëSt‹edPLLClockR©e
(
uöt32_t
 
øã
);

1020 
CLOCK_SëSt‹edAudioPLLClockR©e
(
uöt32_t
 
øã
);

1036 
	#PLL_CONFIGFLAG_USEINRATE
 (1 << 0Ë

	)

1037 
	#PLL_CONFIGFLAG_FORCENOFRACT
 \

1039 << 2Ë

	)

1051 
	s_∂l_c⁄fig


1053 
uöt32_t
 
desúedR©e
;

1054 
uöt32_t
 
öputR©e
;

1055 
uöt32_t
 
Êags
;

1056 } 
	t∂l_c⁄fig_t
;

1061 
	#PLL_SETUPFLAG_POWERUP
 (1 << 0Ë

	)

1062 
	#PLL_SETUPFLAG_WAITLOCK
 (1 << 1Ë

	)

1063 
	#PLL_SETUPFLAG_ADGVOLT
 (1 << 2Ë

	)

1072 
	s_∂l_£tup


1074 
uöt32_t
 
∂l˘æ
;

1075 
uöt32_t
 
∂ dec
;

1076 
uöt32_t
 
∂Õdec
;

1077 
uöt32_t
 
∂lmdec
;

1078 
uöt32_t
 
∂lR©e
;

1079 
uöt32_t
 
aud∂l‰ac
;

1080 
uöt32_t
 
Êags
;

1081 } 
	t∂l_£tup_t
;

1085 
	e_∂l_îr‹


1087 
kSètus_PLL_Suc˚ss
 = 
MAKE_STATUS
(
kSètusGroup_Gíîic
, 0),

1088 
kSètus_PLL_OuçutTooLow
 = 
MAKE_STATUS
(
kSètusGroup_Gíîic
, 1),

1089 
kSètus_PLL_OuçutTooHigh
 = 
MAKE_STATUS
(
kSètusGroup_Gíîic
, 2),

1090 
kSètus_PLL_I≈utTooLow
 = 
MAKE_STATUS
(
kSètusGroup_Gíîic
, 3),

1091 
kSètus_PLL_I≈utTooHigh
 = 
MAKE_STATUS
(
kSètusGroup_Gíîic
, 4),

1092 
kSètus_PLL_OutsideI¡Limô
 = 
MAKE_STATUS
(
kSètusGroup_Gíîic
, 5),

1093 
kSètus_PLL_CCOTooLow
 = 
MAKE_STATUS
(
kSètusGroup_Gíîic
, 6),

1094 
kSètus_PLL_CCOTooHigh
 = 
MAKE_STATUS
(
kSètusGroup_Gíîic
, 7)

1095 } 
	t∂l_îr‹_t
;

1098 
	e_˛ock_usb_§c


1100 
kCLOCK_UsbSrcFro
 = (
uöt32_t
)
kCLOCK_FroHf
,

1101 
kCLOCK_UsbSrcSy°emPŒ
 = (
uöt32_t
)
kCLOCK_PŒOut
,

1102 
kCLOCK_UsbSrcMaöClock
 = (
uöt32_t
)
kCLOCK_C‹eSysClk
,

1103 
kCLOCK_UsbSrcUsbPŒ
 = (
uöt32_t
)
kCLOCK_UsbPŒ
,

1105 
kCLOCK_UsbSrcN⁄e
 = 
SYSCON_USB0CLKSEL_SEL
(7)

1106 } 
	t˛ock_usb_§c_t
;

1109 
	e_usb_∂l_p£l


1111 
pSñ_Divide_1
 = 0U,

1112 
pSñ_Divide_2
,

1113 
pSñ_Divide_4
,

1114 
pSñ_Divide_8


1115 }
	tusb_∂l_p£l
;

1124 
	s_usb_∂l_£tup


1126 
uöt8_t
 
m£l
;

1127 
uöt8_t
 
p£l
;

1128 
uöt8_t
 
n£l
;

1129 
boﬁ
 
dúe˘
;

1130 
boﬁ
 
by∑ss
;

1131 
boﬁ
 
fb£l
;

1132 
uöt32_t
 
öputR©e
;

1133 } 
	tusb_∂l_£tup_t
;

1139 
uöt32_t
 
CLOCK_GëSy°emPLLOutFromSëup
(
∂l_£tup_t
 *
pSëup
);

1145 
uöt32_t
 
CLOCK_GëAudioPLLOutFromSëup
(
∂l_£tup_t
 *
pSëup
);

1151 
uöt32_t
 
CLOCK_GëAudioPLLOutFromFø˘Sëup
(
∂l_£tup_t
 *
pSëup
);

1157 
uöt32_t
 
CLOCK_GëUsbPLLOutFromSëup
(c⁄° 
usb_∂l_£tup_t
 *
pSëup
);

1166 
∂l_îr‹_t
 
CLOCK_SëupPLLD©a
(
∂l_c⁄fig_t
 *
pC⁄åﬁ
, 
∂l_£tup_t
 *
pSëup
);

1175 
∂l_îr‹_t
 
CLOCK_SëupAudioPLLD©a
(
∂l_c⁄fig_t
 *
pC⁄åﬁ
, 
∂l_£tup_t
 *
pSëup
);

1187 
∂l_îr‹_t
 
CLOCK_SëupSy°emPLLPªc
(
∂l_£tup_t
 *
pSëup
, 
uöt32_t
 
Êagcfg
);

1199 
∂l_îr‹_t
 
CLOCK_SëupAudioPLLPªc
(
∂l_£tup_t
 *
pSëup
, 
uöt32_t
 
Êagcfg
);

1211 
∂l_îr‹_t
 
CLOCK_SëupAudioPLLPªcFø˘
(
∂l_£tup_t
 *
pSëup
, 
uöt32_t
 
Êagcfg
);

1223 
∂l_îr‹_t
 
CLOCK_SëPLLFªq
(c⁄° 
∂l_£tup_t
 *
pSëup
);

1235 
∂l_îr‹_t
 
CLOCK_SëAudioPLLFªq
(c⁄° 
∂l_£tup_t
 *
pSëup
);

1247 
∂l_îr‹_t
 
CLOCK_SëUsbPLLFªq
(c⁄° 
usb_∂l_£tup_t
 *
pSëup
);

1260 
CLOCK_SëupSy°emPLLMu…
(
uöt32_t
 
mu…ùly_by
, uöt32_à
öput_‰eq
);

1266 
ölöe
 
CLOCK_DißbÀUsbDevi˚fs0Clock
(
˛ock_ù_«me_t
 
˛k
)

1268 
CLOCK_DißbÀClock
(
˛k
);

1276 
boﬁ
 
CLOCK_E«bÀUsbfs0Devi˚Clock
(
˛ock_usb_§c_t
 
§c
, 
uöt32_t
 
‰eq
);

1283 
boﬁ
 
CLOCK_E«bÀUsbfs0Ho°Clock
(
˛ock_usb_§c_t
 
§c
, 
uöt32_t
 
‰eq
);

1290 
boﬁ
 
CLOCK_E«bÀUsbhs0Devi˚Clock
(
˛ock_usb_§c_t
 
§c
, 
uöt32_t
 
‰eq
);

1297 
boﬁ
 
CLOCK_E«bÀUsbhs0Ho°Clock
(
˛ock_usb_§c_t
 
§c
, 
uöt32_t
 
‰eq
);

1299 #i‡
deföed
(
__˝lu•lus
)

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_ctimer.c

35 
	~"f¶_˘imî.h
"

47 
uöt32_t
 
CTIMER_GëIn°™˚
(
CTIMER_Ty≥
 *
ba£
);

53 
CTIMER_Ty≥
 *c⁄° 
	gs_˘imîBa£s
[] = 
CTIMER_BASE_PTRS
;

55 #i‡!(
deföed
(
FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL
) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

57 c⁄° 
˛ock_ù_«me_t
 
	gs_˘imîClocks
[] = 
CTIMER_CLOCKS
;

61 c⁄° 
ª£t_ù_«me_t
 
	gs_˘imîRe£ts
[] = 
CTIMER_RSTS
;

64 
˘imî_ˇŒback_t
 *
	gs_˘imîCÆlback
[
FSL_FEATURE_SOC_CTIMER_COUNT
] = {0};

67 
˘imî_ˇŒback_ty≥_t
 
	g˘imîCÆlbackTy≥
[
FSL_FEATURE_SOC_CTIMER_COUNT
] = {
kCTIMER_SögÀCÆlback
};

70 c⁄° 
IRQn_Ty≥
 
	gs_˘imîIRQ
[] = 
CTIMER_IRQS
;

75 
uöt32_t
 
	$CTIMER_GëIn°™˚
(
CTIMER_Ty≥
 *
ba£
)

77 
uöt32_t
 
ö°™˚
;

78 
uöt32_t
 
˘imîAºayCou¡
 = ((
s_˘imîBa£s
) / (s_ctimerBases[0]));

81 
ö°™˚
 = 0; in°™˚ < 
˘imîAºayCou¡
; instance++)

83 i‡(
s_˘imîBa£s
[
ö°™˚
] =
ba£
)

89 
	`as£π
(
ö°™˚
 < 
˘imîAºayCou¡
);

91  
ö°™˚
;

92 
	}
}

94 
	$CTIMER_Inô
(
CTIMER_Ty≥
 *
ba£
, c⁄° 
˘imî_c⁄fig_t
 *
c⁄fig
)

96 
	`as£π
(
c⁄fig
);

98 #i‡!(
	`deföed
(
FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL
) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

100 
	`CLOCK_E«bÀClock
(
s_˘imîClocks
[
	`CTIMER_GëIn°™˚
(
ba£
)]);

104 
	`RESET_PîùhîÆRe£t
(
s_˘imîRe£ts
[
	`CTIMER_GëIn°™˚
(
ba£
)]);

107 
ba£
->
CTCR
 = 
	`CTIMER_CTCR_CTMODE
(
c⁄fig
->
mode
Ë| 
	`CTIMER_CTCR_CINSEL
(c⁄fig->
öput
);

110 
ba£
->
PR
 = 
	`CTIMER_PR_PRVAL
(
c⁄fig
->
¥esˇÀ
);

111 
	}
}

113 
	$CTIMER_Deöô
(
CTIMER_Ty≥
 *
ba£
)

115 
uöt32_t
 
ödex
 = 
	`CTIMER_GëIn°™˚
(
ba£
);

117 
ba£
->
TCR
 &~
CTIMER_TCR_CEN_MASK
;

119 #i‡!(
	`deföed
(
FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL
) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

121 
	`CLOCK_DißbÀClock
(
s_˘imîClocks
[
ödex
]);

125 
	`DißbÀIRQ
(
s_˘imîIRQ
[
ödex
]);

126 
	}
}

128 
	$CTIMER_GëDeÁu…C⁄fig
(
˘imî_c⁄fig_t
 *
c⁄fig
)

130 
	`as£π
(
c⁄fig
);

133 
c⁄fig
->
mode
 = 
kCTIMER_TimîMode
;

135 
c⁄fig
->
öput
 = 
kCTIMER_C≠tuª_0
;

137 
c⁄fig
->
¥esˇÀ
 = 0;

138 
	}
}

140 
°©us_t
 
	$CTIMER_SëupPwm
(
CTIMER_Ty≥
 *
ba£
,

141 
˘imî_m©ch_t
 
m©chCh™√l
,

142 
uöt8_t
 
dutyCy˛ePî˚¡
,

143 
uöt32_t
 
pwmFªq_Hz
,

144 
uöt32_t
 
§cClock_Hz
,

145 
boﬁ
 
íabÀI¡
)

147 
	`as£π
(
pwmFªq_Hz
 > 0);

149 
uöt32_t
 
ªg
;

150 
uöt32_t
 
≥riod
, 
pul£Pîiod
 = 0;

151 
uöt32_t
 
timîClock
 = 
§cClock_Hz
 / (
ba£
->
PR
 + 1);

152 
uöt32_t
 
ödex
 = 
	`CTIMER_GëIn°™˚
(
ba£
);

154 i‡(
m©chCh™√l
 =
kCTIMER_M©ch_3
)

156  
kSètus_Faû
;

160 
ba£
->
PWMC
 |(1U << 
m©chCh™√l
);

163 
ªg
 = 
ba£
->
MCR
;

164 
ªg
 &~((
CTIMER_MCR_MR0R_MASK
 | 
CTIMER_MCR_MR0S_MASK
 | 
CTIMER_MCR_MR0I_MASK
Ë<< (
m©chCh™√l
 * 3));

167 i‡(
íabÀI¡
)

169 
ªg
 |(
CTIMER_MCR_MR0I_MASK
 << (
CTIMER_MCR_MR0I_SHIFT
 + (
m©chCh™√l
 * 3)));

173 
ªg
 |
CTIMER_MCR_MR3R_MASK
;

175 
ba£
->
MCR
 = 
ªg
;

178 
≥riod
 = (
timîClock
 / 
pwmFªq_Hz
) - 1;

181 i‡(
dutyCy˛ePî˚¡
 == 0)

183 
pul£Pîiod
 = 
≥riod
 + 1;

187 
pul£Pîiod
 = (
≥riod
 * (100 - 
dutyCy˛ePî˚¡
)) / 100;

191 
ba£
->
MR
[
kCTIMER_M©ch_3
] = 
≥riod
;

194 
ba£
->
MR
[
m©chCh™√l
] = 
pul£Pîiod
;

196 
	`CTIMER_CÀ¨SètusFœgs
(
ba£
, 
CTIMER_IR_MR0INT_MASK
 << 
m©chCh™√l
);

198 i‡(
íabÀI¡
)

200 
	`E«bÀIRQ
(
s_˘imîIRQ
[
ödex
]);

203  
kSètus_Suc˚ss
;

204 
	}
}

206 
	$CTIMER_Upd©ePwmDutycy˛e
(
CTIMER_Ty≥
 *
ba£
, 
˘imî_m©ch_t
 
m©chCh™√l
, 
uöt8_t
 
dutyCy˛ePî˚¡
)

208 
uöt32_t
 
pul£Pîiod
 = 0, 
≥riod
;

211 
≥riod
 = 
ba£
->
MR
[
kCTIMER_M©ch_3
];

214 
pul£Pîiod
 = (
≥riod
 * 
dutyCy˛ePî˚¡
) / 100;

217 i‡(
dutyCy˛ePî˚¡
 == 0)

219 
pul£Pîiod
 = 
≥riod
 + 1;

223 
pul£Pîiod
 = (
≥riod
 * (100 - 
dutyCy˛ePî˚¡
)) / 100;

227 
ba£
->
MR
[
m©chCh™√l
] = 
pul£Pîiod
;

228 
	}
}

230 
	$CTIMER_SëupM©ch
(
CTIMER_Ty≥
 *
ba£
, 
˘imî_m©ch_t
 
m©chCh™√l
, c⁄° 
˘imî_m©ch_c⁄fig_t
 *
c⁄fig
)

232 
uöt32_t
 
ªg
;

233 
uöt32_t
 
ödex
 = 
	`CTIMER_GëIn°™˚
(
ba£
);

236 
ªg
 = 
ba£
->
MCR
;

237 
ªg
 &~((
CTIMER_MCR_MR0R_MASK
 | 
CTIMER_MCR_MR0S_MASK
 | 
CTIMER_MCR_MR0I_MASK
Ë<< (
m©chCh™√l
 * 3));

238 
ªg
 |(
uöt32_t
)((uöt32_t)(
c⁄fig
->
íabÀCou¡îRe£t
Ë<< (
CTIMER_MCR_MR0R_SHIFT
 + (
m©chCh™√l
 * 3)));

239 
ªg
 |(
uöt32_t
)((uöt32_t)(
c⁄fig
->
íabÀCou¡îSt›
Ë<< (
CTIMER_MCR_MR0S_SHIFT
 + (
m©chCh™√l
 * 3)));

240 
ªg
 |(
uöt32_t
)((uöt32_t)(
c⁄fig
->
íabÀI¡îru±
Ë<< (
CTIMER_MCR_MR0I_SHIFT
 + (
m©chCh™√l
 * 3)));

241 
ba£
->
MCR
 = 
ªg
;

243 
ªg
 = 
ba£
->
EMR
;

245 
ªg
 &~(
CTIMER_EMR_EMC0_MASK
 << (
m©chCh™√l
 * 2));

246 
ªg
 |(
uöt32_t
)
c⁄fig
->
outC⁄åﬁ
 << (
CTIMER_EMR_EMC0_SHIFT
 + (
m©chCh™√l
 * 2));

249 
ªg
 &~(
CTIMER_EMR_EM0_MASK
 << 
m©chCh™√l
);

250 
ªg
 |(
uöt32_t
)
c⁄fig
->
outPöInôSèã
 << 
m©chCh™√l
;

251 
ba£
->
EMR
 = 
ªg
;

254 
ba£
->
MR
[
m©chCh™√l
] = 
c⁄fig
->
m©chVÆue
;

256 
	`CTIMER_CÀ¨SètusFœgs
(
ba£
, 
CTIMER_IR_MR0INT_MASK
 << 
m©chCh™√l
);

258 i‡(
c⁄fig
->
íabÀI¡îru±
)

260 
	`E«bÀIRQ
(
s_˘imîIRQ
[
ödex
]);

262 
	}
}

264 
	$CTIMER_SëupC≠tuª
(
CTIMER_Ty≥
 *
ba£
,

265 
˘imî_ˇ±uª_ch™√l_t
 
ˇ±uª
,

266 
˘imî_ˇ±uª_edge_t
 
edge
,

267 
boﬁ
 
íabÀI¡
)

269 
uöt32_t
 
ªg
 = 
ba£
->
CCR
;

270 
uöt32_t
 
ödex
 = 
	`CTIMER_GëIn°™˚
(
ba£
);

273 
ªg
 &~((
CTIMER_CCR_CAP0RE_MASK
 | 
CTIMER_CCR_CAP0FE_MASK
 | 
CTIMER_CCR_CAP0I_MASK
Ë<< (
ˇ±uª
 * 3));

274 
ªg
 |(
uöt32_t
)
edge
 << (
CTIMER_CCR_CAP0RE_SHIFT
 + (
ˇ±uª
 * 3));

276 
	`CTIMER_CÀ¨SètusFœgs
(
ba£
, (
kCTIMER_C≠tuª0Fœg
 << 
ˇ±uª
));

278 i‡(
íabÀI¡
)

280 
ªg
 |
CTIMER_CCR_CAP0I_MASK
 << (
ˇ±uª
 * 3);

281 
	`E«bÀIRQ
(
s_˘imîIRQ
[
ödex
]);

283 
ba£
->
CCR
 = 
ªg
;

284 
	}
}

286 
	$CTIMER_Regi°îCÆlBack
(
CTIMER_Ty≥
 *
ba£
, 
˘imî_ˇŒback_t
 *
cb_func
, 
˘imî_ˇŒback_ty≥_t
 
cb_ty≥
)

288 
uöt32_t
 
ödex
 = 
	`CTIMER_GëIn°™˚
(
ba£
);

289 
s_˘imîCÆlback
[
ödex
] = 
cb_func
;

290 
˘imîCÆlbackTy≥
[
ödex
] = 
cb_ty≥
;

291 
	}
}

293 
	$CTIMER_GíîicIRQH™dÀr
(
uöt32_t
 
ödex
)

295 
uöt32_t
 
öt_°©
, 
i
, 
mask
;

297 
öt_°©
 = 
	`CTIMER_GëSètusFœgs
(
s_˘imîBa£s
[
ödex
]);

299 
	`CTIMER_CÀ¨SètusFœgs
(
s_˘imîBa£s
[
ödex
], 
öt_°©
);

300 i‡(
˘imîCÆlbackTy≥
[
ödex
] =
kCTIMER_SögÀCÆlback
)

302 i‡(
s_˘imîCÆlback
[
ödex
][0])

304 
s_˘imîCÆlback
[
ödex
][0](
öt_°©
);

309 #i‡
	`deföed
(
FSL_FEATURE_CTIMER_HAS_IR_CR3INT
) && FSL_FEATURE_CTIMER_HAS_IR_CR3INT

310 
i
 = 0; i <
CTIMER_IR_CR3INT_SHIFT
; i++)

312 
i
 = 0; i <
CTIMER_IR_CR2INT_SHIFT
; i++)

315 
mask
 = 0x01 << 
i
;

317 i‡((
öt_°©
 & 
mask
Ë&& (
s_˘imîCÆlback
[
ödex
][
i
]))

319 
s_˘imîCÆlback
[
ödex
][
i
](
öt_°©
);

325 #i‡
deföed
 
__CORTEX_M
 && (__CORTEX_M == 4U)

326 
	`__DSB
();

328 
	}
}

331 #i‡
deföed
(
CTIMER0
)

332 
	$CTIMER0_DrivîIRQH™dÀr
()

334 
	`CTIMER_GíîicIRQH™dÀr
(0);

337 #i‡
deföed
 
__CORTEX_M
 && (__CORTEX_M == 4U)

338 
	`__DSB
();

340 
	}
}

343 #i‡
deföed
(
CTIMER1
)

344 
	$CTIMER1_DrivîIRQH™dÀr
()

346 
	`CTIMER_GíîicIRQH™dÀr
(1);

349 #i‡
deföed
 
__CORTEX_M
 && (__CORTEX_M == 4U)

350 
	`__DSB
();

352 
	}
}

355 #i‡
deföed
(
CTIMER2
)

356 
	$CTIMER2_DrivîIRQH™dÀr
()

358 
	`CTIMER_GíîicIRQH™dÀr
(2);

361 #i‡
deföed
 
__CORTEX_M
 && (__CORTEX_M == 4U)

362 
	`__DSB
();

364 
	}
}

367 #i‡
deföed
(
CTIMER3
)

368 
	$CTIMER3_DrivîIRQH™dÀr
()

370 
	`CTIMER_GíîicIRQH™dÀr
(3);

373 #i‡
deföed
 
__CORTEX_M
 && (__CORTEX_M == 4U)

374 
	`__DSB
();

376 
	}
}

379 #i‡
deföed
(
CTIMER4
)

380 
	$CTIMER4_DrivîIRQH™dÀr
()

382 
	`CTIMER_GíîicIRQH™dÀr
(4);

385 #i‡
deföed
 
__CORTEX_M
 && (__CORTEX_M == 4U)

386 
	`__DSB
();

388 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_ctimer.h

34 #i‚de‡
_FSL_CTIMER_H_


35 
	#_FSL_CTIMER_H_


	)

37 
	~"f¶_comm⁄.h
"

52 
	#FSL_CTIMER_DRIVER_VERSION
 (
	`MAKE_VERSION
(2, 0, 0)Ë

	)

56 
	e_˘imî_ˇ±uª_ch™√l


58 
	mkCTIMER_C≠tuª_0
 = 0U,

59 
	mkCTIMER_C≠tuª_1
,

60 
	mkCTIMER_C≠tuª_2
,

61 #i‡
deföed
(
FSL_FEATURE_CTIMER_HAS_CCR_CAP3
) && FSL_FEATURE_CTIMER_HAS_CCR_CAP3

62 
	mkCTIMER_C≠tuª_3


64 } 
	t˘imî_ˇ±uª_ch™√l_t
;

67 
	e_˘imî_ˇ±uª_edge


69 
	mkCTIMER_C≠tuª_Ri£Edge
 = 1U,

70 
	mkCTIMER_C≠tuª_FÆlEdge
 = 2U,

71 
	mkCTIMER_C≠tuª_BŸhEdge
 = 3U,

72 } 
	t˘imî_ˇ±uª_edge_t
;

75 
	e_˘imî_m©ch


77 
	mkCTIMER_M©ch_0
 = 0U,

78 
	mkCTIMER_M©ch_1
,

79 
	mkCTIMER_M©ch_2
,

80 
	mkCTIMER_M©ch_3


81 } 
	t˘imî_m©ch_t
;

84 
	e_˘imî_m©ch_ouçut_c⁄åﬁ


86 
	mkCTIMER_Ouçut_NoA˘i⁄
 = 0U,

87 
	mkCTIMER_Ouçut_CÀ¨
,

88 
	mkCTIMER_Ouçut_Së
,

89 
	mkCTIMER_Ouçut_ToggÀ


90 } 
	t˘imî_m©ch_ouçut_c⁄åﬁ_t
;

93 
	e_˘imî_timî_mode


95 
	mkCTIMER_TimîMode
 = 0U,

96 
	mkCTIMER_In¸ó£OnRi£Edge
,

97 
	mkCTIMER_In¸ó£OnFÆlEdge
,

98 
	mkCTIMER_In¸ó£OnBŸhEdge


99 } 
	t˘imî_timî_mode_t
;

102 
	e_˘imî_öãºu±_íabÀ


104 
	mkCTIMER_M©ch0I¡îru±E«bÀ
 = 
CTIMER_MCR_MR0I_MASK
,

105 
	mkCTIMER_M©ch1I¡îru±E«bÀ
 = 
CTIMER_MCR_MR1I_MASK
,

106 
	mkCTIMER_M©ch2I¡îru±E«bÀ
 = 
CTIMER_MCR_MR2I_MASK
,

107 
	mkCTIMER_M©ch3I¡îru±E«bÀ
 = 
CTIMER_MCR_MR3I_MASK
,

108 
	mkCTIMER_C≠tuª0I¡îru±E«bÀ
 = 
CTIMER_CCR_CAP0I_MASK
,

109 
	mkCTIMER_C≠tuª1I¡îru±E«bÀ
 = 
CTIMER_CCR_CAP1I_MASK
,

110 
	mkCTIMER_C≠tuª2I¡îru±E«bÀ
 = 
CTIMER_CCR_CAP2I_MASK
,

111 #i‡
deföed
(
FSL_FEATURE_CTIMER_HAS_CCR_CAP3
) && FSL_FEATURE_CTIMER_HAS_CCR_CAP3

112 
	mkCTIMER_C≠tuª3I¡îru±E«bÀ
 = 
CTIMER_CCR_CAP3I_MASK
,

114 } 
	t˘imî_öãºu±_íabÀ_t
;

117 
	e_˘imî_°©us_Êags


119 
	mkCTIMER_M©ch0Fœg
 = 
CTIMER_IR_MR0INT_MASK
,

120 
	mkCTIMER_M©ch1Fœg
 = 
CTIMER_IR_MR1INT_MASK
,

121 
	mkCTIMER_M©ch2Fœg
 = 
CTIMER_IR_MR2INT_MASK
,

122 
	mkCTIMER_M©ch3Fœg
 = 
CTIMER_IR_MR3INT_MASK
,

123 
	mkCTIMER_C≠tuª0Fœg
 = 
CTIMER_IR_CR0INT_MASK
,

124 
	mkCTIMER_C≠tuª1Fœg
 = 
CTIMER_IR_CR1INT_MASK
,

125 
	mkCTIMER_C≠tuª2Fœg
 = 
CTIMER_IR_CR2INT_MASK
,

126 #i‡
deföed
(
FSL_FEATURE_CTIMER_HAS_IR_CR3INT
) && FSL_FEATURE_CTIMER_HAS_IR_CR3INT

127 
	mkCTIMER_C≠tuª3Fœg
 = 
CTIMER_IR_CR3INT_MASK
,

129 } 
	t˘imî_°©us_Êags_t
;

131 (*
	t˘imî_ˇŒback_t
)(
	tuöt32_t
 
	tÊags
);

139 
kCTIMER_SögÀCÆlback
,

141 
kCTIMER_Mu…ùÀCÆlback


143 } 
	t˘imî_ˇŒback_ty≥_t
;

150 
	s_˘imî_m©ch_c⁄fig


152 
uöt32_t
 
m©chVÆue
;

153 
boﬁ
 
íabÀCou¡îRe£t
;

155 
boﬁ
 
íabÀCou¡îSt›
;

157 
˘imî_m©ch_ouçut_c⁄åﬁ_t
 
outC⁄åﬁ
;

158 
boﬁ
 
outPöInôSèã
;

159 
boﬁ
 
íabÀI¡îru±
;

162 } 
	t˘imî_m©ch_c⁄fig_t
;

173 
	s_˘imî_c⁄fig


175 
˘imî_timî_mode_t
 
mode
;

176 
˘imî_ˇ±uª_ch™√l_t
 
öput
;

178 
uöt32_t
 
¥esˇÀ
;

179 } 
	t˘imî_c⁄fig_t
;

185 #i‡
	`deföed
(
__˝lu•lus
)

202 
	`CTIMER_Inô
(
CTIMER_Ty≥
 *
ba£
, c⁄° 
˘imî_c⁄fig_t
 *
c⁄fig
);

209 
	`CTIMER_Deöô
(
CTIMER_Ty≥
 *
ba£
);

222 
	`CTIMER_GëDeÁu…C⁄fig
(
˘imî_c⁄fig_t
 *
c⁄fig
);

252 
°©us_t
 
	`CTIMER_SëupPwm
(
CTIMER_Ty≥
 *
ba£
,

253 
˘imî_m©ch_t
 
m©chCh™√l
,

254 
uöt8_t
 
dutyCy˛ePî˚¡
,

255 
uöt32_t
 
pwmFªq_Hz
,

256 
uöt32_t
 
§cClock_Hz
,

257 
boﬁ
 
íabÀI¡
);

266 
	`CTIMER_Upd©ePwmDutycy˛e
(
CTIMER_Ty≥
 *
ba£
, 
˘imî_m©ch_t
 
m©chCh™√l
, 
uöt8_t
 
dutyCy˛ePî˚¡
);

279 
	`CTIMER_SëupM©ch
(
CTIMER_Ty≥
 *
ba£
, 
˘imî_m©ch_t
 
m©chCh™√l
, c⁄° 
˘imî_m©ch_c⁄fig_t
 *
c⁄fig
);

290 
	`CTIMER_SëupC≠tuª
(
CTIMER_Ty≥
 *
ba£
,

291 
˘imî_ˇ±uª_ch™√l_t
 
ˇ±uª
,

292 
˘imî_ˇ±uª_edge_t
 
edge
,

293 
boﬁ
 
íabÀI¡
);

302 
	`CTIMER_Regi°îCÆlBack
(
CTIMER_Ty≥
 *
ba£
, 
˘imî_ˇŒback_t
 *
cb_func
, 
˘imî_ˇŒback_ty≥_t
 
cb_ty≥
);

316 
ölöe
 
	`CTIMER_E«bÀI¡îru±s
(
CTIMER_Ty≥
 *
ba£
, 
uöt32_t
 
mask
)

319 
ba£
->
MCR
 |
mask
 & (
CTIMER_MCR_MR0I_MASK
 | 
CTIMER_MCR_MR1I_MASK
 | 
CTIMER_MCR_MR2I_MASK
 | 
CTIMER_MCR_MR3I_MASK
);

322 
ba£
->
CCR
 |
mask
 & (
CTIMER_CCR_CAP0I_MASK
 | 
CTIMER_CCR_CAP1I_MASK
 | 
CTIMER_CCR_CAP2I_MASK


323 #i‡
	`deföed
(
FSL_FEATURE_CTIMER_HAS_CCR_CAP3
) && FSL_FEATURE_CTIMER_HAS_CCR_CAP3

324 | 
CTIMER_CCR_CAP3I_MASK


336 
ölöe
 
	`CTIMER_DißbÀI¡îru±s
(
CTIMER_Ty≥
 *
ba£
, 
uöt32_t
 
mask
)

339 
ba£
->
MCR
 &~(
mask
 & (
CTIMER_MCR_MR0I_MASK
 | 
CTIMER_MCR_MR1I_MASK
 | 
CTIMER_MCR_MR2I_MASK
 | 
CTIMER_MCR_MR3I_MASK
));

342 
ba£
->
CCR
 &~(
mask
 & (
CTIMER_CCR_CAP0I_MASK
 | 
CTIMER_CCR_CAP1I_MASK
 | 
CTIMER_CCR_CAP2I_MASK


343 #i‡
	`deföed
(
FSL_FEATURE_CTIMER_HAS_CCR_CAP3
) && FSL_FEATURE_CTIMER_HAS_CCR_CAP3

344 | 
CTIMER_CCR_CAP3I_MASK


357 
ölöe
 
uöt32_t
 
	`CTIMER_GëE«bÀdI¡îru±s
(
CTIMER_Ty≥
 *
ba£
)

359 
uöt32_t
 
íabÀdI¡rs
 = 0;

362 
íabÀdI¡rs
 =

363 
ba£
->
MCR
 & (
CTIMER_MCR_MR0I_MASK
 | 
CTIMER_MCR_MR1I_MASK
 | 
CTIMER_MCR_MR2I_MASK
 | 
CTIMER_MCR_MR3I_MASK
);

366 
íabÀdI¡rs
 |
ba£
->
CCR
 & (
CTIMER_CCR_CAP0I_MASK
 | 
CTIMER_CCR_CAP1I_MASK
 | 
CTIMER_CCR_CAP2I_MASK


367 #i‡
	`deföed
(
FSL_FEATURE_CTIMER_HAS_CCR_CAP3
) && FSL_FEATURE_CTIMER_HAS_CCR_CAP3

368 | 
CTIMER_CCR_CAP3I_MASK


372  
íabÀdI¡rs
;

390 
ölöe
 
uöt32_t
 
	`CTIMER_GëSètusFœgs
(
CTIMER_Ty≥
 *
ba£
)

392  
ba£
->
IR
;

402 
ölöe
 
	`CTIMER_CÀ¨SètusFœgs
(
CTIMER_Ty≥
 *
ba£
, 
uöt32_t
 
mask
)

404 
ba£
->
IR
 = 
mask
;

419 
ölöe
 
	`CTIMER_SèπTimî
(
CTIMER_Ty≥
 *
ba£
)

421 
ba£
->
TCR
 |
CTIMER_TCR_CEN_MASK
;

429 
ölöe
 
	`CTIMER_St›Timî
(
CTIMER_Ty≥
 *
ba£
)

431 
ba£
->
TCR
 &~
CTIMER_TCR_CEN_MASK
;

443 
ölöe
 
	`CTIMER_Re£t
(
CTIMER_Ty≥
 *
ba£
)

445 
ba£
->
TCR
 |
CTIMER_TCR_CRST_MASK
;

446 
ba£
->
TCR
 &~
CTIMER_TCR_CRST_MASK
;

449 #i‡
	`deföed
(
__˝lu•lus
)

450 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_dma.c

35 
	~"f¶_dma.h
"

50 
öt32_t
 
DMA_GëIn°™˚
(
DMA_Ty≥
 *
ba£
);

57 
DMA_Ty≥
 *c⁄° 
	gs_dmaBa£s
[] = 
DMA_BASE_PTRS
;

60 c⁄° 
IRQn_Ty≥
 
	gs_dmaIRQNumbî
[] = 
DMA_IRQS
;

63 
dma_h™dÀ_t
 *
	gs_DMAH™dÀ
[
FSL_FEATURE_DMA_NUMBER_OF_CHANNELS
];

66 #i‡
deföed
(
__ICCARM__
)

67 #¥agm®
d©a_Æignmít
 = 512

68 
dma_des¸ùt‹_t
 
	gs_dma_des¸ùt‹_èbÀ
[
FSL_FEATURE_DMA_NUMBER_OF_CHANNELS
] = {0};

69 #ñi‡
deföed
(
__CC_ARM
)

70 
__©åibuã__
((
	$Æig√d
(512))Ë
dma_des¸ùt‹_t
 
s_dma_des¸ùt‹_èbÀ
[
FSL_FEATURE_DMA_NUMBER_OF_CHANNELS
] = {0
	}
};

71 #ñi‡
deföed
(
__GNUC__
)

72 
__©åibuã__
((
	$Æig√d
(512))Ë
dma_des¸ùt‹_t
 
s_dma_des¸ùt‹_èbÀ
[
FSL_FEATURE_DMA_NUMBER_OF_CHANNELS
] = {0
	}
};

79 
öt32_t
 
	$DMA_GëIn°™˚
(
DMA_Ty≥
 *
ba£
)

81 
öt32_t
 
ö°™˚
;

83 
ö°™˚
 = 0; in°™˚ < 
	`ARRAY_SIZE
(
s_dmaBa£s
); instance++)

85 i‡(
s_dmaBa£s
[
ö°™˚
] =
ba£
)

90 
	`as£π
(
ö°™˚
 < 
	`ARRAY_SIZE
(
s_dmaBa£s
));

91  
ö°™˚
 < 
	`ARRAY_SIZE
(
s_dmaBa£s
) ? instance : -1;

92 
	}
}

94 
	$DMA_Inô
(
DMA_Ty≥
 *
ba£
)

96 #i‡!(
	`deföed
(
FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL
) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

98 
	`CLOCK_E«bÀClock
(
kCLOCK_Dma
);

101 
ba£
->
SRAMBASE
 = (
uöt32_t
)
s_dma_des¸ùt‹_èbÀ
;

103 
ba£
->
CTRL
 |
DMA_CTRL_ENABLE_MASK
;

104 
	}
}

106 
	$DMA_Deöô
(
DMA_Ty≥
 *
ba£
)

108 #i‡!(
	`deföed
(
FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL
) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

110 
ba£
->
CTRL
 &~(
DMA_CTRL_ENABLE_MASK
);

112 
	}
}

114 
	$DMA_C⁄figuªCh™√lTriggî
(
DMA_Ty≥
 *
ba£
, 
uöt32_t
 
ch™√l
, 
dma_ch™√l_åiggî_t
 *
åiggî
)

116 
	`as£π
((
ch™√l
 < 
FSL_FEATURE_DMA_NUMBER_OF_CHANNELS
Ë&& (
NULL
 !
åiggî
));

118 
uöt32_t
 
tmp
 = (
DMA_CHANNEL_CFG_HWTRIGEN_MASK
 | 
DMA_CHANNEL_CFG_TRIGPOL_MASK
 | 
DMA_CHANNEL_CFG_TRIGTYPE_MASK
 |

119 
DMA_CHANNEL_CFG_TRIGBURST_MASK
 | 
DMA_CHANNEL_CFG_BURSTPOWER_MASK
 |

120 
DMA_CHANNEL_CFG_SRCBURSTWRAP_MASK
 | 
DMA_CHANNEL_CFG_DSTBURSTWRAP_MASK
);

121 
tmp
 = 
ba£
->
CHANNEL
[
ch™√l
].
CFG
 & (~tmp);

122 
tmp
 |(
uöt32_t
)(
åiggî
->
ty≥
Ë| (uöt32_t)—riggî->
bur°
Ë| (uöt32_t)—riggî->
wøp
);

123 
ba£
->
CHANNEL
[
ch™√l
].
CFG
 = 
tmp
;

124 
	}
}

133 
uöt32_t
 
	$DMA_GëRemaöögByãs
(
DMA_Ty≥
 *
ba£
, 
uöt32_t
 
ch™√l
)

135 
	`as£π
(
ch™√l
 < 
FSL_FEATURE_DMA_NUMBER_OF_CHANNELS
);

145 i‡((!(
ba£
->
COMMON
[
	`DMA_CHANNEL_GROUP
(
ch™√l
)].
ACTIVE
 & (1U << (
	`DMA_CHANNEL_INDEX
(channel))))) &&

146 (0x3FF =((
ba£
->
CHANNEL
[
ch™√l
].
XFERCFG
 & 
DMA_CHANNEL_XFERCFG_XFERCOUNT_MASK
) >>

147 
DMA_CHANNEL_XFERCFG_XFERCOUNT_SHIFT
)))

152  
ba£
->
CHANNEL
[
ch™√l
].
XFERCFG
 + 1;

153 
	}
}

155 
	$DMA_SëupDes¸ùt‹
(

156 
dma_des¸ùt‹_t
 *
desc
, 
uöt32_t
 
x„rcfg
, *
§cEndAddr
, *
d°EndAddr
, *
√xtDesc
)

158 
desc
->
x„rcfg
 = xfercfg;

159 
desc
->
§cEndAddr
 = srcEndAddr;

160 
desc
->
d°EndAddr
 = dstEndAddr;

161 
desc
->
lökToNextDesc
 = 
√xtDesc
;

162 
	}
}

165 
	$DMA_SëupX„rCFG
(
dma_x„rcfg_t
 *
x„rcfg
, 
uöt32_t
 *
x„rcfg_addr
)

167 
	`as£π
(
x„rcfg
 !
NULL
);

169 
	`as£π
((
x„rcfg
->
§cInc
 == 0) || (xfercfg->srcInc == 1) || (xfercfg->srcInc == 2) || (xfercfg->srcInc == 4));

171 
	`as£π
((
x„rcfg
->
d°Inc
 == 0) || (xfercfg->dstInc == 1) || (xfercfg->dstInc == 2) || (xfercfg->dstInc == 4));

173 
	`as£π
((
x„rcfg
->
byãWidth
 == 1) || (xfercfg->byteWidth == 2) || (xfercfg->byteWidth == 4));

175 
	`as£π
(
x„rcfg
->
å™s„rCou¡
 <
DMA_MAX_TRANSFER_COUNT
);

177 
uöt32_t
 
x„r
 = 0, 
tmp
;

179 
x„r
 |
	`DMA_CHANNEL_XFERCFG_CFGVALID
(
x„rcfg
->
vÆid
 ? 1 : 0);

181 
x„r
 |
	`DMA_CHANNEL_XFERCFG_RELOAD
(
x„rcfg
->
ªlﬂd
 ? 1 : 0);

183 
x„r
 |
	`DMA_CHANNEL_XFERCFG_SWTRIG
(
x„rcfg
->
swåig
 ? 1 : 0);

185 
x„r
 |
	`DMA_CHANNEL_XFERCFG_CLRTRIG
(
x„rcfg
->
˛πrig
 ? 1 : 0);

187 
x„r
 |
	`DMA_CHANNEL_XFERCFG_SETINTA
(
x„rcfg
->
ötA
 ? 1 : 0);

189 
x„r
 |
	`DMA_CHANNEL_XFERCFG_SETINTB
(
x„rcfg
->
ötB
 ? 1 : 0);

191 
tmp
 = 
x„rcfg
->
byãWidth
 == 4 ? 2 : xfercfg->byteWidth - 1;

192 
x„r
 |
	`DMA_CHANNEL_XFERCFG_WIDTH
(
tmp
);

194 
tmp
 = 
x„rcfg
->
§cInc
 == 4 ? 3 : xfercfg->srcInc;

195 
x„r
 |
	`DMA_CHANNEL_XFERCFG_SRCINC
(
tmp
);

197 
tmp
 = 
x„rcfg
->
d°Inc
 == 4 ? 3 : xfercfg->dstInc;

198 
x„r
 |
	`DMA_CHANNEL_XFERCFG_DSTINC
(
tmp
);

200 
x„r
 |
	`DMA_CHANNEL_XFERCFG_XFERCOUNT
(
x„rcfg
->
å™s„rCou¡
 - 1);

203 *
x„rcfg_addr
 = 
x„r
;

204 
	}
}

206 
	$DMA_Cª©eDes¸ùt‹
(
dma_des¸ùt‹_t
 *
desc
, 
dma_x„rcfg_t
 *
x„rcfg
, *
§cAddr
, *
d°Addr
, *
√xtDesc
)

208 
uöt32_t
 
x„rcfg_ªg
 = 0;

210 
	`as£π
((
NULL
 !
desc
Ë&& (0 =(
uöt32_t
)des¯% 16Ë&& (NULL !
x„rcfg
));

211 
	`as£π
((
NULL
 !
§cAddr
Ë&& (0 =(
uöt32_t
)§cAdd∏% 
x„rcfg
->
byãWidth
));

212 
	`as£π
((
NULL
 !
d°Addr
Ë&& (0 =(
uöt32_t
)d°Add∏% 
x„rcfg
->
byãWidth
));

213 
	`as£π
((
NULL
 =
√xtDesc
Ë|| (0 =(
uöt32_t
)nextDesc % 16));

216 
	`DMA_SëupX„rCFG
(
x„rcfg
, &
x„rcfg_ªg
);

219 
	`DMA_SëupDes¸ùt‹
(

220 
desc
, 
x„rcfg_ªg
, (
uöt8_t
 *)
§cAddr
 + (
x„rcfg
->
§cInc
 * x„rcfg->
byãWidth
 * (x„rcfg->
å™s„rCou¡
 - 1)),

221 (
uöt8_t
 *)
d°Addr
 + (
x„rcfg
->
d°Inc
 * x„rcfg->
byãWidth
 * (x„rcfg->
å™s„rCou¡
 - 1)), 
√xtDesc
);

222 
	}
}

224 
	$DMA_Ab‹tTøns„r
(
dma_h™dÀ_t
 *
h™dÀ
)

226 
	`as£π
(
NULL
 !
h™dÀ
);

228 
	`DMA_DißbÀCh™√l
(
h™dÀ
->
ba£
, h™dÀ->
ch™√l
);

229 
h™dÀ
->
ba£
->
COMMON
[
	`DMA_CHANNEL_GROUP
(h™dÀ->
ch™√l
)].
BUSY
 & (1U << 
	`DMA_CHANNEL_INDEX
(handle->channel)))

232 
h™dÀ
->
ba£
->
COMMON
[
	`DMA_CHANNEL_GROUP
(h™dÀ->
ch™√l
)].
ABORT
 |1U << 
	`DMA_CHANNEL_INDEX
(handle->channel);

233 
	`DMA_E«bÀCh™√l
(
h™dÀ
->
ba£
, h™dÀ->
ch™√l
);

234 
	}
}

236 
	$DMA_Cª©eH™dÀ
(
dma_h™dÀ_t
 *
h™dÀ
, 
DMA_Ty≥
 *
ba£
, 
uöt32_t
 
ch™√l
)

238 
öt32_t
 
dmaIn°™˚
;

239 
	`as£π
((
NULL
 !
h™dÀ
Ë&& (
ch™√l
 < 
FSL_FEATURE_DMA_NUMBER_OF_CHANNELS
));

242 
dmaIn°™˚
 = 
	`DMA_GëIn°™˚
(
ba£
);

244 
	`mem£t
(
h™dÀ
, 0, (*handle));

245 
h™dÀ
->
ba£
 = base;

246 
h™dÀ
->
ch™√l
 = channel;

247 
s_DMAH™dÀ
[
ch™√l
] = 
h™dÀ
;

249 
	`E«bÀIRQ
(
s_dmaIRQNumbî
[
dmaIn°™˚
]);

250 
	}
}

252 
	$DMA_SëCÆlback
(
dma_h™dÀ_t
 *
h™dÀ
, 
dma_ˇŒback
 
ˇŒback
, *
u£rD©a
)

254 
	`as£π
(
h™dÀ
 !
NULL
);

256 
h™dÀ
->
ˇŒback
 = callback;

257 
h™dÀ
->
u£rD©a
 = userData;

258 
	}
}

260 
	$DMA_Pª∑ªTøns„r
(
dma_å™s„r_c⁄fig_t
 *
c⁄fig
,

261 *
§cAddr
,

262 *
d°Addr
,

263 
uöt32_t
 
byãWidth
,

264 
uöt32_t
 
å™s„rByãs
,

265 
dma_å™s„r_ty≥_t
 
ty≥
,

266 *
√xtDesc
)

268 
uöt32_t
 
x„r_cou¡
;

269 
	`as£π
((
NULL
 !
c⁄fig
Ë&& (NULL !
§cAddr
Ë&& (NULL !
d°Addr
));

270 
	`as£π
((
byãWidth
 == 1) || (byteWidth == 2) || (byteWidth == 4));

273 
x„r_cou¡
 = 
å™s„rByãs
 / 
byãWidth
;

274 
	`as£π
((
x„r_cou¡
 <
DMA_MAX_TRANSFER_COUNT
Ë&& (0 =
å™s„rByãs
 % 
byãWidth
));

276 
	`mem£t
(
c⁄fig
, 0, (*config));

277 
ty≥
)

279 
kDMA_Mem‹yToMem‹y
:

280 
c⁄fig
->
x„rcfg
.
§cInc
 = 1;

281 
c⁄fig
->
x„rcfg
.
d°Inc
 = 1;

282 
c⁄fig
->
isPîùh
 = 
Ál£
;

284 
kDMA_PîùhîÆToMem‹y
:

286 
c⁄fig
->
x„rcfg
.
§cInc
 = 0;

287 
c⁄fig
->
x„rcfg
.
d°Inc
 = 1;

288 
c⁄fig
->
isPîùh
 = 
åue
;

290 
kDMA_Mem‹yToPîùhîÆ
:

292 
c⁄fig
->
x„rcfg
.
§cInc
 = 1;

293 
c⁄fig
->
x„rcfg
.
d°Inc
 = 0;

294 
c⁄fig
->
isPîùh
 = 
åue
;

296 
kDMA_SèticToSètic
:

297 
c⁄fig
->
x„rcfg
.
§cInc
 = 0;

298 
c⁄fig
->
x„rcfg
.
d°Inc
 = 0;

299 
c⁄fig
->
isPîùh
 = 
åue
;

305 
c⁄fig
->
d°Addr
 = (
uöt8_t
 *)dstAddr;

306 
c⁄fig
->
§cAddr
 = (
uöt8_t
 *)srcAddr;

307 
c⁄fig
->
√xtDesc
 = (
uöt8_t
 *)nextDesc;

308 
c⁄fig
->
x„rcfg
.
å™s„rCou¡
 = 
x„r_cou¡
;

309 
c⁄fig
->
x„rcfg
.
byãWidth
 = byteWidth;

310 
c⁄fig
->
x„rcfg
.
ötA
 = 
åue
;

311 
c⁄fig
->
x„rcfg
.
ªlﬂd
 = 
√xtDesc
 !
NULL
;

312 
c⁄fig
->
x„rcfg
.
vÆid
 = 
åue
;

313 
	}
}

315 
°©us_t
 
	$DMA_SubmôTøns„r
(
dma_h™dÀ_t
 *
h™dÀ
, 
dma_å™s„r_c⁄fig_t
 *
c⁄fig
)

317 
	`as£π
((
NULL
 !
h™dÀ
Ë&& (NULL !
c⁄fig
));

320 i‡(
	`DMA_Ch™√lIsA˘ive
(
h™dÀ
->
ba£
, h™dÀ->
ch™√l
))

322  
kSètus_DMA_Busy
;

326 i‡(
c⁄fig
->
isPîùh
)

328 
	`DMA_E«bÀCh™√lPîùhRq
(
h™dÀ
->
ba£
, h™dÀ->
ch™√l
);

332 
	`DMA_DißbÀCh™√lPîùhRq
(
h™dÀ
->
ba£
, h™dÀ->
ch™√l
);

335 
	`DMA_Cª©eDes¸ùt‹
(&
s_dma_des¸ùt‹_èbÀ
[
h™dÀ
->
ch™√l
], &
c⁄fig
->
x„rcfg
, c⁄fig->
§cAddr
, c⁄fig->
d°Addr
,

336 
c⁄fig
->
√xtDesc
);

338  
kSètus_Suc˚ss
;

339 
	}
}

341 
	$DMA_SèπTøns„r
(
dma_h™dÀ_t
 *
h™dÀ
)

343 
	`as£π
(
NULL
 !
h™dÀ
);

346 
h™dÀ
->
ba£
->
COMMON
[
	`DMA_CHANNEL_GROUP
(h™dÀ->
ch™√l
)].
INTENSET
 |1U << 
	`DMA_CHANNEL_INDEX
(handle->channel);

349 i‡(
h™dÀ
->
ba£
->
CHANNEL
[h™dÀ->
ch™√l
].
CFG
 & 
DMA_CHANNEL_CFG_HWTRIGEN_MASK
)

351 
s_dma_des¸ùt‹_èbÀ
[
h™dÀ
->
ch™√l
].
x„rcfg
 &~(
DMA_CHANNEL_XFERCFG_SWTRIG_MASK
);

356 
s_dma_des¸ùt‹_èbÀ
[
h™dÀ
->
ch™√l
].
x„rcfg
 |
DMA_CHANNEL_XFERCFG_SWTRIG_MASK
;

360 
h™dÀ
->
ba£
->
CHANNEL
[h™dÀ->
ch™√l
].
XFERCFG
 = 
s_dma_des¸ùt‹_èbÀ
[h™dÀ->ch™√l].
x„rcfg
;

364 
	}
}

366 
	$DMA0_DrivîIRQH™dÀr
()

368 
dma_h™dÀ_t
 *
h™dÀ
;

369 
öt32_t
 
ch™√l_group
;

370 
öt32_t
 
ch™√l_ödex
;

373 
i
 = 0; i < 
FSL_FEATURE_DMA_NUMBER_OF_CHANNELS
; i++)

375 
h™dÀ
 = 
s_DMAH™dÀ
[
i
];

377 i‡(
NULL
 =
h™dÀ
)

381 
ch™√l_group
 = 
	`DMA_CHANNEL_GROUP
(
h™dÀ
->
ch™√l
);

382 
ch™√l_ödex
 = 
	`DMA_CHANNEL_INDEX
(
h™dÀ
->
ch™√l
);

384 i‡(
h™dÀ
->
ba£
->
COMMON
[
ch™√l_group
].
INTA
 & (1U << 
ch™√l_ödex
))

387 
h™dÀ
->
ba£
->
COMMON
[
ch™√l_group
].
INTA
 = 1U << 
ch™√l_ödex
;

388 i‡(
h™dÀ
->
ˇŒback
)

390 (
h™dÀ
->
ˇŒback
)(h™dÀ, h™dÀ->
u£rD©a
, 
åue
, 
kDMA_I¡A
);

394 i‡(
h™dÀ
->
ba£
->
COMMON
[
ch™√l_group
].
INTB
 & (1U << 
ch™√l_ödex
))

397 
h™dÀ
->
ba£
->
COMMON
[
ch™√l_group
].
INTB
 = 1U << 
ch™√l_ödex
;

398 i‡(
h™dÀ
->
ˇŒback
)

400 (
h™dÀ
->
ˇŒback
)(h™dÀ, h™dÀ->
u£rD©a
, 
åue
, 
kDMA_I¡B
);

404 i‡(
h™dÀ
->
ba£
->
COMMON
[
ch™√l_group
].
ERRINT
 & (1U << 
ch™√l_ödex
))

407 
h™dÀ
->
ba£
->
COMMON
[
ch™√l_group
].
ERRINT
 = 1U << 
ch™√l_ödex
;

408 i‡(
h™dÀ
->
ˇŒback
)

410 (
h™dÀ
->
ˇŒback
)(h™dÀ, h™dÀ->
u£rD©a
, 
Ál£
, 
kDMA_I¡Eº‹
);

416 #i‡
deföed
 
__CORTEX_M
 && (__CORTEX_M == 4U)

417 
	`__DSB
();

419 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_dma.h

35 #i‚de‡
_FSL_DMA_H_


36 
	#_FSL_DMA_H_


	)

38 
	~"f¶_comm⁄.h
"

53 
	#FSL_DMA_DRIVER_VERSION
 (
	`MAKE_VERSION
(2, 0, 0)Ë

	)

56 
	#DMA_MAX_TRANSFER_COUNT
 0x400

	)

59 
	#DMA_CHANNEL_GROUP
(
ch™√l
Ë(((
uöt8_t
)ch™√lË>> 5U)

	)

61 
	#DMA_CHANNEL_INDEX
(
ch™√l
Ë(((
uöt8_t
)ch™√lË& 0x1F)

	)

64 
	s_dma_des¸ùt‹


66 
uöt32_t
 
	mx„rcfg
;

67 *
	m§cEndAddr
;

68 *
	md°EndAddr
;

69 *
	mlökToNextDesc
;

70 } 
	tdma_des¸ùt‹_t
;

73 
	s_dma_x„rcfg


75 
boﬁ
 
	mvÆid
;

76 
boﬁ
 
	mªlﬂd
;

78 
boﬁ
 
	mswåig
;

80 
boﬁ
 
	m˛πrig
;

81 
boﬁ
 
	mötA
;

82 
boﬁ
 
	mötB
;

83 
uöt8_t
 
	mbyãWidth
;

84 
uöt8_t
 
	m§cInc
;

85 
uöt8_t
 
	md°Inc
;

86 
uöt16_t
 
	må™s„rCou¡
;

87 } 
	tdma_x„rcfg_t
;

90 
	e_dma_¥i‹ôy


92 
	mkDMA_Ch™√lPri‹ôy0
 = 0,

93 
	mkDMA_Ch™√lPri‹ôy1
,

94 
	mkDMA_Ch™√lPri‹ôy2
,

95 
	mkDMA_Ch™√lPri‹ôy3
,

96 
	mkDMA_Ch™√lPri‹ôy4
,

97 
	mkDMA_Ch™√lPri‹ôy5
,

98 
	mkDMA_Ch™√lPri‹ôy6
,

99 
	mkDMA_Ch™√lPri‹ôy7
,

100 } 
	tdma_¥i‹ôy_t
;

103 
	e_dma_öt


105 
	mkDMA_I¡A
,

106 
	mkDMA_I¡B
,

107 
	mkDMA_I¡Eº‹
,

108 } 
	tdma_úq_t
;

111 
	e_dma_åiggî_ty≥


113 
	mkDMA_NoTriggî
 = 0,

114 
	mkDMA_LowLevñTriggî
 = 
DMA_CHANNEL_CFG_HWTRIGEN
(1Ë| 
DMA_CHANNEL_CFG_TRIGTYPE
(1),

115 
	mkDMA_HighLevñTriggî
 = 
DMA_CHANNEL_CFG_HWTRIGEN
(1Ë| 
DMA_CHANNEL_CFG_TRIGTYPE
(1) |

116 
DMA_CHANNEL_CFG_TRIGPOL
(1),

117 
	mkDMA_FÆlögEdgeTriggî
 = 
DMA_CHANNEL_CFG_HWTRIGEN
(1),

118 
	mkDMA_RisögEdgeTriggî
 =

119 
DMA_CHANNEL_CFG_HWTRIGEN
(1Ë| 
DMA_CHANNEL_CFG_TRIGPOL
(1),

120 } 
	tdma_åiggî_ty≥_t
;

123 
	e_dma_åiggî_bur°


125 
	mkDMA_SögÀTøns„r
 = 0,

126 
	mkDMA_LevñBur°Tøns„r
 = 
DMA_CHANNEL_CFG_TRIGBURST
(1),

127 
	mkDMA_EdgeBur°Tøns„r1
 = 
DMA_CHANNEL_CFG_TRIGBURST
(1),

128 
	mkDMA_EdgeBur°Tøns„r2
 =

129 
DMA_CHANNEL_CFG_TRIGBURST
(1Ë| 
DMA_CHANNEL_CFG_BURSTPOWER
(1),

130 
	mkDMA_EdgeBur°Tøns„r4
 =

131 
DMA_CHANNEL_CFG_TRIGBURST
(1Ë| 
DMA_CHANNEL_CFG_BURSTPOWER
(2),

132 
	mkDMA_EdgeBur°Tøns„r8
 =

133 
DMA_CHANNEL_CFG_TRIGBURST
(1Ë| 
DMA_CHANNEL_CFG_BURSTPOWER
(3),

134 
	mkDMA_EdgeBur°Tøns„r16
 =

135 
DMA_CHANNEL_CFG_TRIGBURST
(1Ë| 
DMA_CHANNEL_CFG_BURSTPOWER
(4),

136 
	mkDMA_EdgeBur°Tøns„r32
 =

137 
DMA_CHANNEL_CFG_TRIGBURST
(1Ë| 
DMA_CHANNEL_CFG_BURSTPOWER
(5),

138 
	mkDMA_EdgeBur°Tøns„r64
 =

139 
DMA_CHANNEL_CFG_TRIGBURST
(1Ë| 
DMA_CHANNEL_CFG_BURSTPOWER
(6),

140 
	mkDMA_EdgeBur°Tøns„r128
 =

141 
DMA_CHANNEL_CFG_TRIGBURST
(1Ë| 
DMA_CHANNEL_CFG_BURSTPOWER
(7),

142 
	mkDMA_EdgeBur°Tøns„r256
 =

143 
DMA_CHANNEL_CFG_TRIGBURST
(1Ë| 
DMA_CHANNEL_CFG_BURSTPOWER
(8),

144 
	mkDMA_EdgeBur°Tøns„r512
 =

145 
DMA_CHANNEL_CFG_TRIGBURST
(1Ë| 
DMA_CHANNEL_CFG_BURSTPOWER
(9),

146 
	mkDMA_EdgeBur°Tøns„r1024
 =

147 
DMA_CHANNEL_CFG_TRIGBURST
(1Ë| 
DMA_CHANNEL_CFG_BURSTPOWER
(10),

148 } 
	tdma_åiggî_bur°_t
;

151 
	e_dma_bur°_wøp


153 
	mkDMA_NoWøp
 = 0,

154 
	mkDMA_SrcWøp
 = 
DMA_CHANNEL_CFG_SRCBURSTWRAP
(1),

155 
	mkDMA_D°Wøp
 = 
DMA_CHANNEL_CFG_DSTBURSTWRAP
(1),

156 
	mkDMA_SrcAndD°Wøp
 = 
DMA_CHANNEL_CFG_SRCBURSTWRAP
(1) |

157 
DMA_CHANNEL_CFG_DSTBURSTWRAP
(1),

158 } 
	tdma_bur°_wøp_t
;

161 
	e_dma_å™s„r_ty≥


163 
	mkDMA_Mem‹yToMem‹y
 = 0x0U,

164 
	mkDMA_PîùhîÆToMem‹y
,

165 
	mkDMA_Mem‹yToPîùhîÆ
,

166 
	mkDMA_SèticToSètic
,

167 } 
	tdma_å™s„r_ty≥_t
;

170 
	s_dma_ch™√l_åiggî


172 
dma_åiggî_ty≥_t
 
	mty≥
;

173 
dma_åiggî_bur°_t
 
	mbur°
;

174 
dma_bur°_wøp_t
 
	mwøp
;

175 } 
	tdma_ch™√l_åiggî_t
;

178 
	e_dma_å™s„r_°©us


180 
	mkSètus_DMA_Busy
 = 
MAKE_STATUS
(
kSètusGroup_DMA
, 0),

185 
	s_dma_å™s„r_c⁄fig


187 
uöt8_t
 *
	m§cAddr
;

188 
uöt8_t
 *
	md°Addr
;

189 
uöt8_t
 *
	m√xtDesc
;

190 
dma_x„rcfg_t
 
	mx„rcfg
;

191 
boﬁ
 
	misPîùh
;

192 } 
	tdma_å™s„r_c⁄fig_t
;

195 
	g_dma_h™dÀ
;

198 (*
	tdma_ˇŒback
)(
	t_dma_h™dÀ
 *
	th™dÀ
, *
	tu£rD©a
, 
	tboﬁ
 
	tå™s„rD⁄e
, 
	tuöt32_t
 
	tötmode
);

201 
	s_dma_h™dÀ


203 
dma_ˇŒback
 
ˇŒback
;

205 *
u£rD©a
;

206 
DMA_Ty≥
 *
ba£
;

207 
uöt8_t
 
ch™√l
;

208 } 
	tdma_h™dÀ_t
;

213 #i‡
	`deföed
(
__˝lu•lus
)

230 
	`DMA_Inô
(
DMA_Ty≥
 *
ba£
);

239 
	`DMA_Deöô
(
DMA_Ty≥
 *
ba£
);

254 
ölöe
 
boﬁ
 
	`DMA_Ch™√lIsA˘ive
(
DMA_Ty≥
 *
ba£
, 
uöt32_t
 
ch™√l
)

256 
	`as£π
(
ch™√l
 < 
FSL_FEATURE_DMA_NUMBER_OF_CHANNELS
);

257  (
ba£
->
COMMON
[
	`DMA_CHANNEL_GROUP
(
ch™√l
)].
ACTIVE
 & (1U << 
	`DMA_CHANNEL_INDEX
(ch™√l))Ë? 
åue
 : 
Ál£
;

266 
ölöe
 
	`DMA_E«bÀCh™√lI¡îru±s
(
DMA_Ty≥
 *
ba£
, 
uöt32_t
 
ch™√l
)

268 
	`as£π
(
ch™√l
 < 
FSL_FEATURE_DMA_NUMBER_OF_CHANNELS
);

269 
ba£
->
COMMON
[
	`DMA_CHANNEL_GROUP
(
ch™√l
)].
INTENSET
 |1U << 
	`DMA_CHANNEL_INDEX
(channel);

278 
ölöe
 
	`DMA_DißbÀCh™√lI¡îru±s
(
DMA_Ty≥
 *
ba£
, 
uöt32_t
 
ch™√l
)

280 
	`as£π
(
ch™√l
 < 
FSL_FEATURE_DMA_NUMBER_OF_CHANNELS
);

281 
ba£
->
COMMON
[
	`DMA_CHANNEL_GROUP
(
ch™√l
)].
INTENCLR
 |1U << 
	`DMA_CHANNEL_INDEX
(channel);

290 
ölöe
 
	`DMA_E«bÀCh™√l
(
DMA_Ty≥
 *
ba£
, 
uöt32_t
 
ch™√l
)

292 
	`as£π
(
ch™√l
 < 
FSL_FEATURE_DMA_NUMBER_OF_CHANNELS
);

293 
ba£
->
COMMON
[
	`DMA_CHANNEL_GROUP
(
ch™√l
)].
ENABLESET
 |1U << 
	`DMA_CHANNEL_INDEX
(channel);

302 
ölöe
 
	`DMA_DißbÀCh™√l
(
DMA_Ty≥
 *
ba£
, 
uöt32_t
 
ch™√l
)

304 
	`as£π
(
ch™√l
 < 
FSL_FEATURE_DMA_NUMBER_OF_CHANNELS
);

305 
ba£
->
COMMON
[
	`DMA_CHANNEL_GROUP
(
ch™√l
)].
ENABLECLR
 |1U << 
	`DMA_CHANNEL_INDEX
(channel);

314 
ölöe
 
	`DMA_E«bÀCh™√lPîùhRq
(
DMA_Ty≥
 *
ba£
, 
uöt32_t
 
ch™√l
)

316 
	`as£π
(
ch™√l
 < 
FSL_FEATURE_DMA_NUMBER_OF_CHANNELS
);

317 
ba£
->
CHANNEL
[
ch™√l
].
CFG
 |
DMA_CHANNEL_CFG_PERIPHREQEN_MASK
;

327 
ölöe
 
	`DMA_DißbÀCh™√lPîùhRq
(
DMA_Ty≥
 *
ba£
, 
uöt32_t
 
ch™√l
)

329 
	`as£π
(
ch™√l
 < 
FSL_FEATURE_DMA_NUMBER_OF_CHANNELS
);

330 
ba£
->
CHANNEL
[
ch™√l
].
CFG
 &~
DMA_CHANNEL_CFG_PERIPHREQEN_MASK
;

340 
	`DMA_C⁄figuªCh™√lTriggî
(
DMA_Ty≥
 *
ba£
, 
uöt32_t
 
ch™√l
, 
dma_ch™√l_åiggî_t
 *
åiggî
);

349 
uöt32_t
 
	`DMA_GëRemaöögByãs
(
DMA_Ty≥
 *
ba£
, uöt32_à
ch™√l
);

358 
ölöe
 
	`DMA_SëCh™√lPri‹ôy
(
DMA_Ty≥
 *
ba£
, 
uöt32_t
 
ch™√l
, 
dma_¥i‹ôy_t
 
¥i‹ôy
)

360 
	`as£π
(
ch™√l
 < 
FSL_FEATURE_DMA_NUMBER_OF_CHANNELS
);

361 
ba£
->
CHANNEL
[
ch™√l
].
CFG
 =

362 (
ba£
->
CHANNEL
[
ch™√l
].
CFG
 & (~(
DMA_CHANNEL_CFG_CHPRIORITY_MASK
))Ë| 
	`DMA_CHANNEL_CFG_CHPRIORITY
(
¥i‹ôy
);

372 
ölöe
 
dma_¥i‹ôy_t
 
	`DMA_GëCh™√lPri‹ôy
(
DMA_Ty≥
 *
ba£
, 
uöt32_t
 
ch™√l
)

374 
	`as£π
(
ch™√l
 < 
FSL_FEATURE_DMA_NUMBER_OF_CHANNELS
);

375  (
dma_¥i‹ôy_t
)((
ba£
->
CHANNEL
[
ch™√l
].
CFG
 & 
DMA_CHANNEL_CFG_CHPRIORITY_MASK
) >>

376 
DMA_CHANNEL_CFG_CHPRIORITY_SHIFT
);

389 
	`DMA_Cª©eDes¸ùt‹
(
dma_des¸ùt‹_t
 *
desc
, 
dma_x„rcfg_t
 *
x„rcfg
, *
§cAddr
, *
d°Addr
, *
√xtDesc
);

405 
	`DMA_Ab‹tTøns„r
(
dma_h™dÀ_t
 *
h™dÀ
);

418 
	`DMA_Cª©eH™dÀ
(
dma_h™dÀ_t
 *
h™dÀ
, 
DMA_Ty≥
 *
ba£
, 
uöt32_t
 
ch™√l
);

430 
	`DMA_SëCÆlback
(
dma_h™dÀ_t
 *
h™dÀ
, 
dma_ˇŒback
 
ˇŒback
, *
u£rD©a
);

448 
	`DMA_Pª∑ªTøns„r
(
dma_å™s„r_c⁄fig_t
 *
c⁄fig
,

449 *
§cAddr
,

450 *
d°Addr
,

451 
uöt32_t
 
byãWidth
,

452 
uöt32_t
 
å™s„rByãs
,

453 
dma_å™s„r_ty≥_t
 
ty≥
,

454 *
√xtDesc
);

469 
°©us_t
 
	`DMA_SubmôTøns„r
(
dma_h™dÀ_t
 *
h™dÀ
, 
dma_å™s„r_c⁄fig_t
 *
c⁄fig
);

479 
	`DMA_SèπTøns„r
(
dma_h™dÀ_t
 *
h™dÀ
);

487 
	`DMA_H™dÀIRQ
();

491 #i‡
	`deföed
(
__˝lu•lus
)

492 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_flexcomm.c

35 
	~"f¶_comm⁄.h
"

36 
	~"f¶_Êexcomm.h
"

47 
Êexcomm_úq_h™dÀr_t
 
	gs_ÊexcommIrqH™dÀr
[
FSL_FEATURE_SOC_FLEXCOMM_COUNT
];

50 *
	gs_ÊexcommH™dÀ
[
FSL_FEATURE_SOC_FLEXCOMM_COUNT
];

53 
IRQn_Ty≥
 c⁄° 
	gkFÀxcommIrqs
[] = 
FLEXCOMM_IRQS
;

56 c⁄° 
uöt32_t
 
	gs_ÊexcommBa£Addrs
[
FSL_FEATURE_SOC_FLEXCOMM_COUNT
] = 
FLEXCOMM_BASE_ADDRS
;

58 #i‡!(
deföed
(
FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL
) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

60 c⁄° 
˛ock_ù_«me_t
 
	gs_ÊexcommClocks
[] = 
FLEXCOMM_CLOCKS
;

68 
boﬁ
 
	$FLEXCOMM_PîùhîÆIsPª£¡
(
FLEXCOMM_Ty≥
 *
ba£
, 
FLEXCOMM_PERIPH_T
 
≥rùh
)

70 i‡(
≥rùh
 =
FLEXCOMM_PERIPH_NONE
)

72  
åue
;

74 i‡((
≥rùh
 >
FLEXCOMM_PERIPH_USART
Ë&& (≥rùh <
FLEXCOMM_PERIPH_I2S_TX
))

76  (
ba£
->
PSELID
 & (
uöt32_t
)(1 << ((uöt32_t)
≥rùh
 + 3))Ë> 0 ? 
åue
 : 
Ál£
;

78 i‡(
≥rùh
 =
FLEXCOMM_PERIPH_I2S_RX
)

80  (
ba£
->
PSELID
 & (1 << 7)Ë> 0 ? 
åue
 : 
Ál£
;

84  
Ál£
;

86 
	}
}

89 
uöt32_t
 
	$FLEXCOMM_GëIn°™˚
(*
ba£
)

91 
i
;

93 
i
 = 0; i < 
FSL_FEATURE_SOC_FLEXCOMM_COUNT
; i++)

95 i‡((
uöt32_t
)
ba£
 =
s_ÊexcommBa£Addrs
[
i
])

97  
i
;

101 
	`as£π
(
Ál£
);

103 
	}
}

106 
°©us_t
 
	$FLEXCOMM_SëPîùh
(
FLEXCOMM_Ty≥
 *
ba£
, 
FLEXCOMM_PERIPH_T
 
≥rùh
, 
lock
)

109 i‡(!
	`FLEXCOMM_PîùhîÆIsPª£¡
(
ba£
, 
≥rùh
))

111  
kSètus_OutOfR™ge
;

115 i‡((
ba£
->
PSELID
 & 
FLEXCOMM_PSELID_LOCK_MASK
Ë&& ((ba£->PSELID & 
FLEXCOMM_PSELID_PERSEL_MASK
Ë!
≥rùh
))

117  
kSètus_Faû
;

121 i‡(
lock
)

123 
ba£
->
PSELID
 = (
uöt32_t
)
≥rùh
 | 
FLEXCOMM_PSELID_LOCK_MASK
;

127 
ba£
->
PSELID
 = (
uöt32_t
)
≥rùh
;

130  
kSètus_Suc˚ss
;

131 
	}
}

133 
°©us_t
 
	$FLEXCOMM_Inô
(*
ba£
, 
FLEXCOMM_PERIPH_T
 
≥rùh
)

135 
idx
 = 
	`FLEXCOMM_GëIn°™˚
(
ba£
);

137 i‡(
idx
 < 0)

139  
kSètus_InvÆidArgumít
;

142 #i‡!(
	`deföed
(
FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL
) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

144 
	`CLOCK_E«bÀClock
(
s_ÊexcommClocks
[
idx
]);

148  
	`FLEXCOMM_SëPîùh
((
FLEXCOMM_Ty≥
 *)
ba£
, 
≥rùh
, 0);

149 
	}
}

151 
	$FLEXCOMM_SëIRQH™dÀr
(*
ba£
, 
Êexcomm_úq_h™dÀr_t
 
h™dÀr
, *
h™dÀ
)

153 
uöt32_t
 
ö°™˚
;

156 
ö°™˚
 = 
	`FLEXCOMM_GëIn°™˚
(
ba£
);

159 
s_ÊexcommIrqH™dÀr
[
ö°™˚
] = 
NULL
;

160 
s_ÊexcommH™dÀ
[
ö°™˚
] = 
h™dÀ
;

161 
s_ÊexcommIrqH™dÀr
[
ö°™˚
] = 
h™dÀr
;

164 #i‡
deföed
 
__CORTEX_M
 && (__CORTEX_M == 4U)

165 
	`__DSB
();

167 
	}
}

170 #i‡
deföed
(
FLEXCOMM0
)

171 
	$FLEXCOMM0_DrivîIRQH™dÀr
()

173 
	`as£π
(
s_ÊexcommIrqH™dÀr
[0]);

174 
s_ÊexcommIrqH™dÀr
[0]((*)
s_ÊexcommBa£Addrs
[0], 
s_ÊexcommH™dÀ
[0]);

177 #i‡
deföed
 
__CORTEX_M
 && (__CORTEX_M == 4U)

178 
	`__DSB
();

180 
	}
}

183 #i‡
deföed
(
FLEXCOMM1
)

184 
	$FLEXCOMM1_DrivîIRQH™dÀr
()

186 
	`as£π
(
s_ÊexcommIrqH™dÀr
[1]);

187 
s_ÊexcommIrqH™dÀr
[1]((*)
s_ÊexcommBa£Addrs
[1], 
s_ÊexcommH™dÀ
[1]);

190 #i‡
deföed
 
__CORTEX_M
 && (__CORTEX_M == 4U)

191 
	`__DSB
();

193 
	}
}

196 #i‡
deföed
(
FLEXCOMM2
)

197 
	$FLEXCOMM2_DrivîIRQH™dÀr
()

199 
	`as£π
(
s_ÊexcommIrqH™dÀr
[2]);

200 
s_ÊexcommIrqH™dÀr
[2]((*)
s_ÊexcommBa£Addrs
[2], 
s_ÊexcommH™dÀ
[2]);

203 #i‡
deföed
 
__CORTEX_M
 && (__CORTEX_M == 4U)

204 
	`__DSB
();

206 
	}
}

209 #i‡
deföed
(
FLEXCOMM3
)

210 
	$FLEXCOMM3_DrivîIRQH™dÀr
()

212 
	`as£π
(
s_ÊexcommIrqH™dÀr
[3]);

213 
s_ÊexcommIrqH™dÀr
[3]((*)
s_ÊexcommBa£Addrs
[3], 
s_ÊexcommH™dÀ
[3]);

216 #i‡
deföed
 
__CORTEX_M
 && (__CORTEX_M == 4U)

217 
	`__DSB
();

219 
	}
}

222 #i‡
deföed
(
FLEXCOMM4
)

223 
	$FLEXCOMM4_DrivîIRQH™dÀr
()

225 
	`as£π
(
s_ÊexcommIrqH™dÀr
[4]);

226 
s_ÊexcommIrqH™dÀr
[4]((*)
s_ÊexcommBa£Addrs
[4], 
s_ÊexcommH™dÀ
[4]);

229 #i‡
deföed
 
__CORTEX_M
 && (__CORTEX_M == 4U)

230 
	`__DSB
();

232 
	}
}

236 #i‡
deföed
(
FLEXCOMM5
)

237 
	$FLEXCOMM5_DrivîIRQH™dÀr
()

239 
	`as£π
(
s_ÊexcommIrqH™dÀr
[5]);

240 
s_ÊexcommIrqH™dÀr
[5]((*)
s_ÊexcommBa£Addrs
[5], 
s_ÊexcommH™dÀ
[5]);

243 #i‡
deföed
 
__CORTEX_M
 && (__CORTEX_M == 4U)

244 
	`__DSB
();

246 
	}
}

249 #i‡
deföed
(
FLEXCOMM6
)

250 
	$FLEXCOMM6_DrivîIRQH™dÀr
()

252 
	`as£π
(
s_ÊexcommIrqH™dÀr
[6]);

253 
s_ÊexcommIrqH™dÀr
[6]((*)
s_ÊexcommBa£Addrs
[6], 
s_ÊexcommH™dÀ
[6]);

256 #i‡
deföed
 
__CORTEX_M
 && (__CORTEX_M == 4U)

257 
	`__DSB
();

259 
	}
}

262 #i‡
deföed
(
FLEXCOMM7
)

263 
	$FLEXCOMM7_DrivîIRQH™dÀr
()

265 
	`as£π
(
s_ÊexcommIrqH™dÀr
[7]);

266 
s_ÊexcommIrqH™dÀr
[7]((*)
s_ÊexcommBa£Addrs
[7], 
s_ÊexcommH™dÀ
[7]);

269 #i‡
deföed
 
__CORTEX_M
 && (__CORTEX_M == 4U)

270 
	`__DSB
();

272 
	}
}

275 #i‡
deföed
(
FLEXCOMM8
)

276 
	$FLEXCOMM8_DrivîIRQH™dÀr
()

278 
	`as£π
(
s_ÊexcommIrqH™dÀr
[8]);

279 
s_ÊexcommIrqH™dÀr
[8]((*)
s_ÊexcommBa£Addrs
[8], 
s_ÊexcommH™dÀ
[8]);

282 #i‡
deföed
 
__CORTEX_M
 && (__CORTEX_M == 4U)

283 
	`__DSB
();

285 
	}
}

288 #i‡
deföed
(
FLEXCOMM9
)

289 
	$FLEXCOMM9_DrivîIRQH™dÀr
()

291 
	`as£π
(
s_ÊexcommIrqH™dÀr
[9]);

292 
s_ÊexcommIrqH™dÀr
[9]((*)
s_ÊexcommBa£Addrs
[9], 
s_ÊexcommH™dÀ
[9]);

295 #i‡
deföed
 
__CORTEX_M
 && (__CORTEX_M == 4U)

296 
	`__DSB
();

298 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_flexcomm.h

34 #i‚de‡
_FSL_FLEXCOMM_H_


35 
	#_FSL_FLEXCOMM_H_


	)

37 
	~"f¶_comm⁄.h
"

47 
	#FSL_FLEXCOMM_DRIVER_VERSION
 (
	`MAKE_VERSION
(2, 0, 0))

	)

53 
	mFLEXCOMM_PERIPH_NONE
,

54 
	mFLEXCOMM_PERIPH_USART
,

55 
	mFLEXCOMM_PERIPH_SPI
,

56 
	mFLEXCOMM_PERIPH_I2C
,

57 
	mFLEXCOMM_PERIPH_I2S_TX
,

58 
	mFLEXCOMM_PERIPH_I2S_RX
,

59 } 
	tFLEXCOMM_PERIPH_T
;

62 (*
	tÊexcomm_úq_h™dÀr_t
)(*
	tba£
, *
	th™dÀ
);

65 
IRQn_Ty≥
 c⁄° 
kFÀxcommIrqs
[];

68 
uöt32_t
 
	`FLEXCOMM_GëIn°™˚
(*
ba£
);

71 
°©us_t
 
	`FLEXCOMM_Inô
(*
ba£
, 
FLEXCOMM_PERIPH_T
 
≥rùh
);

75 
	`FLEXCOMM_SëIRQH™dÀr
(*
ba£
, 
Êexcomm_úq_h™dÀr_t
 
h™dÀr
, *
h™dÀ
);

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_gpio.c

35 
	~"f¶_gpio.h
"

40 #i‡!(
deföed
(
FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL
) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

42 c⁄° 
˛ock_ù_«me_t
 
	gs_gpioClockName
[] = 
GPIO_CLOCKS
;

51 
	$GPIO_P‹tInô
(
GPIO_Ty≥
 *
ba£
, 
uöt32_t
 
p‹t
)

53 #i‡!(
	`deföed
(
FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL
) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

54 
	`as£π
(
p‹t
 < 
	`ARRAY_SIZE
(
s_gpioClockName
));

57 
	`CLOCK_E«bÀClock
(
s_gpioClockName
[
p‹t
]);

59 
	}
}

61 
	$GPIO_PöInô
(
GPIO_Ty≥
 *
ba£
, 
uöt32_t
 
p‹t
, uöt32_à
pö
, c⁄° 
gpio_pö_c⁄fig_t
 *
c⁄fig
)

63 i‡(
c⁄fig
->
pöDúe˘i⁄
 =
kGPIO_DigôÆI≈ut
)

65 
ba£
->
DIR
[
p‹t
] &~(1U << 
pö
);

70 i‡(
c⁄fig
->
ouçutLogic
 == 0U)

72 
ba£
->
CLR
[
p‹t
] = (1U << 
pö
);

76 
ba£
->
SET
[
p‹t
] = (1U << 
pö
);

79 
ba£
->
DIR
[
p‹t
] |1U << 
pö
;

81 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_gpio.h

35 #i‚de‡
_LPC_GPIO_H_


36 
	#_LPC_GPIO_H_


	)

38 
	~"f¶_comm⁄.h
"

54 
	#FSL_GPIO_DRIVER_VERSION
 (
	`MAKE_VERSION
(2, 1, 1))

	)

58 
	e_gpio_pö_dúe˘i⁄


60 
	mkGPIO_DigôÆI≈ut
 = 0U,

61 
	mkGPIO_DigôÆOuçut
 = 1U,

62 } 
	tgpio_pö_dúe˘i⁄_t
;

70 
	s_gpio_pö_c⁄fig


72 
gpio_pö_dúe˘i⁄_t
 
	mpöDúe˘i⁄
;

74 
uöt8_t
 
	mouçutLogic
;

75 } 
	tgpio_pö_c⁄fig_t
;

80 #i‡
deföed
(
__˝lu•lus
)

95 
GPIO_P‹tInô
(
GPIO_Ty≥
 *
ba£
, 
uöt32_t
 
p‹t
);

101 
ölöe
 
GPIO_Inô
(
GPIO_Ty≥
 *
ba£
, 
uöt32_t
 
p‹t
)

103 
GPIO_P‹tInô
(
ba£
, 
p‹t
);

133 
GPIO_PöInô
(
GPIO_Ty≥
 *
ba£
, 
uöt32_t
 
p‹t
, uöt32_à
pö
, c⁄° 
gpio_pö_c⁄fig_t
 *
c⁄fig
);

150 
ölöe
 
GPIO_PöWrôe
(
GPIO_Ty≥
 *
ba£
, 
uöt32_t
 
p‹t
, uöt32_à
pö
, 
uöt8_t
 
ouçut
)

152 
ba£
->
B
[
p‹t
][
pö
] = 
ouçut
;

159 
ölöe
 
GPIO_WrôePöOuçut
(
GPIO_Ty≥
 *
ba£
, 
uöt32_t
 
p‹t
, uöt32_à
pö
, 
uöt8_t
 
ouçut
)

161 
ba£
->
B
[
p‹t
][
pö
] = 
ouçut
;

177 
ölöe
 
uöt32_t
 
GPIO_PöRód
(
GPIO_Ty≥
 *
ba£
, uöt32_à
p‹t
, uöt32_à
pö
)

179  (
uöt32_t
)
ba£
->
B
[
p‹t
][
pö
];

186 
ölöe
 
uöt32_t
 
GPIO_RódPöI≈ut
(
GPIO_Ty≥
 *
ba£
, uöt32_à
p‹t
, uöt32_à
pö
)

188  
GPIO_PöRód
(
ba£
, 
p‹t
, 
pö
);

199 
ölöe
 
GPIO_P‹tSë
(
GPIO_Ty≥
 *
ba£
, 
uöt32_t
 
p‹t
, uöt32_à
mask
)

201 
ba£
->
SET
[
p‹t
] = 
mask
;

208 
ölöe
 
GPIO_SëPösOuçut
(
GPIO_Ty≥
 *
ba£
, 
uöt32_t
 
p‹t
, uöt32_à
mask
)

210 
GPIO_P‹tSë
(
ba£
, 
p‹t
, 
mask
);

220 
ölöe
 
GPIO_P‹tCÀ¨
(
GPIO_Ty≥
 *
ba£
, 
uöt32_t
 
p‹t
, uöt32_à
mask
)

222 
ba£
->
CLR
[
p‹t
] = 
mask
;

229 
ölöe
 
GPIO_CÀ¨PösOuçut
(
GPIO_Ty≥
 *
ba£
, 
uöt32_t
 
p‹t
, uöt32_à
mask
)

231 
GPIO_P‹tCÀ¨
(
ba£
, 
p‹t
, 
mask
);

241 
ölöe
 
GPIO_P‹tToggÀ
(
GPIO_Ty≥
 *
ba£
, 
uöt32_t
 
p‹t
, uöt32_à
mask
)

243 
ba£
->
NOT
[
p‹t
] = 
mask
;

250 
ölöe
 
GPIO_ToggÀPösOuçut
(
GPIO_Ty≥
 *
ba£
, 
uöt32_t
 
p‹t
, uöt32_à
mask
)

252 
GPIO_P‹tToggÀ
(
ba£
, 
p‹t
, 
mask
);

262 
ölöe
 
uöt32_t
 
GPIO_P‹tRód
(
GPIO_Ty≥
 *
ba£
, uöt32_à
p‹t
)

264  (
uöt32_t
)
ba£
->
PIN
[
p‹t
];

271 
ölöe
 
uöt32_t
 
GPIO_RódPösI≈ut
(
GPIO_Ty≥
 *
ba£
, uöt32_à
p‹t
)

273  
GPIO_P‹tRód
(
ba£
, 
p‹t
);

287 
ölöe
 
GPIO_P‹tMaskedSë
(
GPIO_Ty≥
 *
ba£
, 
uöt32_t
 
p‹t
, uöt32_à
mask
)

289 
ba£
->
MASK
[
p‹t
] = 
mask
;

296 
ölöe
 
GPIO_SëP‹tMask
(
GPIO_Ty≥
 *
ba£
, 
uöt32_t
 
p‹t
, uöt32_à
mask
)

298 
GPIO_P‹tMaskedSë
(
ba£
, 
p‹t
, 
mask
);

308 
ölöe
 
GPIO_P‹tMaskedWrôe
(
GPIO_Ty≥
 *
ba£
, 
uöt32_t
 
p‹t
, uöt32_à
ouçut
)

310 
ba£
->
MPIN
[
p‹t
] = 
ouçut
;

317 
ölöe
 
GPIO_WrôeMP‹t
(
GPIO_Ty≥
 *
ba£
, 
uöt32_t
 
p‹t
, uöt32_à
ouçut
)

319 
GPIO_P‹tMaskedWrôe
(
ba£
, 
p‹t
, 
ouçut
);

330 
ölöe
 
uöt32_t
 
GPIO_P‹tMaskedRód
(
GPIO_Ty≥
 *
ba£
, uöt32_à
p‹t
)

332  (
uöt32_t
)
ba£
->
MPIN
[
p‹t
];

340 
ölöe
 
uöt32_t
 
GPIO_RódMP‹t
(
GPIO_Ty≥
 *
ba£
, uöt32_à
p‹t
)

342  
GPIO_P‹tMaskedRód
(
ba£
, 
p‹t
);

347 #i‡
deföed
(
__˝lu•lus
)

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_inputmux.c

35 
	~"f¶_öputmux.h
"

45 
	$INPUTMUX_Inô
(
INPUTMUX_Ty≥
 *
ba£
)

47 #i‡!(
	`deföed
(
FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL
) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

48 
	`CLOCK_E«bÀClock
(
kCLOCK_I≈utMux
);

50 
	}
}

52 
	$INPUTMUX_AâachSig«l
(
INPUTMUX_Ty≥
 *
ba£
, 
uöt32_t
 
ödex
, 
öputmux_c⁄√˘i⁄_t
 
c⁄√˘i⁄
)

54 
uöt32_t
 
pmux_id
;

55 
uöt32_t
 
ouçut_id
;

58 
pmux_id
 = ((
uöt32_t
)(
c⁄√˘i⁄
)Ë>> 
PMUX_SHIFT
;

60 
ouçut_id
 = ((
uöt32_t
)(
c⁄√˘i⁄
)) & 0xffffU;

62 *(vﬁ©ûê
uöt32_t
 *)(((uöt32_t)
ba£
Ë+ 
pmux_id
 + (
ödex
 * 4)Ë
ouçut_id
;

63 
	}
}

65 
	$INPUTMUX_Deöô
(
INPUTMUX_Ty≥
 *
ba£
)

67 #i‡!(
	`deföed
(
FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL
) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

68 
	`CLOCK_DißbÀClock
(
kCLOCK_I≈utMux
);

70 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_inputmux.h

35 #i‚de‡
_FSL_INPUTMUX_H_


36 
	#_FSL_INPUTMUX_H_


	)

38 
	~"f¶_öputmux_c⁄√˘i⁄s.h
"

39 
	~"f¶_comm⁄.h
"

56 
	#FSL_INPUTMUX_DRIVER_VERSION
 (
	`MAKE_VERSION
(2, 0, 0)Ë

	)

63 #ifde‡
__˝lu•lus


76 
INPUTMUX_Inô
(
INPUTMUX_Ty≥
 *
ba£
);

89 
INPUTMUX_AâachSig«l
(
INPUTMUX_Ty≥
 *
ba£
, 
uöt32_t
 
ödex
, 
öputmux_c⁄√˘i⁄_t
 
c⁄√˘i⁄
);

100 
INPUTMUX_Deöô
(
INPUTMUX_Ty≥
 *
ba£
);

102 #ifde‡
__˝lu•lus


	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_inputmux_connections.h

36 #i‚de‡
_FSL_INPUTMUX_CONNECTIONS_


37 
	#_FSL_INPUTMUX_CONNECTIONS_


	)

54 
	#SCT0_PMUX_ID
 0x00U

	)

55 
	#PINTSEL_PMUX_ID
 0xC0U

	)

56 
	#DMA_TRIG0_PMUX_ID
 0xE0U

	)

57 
	#DMA_OTRIG_PMUX_ID
 0x160U

	)

58 
	#FREQMEAS_PMUX_ID
 0x180U

	)

59 
	#PMUX_SHIFT
 20U

	)

62 
	e_öputmux_c⁄√˘i⁄_t


65 
	mkINPUTMUX_S˘Gpi0ToS˘0
 = 0U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

66 
	mkINPUTMUX_S˘Gpi1ToS˘0
 = 1U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

67 
	mkINPUTMUX_S˘Gpi2ToS˘0
 = 2U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

68 
	mkINPUTMUX_S˘Gpi3ToS˘0
 = 3U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

69 
	mkINPUTMUX_S˘Gpi4ToS˘0
 = 4U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

70 
	mkINPUTMUX_S˘Gpi5ToS˘0
 = 5U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

71 
	mkINPUTMUX_S˘Gpi6ToS˘0
 = 6U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

72 
	mkINPUTMUX_S˘Gpi7ToS˘0
 = 7U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

73 
	mkINPUTMUX_T0Out0ToS˘0
 = 8U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

74 
	mkINPUTMUX_T1Out0ToS˘0
 = 9U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

75 
	mkINPUTMUX_T2Out0ToS˘0
 = 10U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

76 
	mkINPUTMUX_T3Out0ToS˘0
 = 11U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

77 
	mkINPUTMUX_T4Out0ToS˘0
 = 12U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

78 
	mkINPUTMUX_AdcThcmpIrqToS˘0
 = 13U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

79 
	mkINPUTMUX_GpioI¡Bm©chToS˘0
 = 14U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

80 
	mkINPUTMUX_Usb0FømeToggÀToS˘0
 = 15U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

81 
	mkINPUTMUX_Usb1FømeToggÀToS˘0
 = 16U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

82 
	mkINPUTMUX_ArmTxevToS˘0
 = 17U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

83 
	mkINPUTMUX_DebugHÆãdToS˘0
 = 18U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

84 
	mkINPUTMUX_Sm¨tC¨d0TxA˘ivªToS˘0
 = 19U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

85 
	mkINPUTMUX_Sm¨tC¨d0RxA˘ivªToS˘0
 = 20U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

86 
	mkINPUTMUX_Sm¨tC¨d1TxA˘ivªToS˘0
 = 21U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

87 
	mkINPUTMUX_Sm¨tC¨d1RxA˘ivªToS˘0
 = 22U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

88 
	mkINPUTMUX_I2s6S˛kToS˘0
 = 23U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

89 
	mkINPUTMUX_I2sS7˛kToS˘0
 = 24U + (
SCT0_PMUX_ID
 << 
PMUX_SHIFT
),

92 
	mkINPUTMUX_MaöOscToFªqmós
 = 0U + (
FREQMEAS_PMUX_ID
 << 
PMUX_SHIFT
),

93 
	mkINPUTMUX_Fro12MhzToFªqmós
 = 1U + (
FREQMEAS_PMUX_ID
 << 
PMUX_SHIFT
),

94 
	mkINPUTMUX_Fro96MhzToFªqmós
 = 2U + (
FREQMEAS_PMUX_ID
 << 
PMUX_SHIFT
),

95 
	mkINPUTMUX_WdtOscToFªqmós
 = 3U + (
FREQMEAS_PMUX_ID
 << 
PMUX_SHIFT
),

96 
	mkINPUTMUX_32KhzOscToFªqmós
 = 4U + (
FREQMEAS_PMUX_ID
 << 
PMUX_SHIFT
),

97 
	mkINPUTMUX_MaöClkToFªqmós
 = 5U + (
FREQMEAS_PMUX_ID
 << 
PMUX_SHIFT
),

98 
	mkINPUTMUX_FªqmeGpioClk_a
 = 6U + (
FREQMEAS_PMUX_ID
 << 
PMUX_SHIFT
),

99 
	mkINPUTMUX_FªqmeGpioClk_b
 = 7U + (
FREQMEAS_PMUX_ID
 << 
PMUX_SHIFT
),

102 
	mkINPUTMUX_GpioP‹t0Pö0ToPöt£l
 = 0U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

103 
	mkINPUTMUX_GpioP‹t0Pö1ToPöt£l
 = 1U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

104 
	mkINPUTMUX_GpioP‹t0Pö2ToPöt£l
 = 2U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

105 
	mkINPUTMUX_GpioP‹t0Pö3ToPöt£l
 = 3U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

106 
	mkINPUTMUX_GpioP‹t0Pö4ToPöt£l
 = 4U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

107 
	mkINPUTMUX_GpioP‹t0Pö5ToPöt£l
 = 5U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

108 
	mkINPUTMUX_GpioP‹t0Pö6ToPöt£l
 = 6U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

109 
	mkINPUTMUX_GpioP‹t0Pö7ToPöt£l
 = 7U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

110 
	mkINPUTMUX_GpioP‹t0Pö8ToPöt£l
 = 8U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

111 
	mkINPUTMUX_GpioP‹t0Pö9ToPöt£l
 = 9U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

112 
	mkINPUTMUX_GpioP‹t0Pö10ToPöt£l
 = 10U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

113 
	mkINPUTMUX_GpioP‹t0Pö11ToPöt£l
 = 11U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

114 
	mkINPUTMUX_GpioP‹t0Pö12ToPöt£l
 = 12U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

115 
	mkINPUTMUX_GpioP‹t0Pö13ToPöt£l
 = 13U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

116 
	mkINPUTMUX_GpioP‹t0Pö14ToPöt£l
 = 14U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

117 
	mkINPUTMUX_GpioP‹t0Pö15ToPöt£l
 = 15U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

118 
	mkINPUTMUX_GpioP‹t0Pö16ToPöt£l
 = 16U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

119 
	mkINPUTMUX_GpioP‹t0Pö17ToPöt£l
 = 17U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

120 
	mkINPUTMUX_GpioP‹t0Pö18ToPöt£l
 = 18U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

121 
	mkINPUTMUX_GpioP‹t0Pö19ToPöt£l
 = 19U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

122 
	mkINPUTMUX_GpioP‹t0Pö20ToPöt£l
 = 20U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

123 
	mkINPUTMUX_GpioP‹t0Pö21ToPöt£l
 = 21U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

124 
	mkINPUTMUX_GpioP‹t0Pö22ToPöt£l
 = 22U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

125 
	mkINPUTMUX_GpioP‹t0Pö23ToPöt£l
 = 23U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

126 
	mkINPUTMUX_GpioP‹t0Pö24ToPöt£l
 = 24U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

127 
	mkINPUTMUX_GpioP‹t0Pö25ToPöt£l
 = 25U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

128 
	mkINPUTMUX_GpioP‹t0Pö26ToPöt£l
 = 26U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

129 
	mkINPUTMUX_GpioP‹t0Pö27ToPöt£l
 = 27U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

130 
	mkINPUTMUX_GpioP‹t0Pö28ToPöt£l
 = 28U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

131 
	mkINPUTMUX_GpioP‹t0Pö29ToPöt£l
 = 29U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

132 
	mkINPUTMUX_GpioP‹t0Pö30ToPöt£l
 = 30U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

133 
	mkINPUTMUX_GpioP‹t0Pö31ToPöt£l
 = 31U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

134 
	mkINPUTMUX_GpioP‹t1Pö0ToPöt£l
 = 32U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

135 
	mkINPUTMUX_GpioP‹t1Pö1ToPöt£l
 = 33U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

136 
	mkINPUTMUX_GpioP‹t1Pö2ToPöt£l
 = 34U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

137 
	mkINPUTMUX_GpioP‹t1Pö3ToPöt£l
 = 35U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

138 
	mkINPUTMUX_GpioP‹t1Pö4ToPöt£l
 = 36U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

139 
	mkINPUTMUX_GpioP‹t1Pö5ToPöt£l
 = 37U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

140 
	mkINPUTMUX_GpioP‹t1Pö6ToPöt£l
 = 38U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

141 
	mkINPUTMUX_GpioP‹t1Pö7ToPöt£l
 = 39U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

142 
	mkINPUTMUX_GpioP‹t1Pö8ToPöt£l
 = 40U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

143 
	mkINPUTMUX_GpioP‹t1Pö9ToPöt£l
 = 41U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

144 
	mkINPUTMUX_GpioP‹t1Pö10ToPöt£l
 = 42U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

145 
	mkINPUTMUX_GpioP‹t1Pö11ToPöt£l
 = 43U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

146 
	mkINPUTMUX_GpioP‹t1Pö12ToPöt£l
 = 44U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

147 
	mkINPUTMUX_GpioP‹t1Pö13ToPöt£l
 = 45U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

148 
	mkINPUTMUX_GpioP‹t1Pö14ToPöt£l
 = 46U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

149 
	mkINPUTMUX_GpioP‹t1Pö15ToPöt£l
 = 47U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

150 
	mkINPUTMUX_GpioP‹t1Pö16ToPöt£l
 = 48U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

151 
	mkINPUTMUX_GpioP‹t1Pö17ToPöt£l
 = 49U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

152 
	mkINPUTMUX_GpioP‹t1Pö18ToPöt£l
 = 50U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

153 
	mkINPUTMUX_GpioP‹t1Pö19ToPöt£l
 = 51U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

154 
	mkINPUTMUX_GpioP‹t1Pö20ToPöt£l
 = 52U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

155 
	mkINPUTMUX_GpioP‹t1Pö21ToPöt£l
 = 53U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

156 
	mkINPUTMUX_GpioP‹t1Pö22ToPöt£l
 = 54U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

157 
	mkINPUTMUX_GpioP‹t1Pö23ToPöt£l
 = 55U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

158 
	mkINPUTMUX_GpioP‹t1Pö24ToPöt£l
 = 56U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

159 
	mkINPUTMUX_GpioP‹t1Pö25ToPöt£l
 = 57U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

160 
	mkINPUTMUX_GpioP‹t1Pö26ToPöt£l
 = 58U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

161 
	mkINPUTMUX_GpioP‹t1Pö27ToPöt£l
 = 59U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

162 
	mkINPUTMUX_GpioP‹t1Pö28ToPöt£l
 = 60U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

163 
	mkINPUTMUX_GpioP‹t1Pö29ToPöt£l
 = 61U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

164 
	mkINPUTMUX_GpioP‹t1Pö30ToPöt£l
 = 62U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

165 
	mkINPUTMUX_GpioP‹t1Pö31ToPöt£l
 = 63U + (
PINTSEL_PMUX_ID
 << 
PMUX_SHIFT
),

167 
	mkINPUTMUX_Adc0SeqaIrqToDma
 = 0U + (
DMA_TRIG0_PMUX_ID
 << 
PMUX_SHIFT
),

168 
	mkINPUTMUX_Adc0SeqbIrqToDma
 = 1U + (
DMA_TRIG0_PMUX_ID
 << 
PMUX_SHIFT
),

169 
	mkINPUTMUX_S˘0DmaReq0ToDma
 = 2U + (
DMA_TRIG0_PMUX_ID
 << 
PMUX_SHIFT
),

170 
	mkINPUTMUX_S˘0DmaReq1ToDma
 = 3U + (
DMA_TRIG0_PMUX_ID
 << 
PMUX_SHIFT
),

171 
	mkINPUTMUX_PöI¡0ToDma
 = 4U + (
DMA_TRIG0_PMUX_ID
 << 
PMUX_SHIFT
),

172 
	mkINPUTMUX_PöI¡1ToDma
 = 5U + (
DMA_TRIG0_PMUX_ID
 << 
PMUX_SHIFT
),

173 
	mkINPUTMUX_PöI¡2ToDma
 = 6U + (
DMA_TRIG0_PMUX_ID
 << 
PMUX_SHIFT
),

174 
	mkINPUTMUX_PöI¡3ToDma
 = 7U + (
DMA_TRIG0_PMUX_ID
 << 
PMUX_SHIFT
),

175 
	mkINPUTMUX_Ctimî0M0ToDma
 = 8U + (
DMA_TRIG0_PMUX_ID
 << 
PMUX_SHIFT
),

176 
	mkINPUTMUX_Ctimî0M1ToDma
 = 9U + (
DMA_TRIG0_PMUX_ID
 << 
PMUX_SHIFT
),

177 
	mkINPUTMUX_Ctimî1M0ToDma
 = 10U + (
DMA_TRIG0_PMUX_ID
 << 
PMUX_SHIFT
),

178 
	mkINPUTMUX_Ctimî2M0ToDma
 = 11U + (
DMA_TRIG0_PMUX_ID
 << 
PMUX_SHIFT
),

179 
	mkINPUTMUX_Ctimî2M1ToDma
 = 12U + (
DMA_TRIG0_PMUX_ID
 << 
PMUX_SHIFT
),

180 
	mkINPUTMUX_Ctimî3M0ToDma
 = 13U + (
DMA_TRIG0_PMUX_ID
 << 
PMUX_SHIFT
),

181 
	mkINPUTMUX_Ctimî4M0ToDma
 = 14U + (
DMA_TRIG0_PMUX_ID
 << 
PMUX_SHIFT
),

182 
	mkINPUTMUX_Ctimî4M1ToDma
 = 15U + (
DMA_TRIG0_PMUX_ID
 << 
PMUX_SHIFT
),

183 
	mkINPUTMUX_Oåig0ToDma
 = 16U + (
DMA_TRIG0_PMUX_ID
 << 
PMUX_SHIFT
),

184 
	mkINPUTMUX_Oåig1ToDma
 = 17U + (
DMA_TRIG0_PMUX_ID
 << 
PMUX_SHIFT
),

185 
	mkINPUTMUX_Oåig2ToDma
 = 18U + (
DMA_TRIG0_PMUX_ID
 << 
PMUX_SHIFT
),

186 
	mkINPUTMUX_Oåig3ToDma
 = 19U + (
DMA_TRIG0_PMUX_ID
 << 
PMUX_SHIFT
),

188 
	mkINPUTMUX_DmaFÀxcomm0RxTrigoutToTrigöCh™√ls
 = 0U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

189 
	mkINPUTMUX_DmaFÀxcomm0TxTrigoutToTrigöCh™√ls
 = 1U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

190 
	mkINPUTMUX_DmaFÀxcomm1RxTrigoutToTrigöCh™√ls
 = 2U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

191 
	mkINPUTMUX_DmaFÀxcomm1TxTrigoutToTrigöCh™√ls
 = 3U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

192 
	mkINPUTMUX_DmaFÀxcomm2RxTrigoutToTrigöCh™√ls
 = 4U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

193 
	mkINPUTMUX_DmaFÀxcomm2TxTrigoutToTrigöCh™√ls
 = 5U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

194 
	mkINPUTMUX_DmaFÀxcomm3RxTrigoutToTrigöCh™√ls
 = 6U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

195 
	mkINPUTMUX_DmaFÀxcomm3TxTrigoutToTrigöCh™√ls
 = 7U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

196 
	mkINPUTMUX_DmaFÀxcomm4RxTrigoutToTrigöCh™√ls
 = 8U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

197 
	mkINPUTMUX_DmaFÀxcomm4TxTrigoutToTrigöCh™√ls
 = 9U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

198 
	mkINPUTMUX_DmaFÀxcomm5RxTrigoutToTrigöCh™√ls
 = 10U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

199 
	mkINPUTMUX_DmaFÀxcomm5TxTrigoutToTrigöCh™√ls
 = 11U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

200 
	mkINPUTMUX_DmaFÀxcomm6RxTrigoutToTrigöCh™√ls
 = 12U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

201 
	mkINPUTMUX_DmaFÀxcomm6TxTrigoutToTrigöCh™√ls
 = 13U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

202 
	mkINPUTMUX_DmaFÀxcomm7RxTrigoutToTrigöCh™√ls
 = 14U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

203 
	mkINPUTMUX_DmaFÀxcomm7TxTrigoutToTrigöCh™√ls
 = 15U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

204 
	mkINPUTMUX_DmaDmic0Ch0TrigoutToTrigöCh™√ls
 = 16U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

205 
	mkINPUTMUX_Dmamic0Ch1TrigoutToTrigöCh™√ls
 = 17U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

206 
	mkINPUTMUX_DmaSpifi0TrigoutToTrigöCh™√ls
 = 18U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

207 
	mkINPUTMUX_DmaCh™√l9_TrigoutToTrigöCh™√ls
 = 19U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

208 
	mkINPUTMUX_DmaFÀxcomm8RxTrigoutToTrigöCh™√ls
 = 20U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

209 
	mkINPUTMUX_DmaFÀxcomm8TxTrigoutToTrigöCh™√ls
 = 21U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

210 
	mkINPUTMUX_DmaFÀxcomm9RxTrigoutToTrigöCh™√ls
 = 22U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

211 
	mkINPUTMUX_DmaFÀxcomm9TxTrigoutToTrigöCh™√ls
 = 23U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

212 
	mkINPUTMUX_DmaSm¨tˇrd0RxTrigoutToTrigöCh™√ls
 = 24U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

213 
	mkINPUTMUX_DmaSm¨tˇrd0TxTrigoutToTrigöCh™√ls
 = 25U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

214 
	mkINPUTMUX_DmaSm¨tˇrd1RxTrigoutToTrigöCh™√ls
 = 26U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

215 
	mkINPUTMUX_DmaSm¨tˇrd1TxTrigoutToTrigöCh™√ls
 = 27U + (
DMA_OTRIG_PMUX_ID
 << 
PMUX_SHIFT
),

216 } 
	töputmux_c⁄√˘i⁄_t
;

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_iocon.h

35 #i‚de‡
_FSL_IOCON_H_


36 
	#_FSL_IOCON_H_


	)

38 
	~"f¶_comm⁄.h
"

54 
	#LPC_IOCON_DRIVER_VERSION
 (
	`MAKE_VERSION
(2, 0, 0))

	)

60 
	s_ioc⁄_group


62 
uöt32_t
 
	mp‹t
 : 8;

63 
uöt32_t
 
	mpö
 : 8;

64 
uöt32_t
 
	mmodefunc
 : 16;

65 } 
	tioc⁄_group_t
;

71 #i‡
deföed
(
FSL_FEATURE_IOCON_FUNC_FIELD_WIDTH
) && (FSL_FEATURE_IOCON_FUNC_FIELD_WIDTH == 4)

72 
	#IOCON_FUNC0
 0x0

	)

73 
	#IOCON_FUNC1
 0x1

	)

74 
	#IOCON_FUNC2
 0x2

	)

75 
	#IOCON_FUNC3
 0x3

	)

76 
	#IOCON_FUNC4
 0x4

	)

77 
	#IOCON_FUNC5
 0x5

	)

78 
	#IOCON_FUNC6
 0x6

	)

79 
	#IOCON_FUNC7
 0x7

	)

80 
	#IOCON_FUNC8
 0x8

	)

81 
	#IOCON_FUNC9
 0x9

	)

82 
	#IOCON_FUNC10
 0xA

	)

83 
	#IOCON_FUNC11
 0xB

	)

84 
	#IOCON_FUNC12
 0xC

	)

85 
	#IOCON_FUNC13
 0xD

	)

86 
	#IOCON_FUNC14
 0xE

	)

87 
	#IOCON_FUNC15
 0xF

	)

88 
	#IOCON_MODE_INACT
 (0x0 << 4Ë

	)

89 
	#IOCON_MODE_PULLDOWN
 (0x1 << 4Ë

	)

90 
	#IOCON_MODE_PULLUP
 (0x2 << 4Ë

	)

91 
	#IOCON_MODE_REPEATER
 (0x3 << 4Ë

	)

92 
	#IOCON_HYS_EN
 (0x1 << 6Ë

	)

93 
	#IOCON_GPIO_MODE
 (0x1 << 6Ë

	)

94 
	#IOCON_I2C_SLEW
 (0x0 << 6Ë

	)

95 
	#IOCON_INV_EN
 (0x1 << 7Ë

	)

96 
	#IOCON_ANALOG_EN
 (0x0 << 8Ë

	)

97 
	#IOCON_DIGITAL_EN
 (0x1 << 8Ë

	)

98 
	#IOCON_STDI2C_EN
 (0x1 << 9Ë

	)

99 
	#IOCON_FASTI2C_EN
 (0x3 << 9Ë

	)

100 
	#IOCON_INPFILT_OFF
 (0x1 << 9Ë

	)

101 
	#IOCON_INPFILT_ON
 (0x0 << 9Ë

	)

102 
	#IOCON_OPENDRAIN_EN
 (0x1 << 11Ë

	)

103 
	#IOCON_S_MODE_0CLK
 (0x0 << 12Ë

	)

104 
	#IOCON_S_MODE_1CLK
 (0x1 << 12Ë

	)

105 
	#IOCON_S_MODE_2CLK
 (0x2 << 12Ë

	)

106 
	#IOCON_S_MODE_3CLK
 (0x3 << 12Ë

	)

107 
	#IOCON_S_MODE
(
˛ks
Ë((˛ksË<< 12Ë

	)

108 
	#IOCON_CLKDIV
(
div
) \

109 ((
div
Ë<< 14Ë

	)

111 
	#IOCON_FUNC0
 0x0

	)

112 
	#IOCON_FUNC1
 0x1

	)

113 
	#IOCON_FUNC2
 0x2

	)

114 
	#IOCON_FUNC3
 0x3

	)

115 
	#IOCON_FUNC4
 0x4

	)

116 
	#IOCON_FUNC5
 0x5

	)

117 
	#IOCON_FUNC6
 0x6

	)

118 
	#IOCON_FUNC7
 0x7

	)

119 
	#IOCON_MODE_INACT
 (0x0 << 3Ë

	)

120 
	#IOCON_MODE_PULLDOWN
 (0x1 << 3Ë

	)

121 
	#IOCON_MODE_PULLUP
 (0x2 << 3Ë

	)

122 
	#IOCON_MODE_REPEATER
 (0x3 << 3Ë

	)

123 
	#IOCON_HYS_EN
 (0x1 << 5Ë

	)

124 
	#IOCON_GPIO_MODE
 (0x1 << 5Ë

	)

125 
	#IOCON_I2C_SLEW
 (0x0 << 5Ë

	)

126 
	#IOCON_INV_EN
 (0x1 << 6Ë

	)

127 
	#IOCON_ANALOG_EN
 (0x0 << 7Ë

	)

128 
	#IOCON_DIGITAL_EN
 (0x1 << 7Ë

	)

129 
	#IOCON_STDI2C_EN
 (0x1 << 8Ë

	)

130 
	#IOCON_FASTI2C_EN
 (0x3 << 8Ë

	)

131 
	#IOCON_INPFILT_OFF
 (0x1 << 8Ë

	)

132 
	#IOCON_INPFILT_ON
 (0x0 << 8Ë

	)

133 
	#IOCON_OPENDRAIN_EN
 (0x1 << 10Ë

	)

134 
	#IOCON_S_MODE_0CLK
 (0x0 << 11Ë

	)

135 
	#IOCON_S_MODE_1CLK
 (0x1 << 11Ë

	)

136 
	#IOCON_S_MODE_2CLK
 (0x2 << 11Ë

	)

137 
	#IOCON_S_MODE_3CLK
 (0x3 << 11Ë

	)

138 
	#IOCON_S_MODE
(
˛ks
Ë((˛ksË<< 11Ë

	)

139 
	#IOCON_CLKDIV
(
div
) \

140 ((
div
Ë<< 13Ë

	)

142 #i‡
deföed
(
__˝lu•lus
)

154 
__STATIC_INLINE
 
IOCON_PöMuxSë
(
IOCON_Ty≥
 *
ba£
, 
uöt8_t
 
p‹t
, uöt8_à
pö
, 
uöt32_t
 
modefunc
)

156 
ba£
->
PIO
[
p‹t
][
pö
] = 
modefunc
;

166 
__STATIC_INLINE
 
IOCON_SëPöMuxög
(
IOCON_Ty≥
 *
ba£
, c⁄° 
ioc⁄_group_t
 *
pöAºay
, 
uöt32_t
 
¨øyLígth
)

168 
uöt32_t
 
i
;

170 
i
 = 0; i < 
¨øyLígth
; i++)

172 
IOCON_PöMuxSë
(
ba£
, 
pöAºay
[
i
].
p‹t
,ÖöAºay[i].
pö
,ÖöAºay[i].
modefunc
);

178 #i‡
deföed
(
__˝lu•lus
)

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_power.c

35 
	~"f¶_comm⁄.h
"

36 
	~"f¶_powî.h
"

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_power.h

35 #i‚de‡
_FSL_POWER_H_


36 
	#_FSL_POWER_H_


	)

38 
	~"f¶_comm⁄.h
"

47 
	#FSL_POWER_DRIVER_VERSION
 (
	`MAKE_VERSION
(2, 0, 0))

	)

50 
	#MAKE_PD_BITS
(
ªg
, 
¶Ÿ
Ë(‘eg << 8Ë| slŸ)

	)

51 
	#PDRCFG0
 0x0U

	)

52 
	#PDRCFG1
 0x1U

	)

54 
	epd_bôs


56 
	mkPDRUNCFG_LP_REG
 = 
MAKE_PD_BITS
(
PDRCFG0
, 2U),

57 
	mkPDRUNCFG_PD_FRO_EN
 = 
MAKE_PD_BITS
(
PDRCFG0
, 4U),

58 
	mkPDRUNCFG_PD_TS
 = 
MAKE_PD_BITS
(
PDRCFG0
, 6U),

59 
	mkPDRUNCFG_PD_BOD_RESET
 = 
MAKE_PD_BITS
(
PDRCFG0
, 7U),

60 
	mkPDRUNCFG_PD_BOD_INTR
 = 
MAKE_PD_BITS
(
PDRCFG0
, 8U),

61 
	mkPDRUNCFG_PD_VD2_ANA
 = 
MAKE_PD_BITS
(
PDRCFG0
, 9U),

62 
	mkPDRUNCFG_PD_ADC0
 = 
MAKE_PD_BITS
(
PDRCFG0
, 10U),

63 
	mkPDRUNCFG_PD_RAM0
 = 
MAKE_PD_BITS
(
PDRCFG0
, 13U),

64 
	mkPDRUNCFG_PD_RAM1
 = 
MAKE_PD_BITS
(
PDRCFG0
, 14U),

65 
	mkPDRUNCFG_PD_RAM2
 = 
MAKE_PD_BITS
(
PDRCFG0
, 15U),

66 
	mkPDRUNCFG_PD_RAM3
 = 
MAKE_PD_BITS
(
PDRCFG0
, 16U),

67 
	mkPDRUNCFG_PD_ROM
 = 
MAKE_PD_BITS
(
PDRCFG0
, 17U),

68 
	mkPDRUNCFG_PD_VDDA
 = 
MAKE_PD_BITS
(
PDRCFG0
, 19U),

69 
	mkPDRUNCFG_PD_WDT_OSC
 = 
MAKE_PD_BITS
(
PDRCFG0
, 20U),

70 
	mkPDRUNCFG_PD_USB0_PHY
 = 
MAKE_PD_BITS
(
PDRCFG0
, 21U),

71 
	mkPDRUNCFG_PD_SYS_PLL0
 = 
MAKE_PD_BITS
(
PDRCFG0
, 22U),

72 
	mkPDRUNCFG_PD_VREFP
 = 
MAKE_PD_BITS
(
PDRCFG0
, 23U),

73 
	mkPDRUNCFG_PD_FLASH_BG
 = 
MAKE_PD_BITS
(
PDRCFG0
, 25U),

74 
	mkPDRUNCFG_PD_VD3
 = 
MAKE_PD_BITS
(
PDRCFG0
, 26U),

75 
	mkPDRUNCFG_PD_VD4
 = 
MAKE_PD_BITS
(
PDRCFG0
, 27U),

76 
	mkPDRUNCFG_PD_VD5
 = 
MAKE_PD_BITS
(
PDRCFG0
, 28U),

77 
	mkPDRUNCFG_PD_VD6
 = 
MAKE_PD_BITS
(
PDRCFG0
, 29U),

78 
	mkPDRUNCFG_REQ_DELAY
 = 
MAKE_PD_BITS
(
PDRCFG0
, 30U),

79 
	mkPDRUNCFG_FORCE_RBB
 = 
MAKE_PD_BITS
(
PDRCFG0
, 31U),

81 
	mkPDRUNCFG_PD_USB1_PHY
 = 
MAKE_PD_BITS
(
PDRCFG1
, 0U),

82 
	mkPDRUNCFG_PD_USB_PLL
 = 
MAKE_PD_BITS
(
PDRCFG1
, 1U),

83 
	mkPDRUNCFG_PD_AUDIO_PLL
 = 
MAKE_PD_BITS
(
PDRCFG1
, 2U),

84 
	mkPDRUNCFG_PD_SYS_OSC
 = 
MAKE_PD_BITS
(
PDRCFG1
, 3U),

85 
	mkPDRUNCFG_PD_EEPROM
 = 
MAKE_PD_BITS
(
PDRCFG1
, 5U),

86 
	mkPDRUNCFG_PD_∫g
 = 
MAKE_PD_BITS
(
PDRCFG1
, 6U),

88 
	mkPDRUNCFG_F‹˚Unsig√d
 = 0x80000000U,

89 } 
	tpd_bô_t
;

92 
	e_powî_mode_c⁄fig


94 
	mkPmu_SÀï
 = 0U,

95 
	mkPmu_Dìp_SÀï
 = 1U,

96 
	mkPmu_Dìp_PowîDown
 = 2U,

97 } 
	tpowî_mode_cfg_t
;

103 #ifde‡
__˝lu•lus


118 
ölöe
 
POWER_E«bÀPD
(
pd_bô_t
 
í
)

121 
SYSCON
->
PDRUNCFGSET
[(
í
 >> 8UL)] = (1UL << (en & 0xffU));

130 
ölöe
 
POWER_DißbÀPD
(
pd_bô_t
 
í
)

133 
SYSCON
->
PDRUNCFGCLR
[(
í
 >> 8UL)] = (1UL << (en & 0xffU));

142 
ölöe
 
POWER_E«bÀDìpSÀï
()

144 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP_Msk
;

153 
ölöe
 
POWER_DißbÀDìpSÀï
()

155 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP_Msk
;

164 
ölöe
 
POWER_PowîDownFœsh
()

167 
CLOCK_DißbÀClock
(
kCLOCK_Fœsh
);

170 
CLOCK_DißbÀClock
(
kCLOCK_Fmc
);

179 
ölöe
 
POWER_PowîUpFœsh
()

182 
CLOCK_E«bÀClock
(
kCLOCK_Fmc
);

191 
POWER_SëPLL
();

199 
POWER_SëUsbPhy
();

207 
POWER_E¡îPowîMode
(
powî_mode_cfg_t
 
mode
, 
uöt64_t
 
ex˛ude_‰om_pd
);

214 
POWER_E¡îSÀï
();

222 
POWER_E¡îDìpSÀï
(
uöt64_t
 
ex˛ude_‰om_pd
);

232 
POWER_E¡îDìpPowîDown
(
uöt64_t
 
ex˛ude_‰om_pd
);

241 
POWER_SëVﬁègeF‹Fªq
(
uöt32_t
 
‰eq
);

249 
uöt32_t
 
POWER_GëLibVîsi⁄
();

251 #ifde‡
__˝lu•lus


	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_reset.c

36 
	~"f¶_comm⁄.h
"

37 
	~"f¶_ª£t.h
"

55 #i‡((
deföed
(
FSL_FEATURE_SOC_SYSCON_COUNT
) && (FSL_FEATURE_SOC_SYSCON_COUNT > 0)) || \

56 (
deföed
(
FSL_FEATURE_SOC_ASYNC_SYSCON_COUNT
Ë&& (
	gFSL_FEATURE_SOC_ASYNC_SYSCON_COUNT
 > 0)))

58 
	$RESET_SëPîùhîÆRe£t
(
ª£t_ù_«me_t
 
≥rùhîÆ
)

60 c⁄° 
uöt32_t
 
ªgIndex
 = ((uöt32_t)
≥rùhîÆ
 & 0xFFFF0000u) >> 16;

61 c⁄° 
uöt32_t
 
bôPos
 = ((uöt32_t)
≥rùhîÆ
 & 0x0000FFFFu);

62 c⁄° 
uöt32_t
 
bôMask
 = 1u << 
bôPos
;

64 
	`as£π
(
bôPos
 < 32u);

67 i‡(
ªgIndex
 >
SYSCON_PRESETCTRL_COUNT
)

72 
ASYNC_SYSCON
->
ASYNCPRESETCTRLSET
 = 
bôMask
;

74 0u =(
ASYNC_SYSCON
->
ASYNCPRESETCTRL
 & 
bôMask
))

83 
SYSCON
->
PRESETCTRLSET
[
ªgIndex
] = 
bôMask
;

85 0u =(
SYSCON
->
PRESETCTRL
[
ªgIndex
] & 
bôMask
))

89 
	}
}

91 
	$RESET_CÀ¨PîùhîÆRe£t
(
ª£t_ù_«me_t
 
≥rùhîÆ
)

93 c⁄° 
uöt32_t
 
ªgIndex
 = ((uöt32_t)
≥rùhîÆ
 & 0xFFFF0000u) >> 16;

94 c⁄° 
uöt32_t
 
bôPos
 = ((uöt32_t)
≥rùhîÆ
 & 0x0000FFFFu);

95 c⁄° 
uöt32_t
 
bôMask
 = 1u << 
bôPos
;

97 
	`as£π
(
bôPos
 < 32u);

100 i‡(
ªgIndex
 >
SYSCON_PRESETCTRL_COUNT
)

105 
ASYNC_SYSCON
->
ASYNCPRESETCTRLCLR
 = 
bôMask
;

107 
bôMask
 =(
ASYNC_SYSCON
->
ASYNCPRESETCTRL
 & bitMask))

116 
SYSCON
->
PRESETCTRLCLR
[
ªgIndex
] = 
bôMask
;

118 
bôMask
 =(
SYSCON
->
PRESETCTRL
[
ªgIndex
] & bitMask))

122 
	}
}

124 
	$RESET_PîùhîÆRe£t
(
ª£t_ù_«me_t
 
≥rùhîÆ
)

126 
	`RESET_SëPîùhîÆRe£t
(
≥rùhîÆ
);

127 
	`RESET_CÀ¨PîùhîÆRe£t
(
≥rùhîÆ
);

128 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_reset.h

36 #i‚de‡
_FSL_RESET_H_


37 
	#_FSL_RESET_H_


	)

39 
	~<as£π.h
>

40 
	~<°dboﬁ.h
>

41 
	~<°döt.h
>

42 
	~<°rög.h
>

43 
	~"f¶_devi˚_ªgi°îs.h
"

57 
	#FSL_RESET_DRIVER_VERSION
 (
	`MAKE_VERSION
(2, 0, 0))

	)

65 
	e_SYSCON_RSTn


67 
	mkFLASH_RST_SHIFT_RSTn
 = 0 | 7U,

68 
	mkFMC_RST_SHIFT_RSTn
 = 0 | 8U,

69 
	mkEEPROM_RST_SHIFT_RSTn
 = 0 | 9U,

70 
	mkSPIFI_RST_SHIFT_RSTn
 = 0 | 10U,

71 
	mkMUX_RST_SHIFT_RSTn
 = 0 | 11U,

72 
	mkIOCON_RST_SHIFT_RSTn
 = 0 | 13U,

73 
	mkGPIO0_RST_SHIFT_RSTn
 = 0 | 14U,

74 
	mkGPIO1_RST_SHIFT_RSTn
 = 0 | 15U,

75 
	mkGPIO2_RST_SHIFT_RSTn
 = 0 | 16U,

76 
	mkGPIO3_RST_SHIFT_RSTn
 = 0 | 17U,

77 
	mkPINT_RST_SHIFT_RSTn
 = 0 | 18U,

78 
	mkGINT_RST_SHIFT_RSTn
 = 0 | 19U,

79 
	mkDMA_RST_SHIFT_RSTn
 = 0 | 20U,

80 
	mkCRC_RST_SHIFT_RSTn
 = 0 | 21U,

81 
	mkWWDT_RST_SHIFT_RSTn
 = 0 | 22U,

82 
	mkADC0_RST_SHIFT_RSTn
 = 0 | 27U,

84 
	mkMRT_RST_SHIFT_RSTn
 = 65536 | 0U,

85 
	mkSCT0_RST_SHIFT_RSTn
 = 65536 | 2U,

86 
	mkMCAN0_RST_SHIFT_RSTn
 = 65536 | 7U,

87 
	mkMCAN1_RST_SHIFT_RSTn
 = 65536 | 8U,

88 
	mkUTICK_RST_SHIFT_RSTn
 = 65536 | 10U,

89 
	mkFC0_RST_SHIFT_RSTn
 = 65536 | 11U,

90 
	mkFC1_RST_SHIFT_RSTn
 = 65536 | 12U,

91 
	mkFC2_RST_SHIFT_RSTn
 = 65536 | 13U,

92 
	mkFC3_RST_SHIFT_RSTn
 = 65536 | 14U,

93 
	mkFC4_RST_SHIFT_RSTn
 = 65536 | 15U,

94 
	mkFC5_RST_SHIFT_RSTn
 = 65536 | 16U,

95 
	mkFC6_RST_SHIFT_RSTn
 = 65536 | 17U,

96 
	mkFC7_RST_SHIFT_RSTn
 = 65536 | 18U,

97 
	mkDMIC_RST_SHIFT_RSTn
 = 65536 | 19U,

98 
	mkCT32B2_RST_SHIFT_RSTn
 = 65536 | 22U,

99 
	mkUSB0D_RST_SHIFT_RSTn
 = 65536 | 25U,

100 
	mkCT32B0_RST_SHIFT_RSTn
 = 65536 | 26U,

101 
	mkCT32B1_RST_SHIFT_RSTn
 = 65536 | 27U,

103 
	mkLCD_RST_SHIFT_RSTn
 = 131072 | 2U,

104 
	mkSDIO_RST_SHIFT_RSTn
 = 131072 | 3U,

105 
	mkUSB1H_RST_SHIFT_RSTn
 = 131072 | 4U,

106 
	mkUSB1D_RST_SHIFT_RSTn
 = 131072 | 5U,

107 
	mkUSB1RAM_RST_SHIFT_RSTn
 = 131072 | 6U,

108 
	mkEMC_RST_SHIFT_RSTn
 = 131072 | 7U,

109 
	mkETH_RST_SHIFT_RSTn
 = 131072 | 8U,

110 
	mkGPIO4_RST_SHIFT_RSTn
 = 131072 | 9U,

111 
	mkGPIO5_RST_SHIFT_RSTn
 = 131072 | 10U,

112 
	mkAES_RST_SHIFT_RSTn
 = 131072 | 11U,

113 
	mkOTP_RST_SHIFT_RSTn
 = 131072 | 12U,

114 
	mkRNG_RST_SHIFT_RSTn
 = 131072 | 13U,

115 
	mkFC8_RST_SHIFT_RSTn
 = 131072 | 14U,

116 
	mkFC9_RST_SHIFT_RSTn
 = 131072 | 15U,

117 
	mkUSB0HMR_RST_SHIFT_RSTn
 = 131072 | 16U,

118 
	mkUSB0HSL_RST_SHIFT_RSTn
 = 131072 | 17U,

119 
	mkSHA_RST_SHIFT_RSTn
 = 131072 | 18U,

120 
	mkSC0_RST_SHIFT_RSTn
 = 131072 | 19U,

121 
	mkSC1_RST_SHIFT_RSTn
 = 131072 | 20U,

123 
	mkCT32B3_RST_SHIFT_RSTn
 = 67108864 | 13U,

124 
	mkCT32B4_RST_SHIFT_RSTn
 = 67108864 | 14U,

125 } 
	tSYSCON_RSTn_t
;

128 
	#ADC_RSTS
 \

130 
kADC0_RST_SHIFT_RSTn
 \

131 }

	)

132 
	#AES_RSTS
 \

134 
kAES_RST_SHIFT_RSTn
 \

135 }

	)

136 
	#CRC_RSTS
 \

138 
kCRC_RST_SHIFT_RSTn
 \

139 }

	)

140 
	#CTIMER_RSTS
 \

142 
kCT32B0_RST_SHIFT_RSTn
, 
kCT32B1_RST_SHIFT_RSTn
, 
kCT32B2_RST_SHIFT_RSTn
, 
kCT32B3_RST_SHIFT_RSTn
, \

143 
kCT32B4_RST_SHIFT_RSTn
 \

144 }

	)

145 
	#DMA_RSTS
 \

147 
kDMA_RST_SHIFT_RSTn
 \

148 }

	)

149 
	#DMIC_RSTS
 \

151 
kDMIC_RST_SHIFT_RSTn
 \

152 }

	)

153 
	#EMC_RSTS
 \

155 
kEMC_RST_SHIFT_RSTn
 \

156 }

	)

157 
	#ETH_RST
 \

159 
kETH_RST_SHIFT_RSTn
 \

160 }

	)

161 
	#FLEXCOMM_RSTS
 \

163 
kFC0_RST_SHIFT_RSTn
, 
kFC1_RST_SHIFT_RSTn
, 
kFC2_RST_SHIFT_RSTn
, 
kFC3_RST_SHIFT_RSTn
, 
kFC4_RST_SHIFT_RSTn
, \

164 
kFC5_RST_SHIFT_RSTn
, 
kFC6_RST_SHIFT_RSTn
, 
kFC7_RST_SHIFT_RSTn
, 
kFC8_RST_SHIFT_RSTn
, 
kFC9_RST_SHIFT_RSTn
 \

165 }

	)

166 
	#GINT_RSTS
 \

168 
kGINT_RST_SHIFT_RSTn
, kGINT_RST_SHIFT_RSTn \

169 }

	)

170 
	#GPIO_RSTS
 \

172 
kGPIO0_RST_SHIFT_RSTn
, 
kGPIO1_RST_SHIFT_RSTn
, 
kGPIO2_RST_SHIFT_RSTn
, 
kGPIO3_RST_SHIFT_RSTn
, \

173 
kGPIO4_RST_SHIFT_RSTn
, 
kGPIO5_RST_SHIFT_RSTn
 \

174 }

	)

175 
	#INPUTMUX_RSTS
 \

177 
kMUX_RST_SHIFT_RSTn
 \

178 }

	)

179 
	#IOCON_RSTS
 \

181 
kIOCON_RST_SHIFT_RSTn
 \

182 }

	)

183 
	#FLASH_RSTS
 \

185 
kFLASH_RST_SHIFT_RSTn
, 
kFMC_RST_SHIFT_RSTn
 \

186 }

	)

187 
	#LCD_RSTS
 \

189 
kLCD_RST_SHIFT_RSTn
 \

190 }

	)

191 
	#MRT_RSTS
 \

193 
kMRT_RST_SHIFT_RSTn
 \

194 }

	)

195 
	#MCAN_RSTS
 \

197 
kMCAN0_RST_SHIFT_RSTn
,
kMCAN1_RST_SHIFT_RSTn
 \

198 }

	)

199 
	#OTP_RSTS
 \

201 
kOTP_RST_SHIFT_RSTn
 \

202 }

	)

203 
	#PINT_RSTS
 \

205 
kPINT_RST_SHIFT_RSTn
 \

206 }

	)

207 
	#RNG_RSTS
 \

209 
kRNG_RST_SHIFT_RSTn
 \

210 }

	)

211 
	#SDIO_RST
 \

213 
kSDIO_RST_SHIFT_RSTn
 \

214 }

	)

215 
	#SCT_RSTS
 \

217 
kSCT0_RST_SHIFT_RSTn
 \

218 }

	)

219 
	#SHA_RST
 \

221 
kSHA_RST_SHIFT_RSTn
 \

222 }

	)

223 
	#USB0D_RST
 \

225 
kUSB0D_RST_SHIFT_RSTn
 \

226 }

	)

227 
	#USB0HMR_RST
 \

229 
kUSB0HMR_RST_SHIFT_RSTn
 \

230 }

	)

231 
	#USB0HSL_RST
 \

233 
kUSB0HSL_RST_SHIFT_RSTn
 \

234 }

	)

235 
	#USB1H_RST
 \

237 
kUSB1H_RST_SHIFT_RSTn
 \

238 }

	)

239 
	#USB1D_RST
 \

241 
kUSB1D_RST_SHIFT_RSTn
 \

242 }

	)

243 
	#USB1RAM_RST
 \

245 
kUSB1RAM_RST_SHIFT_RSTn
 \

246 }

	)

247 
	#UTICK_RSTS
 \

249 
kUTICK_RST_SHIFT_RSTn
 \

250 }

	)

251 
	#WWDT_RSTS
 \

253 
kWWDT_RST_SHIFT_RSTn
 \

254 }

	)

256 
SYSCON_RSTn_t
 
	tª£t_ù_«me_t
;

261 #i‡
deföed
(
__˝lu•lus
)

273 
RESET_SëPîùhîÆRe£t
(
ª£t_ù_«me_t
 
≥rùhîÆ
);

283 
RESET_CÀ¨PîùhîÆRe£t
(
ª£t_ù_«me_t
 
≥rùhîÆ
);

293 
RESET_PîùhîÆRe£t
(
ª£t_ù_«me_t
 
≥rùhîÆ
);

295 #i‡
deföed
(
__˝lu•lus
)

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_sctimer.c

35 
	~"f¶_s˘imî.h
"

41 (*
	ts˘imî_i§_t
)(
	tSCT_Ty≥
 *
	tba£
);

53 
uöt32_t
 
	`SCTIMER_GëIn°™˚
(
SCT_Ty≥
 *
ba£
);

59 
SCT_Ty≥
 *c⁄° 
s_s˘Ba£s
[] = 
SCT_BASE_PTRS
;

61 #i‡!(
	`deföed
(
FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL
) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

63 c⁄° 
˛ock_ù_«me_t
 
s_s˘Clocks
[] = 
SCT_CLOCKS
;

67 c⁄° 
ª£t_ù_«me_t
 
s_s˘Re£ts
[] = 
SCT_RSTS
;

70 
s˘imî_evít_ˇŒback_t
 
s_evítCÆlback
[
FSL_FEATURE_SCT_NUMBER_OF_EVENTS
];

73 
uöt32_t
 
s_cuºítEvít
;

76 
uöt32_t
 
s_cuºítSèã
;

79 
uöt32_t
 
s_cuºítM©ch
;

82 
s˘imî_i§_t
 
s_s˘imîI§
;

87 
uöt32_t
 
	$SCTIMER_GëIn°™˚
(
SCT_Ty≥
 *
ba£
)

89 
uöt32_t
 
ö°™˚
;

90 
uöt32_t
 
s˘AºayCou¡
 = ((
s_s˘Ba£s
) / (s_sctBases[0]));

93 
ö°™˚
 = 0; in°™˚ < 
s˘AºayCou¡
; instance++)

95 i‡(
s_s˘Ba£s
[
ö°™˚
] =
ba£
)

101 
	`as£π
(
ö°™˚
 < 
s˘AºayCou¡
);

103  
ö°™˚
;

104 
	}
}

106 
°©us_t
 
	$SCTIMER_Inô
(
SCT_Ty≥
 *
ba£
, c⁄° 
s˘imî_c⁄fig_t
 *
c⁄fig
)

108 
	`as£π
(
c⁄fig
);

109 
uöt32_t
 
i
;

111 #i‡!(
	`deföed
(
FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL
) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

113 
	`CLOCK_E«bÀClock
(
s_s˘Clocks
[
	`SCTIMER_GëIn°™˚
(
ba£
)]);

117 
	`RESET_PîùhîÆRe£t
(
s_s˘Re£ts
[
	`SCTIMER_GëIn°™˚
(
ba£
)]);

120 
ba£
->
CONFIG
 = 
	`SCT_CONFIG_CKSEL
(
c⁄fig
->
˛ockSñe˘
Ë| 
	`SCT_CONFIG_CLKMODE
(c⁄fig->
˛ockMode
) |

121 
	`SCT_CONFIG_UNIFY
(
c⁄fig
->
íabÀCou¡îUnify
);

124 
ba£
->
CTRL
 = 
	`SCT_CTRL_BIDIR_L
(
c⁄fig
->
íabÀBidúe˘i⁄_l
Ë| 
	`SCT_CTRL_PRE_L
(c⁄fig->
¥esˇÀ_l
) |

125 
SCT_CTRL_CLRCTR_L_MASK
 | 
SCT_CTRL_HALT_L_MASK
;

127 i‡(!(
c⁄fig
->
íabÀCou¡îUnify
))

129 
ba£
->
CTRL
 |
	`SCT_CTRL_BIDIR_H
(
c⁄fig
->
íabÀBidúe˘i⁄_h
Ë| 
	`SCT_CTRL_PRE_H
(c⁄fig->
¥esˇÀ_h
) |

130 
SCT_CTRL_CLRCTR_H_MASK
 | 
SCT_CTRL_HALT_H_MASK
;

134 
ba£
->
OUTPUT
 = 
c⁄fig
->
outInôSèã
;

137 
s_cuºítEvít
 = 0;

138 
s_cuºítSèã
 = 0;

139 
s_cuºítM©ch
 = 0;

142 
i
 = 0; i < 
FSL_FEATURE_SCT_NUMBER_OF_EVENTS
; i++)

144 
s_evítCÆlback
[
i
] = 
NULL
;

148 
s_s˘imîI§
 = 
SCTIMER_EvítH™dÀIRQ
;

150  
kSètus_Suc˚ss
;

151 
	}
}

153 
	$SCTIMER_Deöô
(
SCT_Ty≥
 *
ba£
)

156 
ba£
->
CTRL
 |(
SCT_CTRL_HALT_L_MASK
 | 
SCT_CTRL_HALT_H_MASK
);

158 #i‡!(
	`deföed
(
FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL
) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

160 
	`CLOCK_DißbÀClock
(
s_s˘Clocks
[
	`SCTIMER_GëIn°™˚
(
ba£
)]);

162 
	}
}

164 
	$SCTIMER_GëDeÁu…C⁄fig
(
s˘imî_c⁄fig_t
 *
c⁄fig
)

166 
	`as£π
(
c⁄fig
);

169 
c⁄fig
->
íabÀCou¡îUnify
 = 
åue
;

171 
c⁄fig
->
˛ockMode
 = 
kSCTIMER_Sy°em_ClockMode
;

173 
c⁄fig
->
˛ockSñe˘
 = 
kSCTIMER_Clock_On_Ri£_I≈ut_0
;

175 
c⁄fig
->
íabÀBidúe˘i⁄_l
 = 
Ál£
;

177 
c⁄fig
->
íabÀBidúe˘i⁄_h
 = 
Ál£
;

179 
c⁄fig
->
¥esˇÀ_l
 = 0;

181 
c⁄fig
->
¥esˇÀ_h
 = 0;

183 
c⁄fig
->
outInôSèã
 = 0;

184 
	}
}

186 
°©us_t
 
	$SCTIMER_SëupPwm
(
SCT_Ty≥
 *
ba£
,

187 c⁄° 
s˘imî_pwm_sig«l_∑øm_t
 *
pwmP¨ams
,

188 
s˘imî_pwm_mode_t
 
mode
,

189 
uöt32_t
 
pwmFªq_Hz
,

190 
uöt32_t
 
§cClock_Hz
,

191 
uöt32_t
 *
evít
)

193 
	`as£π
(
pwmP¨ams
);

194 
	`as£π
(
§cClock_Hz
);

195 
	`as£π
(
pwmFªq_Hz
);

197 
uöt32_t
 
≥riod
, 
pul£Pîiod
 = 0;

198 
uöt32_t
 
s˘Clock
 = 
§cClock_Hz
 / (((
ba£
->
CTRL
 & 
SCT_CTRL_PRE_L_MASK
Ë>> 
SCT_CTRL_PRE_L_SHIFT
) + 1);

199 
uöt32_t
 
≥riodEvít
, 
pul£Evít
;

200 
uöt32_t
 
ªg
;

203 i‡((
s_cuºítEvít
 + 2Ë> 
FSL_FEATURE_SCT_NUMBER_OF_EVENTS
)

205  
kSètus_Faû
;

208 i‡(
pwmP¨ams
->
dutyCy˛ePî˚¡
 == 0)

210  
kSètus_Faû
;

214 
ba£
->
CONFIG
 |
SCT_CONFIG_UNIFY_MASK
;

217 i‡(
mode
 =
kSCTIMER_CíãrAlig√dPwm
)

219 
ba£
->
CTRL
 |
SCT_CTRL_BIDIR_L_MASK
;

223 i‡(
mode
 =
kSCTIMER_EdgeAlig√dPwm
)

225 
≥riod
 = (
s˘Clock
 / 
pwmFªq_Hz
) - 1;

229 
≥riod
 = 
s˘Clock
 / (
pwmFªq_Hz
 * 2);

233 
pul£Pîiod
 = (
≥riod
 * 
pwmP¨ams
->
dutyCy˛ePî˚¡
) / 100;

236 i‡(
pwmP¨ams
->
dutyCy˛ePî˚¡
 >= 100)

238 
pul£Pîiod
 = 
≥riod
 + 2;

242 
	`SCTIMER_Cª©eAndScheduÀEvít
(
ba£
, 
kSCTIMER_M©chEvítO∆y
, 
≥riod
, 0, 
kSCTIMER_Cou¡î_L
, &
≥riodEvít
);

245 
	`SCTIMER_Cª©eAndScheduÀEvít
(
ba£
, 
kSCTIMER_M©chEvítO∆y
, 
pul£Pîiod
, 0, 
kSCTIMER_Cou¡î_L
, &
pul£Evít
);

248 
	`SCTIMER_SëupCou¡îLimôA˘i⁄
(
ba£
, 
kSCTIMER_Cou¡î_L
, 
≥riodEvít
);

251 *
evít
 = 
≥riodEvít
;

254 i‡(
pwmP¨ams
->
Àvñ
 =
kSCTIMER_HighTrue
)

257 
ba£
->
OUTPUT
 &~(1U << 
pwmP¨ams
->
ouçut
);

259 i‡(
mode
 =
kSCTIMER_EdgeAlig√dPwm
)

262 
	`SCTIMER_SëupOuçutSëA˘i⁄
(
ba£
, 
pwmP¨ams
->
ouçut
, 
≥riodEvít
);

264 
	`SCTIMER_SëupOuçutCÀ¨A˘i⁄
(
ba£
, 
pwmP¨ams
->
ouçut
, 
pul£Evít
);

269 
	`SCTIMER_SëupOuçutCÀ¨A˘i⁄
(
ba£
, 
pwmP¨ams
->
ouçut
, 
pul£Evít
);

271 
ªg
 = 
ba£
->
OUTPUTDIRCTRL
;

272 
ªg
 &~(
SCT_OUTPUTDIRCTRL_SETCLR0_MASK
 << (2 * 
pwmP¨ams
->
ouçut
));

273 
ªg
 |(1U << (2 * 
pwmP¨ams
->
ouçut
));

274 
ba£
->
OUTPUTDIRCTRL
 = 
ªg
;

281 
ba£
->
OUTPUT
 |(1U << 
pwmP¨ams
->
ouçut
);

283 i‡(
mode
 =
kSCTIMER_EdgeAlig√dPwm
)

286 
	`SCTIMER_SëupOuçutCÀ¨A˘i⁄
(
ba£
, 
pwmP¨ams
->
ouçut
, 
≥riodEvít
);

288 
	`SCTIMER_SëupOuçutSëA˘i⁄
(
ba£
, 
pwmP¨ams
->
ouçut
, 
pul£Evít
);

293 
	`SCTIMER_SëupOuçutSëA˘i⁄
(
ba£
, 
pwmP¨ams
->
ouçut
, 
pul£Evít
);

295 
ªg
 = 
ba£
->
OUTPUTDIRCTRL
;

296 
ªg
 &~(
SCT_OUTPUTDIRCTRL_SETCLR0_MASK
 << (2 * 
pwmP¨ams
->
ouçut
));

297 
ªg
 |(1U << (2 * 
pwmP¨ams
->
ouçut
));

298 
ba£
->
OUTPUTDIRCTRL
 = 
ªg
;

302  
kSètus_Suc˚ss
;

303 
	}
}

305 
	$SCTIMER_Upd©ePwmDutycy˛e
(
SCT_Ty≥
 *
ba£
, 
s˘imî_out_t
 
ouçut
, 
uöt8_t
 
dutyCy˛ePî˚¡
, 
uöt32_t
 
evít
)

308 
	`as£π
(
dutyCy˛ePî˚¡
 > 0);

310 
uöt32_t
 
≥riodM©chReg
, 
pul£M©chReg
;

311 
uöt32_t
 
pul£Pîiod
 = 0, 
≥riod
;

314 
≥riodM©chReg
 = 
ba£
->
EVENT
[
evít
].
CTRL
 & 
SCT_EVENT_CTRL_MATCHSEL_MASK
;

317 
pul£M©chReg
 = 
ba£
->
EVENT
[
evít
 + 1].
CTRL
 & 
SCT_EVENT_CTRL_MATCHSEL_MASK
;

319 
≥riod
 = 
ba£
->
SCTMATCH
[
≥riodM©chReg
];

322 
pul£Pîiod
 = (
≥riod
 * 
dutyCy˛ePî˚¡
) / 100;

325 i‡(
dutyCy˛ePî˚¡
 >= 100)

327 
pul£Pîiod
 = 
≥riod
 + 2;

331 
	`SCTIMER_St›Timî
(
ba£
, 
kSCTIMER_Cou¡î_L
);

334 
ba£
->
SCTMATCH
[
pul£M©chReg
] = 
	`SCT_SCTMATCH_MATCHn_L
(
pul£Pîiod
);

335 
ba£
->
SCTMATCHREL
[
pul£M©chReg
] = 
	`SCT_SCTMATCHREL_RELOADn_L
(
pul£Pîiod
);

338 
	`SCTIMER_SèπTimî
(
ba£
, 
kSCTIMER_Cou¡î_L
);

339 
	}
}

341 
°©us_t
 
	$SCTIMER_Cª©eAndScheduÀEvít
(
SCT_Ty≥
 *
ba£
,

342 
s˘imî_evít_t
 
howToM⁄ô‹
,

343 
uöt32_t
 
m©chVÆue
,

344 
uöt32_t
 
whichIO
,

345 
s˘imî_cou¡î_t
 
whichCou¡î
,

346 
uöt32_t
 *
evít
)

348 
uöt32_t
 
combMode
 = (((uöt32_t)
howToM⁄ô‹
 & 
SCT_EVENT_CTRL_COMBMODE_MASK
Ë>> 
SCT_EVENT_CTRL_COMBMODE_SHIFT
);

349 
uöt32_t
 
cuºítCålVÆ
 = 
howToM⁄ô‹
;

352 i‡(
s_cuºítEvít
 >
FSL_FEATURE_SCT_NUMBER_OF_EVENTS
)

354  
kSètus_Faû
;

358 i‡(
combMode
 == 0x2U)

360 
ba£
->
EVENT
[
s_cuºítEvít
].
CTRL
 = 
cuºítCålVÆ
 | 
	`SCT_EVENT_CTRL_IOSEL
(
whichIO
);

363 i‡(
combMode
 == 0x1U)

366 i‡(
s_cuºítM©ch
 >
FSL_FEATURE_SCT_NUMBER_OF_MATCH_CAPTURE
)

368  
kSètus_Faû
;

371 
cuºítCålVÆ
 |
	`SCT_EVENT_CTRL_MATCHSEL
(
s_cuºítM©ch
);

373 i‡((
ba£
->
CONFIG
 & 
SCT_CONFIG_UNIFY_MASK
Ë|| (
whichCou¡î
 =
kSCTIMER_Cou¡î_L
))

375 
ba£
->
SCTMATCH
[
s_cuºítM©ch
] = 
	`SCT_SCTMATCH_MATCHn_L
(
m©chVÆue
);

376 
ba£
->
SCTMATCHREL
[
s_cuºítM©ch
] = 
	`SCT_SCTMATCHREL_RELOADn_L
(
m©chVÆue
);

381 
cuºítCålVÆ
 |
	`SCT_EVENT_CTRL_HEVENT
(
whichCou¡î
);

382 
ba£
->
SCTMATCH
[
s_cuºítM©ch
] = 
	`SCT_SCTMATCH_MATCHn_H
(
m©chVÆue
);

383 
ba£
->
SCTMATCHREL
[
s_cuºítM©ch
] = 
	`SCT_SCTMATCHREL_RELOADn_H
(
m©chVÆue
);

385 
ba£
->
EVENT
[
s_cuºítEvít
].
CTRL
 = 
cuºítCålVÆ
;

387 
s_cuºítM©ch
++;

393 i‡(
s_cuºítM©ch
 >
FSL_FEATURE_SCT_NUMBER_OF_MATCH_CAPTURE
)

395  
kSètus_Faû
;

398 
cuºítCålVÆ
 |
	`SCT_EVENT_CTRL_MATCHSEL
(
s_cuºítM©ch
Ë| 
	`SCT_EVENT_CTRL_IOSEL
(
whichIO
);

400 i‡((
ba£
->
CONFIG
 & 
SCT_CONFIG_UNIFY_MASK
Ë|| (
whichCou¡î
 =
kSCTIMER_Cou¡î_L
))

402 
ba£
->
SCTMATCH
[
s_cuºítM©ch
] = 
	`SCT_SCTMATCH_MATCHn_L
(
m©chVÆue
);

403 
ba£
->
SCTMATCHREL
[
s_cuºítM©ch
] = 
	`SCT_SCTMATCHREL_RELOADn_L
(
m©chVÆue
);

408 
cuºítCålVÆ
 |
	`SCT_EVENT_CTRL_HEVENT
(
whichCou¡î
);

409 
ba£
->
SCTMATCH
[
s_cuºítM©ch
] = 
	`SCT_SCTMATCH_MATCHn_H
(
m©chVÆue
);

410 
ba£
->
SCTMATCHREL
[
s_cuºítM©ch
] = 
	`SCT_SCTMATCHREL_RELOADn_H
(
m©chVÆue
);

412 
ba£
->
EVENT
[
s_cuºítEvít
].
CTRL
 = 
cuºítCålVÆ
;

414 
s_cuºítM©ch
++;

418 
ba£
->
EVENT
[
s_cuºítEvít
].
STATE
 = (1U << 
s_cuºítSèã
);

421 *
evít
 = 
s_cuºítEvít
;

424 
s_cuºítEvít
++;

426  
kSètus_Suc˚ss
;

427 
	}
}

429 
	$SCTIMER_ScheduÀEvít
(
SCT_Ty≥
 *
ba£
, 
uöt32_t
 
evít
)

432 
ba£
->
EVENT
[
evít
].
STATE
 |(1U << 
s_cuºítSèã
);

433 
	}
}

435 
°©us_t
 
	$SCTIMER_In¸ó£Sèã
(
SCT_Ty≥
 *
ba£
)

438 i‡(
s_cuºítSèã
 >
FSL_FEATURE_SCT_NUMBER_OF_STATES
)

440  
kSètus_Faû
;

443 
s_cuºítSèã
++;

445  
kSètus_Suc˚ss
;

446 
	}
}

448 
uöt32_t
 
	$SCTIMER_GëCuºítSèã
(
SCT_Ty≥
 *
ba£
)

450  
s_cuºítSèã
;

451 
	}
}

453 
	$SCTIMER_SëupOuçutToggÀA˘i⁄
(
SCT_Ty≥
 *
ba£
, 
uöt32_t
 
whichIO
, uöt32_à
evít
)

455 
uöt32_t
 
ªg
;

458 
ba£
->
OUT
[
whichIO
].
CLR
 |(1U << 
evít
);

459 
ba£
->
OUT
[
whichIO
].
SET
 |(1U << 
evít
);

462 
ªg
 = 
ba£
->
RES
;

463 
ªg
 &~(
SCT_RES_O0RES_MASK
 << (2 * 
whichIO
));

464 
ªg
 |(
uöt32_t
)(
kSCTIMER_ResﬁveToggÀ
 << (2 * 
whichIO
));

465 
ba£
->
RES
 = 
ªg
;

466 
	}
}

468 
°©us_t
 
	$SCTIMER_SëupC≠tuªA˘i⁄
(
SCT_Ty≥
 *
ba£
,

469 
s˘imî_cou¡î_t
 
whichCou¡î
,

470 
uöt32_t
 *
ˇ±uªRegi°î
,

471 
uöt32_t
 
evít
)

474 i‡(
s_cuºítM©ch
 >
FSL_FEATURE_SCT_NUMBER_OF_MATCH_CAPTURE
)

476  
kSètus_Faû
;

480 i‡((
ba£
->
CONFIG
 & 
SCT_CONFIG_UNIFY_MASK
Ë|| (
whichCou¡î
 =
kSCTIMER_Cou¡î_L
))

483 
ba£
->
SCTCAPCTRL
[
s_cuºítM©ch
] |
	`SCT_SCTCAPCTRL_CAPCONn_L
(1 << 
evít
);

486 
ba£
->
REGMODE
 |
	`SCT_REGMODE_REGMOD_L
(1 << 
s_cuºítM©ch
);

491 
ba£
->
SCTCAPCTRL
[
s_cuºítM©ch
] |
	`SCT_SCTCAPCTRL_CAPCONn_H
(1 << 
evít
);

494 
ba£
->
REGMODE
 |
	`SCT_REGMODE_REGMOD_H
(1 << 
s_cuºítM©ch
);

498 *
ˇ±uªRegi°î
 = 
s_cuºítM©ch
;

501 
s_cuºítM©ch
++;

503  
kSètus_Suc˚ss
;

504 
	}
}

506 
	$SCTIMER_SëCÆlback
(
SCT_Ty≥
 *
ba£
, 
s˘imî_evít_ˇŒback_t
 
ˇŒback
, 
uöt32_t
 
evít
)

508 
s_evítCÆlback
[
evít
] = 
ˇŒback
;

509 
	}
}

511 
	$SCTIMER_EvítH™dÀIRQ
(
SCT_Ty≥
 *
ba£
)

513 
uöt32_t
 
evítFœg
 = 
SCT0
->
EVFLAG
;

515 
uöt32_t
 
˛órFœg
 = (
evítFœg
 & 
SCT0
->
EVEN
);

516 
uöt32_t
 
mask
 = 
evítFœg
;

517 
i
 = 0;

520 
i
 = 0; (ò< 
FSL_FEATURE_SCT_NUMBER_OF_EVENTS
Ë&& (
mask
 != 0); i++)

522 i‡(
mask
 & 0x1)

524 i‡(
s_evítCÆlback
[
i
] !
NULL
)

526 
s_evítCÆlback
[
i
]();

529 
mask
 >>= 1;

533 
SCT0
->
EVFLAG
 = 
˛órFœg
;

534 
	}
}

536 
	$SCT0_IRQH™dÀr
()

538 
	`s_s˘imîI§
(
SCT0
);

541 #i‡
deföed
 
__CORTEX_M
 && (__CORTEX_M == 4U)

542 
	`__DSB
();

544 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_sctimer.h

34 #i‚de‡
_FSL_SCTIMER_H_


35 
	#_FSL_SCTIMER_H_


	)

37 
	~"f¶_comm⁄.h
"

52 
	#FSL_SCTIMER_DRIVER_VERSION
 (
	`MAKE_VERSION
(2, 0, 0)Ë

	)

56 
	e_s˘imî_pwm_mode


58 
	mkSCTIMER_EdgeAlig√dPwm
 = 0U,

59 
	mkSCTIMER_CíãrAlig√dPwm


60 } 
	ts˘imî_pwm_mode_t
;

63 
	e_s˘imî_cou¡î


65 
	mkSCTIMER_Cou¡î_L
 = 0U,

66 
	mkSCTIMER_Cou¡î_H


67 } 
	ts˘imî_cou¡î_t
;

70 
	e_s˘imî_öput


72 
	mkSCTIMER_I≈ut_0
 = 0U,

73 
	mkSCTIMER_I≈ut_1
,

74 
	mkSCTIMER_I≈ut_2
,

75 
	mkSCTIMER_I≈ut_3
,

76 
	mkSCTIMER_I≈ut_4
,

77 
	mkSCTIMER_I≈ut_5
,

78 
	mkSCTIMER_I≈ut_6
,

79 
	mkSCTIMER_I≈ut_7


80 } 
	ts˘imî_öput_t
;

83 
	e_s˘imî_out


85 
	mkSCTIMER_Out_0
 = 0U,

86 
	mkSCTIMER_Out_1
,

87 
	mkSCTIMER_Out_2
,

88 
	mkSCTIMER_Out_3
,

89 
	mkSCTIMER_Out_4
,

90 
	mkSCTIMER_Out_5
,

91 
	mkSCTIMER_Out_6
,

92 
	mkSCTIMER_Out_7


93 } 
	ts˘imî_out_t
;

96 
	e_s˘imî_pwm_Àvñ_£À˘


98 
	mkSCTIMER_LowTrue
 = 0U,

99 
	mkSCTIMER_HighTrue


100 } 
	ts˘imî_pwm_Àvñ_£À˘_t
;

103 
	s_s˘imî_pwm_sig«l_∑øm


105 
s˘imî_out_t
 
	mouçut
;

106 
s˘imî_pwm_Àvñ_£À˘_t
 
	mÀvñ
;

107 
uöt8_t
 
	mdutyCy˛ePî˚¡
;

109 } 
	ts˘imî_pwm_sig«l_∑øm_t
;

112 
	e_s˘imî_˛ock_mode


114 
	mkSCTIMER_Sy°em_ClockMode
 = 0U,

115 
	mkSCTIMER_Sam∂ed_ClockMode
,

116 
	mkSCTIMER_I≈ut_ClockMode
,

117 
	mkSCTIMER_Asynchr⁄ous_ClockMode


118 } 
	ts˘imî_˛ock_mode_t
;

121 
	e_s˘imî_˛ock_£À˘


123 
	mkSCTIMER_Clock_On_Ri£_I≈ut_0
 = 0U,

124 
	mkSCTIMER_Clock_On_FÆl_I≈ut_0
,

125 
	mkSCTIMER_Clock_On_Ri£_I≈ut_1
,

126 
	mkSCTIMER_Clock_On_FÆl_I≈ut_1
,

127 
	mkSCTIMER_Clock_On_Ri£_I≈ut_2
,

128 
	mkSCTIMER_Clock_On_FÆl_I≈ut_2
,

129 
	mkSCTIMER_Clock_On_Ri£_I≈ut_3
,

130 
	mkSCTIMER_Clock_On_FÆl_I≈ut_3
,

131 
	mkSCTIMER_Clock_On_Ri£_I≈ut_4
,

132 
	mkSCTIMER_Clock_On_FÆl_I≈ut_4
,

133 
	mkSCTIMER_Clock_On_Ri£_I≈ut_5
,

134 
	mkSCTIMER_Clock_On_FÆl_I≈ut_5
,

135 
	mkSCTIMER_Clock_On_Ri£_I≈ut_6
,

136 
	mkSCTIMER_Clock_On_FÆl_I≈ut_6
,

137 
	mkSCTIMER_Clock_On_Ri£_I≈ut_7
,

138 
	mkSCTIMER_Clock_On_FÆl_I≈ut_7


139 } 
	ts˘imî_˛ock_£À˘_t
;

147 
	e_s˘imî_c⁄Êi˘_ªsﬁuti⁄


149 
	mkSCTIMER_ResﬁveN⁄e
 = 0U,

150 
	mkSCTIMER_ResﬁveSë
,

151 
	mkSCTIMER_ResﬁveCÀ¨
,

152 
	mkSCTIMER_ResﬁveToggÀ


153 } 
	ts˘imî_c⁄Êi˘_ªsﬁuti⁄_t
;

156 
	e_s˘imî_evít


158 
	mkSCTIMER_I≈utLowOrM©chEvít
 =

159 (0 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (0 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (0 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

160 
	mkSCTIMER_I≈utRi£OrM©chEvít
 =

161 (0 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (1 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (0 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

162 
	mkSCTIMER_I≈utFÆlOrM©chEvít
 =

163 (0 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (2 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (0 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

164 
	mkSCTIMER_I≈utHighOrM©chEvít
 =

165 (0 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (3 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (0 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

167 
	mkSCTIMER_M©chEvítO∆y
 =

168 (1 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (0 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (0 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

170 
	mkSCTIMER_I≈utLowEvít
 =

171 (2 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (0 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (0 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

172 
	mkSCTIMER_I≈utRi£Evít
 =

173 (2 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (1 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (0 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

174 
	mkSCTIMER_I≈utFÆlEvít
 =

175 (2 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (2 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (0 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

176 
	mkSCTIMER_I≈utHighEvít
 =

177 (2 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (3 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (0 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

179 
	mkSCTIMER_I≈utLowAndM©chEvít
 =

180 (3 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (0 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (0 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

181 
	mkSCTIMER_I≈utRi£AndM©chEvít
 =

182 (3 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (1 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (0 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

183 
	mkSCTIMER_I≈utFÆlAndM©chEvít
 =

184 (3 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (2 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (0 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

185 
	mkSCTIMER_I≈utHighAndM©chEvít
 =

186 (3 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (3 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (0 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

188 
	mkSCTIMER_OuçutLowOrM©chEvít
 =

189 (0 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (0 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (1 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

190 
	mkSCTIMER_OuçutRi£OrM©chEvít
 =

191 (0 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (1 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (1 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

192 
	mkSCTIMER_OuçutFÆlOrM©chEvít
 =

193 (0 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (2 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (1 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

194 
	mkSCTIMER_OuçutHighOrM©chEvít
 =

195 (0 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (3 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (1 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

197 
	mkSCTIMER_OuçutLowEvít
 =

198 (2 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (0 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (1 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

199 
	mkSCTIMER_OuçutRi£Evít
 =

200 (2 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (1 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (1 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

201 
	mkSCTIMER_OuçutFÆlEvít
 =

202 (2 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (2 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (1 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

203 
	mkSCTIMER_OuçutHighEvít
 =

204 (2 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (3 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (1 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

206 
	mkSCTIMER_OuçutLowAndM©chEvít
 =

207 (3 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (0 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (1 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

208 
	mkSCTIMER_OuçutRi£AndM©chEvít
 =

209 (3 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (1 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (1 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

210 
	mkSCTIMER_OuçutFÆlAndM©chEvít
 =

211 (3 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (2 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (1 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
),

212 
	mkSCTIMER_OuçutHighAndM©chEvít
 =

213 (3 << 
SCT_EVENT_CTRL_COMBMODE_SHIFT
Ë+ (3 << 
SCT_EVENT_CTRL_IOCOND_SHIFT
Ë+ (1 << 
SCT_EVENT_CTRL_OUTSEL_SHIFT
)

214 } 
	ts˘imî_evít_t
;

217 (*
	ts˘imî_evít_ˇŒback_t
)();

220 
	e_s˘imî_öãºu±_íabÀ


222 
kSCTIMER_Evít0I¡îru±E«bÀ
 = (1U << 0),

223 
kSCTIMER_Evít1I¡îru±E«bÀ
 = (1U << 1),

224 
kSCTIMER_Evít2I¡îru±E«bÀ
 = (1U << 2),

225 
kSCTIMER_Evít3I¡îru±E«bÀ
 = (1U << 3),

226 
kSCTIMER_Evít4I¡îru±E«bÀ
 = (1U << 4),

227 
kSCTIMER_Evít5I¡îru±E«bÀ
 = (1U << 5),

228 
kSCTIMER_Evít6I¡îru±E«bÀ
 = (1U << 6),

229 
kSCTIMER_Evít7I¡îru±E«bÀ
 = (1U << 7),

230 
kSCTIMER_Evít8I¡îru±E«bÀ
 = (1U << 8),

231 
kSCTIMER_Evít9I¡îru±E«bÀ
 = (1U << 9),

232 
kSCTIMER_Evít10I¡îru±E«bÀ
 = (1U << 10),

233 
kSCTIMER_Evít11I¡îru±E«bÀ
 = (1U << 11),

234 
kSCTIMER_Evít12I¡îru±E«bÀ
 = (1U << 12),

235 } 
	ts˘imî_öãºu±_íabÀ_t
;

238 
	e_s˘imî_°©us_Êags


240 
kSCTIMER_Evít0Fœg
 = (1U << 0),

241 
kSCTIMER_Evít1Fœg
 = (1U << 1),

242 
kSCTIMER_Evít2Fœg
 = (1U << 2),

243 
kSCTIMER_Evít3Fœg
 = (1U << 3),

244 
kSCTIMER_Evít4Fœg
 = (1U << 4),

245 
kSCTIMER_Evít5Fœg
 = (1U << 5),

246 
kSCTIMER_Evít6Fœg
 = (1U << 6),

247 
kSCTIMER_Evít7Fœg
 = (1U << 7),

248 
kSCTIMER_Evít8Fœg
 = (1U << 8),

249 
kSCTIMER_Evít9Fœg
 = (1U << 9),

250 
kSCTIMER_Evít10Fœg
 = (1U << 10),

251 
kSCTIMER_Evít11Fœg
 = (1U << 11),

252 
kSCTIMER_Evít12Fœg
 = (1U << 12),

253 
kSCTIMER_BusEº‹LFœg
 =

254 (1U << 
SCT_CONFLAG_BUSERRL_SHIFT
),

255 
kSCTIMER_BusEº‹HFœg
 =

256 (1U << 
SCT_CONFLAG_BUSERRH_SHIFT
)

257 } 
	ts˘imî_°©us_Êags_t
;

268 
	s_s˘imî_c⁄fig


270 
boﬁ
 
íabÀCou¡îUnify
;

272 
s˘imî_˛ock_mode_t
 
˛ockMode
;

273 
s˘imî_˛ock_£À˘_t
 
˛ockSñe˘
;

274 
boﬁ
 
íabÀBidúe˘i⁄_l
;

276 
boﬁ
 
íabÀBidúe˘i⁄_h
;

280 
uöt8_t
 
¥esˇÀ_l
;

281 
uöt8_t
 
¥esˇÀ_h
;

284 
uöt8_t
 
outInôSèã
;

285 } 
	ts˘imî_c⁄fig_t
;

291 #i‡
	`deföed
(
__˝lu•lus
)

310 
°©us_t
 
	`SCTIMER_Inô
(
SCT_Ty≥
 *
ba£
, c⁄° 
s˘imî_c⁄fig_t
 *
c⁄fig
);

317 
	`SCTIMER_Deöô
(
SCT_Ty≥
 *
ba£
);

335 
	`SCTIMER_GëDeÁu…C⁄fig
(
s˘imî_c⁄fig_t
 *
c⁄fig
);

373 
°©us_t
 
	`SCTIMER_SëupPwm
(
SCT_Ty≥
 *
ba£
,

374 c⁄° 
s˘imî_pwm_sig«l_∑øm_t
 *
pwmP¨ams
,

375 
s˘imî_pwm_mode_t
 
mode
,

376 
uöt32_t
 
pwmFªq_Hz
,

377 
uöt32_t
 
§cClock_Hz
,

378 
uöt32_t
 *
evít
);

389 
	`SCTIMER_Upd©ePwmDutycy˛e
(
SCT_Ty≥
 *
ba£
, 
s˘imî_out_t
 
ouçut
, 
uöt8_t
 
dutyCy˛ePî˚¡
, 
uöt32_t
 
evít
);

403 
ölöe
 
	`SCTIMER_E«bÀI¡îru±s
(
SCT_Ty≥
 *
ba£
, 
uöt32_t
 
mask
)

405 
ba£
->
EVEN
 |
mask
;

415 
ölöe
 
	`SCTIMER_DißbÀI¡îru±s
(
SCT_Ty≥
 *
ba£
, 
uöt32_t
 
mask
)

417 
ba£
->
EVEN
 &~
mask
;

428 
ölöe
 
uöt32_t
 
	`SCTIMER_GëE«bÀdI¡îru±s
(
SCT_Ty≥
 *
ba£
)

430  (
ba£
->
EVEN
 & 0xFFFFU);

448 
ölöe
 
uöt32_t
 
	`SCTIMER_GëSètusFœgs
(
SCT_Ty≥
 *
ba£
)

450 
uöt32_t
 
°©usFœgs
 = 0;

453 
°©usFœgs
 = (
ba£
->
EVFLAG
 & 0xFFFFU);

456 
°©usFœgs
 |(
ba£
->
CONFLAG
 & (
SCT_CONFLAG_BUSERRL_MASK
 | 
SCT_CONFLAG_BUSERRH_MASK
));

458  
°©usFœgs
;

468 
ölöe
 
	`SCTIMER_CÀ¨SètusFœgs
(
SCT_Ty≥
 *
ba£
, 
uöt32_t
 
mask
)

471 
ba£
->
EVFLAG
 = (
mask
 & 0xFFFFU);

472 
ba£
->
CONFLAG
 = (
mask
 & (
SCT_CONFLAG_BUSERRL_MASK
 | 
SCT_CONFLAG_BUSERRH_MASK
));

489 
ölöe
 
	`SCTIMER_SèπTimî
(
SCT_Ty≥
 *
ba£
, 
s˘imî_cou¡î_t
 
cou¡îtoSèπ
)

492 i‡((
ba£
->
CONFIG
 & 
SCT_CONFIG_UNIFY_MASK
Ë|| (
cou¡îtoSèπ
 =
kSCTIMER_Cou¡î_L
))

494 
ba£
->
CTRL
 &~(
SCT_CTRL_HALT_L_MASK
);

499 
ba£
->
CTRL
 &~(
SCT_CTRL_HALT_H_MASK
);

510 
ölöe
 
	`SCTIMER_St›Timî
(
SCT_Ty≥
 *
ba£
, 
s˘imî_cou¡î_t
 
cou¡îtoSt›
)

513 i‡((
ba£
->
CONFIG
 & 
SCT_CONFIG_UNIFY_MASK
Ë|| (
cou¡îtoSt›
 =
kSCTIMER_Cou¡î_L
))

515 
ba£
->
CTRL
 |(
SCT_CTRL_HALT_L_MASK
);

520 
ba£
->
CTRL
 |(
SCT_CTRL_HALT_H_MASK
);

554 
°©us_t
 
	`SCTIMER_Cª©eAndScheduÀEvít
(
SCT_Ty≥
 *
ba£
,

555 
s˘imî_evít_t
 
howToM⁄ô‹
,

556 
uöt32_t
 
m©chVÆue
,

557 
uöt32_t
 
whichIO
,

558 
s˘imî_cou¡î_t
 
whichCou¡î
,

559 
uöt32_t
 *
evít
);

572 
	`SCTIMER_ScheduÀEvít
(
SCT_Ty≥
 *
ba£
, 
uöt32_t
 
evít
);

586 
°©us_t
 
	`SCTIMER_In¸ó£Sèã
(
SCT_Ty≥
 *
ba£
);

597 
uöt32_t
 
	`SCTIMER_GëCuºítSèã
(
SCT_Ty≥
 *
ba£
);

619 
°©us_t
 
	`SCTIMER_SëupC≠tuªA˘i⁄
(
SCT_Ty≥
 *
ba£
,

620 
s˘imî_cou¡î_t
 
whichCou¡î
,

621 
uöt32_t
 *
ˇ±uªRegi°î
,

622 
uöt32_t
 
evít
);

635 
	`SCTIMER_SëCÆlback
(
SCT_Ty≥
 *
ba£
, 
s˘imî_evít_ˇŒback_t
 
ˇŒback
, 
uöt32_t
 
evít
);

646 
ölöe
 
	`SCTIMER_SëupNextSèãA˘i⁄
(
SCT_Ty≥
 *
ba£
, 
uöt32_t
 
√xtSèã
, uöt32_à
evít
)

648 
uöt32_t
 
ªg
 = 
ba£
->
EVENT
[
evít
].
CTRL
;

650 
ªg
 &~(
SCT_EVENT_CTRL_STATEV_MASK
);

652 
ªg
 |
	`SCT_EVENT_CTRL_STATEV
(
√xtSèã
Ë| 
SCT_EVENT_CTRL_STATELD_MASK
;

654 
ba£
->
EVENT
[
evít
].
CTRL
 = 
ªg
;

666 
ölöe
 
	`SCTIMER_SëupOuçutSëA˘i⁄
(
SCT_Ty≥
 *
ba£
, 
uöt32_t
 
whichIO
, uöt32_à
evít
)

668 
ba£
->
OUT
[
whichIO
].
SET
 |(1U << 
evít
);

680 
ölöe
 
	`SCTIMER_SëupOuçutCÀ¨A˘i⁄
(
SCT_Ty≥
 *
ba£
, 
uöt32_t
 
whichIO
, uöt32_à
evít
)

682 
ba£
->
OUT
[
whichIO
].
CLR
 |(1U << 
evít
);

694 
	`SCTIMER_SëupOuçutToggÀA˘i⁄
(
SCT_Ty≥
 *
ba£
, 
uöt32_t
 
whichIO
, uöt32_à
evít
);

706 
ölöe
 
	`SCTIMER_SëupCou¡îLimôA˘i⁄
(
SCT_Ty≥
 *
ba£
, 
s˘imî_cou¡î_t
 
whichCou¡î
, 
uöt32_t
 
evít
)

709 i‡((
ba£
->
CONFIG
 & 
SCT_CONFIG_UNIFY_MASK
Ë|| (
whichCou¡î
 =
kSCTIMER_Cou¡î_L
))

711 
ba£
->
LIMIT
 |
	`SCT_LIMIT_LIMMSK_L
(1U << 
evít
);

715 
ba£
->
LIMIT
 |
	`SCT_LIMIT_LIMMSK_H
(1U << 
evít
);

729 
ölöe
 
	`SCTIMER_SëupCou¡îSt›A˘i⁄
(
SCT_Ty≥
 *
ba£
, 
s˘imî_cou¡î_t
 
whichCou¡î
, 
uöt32_t
 
evít
)

732 i‡((
ba£
->
CONFIG
 & 
SCT_CONFIG_UNIFY_MASK
Ë|| (
whichCou¡î
 =
kSCTIMER_Cou¡î_L
))

734 
ba£
->
STOP
 |
	`SCT_STOP_STOPMSK_L
(1U << 
evít
);

738 
ba£
->
STOP
 |
	`SCT_STOP_STOPMSK_H
(1U << 
evít
);

752 
ölöe
 
	`SCTIMER_SëupCou¡îSèπA˘i⁄
(
SCT_Ty≥
 *
ba£
, 
s˘imî_cou¡î_t
 
whichCou¡î
, 
uöt32_t
 
evít
)

755 i‡((
ba£
->
CONFIG
 & 
SCT_CONFIG_UNIFY_MASK
Ë|| (
whichCou¡î
 =
kSCTIMER_Cou¡î_L
))

757 
ba£
->
START
 |
	`SCT_START_STARTMSK_L
(1U << 
evít
);

761 
ba£
->
START
 |
	`SCT_START_STARTMSK_H
(1U << 
evít
);

777 
ölöe
 
	`SCTIMER_SëupCou¡îHÆtA˘i⁄
(
SCT_Ty≥
 *
ba£
, 
s˘imî_cou¡î_t
 
whichCou¡î
, 
uöt32_t
 
evít
)

780 i‡((
ba£
->
CONFIG
 & 
SCT_CONFIG_UNIFY_MASK
Ë|| (
whichCou¡î
 =
kSCTIMER_Cou¡î_L
))

782 
ba£
->
HALT
 |
	`SCT_HALT_HALTMSK_L
(1U << 
evít
);

786 
ba£
->
HALT
 |
	`SCT_HALT_HALTMSK_H
(1U << 
evít
);

799 
ölöe
 
	`SCTIMER_SëupDmaTriggîA˘i⁄
(
SCT_Ty≥
 *
ba£
, 
uöt32_t
 
dmaNumbî
, uöt32_à
evít
)

801 i‡(
dmaNumbî
 == 0)

803 
ba£
->
DMA0REQUEST
 |(1U << 
evít
);

807 
ba£
->
DMA1REQUEST
 |(1U << 
evít
);

816 
	`SCTIMER_EvítH™dÀIRQ
(
SCT_Ty≥
 *
ba£
);

820 #i‡
	`deföed
(
__˝lu•lus
)

821 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_spi.c

35 
	~"f¶_•i.h
"

36 
	~"f¶_Êexcomm.h
"

42 
	#SPI_FIFO_DEPTH
(
ba£
Ë((((ba£)->
FIFOCFG
 & 
SPI_FIFOCFG_SIZE_MASK
Ë>> 
SPI_FIFOCFG_SIZE_SHIFT
Ë<< 3)

	)

46 
	#SPI_COUNT_TO_BYTES
(
d©aWidth
, 
cou¡
Ë((cou¡Ë<< ((d©aWidthË>> 3U))

	)

47 
	#SPI_BYTES_TO_COUNT
(
d©aWidth
, 
byãs
Ë((byãsË>> ((d©aWidthË>> 3U))

	)

48 
	#SPI_SSELPOL_MASK
 ((
SPI_CFG_SPOL0_MASK
Ë| (
SPI_CFG_SPOL1_MASK
Ë| (
SPI_CFG_SPOL2_MASK
Ë| (
SPI_CFG_SPOL3_MASK
))

	)

54 
•i_c⁄fig_t
 
	gg_c⁄figs
[
FSL_FEATURE_SOC_SPI_COUNT
] = {(
•i_d©a_width_t
)0};

57 c⁄° 
uöt32_t
 
	gs_•iBa£Addrs
[
FSL_FEATURE_SOC_SPI_COUNT
] = 
SPI_BASE_ADDRS
;

60 c⁄° 
IRQn_Ty≥
 
	gs_•iIRQ
[] = 
SPI_IRQS
;

63 vﬁ©ûê
uöt8_t
 
	gs_dummyD©a
[
FSL_FEATURE_SOC_SPI_COUNT
] = {0};

69 
uöt32_t
 
	$SPI_GëIn°™˚
(
SPI_Ty≥
 *
ba£
)

71 
i
;

73 
i
 = 0; i < 
FSL_FEATURE_SOC_SPI_COUNT
; i++)

75 i‡((
uöt32_t
)
ba£
 =
s_•iBa£Addrs
[
i
])

77  
i
;

81 
	`as£π
(
Ál£
);

83 
	}
}

85 
	$SPI_SëDummyD©a
(
SPI_Ty≥
 *
ba£
, 
uöt8_t
 
dummyD©a
)

87 
uöt32_t
 
ö°™˚
 = 
	`SPI_GëIn°™˚
(
ba£
);

88 
s_dummyD©a
[
ö°™˚
] = 
dummyD©a
;

89 
	}
}

91 *
	$SPI_GëC⁄fig
(
SPI_Ty≥
 *
ba£
)

93 
öt32_t
 
ö°™˚
;

94 
ö°™˚
 = 
	`SPI_GëIn°™˚
(
ba£
);

95 i‡(
ö°™˚
 < 0)

97  
NULL
;

99  &
g_c⁄figs
[
ö°™˚
];

100 
	}
}

102 
	$SPI_Ma°îGëDeÁu…C⁄fig
(
•i_ma°î_c⁄fig_t
 *
c⁄fig
)

104 
	`as£π
(
NULL
 !
c⁄fig
);

106 
c⁄fig
->
íabÀLo›back
 = 
Ál£
;

107 
c⁄fig
->
íabÀMa°î
 = 
åue
;

108 
c⁄fig
->
pﬁ¨ôy
 = 
kSPI_ClockPﬁ¨ôyA˘iveHigh
;

109 
c⁄fig
->
pha£
 = 
kSPI_ClockPha£Fú°Edge
;

110 
c⁄fig
->
dúe˘i⁄
 = 
kSPI_MsbFú°
;

111 
c⁄fig
->
baudR©e_Bps
 = 500000U;

112 
c⁄fig
->
d©aWidth
 = 
kSPI_D©a8Bôs
;

113 
c⁄fig
->
s£lNum
 = 
kSPI_S£l0
;

114 
c⁄fig
->
txW©îm¨k
 = 
kSPI_TxFifo0
;

115 
c⁄fig
->
rxW©îm¨k
 = 
kSPI_RxFifo1
;

116 
c⁄fig
->
s£lPﬁ
 = 
kSPI_SpﬁA˘iveAŒLow
;

117 
c⁄fig
->
dñayC⁄fig
.
¥eDñay
 = 0U;

118 
c⁄fig
->
dñayC⁄fig
.
po°Dñay
 = 0U;

119 
c⁄fig
->
dñayC⁄fig
.
‰ameDñay
 = 0U;

120 
c⁄fig
->
dñayC⁄fig
.
å™s„rDñay
 = 0U;

121 
	}
}

123 
°©us_t
 
	$SPI_Ma°îInô
(
SPI_Ty≥
 *
ba£
, c⁄° 
•i_ma°î_c⁄fig_t
 *
c⁄fig
, 
uöt32_t
 
§cClock_Hz
)

125 
öt32_t
 
ªsu…
 = 0, 
ö°™˚
 = 0;

126 
uöt32_t
 
tmp
;

129 
	`as£π
(!((
NULL
 =
ba£
Ë|| (NULL =
c⁄fig
Ë|| (0 =
§cClock_Hz
)));

130 i‡((
NULL
 =
ba£
Ë|| (NULL =
c⁄fig
Ë|| (0 =
§cClock_Hz
))

132  
kSètus_InvÆidArgumít
;

136 
ªsu…
 = 
	`FLEXCOMM_Inô
(
ba£
, 
FLEXCOMM_PERIPH_SPI
);

137 
	`as£π
(
kSètus_Suc˚ss
 =
ªsu…
);

138 i‡(
kSètus_Suc˚ss
 !
ªsu…
)

140  
ªsu…
;

144 
ªsu…
 = 
	`SPI_Ma°îSëBaud
(
ba£
, 
c⁄fig
->
baudR©e_Bps
, 
§cClock_Hz
);

145 i‡(
kSètus_Suc˚ss
 !
ªsu…
)

147  
ªsu…
;

150 
ö°™˚
 = 
	`SPI_GëIn°™˚
(
ba£
);

151 
	`as£π
(
ö°™˚
 >= 0);

154 
tmp
 = 
ba£
->
CFG
;

155 
tmp
 &~(
SPI_CFG_MASTER_MASK
 | 
SPI_CFG_LSBF_MASK
 | 
SPI_CFG_CPHA_MASK
 | 
SPI_CFG_CPOL_MASK
 | 
SPI_CFG_LOOP_MASK
 |

156 
SPI_CFG_ENABLE_MASK
 | 
SPI_SSELPOL_MASK
);

158 
tmp
 |
	`SPI_CFG_CPHA
(
c⁄fig
->
pha£
);

160 
tmp
 |
	`SPI_CFG_CPOL
(
c⁄fig
->
pﬁ¨ôy
);

162 
tmp
 |
	`SPI_CFG_LSBF
(
c⁄fig
->
dúe˘i⁄
);

164 
tmp
 |
	`SPI_CFG_MASTER
(1);

166 
tmp
 |
	`SPI_CFG_LOOP
(
c⁄fig
->
íabÀLo›back
);

168 
tmp
 |((
uöt32_t
)
c⁄fig
->
s£lPﬁ
 & (
SPI_SSELPOL_MASK
));

169 
ba£
->
CFG
 = 
tmp
;

172 
g_c⁄figs
[
ö°™˚
].
d©aWidth
 = 
c⁄fig
->dataWidth;

173 
g_c⁄figs
[
ö°™˚
].
s£lNum
 = 
c⁄fig
->sselNum;

175 
ba£
->
FIFOCFG
 |
SPI_FIFOCFG_EMPTYTX_MASK
 | 
SPI_FIFOCFG_EMPTYRX_MASK
;

176 
ba£
->
FIFOCFG
 |
SPI_FIFOCFG_ENABLETX_MASK
 | 
SPI_FIFOCFG_ENABLERX_MASK
;

178 
tmp
 = 
ba£
->
FIFOTRIG
 & (~(
SPI_FIFOTRIG_RXLVL_MASK
 | 
SPI_FIFOTRIG_TXLVL_MASK
));

179 
tmp
 |
	`SPI_FIFOTRIG_TXLVL
(
c⁄fig
->
txW©îm¨k
Ë| 
	`SPI_FIFOTRIG_RXLVL
(c⁄fig->
rxW©îm¨k
);

181 
tmp
 |
SPI_FIFOTRIG_TXLVLENA_MASK
 | 
SPI_FIFOTRIG_RXLVLENA_MASK
;

183 
ba£
->
FIFOTRIG
 = 
tmp
;

186 
	`SPI_SëTøns„rDñay
(
ba£
, &
c⁄fig
->
dñayC⁄fig
);

188 
	`SPI_SëDummyD©a
(
ba£
, (
uöt8_t
)
SPI_DUMMYDATA
);

190 
	`SPI_E«bÀ
(
ba£
, 
c⁄fig
->
íabÀMa°î
);

191  
kSètus_Suc˚ss
;

192 
	}
}

194 
	$SPI_SœveGëDeÁu…C⁄fig
(
•i_¶ave_c⁄fig_t
 *
c⁄fig
)

196 
	`as£π
(
NULL
 !
c⁄fig
);

198 
c⁄fig
->
íabÀSœve
 = 
åue
;

199 
c⁄fig
->
pﬁ¨ôy
 = 
kSPI_ClockPﬁ¨ôyA˘iveHigh
;

200 
c⁄fig
->
pha£
 = 
kSPI_ClockPha£Fú°Edge
;

201 
c⁄fig
->
dúe˘i⁄
 = 
kSPI_MsbFú°
;

202 
c⁄fig
->
d©aWidth
 = 
kSPI_D©a8Bôs
;

203 
c⁄fig
->
txW©îm¨k
 = 
kSPI_TxFifo0
;

204 
c⁄fig
->
rxW©îm¨k
 = 
kSPI_RxFifo1
;

205 
c⁄fig
->
s£lPﬁ
 = 
kSPI_SpﬁA˘iveAŒLow
;

206 
	}
}

208 
°©us_t
 
	$SPI_SœveInô
(
SPI_Ty≥
 *
ba£
, c⁄° 
•i_¶ave_c⁄fig_t
 *
c⁄fig
)

210 
öt32_t
 
ªsu…
 = 0, 
ö°™˚
;

211 
uöt32_t
 
tmp
;

214 
	`as£π
(!((
NULL
 =
ba£
Ë|| (NULL =
c⁄fig
)));

215 i‡((
NULL
 =
ba£
Ë|| (NULL =
c⁄fig
))

217  
kSètus_InvÆidArgumít
;

220 
ªsu…
 = 
	`FLEXCOMM_Inô
(
ba£
, 
FLEXCOMM_PERIPH_SPI
);

221 
	`as£π
(
kSètus_Suc˚ss
 =
ªsu…
);

222 i‡(
kSètus_Suc˚ss
 !
ªsu…
)

224  
ªsu…
;

227 
ö°™˚
 = 
	`SPI_GëIn°™˚
(
ba£
);

230 
tmp
 = 
ba£
->
CFG
;

231 
tmp
 &~(
SPI_CFG_MASTER_MASK
 | 
SPI_CFG_LSBF_MASK
 | 
SPI_CFG_CPHA_MASK
 | 
SPI_CFG_CPOL_MASK
 | 
SPI_CFG_ENABLE_MASK
 |

232 
SPI_SSELPOL_MASK
);

234 
tmp
 |
	`SPI_CFG_CPHA
(
c⁄fig
->
pha£
);

236 
tmp
 |
	`SPI_CFG_CPOL
(
c⁄fig
->
pﬁ¨ôy
);

238 
tmp
 |
	`SPI_CFG_LSBF
(
c⁄fig
->
dúe˘i⁄
);

240 
tmp
 |((
uöt32_t
)
c⁄fig
->
s£lPﬁ
 & (
SPI_SSELPOL_MASK
));

241 
ba£
->
CFG
 = 
tmp
;

244 
g_c⁄figs
[
ö°™˚
].
d©aWidth
 = 
c⁄fig
->dataWidth;

246 
ba£
->
FIFOCFG
 |
SPI_FIFOCFG_EMPTYTX_MASK
 | 
SPI_FIFOCFG_EMPTYRX_MASK
;

247 
ba£
->
FIFOCFG
 |
SPI_FIFOCFG_ENABLETX_MASK
 | 
SPI_FIFOCFG_ENABLERX_MASK
;

249 
tmp
 = 
ba£
->
FIFOTRIG
 & (~(
SPI_FIFOTRIG_RXLVL_MASK
 | 
SPI_FIFOTRIG_TXLVL_MASK
));

250 
tmp
 |
	`SPI_FIFOTRIG_TXLVL
(
c⁄fig
->
txW©îm¨k
Ë| 
	`SPI_FIFOTRIG_RXLVL
(c⁄fig->
rxW©îm¨k
);

252 
tmp
 |
SPI_FIFOTRIG_TXLVLENA_MASK
 | 
SPI_FIFOTRIG_RXLVLENA_MASK
;

254 
ba£
->
FIFOTRIG
 = 
tmp
;

256 
	`SPI_SëDummyD©a
(
ba£
, (
uöt8_t
)
SPI_DUMMYDATA
);

258 
	`SPI_E«bÀ
(
ba£
, 
c⁄fig
->
íabÀSœve
);

259  
kSètus_Suc˚ss
;

260 
	}
}

262 
	$SPI_Deöô
(
SPI_Ty≥
 *
ba£
)

265 
	`as£π
(
NULL
 !
ba£
);

267 
ba£
->
FIFOINTENCLR
 = 
SPI_FIFOINTENCLR_TXERR_MASK
 | 
SPI_FIFOINTENCLR_RXERR_MASK
 | 
SPI_FIFOINTENCLR_TXLVL_MASK
 |

268 
SPI_FIFOINTENCLR_RXLVL_MASK
;

269 
ba£
->
FIFOCFG
 &~(
SPI_FIFOCFG_DMATX_MASK
 | 
SPI_FIFOCFG_DMARX_MASK
);

270 
ba£
->
CFG
 &~(
SPI_CFG_ENABLE_MASK
);

271 
	}
}

273 
	$SPI_E«bÀTxDMA
(
SPI_Ty≥
 *
ba£
, 
boﬁ
 
íabÀ
)

275 i‡(
íabÀ
)

277 
ba£
->
FIFOCFG
 |
SPI_FIFOCFG_DMATX_MASK
;

281 
ba£
->
FIFOCFG
 &~
SPI_FIFOCFG_DMATX_MASK
;

283 
	}
}

285 
	$SPI_E«bÀRxDMA
(
SPI_Ty≥
 *
ba£
, 
boﬁ
 
íabÀ
)

287 i‡(
íabÀ
)

289 
ba£
->
FIFOCFG
 |
SPI_FIFOCFG_DMARX_MASK
;

293 
ba£
->
FIFOCFG
 &~
SPI_FIFOCFG_DMARX_MASK
;

295 
	}
}

297 
°©us_t
 
	$SPI_Ma°îSëBaud
(
SPI_Ty≥
 *
ba£
, 
uöt32_t
 
baudøã_Bps
, uöt32_à
§cClock_Hz
)

299 
uöt32_t
 
tmp
;

302 
	`as£π
(!((
NULL
 =
ba£
Ë|| (0 =
baudøã_Bps
Ë|| (0 =
§cClock_Hz
)));

303 i‡((
NULL
 =
ba£
Ë|| (0 =
baudøã_Bps
Ë|| (0 =
§cClock_Hz
))

305  
kSètus_InvÆidArgumít
;

309 
tmp
 = (
§cClock_Hz
 / 
baudøã_Bps
) - 1;

310 i‡(
tmp
 > 0xFFFF)

312  
kSètus_SPI_BaudøãNŸSuµ‹t
;

314 
ba£
->
DIV
 &~
SPI_DIV_DIVVAL_MASK
;

315 
ba£
->
DIV
 |
	`SPI_DIV_DIVVAL
(
tmp
);

316  
kSètus_Suc˚ss
;

317 
	}
}

319 
	$SPI_WrôeD©a
(
SPI_Ty≥
 *
ba£
, 
uöt16_t
 
d©a
, 
uöt32_t
 
c⁄figFœgs
)

321 
uöt32_t
 
c⁄åﬁ
 = 0;

322 
öt32_t
 
ö°™˚
;

325 
	`as£π
(
NULL
 !
ba£
);

327 
ö°™˚
 = 
	`SPI_GëIn°™˚
(
ba£
);

328 
	`as£π
(!(
ö°™˚
 < 0));

329 i‡(
ö°™˚
 < 0)

335 
c⁄åﬁ
 |
	`SPI_FIFOWR_LEN
(
g_c⁄figs
[
ö°™˚
].
d©aWidth
);

337 
c⁄åﬁ
 |(
SPI_DEASSERT_ALL
 & (~
	`SPI_DEASSERTNUM_SSEL
(
g_c⁄figs
[
ö°™˚
].
s£lNum
)));

339 
c⁄åﬁ
 |(
c⁄figFœgs
 & 
SPI_FIFOWR_FLAGS_MASK
);

341 
	`as£π
(!(
c⁄åﬁ
 & 0xFFFF));

342 
ba£
->
FIFOWR
 = 
d©a
 | 
c⁄åﬁ
;

343 
	}
}

345 
°©us_t
 
	$SPI_Ma°îTøns„rCª©eH™dÀ
(
SPI_Ty≥
 *
ba£
,

346 
•i_ma°î_h™dÀ_t
 *
h™dÀ
,

347 
•i_ma°î_ˇŒback_t
 
ˇŒback
,

348 *
u£rD©a
)

350 
öt32_t
 
ö°™˚
 = 0;

353 
	`as£π
(!(
NULL
 =
ba£
));

354 i‡(
NULL
 =
ba£
)

356  
kSètus_InvÆidArgumít
;

359 
	`as£π
(!(
NULL
 =
h™dÀ
));

360 i‡(
NULL
 =
h™dÀ
)

362  
kSètus_InvÆidArgumít
;

365 
ö°™˚
 = 
	`SPI_GëIn°™˚
(
ba£
);

366 
	`as£π
(!(
ö°™˚
 < 0));

367 i‡(
ö°™˚
 < 0)

369  
kSètus_InvÆidArgumít
;

372 
	`mem£t
(
h™dÀ
, 0, (*handle));

374 i‡(
ba£
->
CFG
 & 
SPI_CFG_MASTER_MASK
)

376 
	`FLEXCOMM_SëIRQH™dÀr
(
ba£
, (
Êexcomm_úq_h™dÀr_t
)(
uöçå_t
)
SPI_Ma°îTøns„rH™dÀIRQ
, 
h™dÀ
);

380 
	`FLEXCOMM_SëIRQH™dÀr
(
ba£
, (
Êexcomm_úq_h™dÀr_t
)(
uöçå_t
)
SPI_SœveTøns„rH™dÀIRQ
, 
h™dÀ
);

383 
h™dÀ
->
d©aWidth
 = 
g_c⁄figs
[
ö°™˚
].dataWidth;

385 
h™dÀ
->
s£lNum
 = 
g_c⁄figs
[
ö°™˚
].sselNum;

386 
h™dÀ
->
txW©îm¨k
 = (
•i_txfifo_w©îm¨k_t
)
	`SPI_FIFOTRIG_TXLVL_GET
(
ba£
);

387 
h™dÀ
->
rxW©îm¨k
 = (
•i_rxfifo_w©îm¨k_t
)
	`SPI_FIFOTRIG_RXLVL_GET
(
ba£
);

388 
h™dÀ
->
ˇŒback
 = callback;

389 
h™dÀ
->
u£rD©a
 = userData;

392 
	`E«bÀIRQ
(
s_•iIRQ
[
ö°™˚
]);

394  
kSètus_Suc˚ss
;

395 
	}
}

397 
°©us_t
 
	$SPI_Ma°îTøns„rBlockög
(
SPI_Ty≥
 *
ba£
, 
•i_å™s„r_t
 *
x„r
)

399 
öt32_t
 
ö°™˚
;

400 
uöt32_t
 
tx_˘æ
 = 0, 
œ°_˘æ
 = 0;

401 
uöt32_t
 
tmp32
, 
rxRemaöögByãs
, 
txRemaöögByãs
, 
d©aWidth
;

402 
uöt32_t
 
toRe˚iveCou¡
 = 0;

403 
uöt8_t
 *
txD©a
, *
rxD©a
;

404 
uöt32_t
 
fifoDïth
;

407 
	`as£π
(!((
NULL
 =
ba£
Ë|| (NULL =
x„r
Ë|| ((NULL =x„r->
txD©a
Ë&& (NULL =x„r->
rxD©a
))));

408 i‡((
NULL
 =
ba£
Ë|| (NULL =
x„r
Ë|| ((NULL =x„r->
txD©a
Ë&& (NULL =x„r->
rxD©a
)))

410  
kSètus_InvÆidArgumít
;

413 
fifoDïth
 = 
	`SPI_FIFO_DEPTH
(
ba£
);

414 
txD©a
 = 
x„r
->txData;

415 
rxD©a
 = 
x„r
->rxData;

416 
txRemaöögByãs
 = 
txD©a
 ? 
x„r
->
d©aSize
 : 0;

417 
rxRemaöögByãs
 = 
rxD©a
 ? 
x„r
->
d©aSize
 : 0;

419 
ö°™˚
 = 
	`SPI_GëIn°™˚
(
ba£
);

420 
	`as£π
(
ö°™˚
 >= 0);

421 
d©aWidth
 = 
g_c⁄figs
[
ö°™˚
].dataWidth;

424 
	`as£π
(!((
d©aWidth
 > 
kSPI_D©a8Bôs
Ë&& (
x„r
->
d©aSize
 & 0x1)));

425 i‡((
d©aWidth
 > 
kSPI_D©a8Bôs
Ë&& (
x„r
->
d©aSize
 & 0x1))

427  
kSètus_InvÆidArgumít
;

431 
ba£
->
FIFOCFG
 |
SPI_FIFOCFG_EMPTYTX_MASK
 | 
SPI_FIFOCFG_EMPTYRX_MASK
;

432 
ba£
->
FIFOSTAT
 |
SPI_FIFOSTAT_TXERR_MASK
 | 
SPI_FIFOSTAT_RXERR_MASK
;

434 
tx_˘æ
 |(
SPI_DEASSERT_ALL
 & (~
	`SPI_DEASSERTNUM_SSEL
(
g_c⁄figs
[
ö°™˚
].
s£lNum
)));

436 
tx_˘æ
 |
	`SPI_FIFOWR_LEN
(
d©aWidth
);

438 
tx_˘æ
 |(
x„r
->
c⁄figFœgs
 & (
uöt32_t
)
kSPI_FømeDñay
) ? (uint32_t)kSPI_FrameDelay : 0;

440 
œ°_˘æ
 |(
x„r
->
c⁄figFœgs
 & (
uöt32_t
)
kSPI_FømeAs£π
) ? (uint32_t)kSPI_FrameAssert : 0;

442 
txRemaöögByãs
 || 
rxRemaöögByãs
 || 
toRe˚iveCou¡
)

445 i‡(
ba£
->
FIFOSTAT
 & 
SPI_FIFOSTAT_RXNOTEMPTY_MASK
)

447 
tmp32
 = 
ba£
->
FIFORD
;

449 i‡(
rxRemaöögByãs
)

451 *(
rxD©a
++Ë
tmp32
;

452 
rxRemaöögByãs
--;

454 i‡(
d©aWidth
 > 8)

456 *(
rxD©a
++Ë
tmp32
 >> 8;

457 
rxRemaöögByãs
--;

461 
toRe˚iveCou¡
 -= 1;

464 i‡((
ba£
->
FIFOSTAT
 & 
SPI_FIFOSTAT_TXNOTFULL_MASK
Ë&& (
toRe˚iveCou¡
 < 
fifoDïth
) &&

465 ((
txRemaöögByãs
Ë|| (
rxRemaöögByãs
 >
	`SPI_COUNT_TO_BYTES
(
d©aWidth
, 
toRe˚iveCou¡
 + 1))))

468 i‡(
txRemaöögByãs
)

470 
tmp32
 = *(
txD©a
++);

471 
txRemaöögByãs
--;

473 i‡(
d©aWidth
 > 8)

475 
tmp32
 |((
uöt32_t
)(*(
txD©a
++))) << 8U;

476 
txRemaöögByãs
--;

478 i‡(!
txRemaöögByãs
)

480 
tx_˘æ
 |
œ°_˘æ
;

485 
tmp32
 = ((
uöt32_t
)
s_dummyD©a
[
ö°™˚
] << 8U | (s_dummyData[instance]));

487 i‡(
rxRemaöögByãs
 =
	`SPI_COUNT_TO_BYTES
(
d©aWidth
, 
toRe˚iveCou¡
 + 1))

489 
tx_˘æ
 |
œ°_˘æ
;

493 
tmp32
 = 
tx_˘æ
 |Åmp32;

494 
ba£
->
FIFOWR
 = 
tmp32
;

495 
toRe˚iveCou¡
 += 1;

499 !(
ba£
->
FIFOSTAT
 & 
SPI_FIFOSTAT_TXEMPTY_MASK
))

502  
kSètus_Suc˚ss
;

503 
	}
}

505 
°©us_t
 
	$SPI_Ma°îTøns„rN⁄Blockög
(
SPI_Ty≥
 *
ba£
, 
•i_ma°î_h™dÀ_t
 *
h™dÀ
, 
•i_å™s„r_t
 *
x„r
)

508 
	`as£π
(

509 !((
NULL
 =
ba£
Ë|| (NULL =
h™dÀ
Ë|| (NULL =
x„r
Ë|| ((NULL =x„r->
txD©a
Ë&& (NULL =x„r->
rxD©a
))));

510 i‡((
NULL
 =
ba£
Ë|| (NULL =
h™dÀ
Ë|| (NULL =
x„r
Ë|| ((NULL =x„r->
txD©a
Ë&& (NULL =x„r->
rxD©a
)))

512  
kSètus_InvÆidArgumít
;

516 
	`as£π
(!((
h™dÀ
->
d©aWidth
 > 
kSPI_D©a8Bôs
Ë&& (
x„r
->
d©aSize
 & 0x1)));

517 i‡((
h™dÀ
->
d©aWidth
 > 
kSPI_D©a8Bôs
Ë&& (
x„r
->
d©aSize
 & 0x1))

519  
kSètus_InvÆidArgumít
;

523 i‡(
h™dÀ
->
°©e
 =
kSètus_SPI_Busy
)

525  
kSètus_SPI_Busy
;

529 
h™dÀ
->
txD©a
 = 
x„r
->txData;

530 
h™dÀ
->
rxD©a
 = 
x„r
->rxData;

532 
h™dÀ
->
txRemaöögByãs
 = 
x„r
->
txD©a
 ? x„r->
d©aSize
 : 0;

533 
h™dÀ
->
rxRemaöögByãs
 = 
x„r
->
rxD©a
 ? x„r->
d©aSize
 : 0;

534 
h™dÀ
->
tŸÆByãCou¡
 = 
x„r
->
d©aSize
;

536 
h™dÀ
->
toRe˚iveCou¡
 = 0;

537 
h™dÀ
->
c⁄figFœgs
 = 
x„r
->configFlags;

539 
h™dÀ
->
°©e
 = 
kSètus_SPI_Busy
;

541 
ba£
->
FIFOCFG
 |
SPI_FIFOCFG_EMPTYTX_MASK
 | 
SPI_FIFOCFG_EMPTYRX_MASK
;

542 
ba£
->
FIFOSTAT
 |
SPI_FIFOSTAT_TXERR_MASK
 | 
SPI_FIFOSTAT_RXERR_MASK
;

544 
ba£
->
FIFOINTENSET
 |
SPI_FIFOINTENSET_TXLVL_MASK
 | 
SPI_FIFOINTENSET_RXLVL_MASK
;

545  
kSètus_Suc˚ss
;

546 
	}
}

548 
°©us_t
 
	$SPI_Ma°îHÆfDu∂exTøns„rBlockög
(
SPI_Ty≥
 *
ba£
, 
•i_hÆf_du∂ex_å™s„r_t
 *
x„r
)

550 
	`as£π
(
x„r
);

552 
•i_å™s„r_t
 
ãmpX„r
 = {0};

553 
°©us_t
 
°©us
;

555 i‡(
x„r
->
isTønsmôFú°
)

557 
ãmpX„r
.
txD©a
 = 
x„r
->txData;

558 
ãmpX„r
.
rxD©a
 = 
NULL
;

559 
ãmpX„r
.
d©aSize
 = 
x„r
->
txD©aSize
;

563 
ãmpX„r
.
txD©a
 = 
NULL
;

564 
ãmpX„r
.
rxD©a
 = 
x„r
->rxData;

565 
ãmpX„r
.
d©aSize
 = 
x„r
->
rxD©aSize
;

568 i‡(
x„r
->
isPcsAs£πInTøns„r
)

570 
ãmpX„r
.
c⁄figFœgs
 = (
x„r
->c⁄figFœgsË& (
uöt32_t
)(~
kSPI_FømeAs£π
);

574 
ãmpX„r
.
c⁄figFœgs
 = (
x„r
->c⁄figFœgsË| 
kSPI_FømeAs£π
;

577 
°©us
 = 
	`SPI_Ma°îTøns„rBlockög
(
ba£
, &
ãmpX„r
);

579 i‡(
°©us
 !
kSètus_Suc˚ss
)

581  
°©us
;

584 i‡(
x„r
->
isTønsmôFú°
)

586 
ãmpX„r
.
txD©a
 = 
NULL
;

587 
ãmpX„r
.
rxD©a
 = 
x„r
->rxData;

588 
ãmpX„r
.
d©aSize
 = 
x„r
->
rxD©aSize
;

592 
ãmpX„r
.
txD©a
 = 
x„r
->txData;

593 
ãmpX„r
.
rxD©a
 = 
NULL
;

594 
ãmpX„r
.
d©aSize
 = 
x„r
->
txD©aSize
;

596 
ãmpX„r
.
c⁄figFœgs
 = 
x„r
->configFlags;

599 
°©us
 = 
	`SPI_Ma°îTøns„rBlockög
(
ba£
, &
ãmpX„r
);

601  
°©us
;

602 
	}
}

604 
°©us_t
 
	$SPI_Ma°îHÆfDu∂exTøns„rN⁄Blockög
(
SPI_Ty≥
 *
ba£
,

605 
•i_ma°î_h™dÀ_t
 *
h™dÀ
,

606 
•i_hÆf_du∂ex_å™s„r_t
 *
x„r
)

608 
	`as£π
(
x„r
);

609 
	`as£π
(
h™dÀ
);

610 
•i_å™s„r_t
 
ãmpX„r
 = {0};

611 
°©us_t
 
°©us
;

613 i‡(
x„r
->
isTønsmôFú°
)

615 
ãmpX„r
.
txD©a
 = 
x„r
->txData;

616 
ãmpX„r
.
rxD©a
 = 
NULL
;

617 
ãmpX„r
.
d©aSize
 = 
x„r
->
txD©aSize
;

621 
ãmpX„r
.
txD©a
 = 
NULL
;

622 
ãmpX„r
.
rxD©a
 = 
x„r
->rxData;

623 
ãmpX„r
.
d©aSize
 = 
x„r
->
rxD©aSize
;

626 i‡(
x„r
->
isPcsAs£πInTøns„r
)

628 
ãmpX„r
.
c⁄figFœgs
 = (
x„r
->c⁄figFœgsË& (
uöt32_t
)(~
kSPI_FømeAs£π
);

632 
ãmpX„r
.
c⁄figFœgs
 = (
x„r
->c⁄figFœgsË| 
kSPI_FømeAs£π
;

635 
°©us
 = 
	`SPI_Ma°îTøns„rBlockög
(
ba£
, &
ãmpX„r
);

636 i‡(
°©us
 !
kSètus_Suc˚ss
)

638  
°©us
;

641 i‡(
x„r
->
isTønsmôFú°
)

643 
ãmpX„r
.
txD©a
 = 
NULL
;

644 
ãmpX„r
.
rxD©a
 = 
x„r
->rxData;

645 
ãmpX„r
.
d©aSize
 = 
x„r
->
rxD©aSize
;

649 
ãmpX„r
.
txD©a
 = 
x„r
->txData;

650 
ãmpX„r
.
rxD©a
 = 
NULL
;

651 
ãmpX„r
.
d©aSize
 = 
x„r
->
txD©aSize
;

653 
ãmpX„r
.
c⁄figFœgs
 = 
x„r
->configFlags;

655 
°©us
 = 
	`SPI_Ma°îTøns„rN⁄Blockög
(
ba£
, 
h™dÀ
, &
ãmpX„r
);

657  
°©us
;

658 
	}
}

660 
°©us_t
 
	$SPI_Ma°îTøns„rGëCou¡
(
SPI_Ty≥
 *
ba£
, 
•i_ma°î_h™dÀ_t
 *
h™dÀ
, 
size_t
 *
cou¡
)

662 
	`as£π
(
NULL
 !
h™dÀ
);

664 i‡(!
cou¡
)

666  
kSètus_InvÆidArgumít
;

670 i‡(
h™dÀ
->
°©e
 !
kSètus_SPI_Busy
)

672 *
cou¡
 = 0;

673  
kSètus_NoTøns„rInProgªss
;

676 *
cou¡
 = 
h™dÀ
->
tŸÆByãCou¡
 - h™dÀ->
rxRemaöögByãs
;

677  
kSètus_Suc˚ss
;

678 
	}
}

680 
	$SPI_Ma°îTøns„rAb‹t
(
SPI_Ty≥
 *
ba£
, 
•i_ma°î_h™dÀ_t
 *
h™dÀ
)

682 
	`as£π
(
NULL
 !
h™dÀ
);

685 
ba£
->
FIFOINTENSET
 &~(
SPI_FIFOINTENSET_TXLVL_MASK
 | 
SPI_FIFOINTENSET_RXLVL_MASK
);

687 
ba£
->
FIFOCFG
 |
SPI_FIFOCFG_EMPTYTX_MASK
 | 
SPI_FIFOCFG_EMPTYRX_MASK
;

689 
h™dÀ
->
°©e
 = 
kSètus_SPI_IdÀ
;

690 
h™dÀ
->
txRemaöögByãs
 = 0;

691 
h™dÀ
->
rxRemaöögByãs
 = 0;

692 
	}
}

694 
	$SPI_Tøns„rH™dÀIRQI¡î«l
(
SPI_Ty≥
 *
ba£
, 
•i_ma°î_h™dÀ_t
 *
h™dÀ
)

696 
uöt32_t
 
tx_˘æ
 = 0, 
œ°_˘æ
 = 0, 
tmp32
;

697 
boﬁ
 
lo›C⁄töue
;

698 
uöt32_t
 
fifoDïth
;

700 
uöt32_t
 
ö°™˚
 = 
	`SPI_GëIn°™˚
(
ba£
);

703 
	`as£π
((
NULL
 !
ba£
Ë&& (NULL !
h™dÀ
Ë&& ((NULL !h™dÀ->
txD©a
Ë|| (NULL !h™dÀ->
rxD©a
)));

705 
fifoDïth
 = 
	`SPI_FIFO_DEPTH
(
ba£
);

707 
tx_˘æ
 |(
SPI_DEASSERT_ALL
 & 
	`SPI_ASSERTNUM_SSEL
(
h™dÀ
->
s£lNum
));

709 
tx_˘æ
 |
	`SPI_FIFOWR_LEN
(
h™dÀ
->
d©aWidth
);

711 
tx_˘æ
 |(
h™dÀ
->
c⁄figFœgs
 & (
uöt32_t
)
kSPI_FømeDñay
) ? (uint32_t)kSPI_FrameDelay : 0;

713 
œ°_˘æ
 |(
h™dÀ
->
c⁄figFœgs
 & (
uöt32_t
)
kSPI_FømeAs£π
) ? (uint32_t)kSPI_FrameAssert : 0;

716 
lo›C⁄töue
 = 
Ál£
;

719 i‡(
ba£
->
FIFOSTAT
 & 
SPI_FIFOSTAT_RXNOTEMPTY_MASK
)

721 
tmp32
 = 
ba£
->
FIFORD
;

723 i‡(
h™dÀ
->
rxRemaöögByãs
)

726 *(
h™dÀ
->
rxD©a
++Ë
tmp32
;

727 
h™dÀ
->
rxRemaöögByãs
--;

729 i‡(
h™dÀ
->
d©aWidth
 > 
kSPI_D©a8Bôs
)

731 *(
h™dÀ
->
rxD©a
++Ë
tmp32
 >> 8;

732 
h™dÀ
->
rxRemaöögByãs
--;

736 
h™dÀ
->
toRe˚iveCou¡
 -= 1;

737 
lo›C⁄töue
 = 
åue
;

744 i‡((
ba£
->
FIFOSTAT
 & 
SPI_FIFOSTAT_TXNOTFULL_MASK
Ë&& (
h™dÀ
->
toRe˚iveCou¡
 < 
fifoDïth
) &&

745 ((
h™dÀ
->
txRemaöögByãs
) ||

746 (
h™dÀ
->
rxRemaöögByãs
 >
	`SPI_COUNT_TO_BYTES
(h™dÀ->
d©aWidth
, h™dÀ->
toRe˚iveCou¡
 + 1))))

749 i‡(
h™dÀ
->
txRemaöögByãs
)

752 
tmp32
 = *(
h™dÀ
->
txD©a
++);

753 
h™dÀ
->
txRemaöögByãs
--;

755 i‡(
h™dÀ
->
d©aWidth
 > 
kSPI_D©a8Bôs
)

757 
tmp32
 |((
uöt32_t
)(*(
h™dÀ
->
txD©a
++))) << 8U;

758 
h™dÀ
->
txRemaöögByãs
--;

761 i‡(!
h™dÀ
->
txRemaöögByãs
)

763 
tx_˘æ
 |
œ°_˘æ
;

768 
tmp32
 = ((
uöt32_t
)
s_dummyD©a
[
ö°™˚
] << 8U | (s_dummyData[instance]));

770 i‡(
h™dÀ
->
rxRemaöögByãs
 =
	`SPI_COUNT_TO_BYTES
(h™dÀ->
d©aWidth
, h™dÀ->
toRe˚iveCou¡
 + 1))

772 
tx_˘æ
 |
œ°_˘æ
;

776 
tmp32
 = 
tx_˘æ
 |Åmp32;

777 
ba£
->
FIFOWR
 = 
tmp32
;

779 
h™dÀ
->
toRe˚iveCou¡
 += 1;

780 
lo›C⁄töue
 = 
åue
;

782 } 
lo›C⁄töue
);

783 
	}
}

785 
	$SPI_Ma°îTøns„rH™dÀIRQ
(
SPI_Ty≥
 *
ba£
, 
•i_ma°î_h™dÀ_t
 *
h™dÀ
)

787 
	`as£π
((
NULL
 !
ba£
Ë&& (NULL !
h™dÀ
));

803 i‡((
h™dÀ
->
txRemaöögByãs
Ë|| (h™dÀ->
rxRemaöögByãs
Ë|| (h™dÀ->
toRe˚iveCou¡
))

806 
	`SPI_Tøns„rH™dÀIRQI¡î«l
(
ba£
, 
h™dÀ
);

809 i‡((!
h™dÀ
->
txRemaöögByãs
Ë&& (!h™dÀ->
rxRemaöögByãs
Ë&& (!h™dÀ->
toRe˚iveCou¡
))

811 
ba£
->
FIFOTRIG
 = ba£->FIFOTRIG & (~
SPI_FIFOTRIG_TXLVL_MASK
);

812 
ba£
->
FIFOINTENSET
 |
SPI_FIFOINTENSET_TXLVL_MASK
;

816 
uöt32_t
 
rxRemaöögCou¡
 = 
	`SPI_BYTES_TO_COUNT
(
h™dÀ
->
d©aWidth
, h™dÀ->
rxRemaöögByãs
);

819 i‡((!
h™dÀ
->
txRemaöögByãs
Ë&& (
rxRemaöögCou¡
 <h™dÀ->
toRe˚iveCou¡
))

821 
ba£
->
FIFOINTENCLR
 = 
SPI_FIFOINTENCLR_TXLVL_MASK
;

825 i‡(
rxRemaöögCou¡
 == 0)

827 i‡((
h™dÀ
->
txRemaöögByãs
 =0Ë&& (h™dÀ->
toRe˚iveCou¡
 != 0) &&

828 (
h™dÀ
->
toRe˚iveCou¡
 < 
	`SPI_FIFOTRIG_RXLVL_GET
(
ba£
) + 1))

830 
ba£
->
FIFOTRIG
 =

831 (
ba£
->
FIFOTRIG
 & (~
SPI_FIFOTRIG_RXLVL_MASK
)Ë| 
	`SPI_FIFOTRIG_RXLVL
(
h™dÀ
->
toRe˚iveCou¡
 - 1);

837 i‡(
rxRemaöögCou¡
 < (
	`SPI_FIFOTRIG_RXLVL_GET
(
ba£
) + 1))

839 
ba£
->
FIFOTRIG
 =

840 (
ba£
->
FIFOTRIG
 & (~
SPI_FIFOTRIG_RXLVL_MASK
)Ë| 
	`SPI_FIFOTRIG_RXLVL
(
rxRemaöögCou¡
 - 1);

848 
ba£
->
FIFOINTENCLR
 = 
SPI_FIFOINTENCLR_RXLVL_MASK
 | 
SPI_FIFOINTENCLR_TXLVL_MASK
;

849 
ba£
->
FIFOTRIG
 = (ba£->FIFOTRIG & (~(
SPI_FIFOTRIG_RXLVL_MASK
 | SPI_FIFOTRIG_RXLVL_MASK))) |

850 
	`SPI_FIFOTRIG_RXLVL
(
h™dÀ
->
rxW©îm¨k
Ë| 
	`SPI_FIFOTRIG_TXLVL
(h™dÀ->
txW©îm¨k
);

852 
h™dÀ
->
°©e
 = 
kSètus_SPI_IdÀ
;

853 i‡(
h™dÀ
->
ˇŒback
)

855 (
h™dÀ
->
ˇŒback
)(
ba£
, h™dÀ, h™dÀ->
°©e
, h™dÀ->
u£rD©a
);

858 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_spi.h

34 #i‚de‡
_FSL_SPI_H_


35 
	#_FSL_SPI_H_


	)

37 
	~"f¶_comm⁄.h
"

38 
	~"f¶_Êexcomm.h
"

54 
	#FSL_SPI_DRIVER_VERSION
 (
	`MAKE_VERSION
(2, 0, 1))

	)

57 #i‚de‡
SPI_DUMMYDATA


59 
	#SPI_DUMMYDATA
 (0xFFU)

	)

62 
	#SPI_DATA
(
n
Ë(((
uöt32_t
)“)Ë& 0xFFFF)

	)

63 
	#SPI_CTRLMASK
 (0xFFFF0000)

	)

65 
	#SPI_ASSERTNUM_SSEL
(
n
Ë((~(1U << (“Ë+ 16))Ë& 0xF0000)

	)

66 
	#SPI_DEASSERTNUM_SSEL
(
n
Ë(1U << (“Ë+ 16))

	)

67 
	#SPI_DEASSERT_ALL
 (0xF0000)

	)

69 
	#SPI_FIFOWR_FLAGS_MASK
 (~(
SPI_DEASSERT_ALL
 | 
SPI_FIFOWR_TXDATA_MASK
 | 
SPI_FIFOWR_LEN_MASK
))

	)

71 
	#SPI_FIFOTRIG_TXLVL_GET
(
ba£
Ë(((ba£)->
FIFOTRIG
 & 
SPI_FIFOTRIG_TXLVL_MASK
Ë>> 
SPI_FIFOTRIG_TXLVL_SHIFT
)

	)

72 
	#SPI_FIFOTRIG_RXLVL_GET
(
ba£
Ë(((ba£)->
FIFOTRIG
 & 
SPI_FIFOTRIG_RXLVL_MASK
Ë>> 
SPI_FIFOTRIG_RXLVL_SHIFT
)

	)

75 
	e_•i_x„r_›ti⁄


77 
	mkSPI_FømeDñay
 = (
SPI_FIFOWR_EOF_MASK
),

78 
	mkSPI_FømeAs£π
 = (
SPI_FIFOWR_EOT_MASK
),

79 } 
	t•i_x„r_›ti⁄_t
;

82 
	e_•i_shi·_dúe˘i⁄


84 
	mkSPI_MsbFú°
 = 0U,

85 
	mkSPI_LsbFú°
 = 1U

86 } 
	t•i_shi·_dúe˘i⁄_t
;

89 
	e_•i_˛ock_pﬁ¨ôy


91 
	mkSPI_ClockPﬁ¨ôyA˘iveHigh
 = 0x0U,

92 
	mkSPI_ClockPﬁ¨ôyA˘iveLow


93 } 
	t•i_˛ock_pﬁ¨ôy_t
;

96 
	e_•i_˛ock_pha£


98 
	mkSPI_ClockPha£Fú°Edge
 = 0x0U,

100 
	mkSPI_ClockPha£Sec⁄dEdge


102 } 
	t•i_˛ock_pha£_t
;

105 
	e_•i_txfifo_w©îm¨k


107 
	mkSPI_TxFifo0
 = 0,

108 
	mkSPI_TxFifo1
 = 1,

109 
	mkSPI_TxFifo2
 = 2,

110 
	mkSPI_TxFifo3
 = 3,

111 
	mkSPI_TxFifo4
 = 4,

112 
	mkSPI_TxFifo5
 = 5,

113 
	mkSPI_TxFifo6
 = 6,

114 
	mkSPI_TxFifo7
 = 7,

115 } 
	t•i_txfifo_w©îm¨k_t
;

118 
	e_•i_rxfifo_w©îm¨k


120 
	mkSPI_RxFifo1
 = 0,

121 
	mkSPI_RxFifo2
 = 1,

122 
	mkSPI_RxFifo3
 = 2,

123 
	mkSPI_RxFifo4
 = 3,

124 
	mkSPI_RxFifo5
 = 4,

125 
	mkSPI_RxFifo6
 = 5,

126 
	mkSPI_RxFifo7
 = 6,

127 
	mkSPI_RxFifo8
 = 7,

128 } 
	t•i_rxfifo_w©îm¨k_t
;

131 
	e_•i_d©a_width


133 
	mkSPI_D©a4Bôs
 = 3,

134 
	mkSPI_D©a5Bôs
 = 4,

135 
	mkSPI_D©a6Bôs
 = 5,

136 
	mkSPI_D©a7Bôs
 = 6,

137 
	mkSPI_D©a8Bôs
 = 7,

138 
	mkSPI_D©a9Bôs
 = 8,

139 
	mkSPI_D©a10Bôs
 = 9,

140 
	mkSPI_D©a11Bôs
 = 10,

141 
	mkSPI_D©a12Bôs
 = 11,

142 
	mkSPI_D©a13Bôs
 = 12,

143 
	mkSPI_D©a14Bôs
 = 13,

144 
	mkSPI_D©a15Bôs
 = 14,

145 
	mkSPI_D©a16Bôs
 = 15,

146 } 
	t•i_d©a_width_t
;

149 
	e_•i_s£l


151 
	mkSPI_S£l0
 = 0,

152 
	mkSPI_S£l1
 = 1,

153 
	mkSPI_S£l2
 = 2,

154 
	mkSPI_S£l3
 = 3,

155 } 
	t•i_s£l_t
;

158 
	e_•i_•ﬁ


160 
	mkSPI_Spﬁ0A˘iveHigh
 = 
SPI_CFG_SPOL0
(1),

161 
	mkSPI_Spﬁ1A˘iveHigh
 = 
SPI_CFG_SPOL1
(1),

162 
	mkSPI_Spﬁ2A˘iveHigh
 = 
SPI_CFG_SPOL2
(1),

163 
	mkSPI_Spﬁ3A˘iveHigh
 = 
SPI_CFG_SPOL3
(1),

164 
	mkSPI_SpﬁA˘iveAŒHigh
 =

165 (
kSPI_Spﬁ0A˘iveHigh
 | 
kSPI_Spﬁ1A˘iveHigh
 | 
kSPI_Spﬁ2A˘iveHigh
 | 
kSPI_Spﬁ3A˘iveHigh
),

166 
	mkSPI_SpﬁA˘iveAŒLow
 = 0,

167 } 
	t•i_•ﬁ_t
;

176 
	s_•i_dñay_c⁄fig


178 
uöt8_t
 
	m¥eDñay
;

179 
uöt8_t
 
	mpo°Dñay
;

180 
uöt8_t
 
	m‰ameDñay
;

181 
uöt8_t
 
	må™s„rDñay
;

182 } 
	t•i_dñay_c⁄fig_t
;

185 
	s_•i_ma°î_c⁄fig


187 
boﬁ
 
	míabÀLo›back
;

188 
boﬁ
 
	míabÀMa°î
;

189 
•i_˛ock_pﬁ¨ôy_t
 
	mpﬁ¨ôy
;

190 
•i_˛ock_pha£_t
 
	mpha£
;

191 
•i_shi·_dúe˘i⁄_t
 
	mdúe˘i⁄
;

192 
uöt32_t
 
	mbaudR©e_Bps
;

193 
•i_d©a_width_t
 
	md©aWidth
;

194 
•i_s£l_t
 
	ms£lNum
;

195 
•i_•ﬁ_t
 
	ms£lPﬁ
;

196 
•i_txfifo_w©îm¨k_t
 
	mtxW©îm¨k
;

197 
•i_rxfifo_w©îm¨k_t
 
	mrxW©îm¨k
;

198 
•i_dñay_c⁄fig_t
 
	mdñayC⁄fig
;

199 } 
	t•i_ma°î_c⁄fig_t
;

202 
	s_•i_¶ave_c⁄fig


204 
boﬁ
 
	míabÀSœve
;

205 
•i_˛ock_pﬁ¨ôy_t
 
	mpﬁ¨ôy
;

206 
•i_˛ock_pha£_t
 
	mpha£
;

207 
•i_shi·_dúe˘i⁄_t
 
	mdúe˘i⁄
;

208 
•i_d©a_width_t
 
	md©aWidth
;

209 
•i_•ﬁ_t
 
	ms£lPﬁ
;

210 
•i_txfifo_w©îm¨k_t
 
	mtxW©îm¨k
;

211 
•i_rxfifo_w©îm¨k_t
 
	mrxW©îm¨k
;

212 } 
	t•i_¶ave_c⁄fig_t
;

215 
	e_•i_°©us


217 
	mkSètus_SPI_Busy
 = 
MAKE_STATUS
(
kSètusGroup_LPC_SPI
, 0),

218 
	mkSètus_SPI_IdÀ
 = 
MAKE_STATUS
(
kSètusGroup_LPC_SPI
, 1),

219 
	mkSètus_SPI_Eº‹
 = 
MAKE_STATUS
(
kSètusGroup_LPC_SPI
, 2),

220 
	mkSètus_SPI_BaudøãNŸSuµ‹t
 =

221 
MAKE_STATUS
(
kSètusGroup_LPC_SPI
, 3)

225 
	e_•i_öãºu±_íabÀ


227 
	mkSPI_RxLvlIrq
 = 
SPI_FIFOINTENSET_RXLVL_MASK
,

228 
	mkSPI_TxLvlIrq
 = 
SPI_FIFOINTENSET_TXLVL_MASK
,

232 
	e_•i_°©usÊags


234 
	mkSPI_TxEm±yFœg
 = 
SPI_FIFOSTAT_TXEMPTY_MASK
,

235 
	mkSPI_TxNŸFuŒFœg
 = 
SPI_FIFOSTAT_TXNOTFULL_MASK
,

236 
	mkSPI_RxNŸEm±yFœg
 = 
SPI_FIFOSTAT_RXNOTEMPTY_MASK
,

237 
	mkSPI_RxFuŒFœg
 = 
SPI_FIFOSTAT_RXFULL_MASK
,

241 
	s_•i_å™s„r


243 
uöt8_t
 *
	mtxD©a
;

244 
uöt8_t
 *
	mrxD©a
;

245 
uöt32_t
 
	mc⁄figFœgs
;

246 
size_t
 
	md©aSize
;

247 } 
	t•i_å™s„r_t
;

250 
	s_•i_hÆf_du∂ex_å™s„r


252 
uöt8_t
 *
	mtxD©a
;

253 
uöt8_t
 *
	mrxD©a
;

254 
size_t
 
	mtxD©aSize
;

255 
size_t
 
	mrxD©aSize
;

256 
uöt32_t
 
	mc⁄figFœgs
;

257 
boﬁ
 
	misPcsAs£πInTøns„r
;

259 
boﬁ
 
	misTønsmôFú°
;

260 } 
	t•i_hÆf_du∂ex_å™s„r_t
;

263 
	s_•i_c⁄fig


265 
•i_d©a_width_t
 
	md©aWidth
;

266 
•i_s£l_t
 
	ms£lNum
;

267 } 
	t•i_c⁄fig_t
;

270 
_•i_ma°î_h™dÀ
 
	t•i_ma°î_h™dÀ_t
;

273 
•i_ma°î_h™dÀ_t
 
	t•i_¶ave_h™dÀ_t
;

276 (*
	t•i_ma°î_ˇŒback_t
)(
	tSPI_Ty≥
 *
	tba£
, 
	t•i_ma°î_h™dÀ_t
 *
	th™dÀ
, 
	t°©us_t
 
	t°©us
, *
	tu£rD©a
);

279 (*
	t•i_¶ave_ˇŒback_t
)(
	tSPI_Ty≥
 *
	tba£
, 
	t•i_¶ave_h™dÀ_t
 *
	th™dÀ
, 
	t°©us_t
 
	t°©us
, *
	tu£rD©a
);

282 
	s_•i_ma°î_h™dÀ


284 
uöt8_t
 *vﬁ©ûê
txD©a
;

285 
uöt8_t
 *vﬁ©ûê
rxD©a
;

286 vﬁ©ûê
size_t
 
txRemaöögByãs
;

287 vﬁ©ûê
size_t
 
rxRemaöögByãs
;

288 vﬁ©ûê
size_t
 
toRe˚iveCou¡
;

289 
size_t
 
tŸÆByãCou¡
;

290 vﬁ©ûê
uöt32_t
 
°©e
;

291 
•i_ma°î_ˇŒback_t
 
ˇŒback
;

292 *
u£rD©a
;

293 
uöt8_t
 
d©aWidth
;

294 
uöt8_t
 
s£lNum
;

295 
uöt32_t
 
c⁄figFœgs
;

296 
•i_txfifo_w©îm¨k_t
 
txW©îm¨k
;

297 
•i_rxfifo_w©îm¨k_t
 
rxW©îm¨k
;

300 #i‡
	`deföed
(
__˝lu•lus
)

308 
uöt32_t
 
	`SPI_GëIn°™˚
(
SPI_Ty≥
 *
ba£
);

330 
	`SPI_Ma°îGëDeÁu…C⁄fig
(
•i_ma°î_c⁄fig_t
 *
c⁄fig
);

350 
°©us_t
 
	`SPI_Ma°îInô
(
SPI_Ty≥
 *
ba£
, c⁄° 
•i_ma°î_c⁄fig_t
 *
c⁄fig
, 
uöt32_t
 
§cClock_Hz
);

365 
	`SPI_SœveGëDeÁu…C⁄fig
(
•i_¶ave_c⁄fig_t
 *
c⁄fig
);

387 
°©us_t
 
	`SPI_SœveInô
(
SPI_Ty≥
 *
ba£
, c⁄° 
•i_¶ave_c⁄fig_t
 *
c⁄fig
);

397 
	`SPI_Deöô
(
SPI_Ty≥
 *
ba£
);

404 
ölöe
 
	`SPI_E«bÀ
(
SPI_Ty≥
 *
ba£
, 
boﬁ
 
íabÀ
)

406 i‡(
íabÀ
)

408 
ba£
->
CFG
 |
SPI_CFG_ENABLE_MASK
;

412 
ba£
->
CFG
 &~
SPI_CFG_ENABLE_MASK
;

429 
ölöe
 
uöt32_t
 
	`SPI_GëSètusFœgs
(
SPI_Ty≥
 *
ba£
)

431 
	`as£π
(
NULL
 !
ba£
);

432  
ba£
->
FIFOSTAT
;

450 
ölöe
 
	`SPI_E«bÀI¡îru±s
(
SPI_Ty≥
 *
ba£
, 
uöt32_t
 
úqs
)

452 
	`as£π
(
NULL
 !
ba£
);

453 
ba£
->
FIFOINTENSET
 = 
úqs
;

464 
ölöe
 
	`SPI_DißbÀI¡îru±s
(
SPI_Ty≥
 *
ba£
, 
uöt32_t
 
úqs
)

466 
	`as£π
(
NULL
 !
ba£
);

467 
ba£
->
FIFOINTENCLR
 = 
úqs
;

483 
	`SPI_E«bÀTxDMA
(
SPI_Ty≥
 *
ba£
, 
boﬁ
 
íabÀ
);

491 
	`SPI_E«bÀRxDMA
(
SPI_Ty≥
 *
ba£
, 
boﬁ
 
íabÀ
);

507 
°©us_t
 
	`SPI_Ma°îSëBaud
(
SPI_Ty≥
 *
ba£
, 
uöt32_t
 
baudøã_Bps
, uöt32_à
§cClock_Hz
);

516 
	`SPI_WrôeD©a
(
SPI_Ty≥
 *
ba£
, 
uöt16_t
 
d©a
, 
uöt32_t
 
c⁄figFœgs
);

524 
ölöe
 
uöt32_t
 
	`SPI_RódD©a
(
SPI_Ty≥
 *
ba£
)

526 
	`as£π
(
NULL
 !
ba£
);

527  
ba£
->
FIFORD
;

536 
ölöe
 
	`SPI_SëTøns„rDñay
(
SPI_Ty≥
 *
ba£
, c⁄° 
•i_dñay_c⁄fig_t
 *
c⁄fig
)

538 
	`as£π
(
NULL
 !
ba£
);

539 
	`as£π
(
NULL
 !
c⁄fig
);

540 
ba£
->
DLY
 = (
	`SPI_DLY_PRE_DELAY
(
c⁄fig
->
¥eDñay
Ë| 
	`SPI_DLY_POST_DELAY
(c⁄fig->
po°Dñay
) |

541 
	`SPI_DLY_FRAME_DELAY
(
c⁄fig
->
‰ameDñay
Ë| 
	`SPI_DLY_TRANSFER_DELAY
(c⁄fig->
å™s„rDñay
));

550 
	`SPI_SëDummyD©a
(
SPI_Ty≥
 *
ba£
, 
uöt8_t
 
dummyD©a
);

570 
°©us_t
 
	`SPI_Ma°îTøns„rCª©eH™dÀ
(
SPI_Ty≥
 *
ba£
,

571 
•i_ma°î_h™dÀ_t
 *
h™dÀ
,

572 
•i_ma°î_ˇŒback_t
 
ˇŒback
,

573 *
u£rD©a
);

583 
°©us_t
 
	`SPI_Ma°îTøns„rBlockög
(
SPI_Ty≥
 *
ba£
, 
•i_å™s„r_t
 *
x„r
);

595 
°©us_t
 
	`SPI_Ma°îTøns„rN⁄Blockög
(
SPI_Ty≥
 *
ba£
, 
•i_ma°î_h™dÀ_t
 *
h™dÀ
, 
•i_å™s„r_t
 *
x„r
);

608 
°©us_t
 
	`SPI_Ma°îHÆfDu∂exTøns„rBlockög
(
SPI_Ty≥
 *
ba£
, 
•i_hÆf_du∂ex_å™s„r_t
 *
x„r
);

623 
°©us_t
 
	`SPI_Ma°îHÆfDu∂exTøns„rN⁄Blockög
(
SPI_Ty≥
 *
ba£
,

624 
•i_ma°î_h™dÀ_t
 *
h™dÀ
,

625 
•i_hÆf_du∂ex_å™s„r_t
 *
x„r
);

637 
°©us_t
 
	`SPI_Ma°îTøns„rGëCou¡
(
SPI_Ty≥
 *
ba£
, 
•i_ma°î_h™dÀ_t
 *
h™dÀ
, 
size_t
 *
cou¡
);

647 
	`SPI_Ma°îTøns„rAb‹t
(
SPI_Ty≥
 *
ba£
, 
•i_ma°î_h™dÀ_t
 *
h™dÀ
);

655 
	`SPI_Ma°îTøns„rH™dÀIRQ
(
SPI_Ty≥
 *
ba£
, 
•i_ma°î_h™dÀ_t
 *
h™dÀ
);

668 
ölöe
 
°©us_t
 
	`SPI_SœveTøns„rCª©eH™dÀ
(
SPI_Ty≥
 *
ba£
,

669 
•i_¶ave_h™dÀ_t
 *
h™dÀ
,

670 
•i_¶ave_ˇŒback_t
 
ˇŒback
,

671 *
u£rD©a
)

673  
	`SPI_Ma°îTøns„rCª©eH™dÀ
(
ba£
, 
h™dÀ
, 
ˇŒback
, 
u£rD©a
);

688 
ölöe
 
°©us_t
 
	`SPI_SœveTøns„rN⁄Blockög
(
SPI_Ty≥
 *
ba£
, 
•i_¶ave_h™dÀ_t
 *
h™dÀ
, 
•i_å™s„r_t
 *
x„r
)

690  
	`SPI_Ma°îTøns„rN⁄Blockög
(
ba£
, 
h™dÀ
, 
x„r
);

703 
ölöe
 
°©us_t
 
	`SPI_SœveTøns„rGëCou¡
(
SPI_Ty≥
 *
ba£
, 
•i_¶ave_h™dÀ_t
 *
h™dÀ
, 
size_t
 *
cou¡
)

705  
	`SPI_Ma°îTøns„rGëCou¡
(
ba£
, (
•i_ma°î_h™dÀ_t
 *)
h™dÀ
, 
cou¡
);

716 
ölöe
 
	`SPI_SœveTøns„rAb‹t
(
SPI_Ty≥
 *
ba£
, 
•i_¶ave_h™dÀ_t
 *
h™dÀ
)

718 
	`SPI_Ma°îTøns„rAb‹t
(
ba£
, (
•i_ma°î_h™dÀ_t
 *)
h™dÀ
);

727 
ölöe
 
	`SPI_SœveTøns„rH™dÀIRQ
(
SPI_Ty≥
 *
ba£
, 
•i_¶ave_h™dÀ_t
 *
h™dÀ
)

729 
	`SPI_Ma°îTøns„rH™dÀIRQ
(
ba£
, 
h™dÀ
);

734 #i‡
	`deföed
(
__˝lu•lus
)

735 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_spi_dma.c

35 
	~"f¶_•i_dma.h
"

41 
	s_•i_dma_¥iv©e_h™dÀ


43 
SPI_Ty≥
 *
	mba£
;

44 
•i_dma_h™dÀ_t
 *
	mh™dÀ
;

45 } 
	t•i_dma_¥iv©e_h™dÀ_t
;

48 
	e_•i_dma_°©es_t


50 
	mkSPI_IdÀ
 = 0x0,

51 
	mkSPI_Busy


54 
	s_•i_dma_txdummy


56 
uöt32_t
 
	mœ°W‹d
;

57 
uöt32_t
 
	mw‹d
;

58 } 
	t•i_dma_txdummy_t
;

61 
•i_dma_¥iv©e_h™dÀ_t
 
	gs_dmaPriv©eH™dÀ
[
FSL_FEATURE_SOC_SPI_COUNT
];

71 *
SPI_GëC⁄fig
(
SPI_Ty≥
 *
ba£
);

79 
SPI_TxDMACÆlback
(
dma_h™dÀ_t
 *
h™dÀ
, *
u£rD©a
, 
boﬁ
 
å™s„rD⁄e
, 
uöt32_t
 
ötmode
);

87 
SPI_RxDMACÆlback
(
dma_h™dÀ_t
 *
h™dÀ
, *
u£rD©a
, 
boﬁ
 
å™s„rD⁄e
, 
uöt32_t
 
ötmode
);

92 #i‡
deföed
(
__ICCARM__
)

93 #¥agm®
d©a_Æignmít
 = 4

94 
•i_dma_txdummy_t
 
	gs_txDummy
[
FSL_FEATURE_SOC_SPI_COUNT
] = {0};

95 #ñi‡
deföed
(
__CC_ARM
)

96 
__©åibuã__
((
	$Æig√d
(4))Ë
•i_dma_txdummy_t
 
s_txDummy
[
FSL_FEATURE_SOC_SPI_COUNT
] = {0
	}
};

97 #ñi‡
deföed
(
__GNUC__
)

98 
__©åibuã__
((
	$Æig√d
(4))Ë
•i_dma_txdummy_t
 
s_txDummy
[
FSL_FEATURE_SOC_SPI_COUNT
] = {0
	}
};

101 #i‡
deföed
(
__ICCARM__
)

102 #¥agm®
d©a_Æignmít
 = 4

103 
uöt16_t
 
	gs_rxDummy
;

104 
uöt32_t
 
	gs_txLa°W‹d
[
FSL_FEATURE_SOC_SPI_COUNT
];

105 #ñi‡
deföed
(
__CC_ARM
)

106 
__©åibuã__
((
	$Æig√d
(4))Ë
uöt16_t
 
s_rxDummy
;

107 
	`__©åibuã__
((
	$Æig√d
(4))Ë
uöt32_t
 
s_txLa°W‹d
[
FSL_FEATURE_SOC_SPI_COUNT
];

108 #ñi‡
	`deföed
(
__GNUC__
)

109 
	`__©åibuã__
((
	$Æig√d
(4))Ë
uöt16_t
 
s_rxDummy
;

110 
	`__©åibuã__
((
	$Æig√d
(4))Ë
uöt32_t
 
s_txLa°W‹d
[
FSL_FEATURE_SOC_SPI_COUNT
];

113 #i‡
	`deföed
(
__ICCARM__
)

114 #¥agm®
d©a_Æignmít
 = 16

115 
dma_des¸ùt‹_t
 
s_•i_des¸ùt‹_èbÀ
[
FSL_FEATURE_SOC_SPI_COUNT
] = {0
	}
};

116 #ñi‡
deföed
(
__CC_ARM
)

117 
__©åibuã__
((
	$Æig√d
(16))Ë
dma_des¸ùt‹_t
 
s_•i_des¸ùt‹_èbÀ
[
FSL_FEATURE_SOC_SPI_COUNT
] = {0
	}
};

118 #ñi‡
deföed
(
__GNUC__
)

119 
__©åibuã__
((
	$Æig√d
(16))Ë
dma_des¸ùt‹_t
 
s_•i_des¸ùt‹_èbÀ
[
FSL_FEATURE_SOC_SPI_COUNT
] = {0
	}
};

123 vﬁ©ûê
uöt8_t
 
s_dummyD©a
[];

128 
	$X„rToFifoWR
(
•i_å™s„r_t
 *
x„r
, 
uöt32_t
 *
fifowr
)

130 *
fifowr
 |
x„r
->
c⁄figFœgs
 & (
uöt32_t
)
kSPI_FømeDñay
 ? (uint32_t)kSPI_FrameDelay : 0;

131 *
fifowr
 |
x„r
->
c⁄figFœgs
 & (
uöt32_t
)
kSPI_FømeAs£π
 ? (uint32_t)kSPI_FrameAssert : 0;

132 
	}
}

134 
	$SpiC⁄figToFifoWR
(
•i_c⁄fig_t
 *
c⁄fig
, 
uöt32_t
 *
fifowr
)

136 *
fifowr
 |(
SPI_DEASSERT_ALL
 & (~
	`SPI_DEASSERTNUM_SSEL
(
c⁄fig
->
s£lNum
)));

138 *
fifowr
 |
	`SPI_FIFOWR_LEN
(
c⁄fig
->
d©aWidth
);

139 
	}
}

141 
	$Pª∑ªTxLa°W‹d
(
•i_å™s„r_t
 *
x„r
, 
uöt32_t
 *
txLa°W‹d
, 
•i_c⁄fig_t
 *
c⁄fig
)

143 i‡(
c⁄fig
->
d©aWidth
 > 
kSPI_D©a8Bôs
)

145 *
txLa°W‹d
 = (((
uöt32_t
)
x„r
->
txD©a
[x„r->
d©aSize
 - 1] << 8U) | (xfer->txData[xfer->dataSize - 2]));

149 *
txLa°W‹d
 = 
x„r
->
txD©a
[x„r->
d©aSize
 - 1];

151 
	`X„rToFifoWR
(
x„r
, 
txLa°W‹d
);

152 
	`SpiC⁄figToFifoWR
(
c⁄fig
, 
txLa°W‹d
);

153 
	}
}

155 
	$SPI_SëupDummy
(
SPI_Ty≥
 *
ba£
, 
•i_dma_txdummy_t
 *
dummy
, 
•i_å™s„r_t
 *
x„r
, 
•i_c⁄fig_t
 *
•i_c⁄fig_p
)

157 
uöt32_t
 
ö°™˚
 = 
	`SPI_GëIn°™˚
(
ba£
);

158 
dummy
->
w‹d
 = ((
uöt32_t
)
s_dummyD©a
[
ö°™˚
] << 8U | s_dummyData[instance]);

159 
dummy
->
œ°W‹d
 = ((
uöt32_t
)
s_dummyD©a
[
ö°™˚
] << 8U | s_dummyData[instance]);

160 
	`X„rToFifoWR
(
x„r
, &
dummy
->
w‹d
);

161 
	`X„rToFifoWR
(
x„r
, &
dummy
->
œ°W‹d
);

162 
	`SpiC⁄figToFifoWR
(
•i_c⁄fig_p
, &
dummy
->
w‹d
);

163 
	`SpiC⁄figToFifoWR
(
•i_c⁄fig_p
, &
dummy
->
œ°W‹d
);

165 
dummy
->
w‹d
 &(
uöt32_t
)(~
kSPI_FømeAs£π
);

166 
	}
}

168 
°©us_t
 
	$SPI_Ma°îTøns„rCª©eH™dÀDMA
(
SPI_Ty≥
 *
ba£
,

169 
•i_dma_h™dÀ_t
 *
h™dÀ
,

170 
•i_dma_ˇŒback_t
 
ˇŒback
,

171 *
u£rD©a
,

172 
dma_h™dÀ_t
 *
txH™dÀ
,

173 
dma_h™dÀ_t
 *
rxH™dÀ
)

175 
öt32_t
 
ö°™˚
 = 0;

178 
	`as£π
(!(
NULL
 =
ba£
));

179 i‡(
NULL
 =
ba£
)

181  
kSètus_InvÆidArgumít
;

184 
	`as£π
(!(
NULL
 =
h™dÀ
));

185 i‡(
NULL
 =
h™dÀ
)

187  
kSètus_InvÆidArgumít
;

190 
ö°™˚
 = 
	`SPI_GëIn°™˚
(
ba£
);

192 
	`mem£t
(
h™dÀ
, 0, (*handle));

194 
h™dÀ
->
txH™dÀ
 =ÅxHandle;

195 
h™dÀ
->
rxH™dÀ
 =ÑxHandle;

196 
h™dÀ
->
ˇŒback
 = callback;

197 
h™dÀ
->
u£rD©a
 = userData;

200 
h™dÀ
->
°©e
 = 
kSPI_IdÀ
;

203 
s_dmaPriv©eH™dÀ
[
ö°™˚
].
ba£
 = base;

204 
s_dmaPriv©eH™dÀ
[
ö°™˚
].
h™dÀ
 = handle;

207 
	`DMA_SëCÆlback
(
h™dÀ
->
txH™dÀ
, 
SPI_TxDMACÆlback
, &
s_dmaPriv©eH™dÀ
[
ö°™˚
]);

208 
	`DMA_SëCÆlback
(
h™dÀ
->
rxH™dÀ
, 
SPI_RxDMACÆlback
, &
s_dmaPriv©eH™dÀ
[
ö°™˚
]);

210  
kSètus_Suc˚ss
;

211 
	}
}

213 
°©us_t
 
	$SPI_Ma°îTøns„rDMA
(
SPI_Ty≥
 *
ba£
, 
•i_dma_h™dÀ_t
 *
h™dÀ
, 
•i_å™s„r_t
 *
x„r
)

215 
öt32_t
 
ö°™˚
;

216 
°©us_t
 
ªsu…
 = 
kSètus_Suc˚ss
;

217 
•i_c⁄fig_t
 *
•i_c⁄fig_p
;

219 
	`as£π
(!((
NULL
 =
h™dÀ
Ë|| (NULL =
x„r
)));

220 i‡((
NULL
 =
h™dÀ
Ë|| (NULL =
x„r
))

222  
kSètus_InvÆidArgumít
;

226 
	`as£π
(!(
x„r
->
d©aSize
 == 0));

227 i‡(
x„r
->
d©aSize
 == 0)

229  
kSètus_InvÆidArgumít
;

232 
ö°™˚
 = 
	`SPI_GëIn°™˚
(
ba£
);

233 
	`as£π
(!(
ö°™˚
 < 0));

234 i‡(
ö°™˚
 < 0)

236  
kSètus_InvÆidArgumít
;

240 i‡(
h™dÀ
->
°©e
 =
kSPI_Busy
)

242  
kSètus_SPI_Busy
;

246 
uöt32_t
 
tmp
;

247 
dma_å™s„r_c⁄fig_t
 
x„rC⁄fig
 = {0};

248 
•i_c⁄fig_p
 = (
•i_c⁄fig_t
 *)
	`SPI_GëC⁄fig
(
ba£
);

250 
h™dÀ
->
°©e
 = 
kSètus_SPI_Busy
;

251 
h™dÀ
->
å™s„rSize
 = 
x„r
->
d©aSize
;

254 
	`SPI_E«bÀRxDMA
(
ba£
, 
åue
);

255 i‡(
x„r
->
rxD©a
)

257 
	`DMA_Pª∑ªTøns„r
(&
x„rC⁄fig
, (*)&
ba£
->
FIFORD
, 
x„r
->
rxD©a
,

258 ((
•i_c⁄fig_p
->
d©aWidth
 > 
kSPI_D©a8Bôs
Ë? ((
uöt16_t
)Ë: ((
uöt8_t
))),

259 
x„r
->
d©aSize
, 
kDMA_PîùhîÆToMem‹y
, 
NULL
);

263 
	`DMA_Pª∑ªTøns„r
(&
x„rC⁄fig
, (*)&
ba£
->
FIFORD
, &
s_rxDummy
,

264 ((
•i_c⁄fig_p
->
d©aWidth
 > 
kSPI_D©a8Bôs
Ë? ((
uöt16_t
)Ë: ((
uöt8_t
))),

265 
x„r
->
d©aSize
, 
kDMA_SèticToSètic
, 
NULL
);

267 
	`DMA_SubmôTøns„r
(
h™dÀ
->
rxH™dÀ
, &
x„rC⁄fig
);

268 
h™dÀ
->
rxInProgªss
 = 
åue
;

269 
	`DMA_SèπTøns„r
(
h™dÀ
->
rxH™dÀ
);

272 
	`SPI_E«bÀTxDMA
(
ba£
, 
åue
);

274 i‡(
x„r
->
c⁄figFœgs
 & 
kSPI_FømeAs£π
)

276 
	`Pª∑ªTxLa°W‹d
(
x„r
, &
s_txLa°W‹d
[
ö°™˚
], 
•i_c⁄fig_p
);

279 i‡(
x„r
->
txD©a
)

284 i‡((
x„r
->
c⁄figFœgs
 & 
kSPI_FømeAs£π
) &&

285 ((
•i_c⁄fig_p
->
d©aWidth
 > 
kSPI_D©a8Bôs
Ë? (
x„r
->
d©aSize
 > 2) : (xfer->dataSize > 1)))

287 
dma_x„rcfg_t
 
tmp_x„rcfg
 = {0};

288 
tmp_x„rcfg
.
vÆid
 = 
åue
;

289 
tmp_x„rcfg
.
swåig
 = 
åue
;

290 
tmp_x„rcfg
.
ötA
 = 
åue
;

291 
tmp_x„rcfg
.
byãWidth
 = (
uöt32_t
);

292 
tmp_x„rcfg
.
§cInc
 = 0;

293 
tmp_x„rcfg
.
d°Inc
 = 0;

294 
tmp_x„rcfg
.
å™s„rCou¡
 = 1;

296 
	`DMA_Cª©eDes¸ùt‹
(&
s_•i_des¸ùt‹_èbÀ
[
ö°™˚
], &
tmp_x„rcfg
, &
s_txLa°W‹d
[instance],

297 (*)&
ba£
->
FIFOWR
, 
NULL
);

299 
	`DMA_Pª∑ªTøns„r
(

300 &
x„rC⁄fig
, 
x„r
->
txD©a
, (*)&
ba£
->
FIFOWR
,

301 ((
•i_c⁄fig_p
->
d©aWidth
 > 
kSPI_D©a8Bôs
Ë? ((
uöt16_t
)Ë: ((
uöt8_t
))),

302 ((
•i_c⁄fig_p
->
d©aWidth
 > 
kSPI_D©a8Bôs
Ë? (
x„r
->
d©aSize
 - 2) : (xfer->dataSize - 1)),

303 
kDMA_Mem‹yToPîùhîÆ
, &
s_•i_des¸ùt‹_èbÀ
[
ö°™˚
]);

305 
x„rC⁄fig
.
x„rcfg
.
ötA
 = 
Ál£
;

306 
x„rC⁄fig
.
x„rcfg
.
ötB
 = 
Ál£
;

307 
ªsu…
 = 
	`DMA_SubmôTøns„r
(
h™dÀ
->
txH™dÀ
, &
x„rC⁄fig
);

308 i‡(
ªsu…
 !
kSètus_Suc˚ss
)

310  
ªsu…
;

315 
	`DMA_Pª∑ªTøns„r
(

316 &
x„rC⁄fig
, 
x„r
->
txD©a
, (*)&
ba£
->
FIFOWR
,

317 ((
•i_c⁄fig_p
->
d©aWidth
 > 
kSPI_D©a8Bôs
Ë? ((
uöt16_t
)Ë: ((
uöt8_t
))),

318 
x„r
->
d©aSize
, 
kDMA_Mem‹yToPîùhîÆ
, 
NULL
);

319 
	`DMA_SubmôTøns„r
(
h™dÀ
->
txH™dÀ
, &
x„rC⁄fig
);

325 
	`SPI_SëupDummy
(
ba£
, &
s_txDummy
[
ö°™˚
], 
x„r
, 
•i_c⁄fig_p
);

326 i‡((
x„r
->
c⁄figFœgs
 & 
kSPI_FømeAs£π
) &&

327 ((
•i_c⁄fig_p
->
d©aWidth
 > 
kSPI_D©a8Bôs
Ë? (
x„r
->
d©aSize
 > 2) : (xfer->dataSize > 1)))

329 
dma_x„rcfg_t
 
tmp_x„rcfg
 = {0};

330 
tmp_x„rcfg
.
vÆid
 = 
åue
;

331 
tmp_x„rcfg
.
swåig
 = 
åue
;

332 
tmp_x„rcfg
.
ötA
 = 
åue
;

333 
tmp_x„rcfg
.
byãWidth
 = (
uöt32_t
);

334 
tmp_x„rcfg
.
§cInc
 = 0;

335 
tmp_x„rcfg
.
d°Inc
 = 0;

336 
tmp_x„rcfg
.
å™s„rCou¡
 = 1;

338 
	`DMA_Cª©eDes¸ùt‹
(&
s_•i_des¸ùt‹_èbÀ
[
ö°™˚
], &
tmp_x„rcfg
, &
s_txDummy
[ö°™˚].
œ°W‹d
,

339 (
uöt32_t
 *)&
ba£
->
FIFOWR
, 
NULL
);

341 
	`DMA_Pª∑ªTøns„r
(

342 &
x„rC⁄fig
, &
s_txDummy
[
ö°™˚
].
w‹d
, (*)&
ba£
->
FIFOWR
,

343 ((
•i_c⁄fig_p
->
d©aWidth
 > 
kSPI_D©a8Bôs
Ë? ((
uöt16_t
)Ë: ((
uöt8_t
))),

344 ((
•i_c⁄fig_p
->
d©aWidth
 > 
kSPI_D©a8Bôs
Ë? (
x„r
->
d©aSize
 - 2) : (xfer->dataSize - 1)),

345 
kDMA_SèticToSètic
, &
s_•i_des¸ùt‹_èbÀ
[
ö°™˚
]);

347 
x„rC⁄fig
.
x„rcfg
.
ötA
 = 
Ál£
;

348 
x„rC⁄fig
.
x„rcfg
.
ötB
 = 
Ál£
;

349 
ªsu…
 = 
	`DMA_SubmôTøns„r
(
h™dÀ
->
txH™dÀ
, &
x„rC⁄fig
);

350 i‡(
ªsu…
 !
kSètus_Suc˚ss
)

352  
ªsu…
;

357 
	`DMA_Pª∑ªTøns„r
(

358 &
x„rC⁄fig
, &
s_txDummy
[
ö°™˚
].
w‹d
, (*)&
ba£
->
FIFOWR
,

359 ((
•i_c⁄fig_p
->
d©aWidth
 > 
kSPI_D©a8Bôs
Ë? ((
uöt16_t
)Ë: ((
uöt8_t
))),

360 
x„r
->
d©aSize
, 
kDMA_SèticToSètic
, 
NULL
);

361 
ªsu…
 = 
	`DMA_SubmôTøns„r
(
h™dÀ
->
txH™dÀ
, &
x„rC⁄fig
);

362 i‡(
ªsu…
 !
kSètus_Suc˚ss
)

364  
ªsu…
;

369 
h™dÀ
->
txInProgªss
 = 
åue
;

370 
tmp
 = 0;

371 
	`X„rToFifoWR
(
x„r
, &
tmp
);

372 
	`SpiC⁄figToFifoWR
(
•i_c⁄fig_p
, &
tmp
);

379 i‡((
x„r
->
c⁄figFœgs
 & 
kSPI_FømeAs£π
) &&

380 ((
•i_c⁄fig_p
->
d©aWidth
 > 
kSPI_D©a8Bôs
Ë? (
x„r
->
d©aSize
 == 2U) : (xfer->dataSize == 1U)))

382 *(((
uöt16_t
 *)&(
ba£
->
FIFOWR
)Ë+ 1Ë(uöt16_t)(
tmp
 >> 16U);

387 
tmp
 &(
uöt32_t
)(~
kSPI_FømeAs£π
);

388 *(((
uöt16_t
 *)&(
ba£
->
FIFOWR
)Ë+ 1Ë(uöt16_t)(
tmp
 >> 16U);

391 
	`DMA_SèπTøns„r
(
h™dÀ
->
txH™dÀ
);

394  
ªsu…
;

395 
	}
}

397 
°©us_t
 
	$SPI_Ma°îHÆfDu∂exTøns„rDMA
(
SPI_Ty≥
 *
ba£
, 
•i_dma_h™dÀ_t
 *
h™dÀ
, 
•i_hÆf_du∂ex_å™s„r_t
 *
x„r
)

399 
	`as£π
(
x„r
);

400 
	`as£π
(
h™dÀ
);

401 
•i_å™s„r_t
 
ãmpX„r
 = {0};

402 
°©us_t
 
°©us
;

404 i‡(
x„r
->
isTønsmôFú°
)

406 
ãmpX„r
.
txD©a
 = 
x„r
->txData;

407 
ãmpX„r
.
rxD©a
 = 
NULL
;

408 
ãmpX„r
.
d©aSize
 = 
x„r
->
txD©aSize
;

412 
ãmpX„r
.
txD©a
 = 
NULL
;

413 
ãmpX„r
.
rxD©a
 = 
x„r
->rxData;

414 
ãmpX„r
.
d©aSize
 = 
x„r
->
rxD©aSize
;

417 i‡(
x„r
->
isPcsAs£πInTøns„r
)

419 
ãmpX„r
.
c⁄figFœgs
 = (
x„r
->c⁄figFœgsË& (
uöt32_t
)(~
kSPI_FømeAs£π
);

423 
ãmpX„r
.
c⁄figFœgs
 = (
x„r
->c⁄figFœgsË| 
kSPI_FømeAs£π
;

426 
°©us
 = 
	`SPI_Ma°îTøns„rBlockög
(
ba£
, &
ãmpX„r
);

427 i‡(
°©us
 !
kSètus_Suc˚ss
)

429  
°©us
;

432 i‡(
x„r
->
isTønsmôFú°
)

434 
ãmpX„r
.
txD©a
 = 
NULL
;

435 
ãmpX„r
.
rxD©a
 = 
x„r
->rxData;

436 
ãmpX„r
.
d©aSize
 = 
x„r
->
rxD©aSize
;

440 
ãmpX„r
.
txD©a
 = 
x„r
->txData;

441 
ãmpX„r
.
rxD©a
 = 
NULL
;

442 
ãmpX„r
.
d©aSize
 = 
x„r
->
txD©aSize
;

444 
ãmpX„r
.
c⁄figFœgs
 = 
x„r
->configFlags;

446 
°©us
 = 
	`SPI_Ma°îTøns„rDMA
(
ba£
, 
h™dÀ
, &
ãmpX„r
);

448  
°©us
;

449 
	}
}

451 
	$SPI_RxDMACÆlback
(
dma_h™dÀ_t
 *
h™dÀ
, *
u£rD©a
, 
boﬁ
 
å™s„rD⁄e
, 
uöt32_t
 
ötmode
)

453 
•i_dma_¥iv©e_h™dÀ_t
 *
¥ivH™dÀ
 = (•i_dma_¥iv©e_h™dÀ_à*)
u£rD©a
;

454 
•i_dma_h™dÀ_t
 *
•iH™dÀ
 = 
¥ivH™dÀ
->
h™dÀ
;

455 
SPI_Ty≥
 *
ba£
 = 
¥ivH™dÀ
->base;

458 
•iH™dÀ
->
rxInProgªss
 = 
Ál£
;

461 i‡((
•iH™dÀ
->
txInProgªss
 =
Ál£
Ë&& (•iH™dÀ->
rxInProgªss
 == false))

463 
•iH™dÀ
->
°©e
 = 
kSPI_IdÀ
;

464 i‡(
•iH™dÀ
->
ˇŒback
)

466 (
•iH™dÀ
->
ˇŒback
)(
ba£
, spiH™dÀ, 
kSètus_Suc˚ss
, spiH™dÀ->
u£rD©a
);

469 
	}
}

471 
	$SPI_TxDMACÆlback
(
dma_h™dÀ_t
 *
h™dÀ
, *
u£rD©a
, 
boﬁ
 
å™s„rD⁄e
, 
uöt32_t
 
ötmode
)

473 
•i_dma_¥iv©e_h™dÀ_t
 *
¥ivH™dÀ
 = (•i_dma_¥iv©e_h™dÀ_à*)
u£rD©a
;

474 
•i_dma_h™dÀ_t
 *
•iH™dÀ
 = 
¥ivH™dÀ
->
h™dÀ
;

475 
SPI_Ty≥
 *
ba£
 = 
¥ivH™dÀ
->base;

478 
•iH™dÀ
->
txInProgªss
 = 
Ál£
;

481 i‡((
•iH™dÀ
->
txInProgªss
 =
Ál£
Ë&& (•iH™dÀ->
rxInProgªss
 == false))

483 
•iH™dÀ
->
°©e
 = 
kSPI_IdÀ
;

484 i‡(
•iH™dÀ
->
ˇŒback
)

486 (
•iH™dÀ
->
ˇŒback
)(
ba£
, spiH™dÀ, 
kSètus_Suc˚ss
, spiH™dÀ->
u£rD©a
);

489 
	}
}

491 
	$SPI_Ma°îTøns„rAb‹tDMA
(
SPI_Ty≥
 *
ba£
, 
•i_dma_h™dÀ_t
 *
h™dÀ
)

493 
	`as£π
(
NULL
 !
h™dÀ
);

496 
	`DMA_Ab‹tTøns„r
(
h™dÀ
->
txH™dÀ
);

498 
	`DMA_Ab‹tTøns„r
(
h™dÀ
->
rxH™dÀ
);

501 
h™dÀ
->
txInProgªss
 = 
Ál£
;

502 
h™dÀ
->
rxInProgªss
 = 
Ál£
;

503 
h™dÀ
->
°©e
 = 
kSPI_IdÀ
;

504 
	}
}

506 
°©us_t
 
	$SPI_Ma°îTøns„rGëCou¡DMA
(
SPI_Ty≥
 *
ba£
, 
•i_dma_h™dÀ_t
 *
h™dÀ
, 
size_t
 *
cou¡
)

508 
	`as£π
(
h™dÀ
);

510 i‡(!
cou¡
)

512  
kSètus_InvÆidArgumít
;

516 i‡(
h™dÀ
->
°©e
 !
kSPI_Busy
)

518 *
cou¡
 = 0;

519  
kSètus_NoTøns„rInProgªss
;

522 
size_t
 
byãs
;

524 
byãs
 = 
	`DMA_GëRemaöögByãs
(
h™dÀ
->
rxH™dÀ
->
ba£
, h™dÀ->rxH™dÀ->
ch™√l
);

526 *
cou¡
 = 
h™dÀ
->
å™s„rSize
 - 
byãs
;

528  
kSètus_Suc˚ss
;

529 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_spi_dma.h

34 #i‚de‡
_FSL_SPI_DMA_H_


35 
	#_FSL_SPI_DMA_H_


	)

37 
	~"f¶_dma.h
"

38 
	~"f¶_•i.h
"

51 
_•i_dma_h™dÀ
 
	t•i_dma_h™dÀ_t
;

54 (*
	t•i_dma_ˇŒback_t
)(
	tSPI_Ty≥
 *
	tba£
, 
	t•i_dma_h™dÀ_t
 *
	th™dÀ
, 
	t°©us_t
 
	t°©us
, *
	tu£rD©a
);

57 
	s_•i_dma_h™dÀ


59 vﬁ©ûê
boﬁ
 
txInProgªss
;

60 vﬁ©ûê
boﬁ
 
rxInProgªss
;

61 
dma_h™dÀ_t
 *
txH™dÀ
;

62 
dma_h™dÀ_t
 *
rxH™dÀ
;

63 
uöt8_t
 
byãsPîFøme
;

64 
•i_dma_ˇŒback_t
 
ˇŒback
;

65 *
u£rD©a
;

66 
uöt32_t
 
°©e
;

67 
size_t
 
å™s„rSize
;

74 #i‡
	`deföed
(
__˝lu•lus
)

96 
°©us_t
 
	`SPI_Ma°îTøns„rCª©eH™dÀDMA
(
SPI_Ty≥
 *
ba£
,

97 
•i_dma_h™dÀ_t
 *
h™dÀ
,

98 
•i_dma_ˇŒback_t
 
ˇŒback
,

99 *
u£rD©a
,

100 
dma_h™dÀ_t
 *
txH™dÀ
,

101 
dma_h™dÀ_t
 *
rxH™dÀ
);

116 
°©us_t
 
	`SPI_Ma°îTøns„rDMA
(
SPI_Ty≥
 *
ba£
, 
•i_dma_h™dÀ_t
 *
h™dÀ
, 
•i_å™s„r_t
 *
x„r
);

131 
°©us_t
 
	`SPI_Ma°îHÆfDu∂exTøns„rDMA
(
SPI_Ty≥
 *
ba£
, 
•i_dma_h™dÀ_t
 *
h™dÀ
, 
•i_hÆf_du∂ex_å™s„r_t
 *
x„r
);

146 
ölöe
 
°©us_t
 
	`SPI_SœveTøns„rCª©eH™dÀDMA
(
SPI_Ty≥
 *
ba£
,

147 
•i_dma_h™dÀ_t
 *
h™dÀ
,

148 
•i_dma_ˇŒback_t
 
ˇŒback
,

149 *
u£rD©a
,

150 
dma_h™dÀ_t
 *
txH™dÀ
,

151 
dma_h™dÀ_t
 *
rxH™dÀ
)

153  
	`SPI_Ma°îTøns„rCª©eH™dÀDMA
(
ba£
, 
h™dÀ
, 
ˇŒback
, 
u£rD©a
, 
txH™dÀ
, 
rxH™dÀ
);

169 
ölöe
 
°©us_t
 
	`SPI_SœveTøns„rDMA
(
SPI_Ty≥
 *
ba£
, 
•i_dma_h™dÀ_t
 *
h™dÀ
, 
•i_å™s„r_t
 *
x„r
)

171  
	`SPI_Ma°îTøns„rDMA
(
ba£
, 
h™dÀ
, 
x„r
);

180 
	`SPI_Ma°îTøns„rAb‹tDMA
(
SPI_Ty≥
 *
ba£
, 
•i_dma_h™dÀ_t
 *
h™dÀ
);

192 
°©us_t
 
	`SPI_Ma°îTøns„rGëCou¡DMA
(
SPI_Ty≥
 *
ba£
, 
•i_dma_h™dÀ_t
 *
h™dÀ
, 
size_t
 *
cou¡
);

200 
ölöe
 
	`SPI_SœveTøns„rAb‹tDMA
(
SPI_Ty≥
 *
ba£
, 
•i_dma_h™dÀ_t
 *
h™dÀ
)

202 
	`SPI_Ma°îTøns„rAb‹tDMA
(
ba£
, 
h™dÀ
);

215 
ölöe
 
°©us_t
 
	`SPI_SœveTøns„rGëCou¡DMA
(
SPI_Ty≥
 *
ba£
, 
•i_dma_h™dÀ_t
 *
h™dÀ
, 
size_t
 *
cou¡
)

217  
	`SPI_Ma°îTøns„rGëCou¡DMA
(
ba£
, 
h™dÀ
, 
cou¡
);

222 #i‡
	`deföed
(
__˝lu•lus
)

223 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\fsl_device_registers.h

36 #i‚de‡
__FSL_DEVICE_REGISTERS_H__


37 
	#__FSL_DEVICE_REGISTERS_H__


	)

44 #i‡(
deföed
(
CPU_LPC54608J512BD208
Ë|| deföed(
CPU_LPC54608J512ET180
))

46 
	#LPC54608_SERIES


	)

49 
	~"LPC54608.h
"

51 
	~"LPC54608_„©uªs.h
"

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\mcuxpresso\libpower_hardabi.a

1 !<
	g¨ch
>

3                          _£tVdLevñ _£tLpVdLevñ _E¡îSÀï _E¡îDìpSÀï _E¡îDìpPowîDown _E¡îPowîMode _SëVﬁègeF‹Fªq _SëLowPowîVﬁègeF‹Fªq _SëPLL _SëUsbPhy _GëLibVîsi⁄  _powî_lib.o/1502331404 0 0 100666 21812 `

4 
	gELF
          (                 4     ( & % -È˜CÔÛÜr∂VJÄBOÙõ~“¯6“¯‹ ø@ÄPƒC$"*ÍÄB¬¯ ÕCØ=C¬¯≈¯@‡OÄ¬¯ ·0øÙx4€CÙx3¬¯@·¬¯¬¯

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\mcuxpresso\startup_LPC54608.c

35 
	~<°döt.h
>

36 
	~"f¶_devi˚_ªgi°îs.h
"

41 
uöt32_t
 
__ëext
;

42 
uöt32_t
 
__d©a_°¨t__
;

43 
uöt32_t
 
__d©a_íd__
;

44 
uöt32_t
 
__c›y_èbÀ_°¨t__
;

45 
uöt32_t
 
__c›y_èbÀ_íd__
;

46 
uöt32_t
 
__zîo_èbÀ_°¨t__
;

47 
uöt32_t
 
__zîo_èbÀ_íd__
;

48 
uöt32_t
 
__bss_°¨t__
;

49 
uöt32_t
 
__bss_íd__
;

50 
uöt32_t
 
__SèckT›
;

55 –*
	tpFunc
 )( );

61 #i‚de‡
__START


62 
	$_°¨t
(Ë
	`__©åibuã__
((
n‹ëu∫
));

64 
	$__START
(Ë
	`__©åibuã__
((
n‹ëu∫
));

67 #i‚de‡
__NO_SYSTEM_INIT


68 
	`Sy°emInô
 ();

75 
	`DeÁu…_H™dÀr
();

76 
	`Re£t_H™dÀr
();

82 #i‚de‡
__STACK_SIZE


83 
	#__STACK_SIZE
 0x00000200

	)

85 
uöt8_t
 
°ack
[
__STACK_SIZE
] 
	`__©åibuã__
 ((
	`Æig√d
(8), 
u£d
, 
	`£˘i⁄
(".stack")));

87 #i‚de‡
__HEAP_SIZE


88 
	#__HEAP_SIZE
 0x00000000

	)

90 #i‡
__HEAP_SIZE
 > 0

91 
uöt8_t
 
hóp
[
__HEAP_SIZE
] 
	`__©åibuã__
 ((
	`Æig√d
(8), 
u£d
, 
	`£˘i⁄
(".heap")));

99 
	`__©åibuã__
 ((
wók
)Ë
	$NMI_H™dÀr
 (Ë{ 1); 
	}
};

100 
__©åibuã__
 ((
wók
)Ë
	$H¨dFau…_H™dÀr
 (Ë{ 1); 
	}
};

101 
__©åibuã__
 ((
wók
)Ë
	$MemM™age_H™dÀr
 (Ë{ 1); 
	}
};

102 
__©åibuã__
 ((
wók
)Ë
	$BusFau…_H™dÀr
 (Ë{ 1); 
	}
};

103 
__©åibuã__
 ((
wók
)Ë
	$UßgeFau…_H™dÀr
 (Ë{ 1); 
	}
};

104 
__©åibuã__
 ((
wók
)Ë
	$SVC_H™dÀr
 (Ë{ 1); 
	}
};

105 
__©åibuã__
 ((
wók
)Ë
	$DebugM⁄_H™dÀr
 (Ë{ 1); 
	}
};

106 
__©åibuã__
 ((
wók
)Ë
	$PídSV_H™dÀr
 (Ë{ 1); 
	}
};

107 
__©åibuã__
 ((
wók
)Ë
	$SysTick_H™dÀr
 (Ë{ 1); 
	}
};

110 
	$WDT_BOD_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

111 
	$DMA0_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

112 
	$GINT0_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

113 
	$GINT1_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

114 
	$PIN_INT0_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

115 
	$PIN_INT1_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

116 
	$PIN_INT2_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

117 
	$PIN_INT3_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

118 
	$UTICK0_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

119 
	$MRT0_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

120 
	$CTIMER0_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

121 
	$CTIMER1_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

122 
	$SCT0_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

123 
	$CTIMER3_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

124 
	$FLEXCOMM0_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

125 
	$FLEXCOMM1_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

126 
	$FLEXCOMM2_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

127 
	$FLEXCOMM3_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

128 
	$FLEXCOMM4_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

129 
	$FLEXCOMM5_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

130 
	$FLEXCOMM6_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

131 
	$FLEXCOMM7_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

132 
	$ADC0_SEQA_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

133 
	$ADC0_SEQB_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

134 
	$ADC0_THCMP_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

135 
	$DMIC0_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

136 
	$HWVAD0_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

137 
	$USB0_NEEDCLK_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

138 
	$USB0_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

139 
	$RTC_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

140 
	$Re£rved46_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

141 
	$Re£rved47_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

142 
	$PIN_INT4_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

143 
	$PIN_INT5_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

144 
	$PIN_INT6_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

145 
	$PIN_INT7_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

146 
	$CTIMER2_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

147 
	$CTIMER4_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

148 
	$RIT_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

149 
	$SPIFI0_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

150 
	$FLEXCOMM8_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

151 
	$FLEXCOMM9_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

152 
	$SDIO_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

153 
	$CAN0_IRQ0_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

154 
	$CAN0_IRQ1_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

155 
	$CAN1_IRQ0_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

156 
	$CAN1_IRQ1_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

157 
	$USB1_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

158 
	$USB1_NEEDCLK_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

159 
	$ETHERNET_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

160 
	$ETHERNET_PMT_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

161 
	$ETHERNET_MACLP_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

162 
	$EEPROM_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

163 
	$LCD_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

164 
	$SHA_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

165 
	$SMARTCARD0_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

166 
	$SMARTCARD1_DrivîIRQH™dÀr
 (Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Default_Handler")));

168 
	`__©åibuã__
 ((
wók
)Ë
	$WDT_BOD_IRQH™dÀr
 (Ë{ 
	`WDT_BOD_DrivîIRQH™dÀr
(); 
	}
}

169 
__©åibuã__
 ((
wók
)Ë
	$DMA0_IRQH™dÀr
 (Ë{ 
	`DMA0_DrivîIRQH™dÀr
(); 
	}
}

170 
__©åibuã__
 ((
wók
)Ë
	$GINT0_IRQH™dÀr
 (Ë{ 
	`GINT0_DrivîIRQH™dÀr
(); 
	}
}

171 
__©åibuã__
 ((
wók
)Ë
	$GINT1_IRQH™dÀr
 (Ë{ 
	`GINT1_DrivîIRQH™dÀr
(); 
	}
}

172 
__©åibuã__
 ((
wók
)Ë
	$PIN_INT0_IRQH™dÀr
 (Ë{ 
	`PIN_INT0_DrivîIRQH™dÀr
(); 
	}
}

173 
__©åibuã__
 ((
wók
)Ë
	$PIN_INT1_IRQH™dÀr
 (Ë{ 
	`PIN_INT1_DrivîIRQH™dÀr
(); 
	}
}

174 
__©åibuã__
 ((
wók
)Ë
	$PIN_INT2_IRQH™dÀr
 (Ë{ 
	`PIN_INT2_DrivîIRQH™dÀr
(); 
	}
}

175 
__©åibuã__
 ((
wók
)Ë
	$PIN_INT3_IRQH™dÀr
 (Ë{ 
	`PIN_INT3_DrivîIRQH™dÀr
(); 
	}
}

176 
__©åibuã__
 ((
wók
)Ë
	$UTICK0_IRQH™dÀr
 (Ë{ 
	`UTICK0_DrivîIRQH™dÀr
(); 
	}
}

177 
__©åibuã__
 ((
wók
)Ë
	$MRT0_IRQH™dÀr
 (Ë{ 
	`MRT0_DrivîIRQH™dÀr
(); 
	}
}

178 
__©åibuã__
 ((
wók
)Ë
	$CTIMER0_IRQH™dÀr
 (Ë{ 
	`CTIMER0_DrivîIRQH™dÀr
(); 
	}
}

179 
__©åibuã__
 ((
wók
)Ë
	$CTIMER1_IRQH™dÀr
 (Ë{ 
	`CTIMER1_DrivîIRQH™dÀr
(); 
	}
}

180 
__©åibuã__
 ((
wók
)Ë
	$SCT0_IRQH™dÀr
 () {

181 
	`SCT0_DrivîIRQH™dÀr
(); 
	}
}

182 
__©åibuã__
 ((
wók
)Ë
	$CTIMER3_IRQH™dÀr
 (Ë{ 
	`CTIMER3_DrivîIRQH™dÀr
(); 
	}
}

183 
__©åibuã__
 ((
wók
)Ë
	$FLEXCOMM0_IRQH™dÀr
 (Ë{ 
	`FLEXCOMM0_DrivîIRQH™dÀr
(); 
	}
}

184 
__©åibuã__
 ((
wók
)Ë
	$FLEXCOMM1_IRQH™dÀr
 (Ë{ 
	`FLEXCOMM1_DrivîIRQH™dÀr
(); 
	}
}

185 
__©åibuã__
 ((
wók
)Ë
	$FLEXCOMM2_IRQH™dÀr
 (Ë{ 
	`FLEXCOMM2_DrivîIRQH™dÀr
(); 
	}
}

186 
__©åibuã__
 ((
wók
)Ë
	$FLEXCOMM3_IRQH™dÀr
 (Ë{ 
	`FLEXCOMM3_DrivîIRQH™dÀr
(); 
	}
}

187 
__©åibuã__
 ((
wók
)Ë
	$FLEXCOMM4_IRQH™dÀr
 (Ë{ 
	`FLEXCOMM4_DrivîIRQH™dÀr
(); 
	}
}

188 
__©åibuã__
 ((
wók
)Ë
	$FLEXCOMM5_IRQH™dÀr
 (Ë{ 
	`FLEXCOMM5_DrivîIRQH™dÀr
(); 
	}
}

189 
__©åibuã__
 ((
wók
)Ë
	$FLEXCOMM6_IRQH™dÀr
 (Ë{ 
	`FLEXCOMM6_DrivîIRQH™dÀr
(); 
	}
}

190 
__©åibuã__
 ((
wók
)Ë
	$FLEXCOMM7_IRQH™dÀr
 (Ë{ 
	`FLEXCOMM7_DrivîIRQH™dÀr
(); 
	}
}

191 
__©åibuã__
 ((
wók
)Ë
	$ADC0_SEQA_IRQH™dÀr
 (Ë{ 
	`ADC0_SEQA_DrivîIRQH™dÀr
(); 
	}
}

192 
__©åibuã__
 ((
wók
)Ë
	$ADC0_SEQB_IRQH™dÀr
 (Ë{ 
	`ADC0_SEQB_DrivîIRQH™dÀr
(); 
	}
}

193 
__©åibuã__
 ((
wók
)Ë
	$ADC0_THCMP_IRQH™dÀr
 (Ë{ 
	`ADC0_THCMP_DrivîIRQH™dÀr
(); 
	}
}

194 
__©åibuã__
 ((
wók
)Ë
	$DMIC0_IRQH™dÀr
 (Ë{ 
	`DMIC0_DrivîIRQH™dÀr
(); 
	}
}

195 
__©åibuã__
 ((
wók
)Ë
	$HWVAD0_IRQH™dÀr
 (Ë{ 
	`HWVAD0_DrivîIRQH™dÀr
(); 
	}
}

196 
__©åibuã__
 ((
wók
)Ë
	$USB0_NEEDCLK_IRQH™dÀr
 (Ë{ 
	`USB0_NEEDCLK_DrivîIRQH™dÀr
(); 
	}
}

197 
__©åibuã__
 ((
wók
)Ë
	$USB0_IRQH™dÀr
 (Ë{ 
	`USB0_DrivîIRQH™dÀr
(); 
	}
}

198 
__©åibuã__
 ((
wók
)Ë
	$RTC_IRQH™dÀr
 (Ë{ 
	`RTC_DrivîIRQH™dÀr
(); 
	}
}

199 
__©åibuã__
 ((
wók
)Ë
	$Re£rved46_IRQH™dÀr
 (Ë{ 
	`Re£rved46_DrivîIRQH™dÀr
(); 
	}
}

200 
__©åibuã__
 ((
wók
)Ë
	$Re£rved47_IRQH™dÀr
 (Ë{ 
	`Re£rved47_DrivîIRQH™dÀr
(); 
	}
}

201 
__©åibuã__
 ((
wók
)Ë
	$PIN_INT4_IRQH™dÀr
 (Ë{ 
	`PIN_INT4_DrivîIRQH™dÀr
(); 
	}
}

202 
__©åibuã__
 ((
wók
)Ë
	$PIN_INT5_IRQH™dÀr
 (Ë{ 
	`PIN_INT5_DrivîIRQH™dÀr
(); 
	}
}

203 
__©åibuã__
 ((
wók
)Ë
	$PIN_INT6_IRQH™dÀr
 (Ë{ 
	`PIN_INT6_DrivîIRQH™dÀr
(); 
	}
}

204 
__©åibuã__
 ((
wók
)Ë
	$PIN_INT7_IRQH™dÀr
 (Ë{ 
	`PIN_INT7_DrivîIRQH™dÀr
(); 
	}
}

205 
__©åibuã__
 ((
wók
)Ë
	$CTIMER2_IRQH™dÀr
 (Ë{ 
	`CTIMER2_DrivîIRQH™dÀr
(); 
	}
}

206 
__©åibuã__
 ((
wók
)Ë
	$CTIMER4_IRQH™dÀr
 (Ë{ 
	`CTIMER4_DrivîIRQH™dÀr
(); 
	}
}

207 
__©åibuã__
 ((
wók
)Ë
	$RIT_IRQH™dÀr
 (Ë{ 
	`RIT_DrivîIRQH™dÀr
(); 
	}
}

208 
__©åibuã__
 ((
wók
)Ë
	$SPIFI0_IRQH™dÀr
 (Ë{ 
	`SPIFI0_DrivîIRQH™dÀr
(); 
	}
}

209 
__©åibuã__
 ((
wók
)Ë
	$FLEXCOMM8_IRQH™dÀr
 (Ë{ 
	`FLEXCOMM8_DrivîIRQH™dÀr
(); 
	}
}

210 
__©åibuã__
 ((
wók
)Ë
	$FLEXCOMM9_IRQH™dÀr
 (Ë{ 
	`FLEXCOMM9_DrivîIRQH™dÀr
(); 
	}
}

211 
__©åibuã__
 ((
wók
)Ë
	$SDIO_IRQH™dÀr
 (Ë{ 
	`SDIO_DrivîIRQH™dÀr
(); 
	}
}

212 
__©åibuã__
 ((
wók
)Ë
	$CAN0_IRQ0_IRQH™dÀr
 (Ë{ 
	`CAN0_IRQ0_DrivîIRQH™dÀr
(); 
	}
}

213 
__©åibuã__
 ((
wók
)Ë
	$CAN0_IRQ1_IRQH™dÀr
 (Ë{ 
	`CAN0_IRQ1_DrivîIRQH™dÀr
(); 
	}
}

214 
__©åibuã__
 ((
wók
)Ë
	$CAN1_IRQ0_IRQH™dÀr
 (Ë{ 
	`CAN1_IRQ0_DrivîIRQH™dÀr
(); 
	}
}

215 
__©åibuã__
 ((
wók
)Ë
	$CAN1_IRQ1_IRQH™dÀr
 (Ë{ 
	`CAN1_IRQ1_DrivîIRQH™dÀr
(); 
	}
}

216 
__©åibuã__
 ((
wók
)Ë
	$USB1_IRQH™dÀr
 (Ë{ 
	`USB1_DrivîIRQH™dÀr
(); 
	}
}

217 
__©åibuã__
 ((
wók
)Ë
	$USB1_NEEDCLK_IRQH™dÀr
 (Ë{ 
	`USB1_NEEDCLK_DrivîIRQH™dÀr
(); 
	}
}

218 
__©åibuã__
 ((
wók
)Ë
	$ETHERNET_IRQH™dÀr
 (Ë{ 
	`ETHERNET_DrivîIRQH™dÀr
(); 
	}
}

219 
__©åibuã__
 ((
wók
)Ë
	$ETHERNET_PMT_IRQH™dÀr
 (Ë{ 
	`ETHERNET_PMT_DrivîIRQH™dÀr
(); 
	}
}

220 
__©åibuã__
 ((
wók
)Ë
	$ETHERNET_MACLP_IRQH™dÀr
 (Ë{ 
	`ETHERNET_MACLP_DrivîIRQH™dÀr
(); 
	}
}

221 
__©åibuã__
 ((
wók
)Ë
	$EEPROM_IRQH™dÀr
 (Ë{ 
	`EEPROM_DrivîIRQH™dÀr
(); 
	}
}

222 
__©åibuã__
 ((
wók
)Ë
	$LCD_IRQH™dÀr
 (Ë{ 
	`LCD_DrivîIRQH™dÀr
(); 
	}
}

223 
__©åibuã__
 ((
wók
)Ë
	$SHA_IRQH™dÀr
 (Ë{ 
	`SHA_DrivîIRQH™dÀr
(); 
	}
}

224 
__©åibuã__
 ((
wók
)Ë
	$SMARTCARD0_IRQH™dÀr
 (Ë{ 
	`SMARTCARD0_DrivîIRQH™dÀr
(); 
	}
}

225 
__©åibuã__
 ((
wók
)Ë
	$SMARTCARD1_IRQH™dÀr
 (Ë{ 
	`SMARTCARD1_DrivîIRQH™dÀr
(); 
	}
}

230 c⁄° 
pFunc
 
	g__Ve˘‹s
[] 
__©åibuã__
 ((
£˘i⁄
(".vectors"))) = {

232 (
pFunc
)&
__SèckT›
,

233 
Re£t_H™dÀr
,

234 
NMI_H™dÀr
,

235 
H¨dFau…_H™dÀr
,

236 
MemM™age_H™dÀr
,

237 
BusFau…_H™dÀr
,

238 
UßgeFau…_H™dÀr
,

243 
SVC_H™dÀr
,

244 
DebugM⁄_H™dÀr
,

246 
PídSV_H™dÀr
,

247 
SysTick_H™dÀr
,

250 
WDT_BOD_IRQH™dÀr
,

251 
DMA0_IRQH™dÀr
,

252 
GINT0_IRQH™dÀr
,

253 
GINT1_IRQH™dÀr
,

254 
PIN_INT0_IRQH™dÀr
,

255 
PIN_INT1_IRQH™dÀr
,

256 
PIN_INT2_IRQH™dÀr
,

257 
PIN_INT3_IRQH™dÀr
,

258 
UTICK0_IRQH™dÀr
,

259 
MRT0_IRQH™dÀr
,

260 
CTIMER0_IRQH™dÀr
,

261 
CTIMER1_IRQH™dÀr
,

262 
SCT0_IRQH™dÀr
,

263 
CTIMER3_IRQH™dÀr
,

264 
FLEXCOMM0_IRQH™dÀr
,

265 
FLEXCOMM1_IRQH™dÀr
,

266 
FLEXCOMM2_IRQH™dÀr
,

267 
FLEXCOMM3_IRQH™dÀr
,

268 
FLEXCOMM4_IRQH™dÀr
,

269 
FLEXCOMM5_IRQH™dÀr
,

270 
FLEXCOMM6_IRQH™dÀr
,

271 
FLEXCOMM7_IRQH™dÀr
,

272 
ADC0_SEQA_IRQH™dÀr
,

273 
ADC0_SEQB_IRQH™dÀr
,

274 
ADC0_THCMP_IRQH™dÀr
,

275 
DMIC0_IRQH™dÀr
,

276 
HWVAD0_IRQH™dÀr
,

277 
USB0_NEEDCLK_IRQH™dÀr
,

278 
USB0_IRQH™dÀr
,

279 
RTC_IRQH™dÀr
,

280 
Re£rved46_IRQH™dÀr
,

281 
Re£rved47_IRQH™dÀr
,

282 
PIN_INT4_IRQH™dÀr
,

283 
PIN_INT5_IRQH™dÀr
,

284 
PIN_INT6_IRQH™dÀr
,

285 
PIN_INT7_IRQH™dÀr
,

286 
CTIMER2_IRQH™dÀr
,

287 
CTIMER4_IRQH™dÀr
,

288 
RIT_IRQH™dÀr
,

289 
SPIFI0_IRQH™dÀr
,

290 
FLEXCOMM8_IRQH™dÀr
,

291 
FLEXCOMM9_IRQH™dÀr
,

292 
SDIO_IRQH™dÀr
,

293 
CAN0_IRQ0_IRQH™dÀr
,

294 
CAN0_IRQ1_IRQH™dÀr
,

295 
CAN1_IRQ0_IRQH™dÀr
,

296 
CAN1_IRQ1_IRQH™dÀr
,

297 
USB1_IRQH™dÀr
,

298 
USB1_NEEDCLK_IRQH™dÀr
,

299 
ETHERNET_IRQH™dÀr
,

300 
ETHERNET_PMT_IRQH™dÀr
,

301 
ETHERNET_MACLP_IRQH™dÀr
,

302 
EEPROM_IRQH™dÀr
,

303 
LCD_IRQH™dÀr
,

304 
SHA_IRQH™dÀr
,

305 
SMARTCARD0_IRQH™dÀr
,

306 
SMARTCARD1_IRQH™dÀr
,

313 
	$Re£t_H™dÀr
() {

314 
uöt32_t
 *
pSrc
, *
pDe°
;

315 
uöt32_t
 *
pTabÀ
 
	`__©åibuã__
((
unu£d
));

317 
	`__dißbÀ_úq
();

320 
SYSCON
->
AHBCLKCTRLSET
[0] = 
SYSCON_AHBCLKCTRL_SRAM1_MASK
 | 
SYSCON_AHBCLKCTRL_SRAM2_MASK
 | 
SYSCON_AHBCLKCTRL_SRAM3_MASK
;

328 #ifde‡
__STARTUP_COPY_MULTIPLE


339 
pTabÀ
 = &
__c›y_èbÀ_°¨t__
;

341 ; 
pTabÀ
 < &
__c›y_èbÀ_íd__
;ÖTable =ÖTable + 3) {

342 
pSrc
 = (
uöt32_t
*)*(
pTabÀ
 + 0);

343 
pDe°
 = (
uöt32_t
*)*(
pTabÀ
 + 1);

344 ; 
pDe°
 < (
uöt32_t
*)(*(
pTabÀ
 + 1) + *(pTable + 2)) ; ) {

345 *
pDe°
++ = *
pSrc
++;

358 
pSrc
 = &
__ëext
;

359 
pDe°
 = &
__d©a_°¨t__
;

361  ; 
pDe°
 < &
__d©a_íd__
 ; ) {

362 *
pDe°
++ = *
pSrc
++;

376 #ifde‡
__STARTUP_CLEAR_BSS_MULTIPLE


384 
pTabÀ
 = &
__zîo_èbÀ_°¨t__
;

386 ; 
pTabÀ
 < &
__zîo_èbÀ_íd__
;ÖTable =ÖTable + 2) {

387 
pDe°
 = (
uöt32_t
*)*(
pTabÀ
 + 0);

388 ; 
pDe°
 < (
uöt32_t
*)(*(
pTabÀ
 + 0) + *(pTable + 1)) ; ) {

389 *
pDe°
++ = 0;

392 #ñi‡
	`deföed
 (
__STARTUP_CLEAR_BSS
)

401 
pDe°
 = &
__bss_°¨t__
;

403  ; 
pDe°
 < &
__bss_íd__
 ; ) {

404 *
pDe°
++ = 0ul;

408 #i‚de‡
__NO_SYSTEM_INIT


409 
	`Sy°emInô
();

412 
	`__íabÀ_úq
();

414 #i‚de‡
__START


415 
	#__START
 
_°¨t


	)

417 
	`maö
();

418 
	`maö
();

420 
	}
}

426 
	$DeÁu…_H™dÀr
() {

427 
uöt32_t
 
ulCuºítI¡îru±
;

430 
__asm
 vﬁ©ûe–"mr†%0, ip§" : "Ù"–
ulCuºítI¡îru±
 ) );

432 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\system_LPC54608.c

71 
	~<°döt.h
>

72 
	~"f¶_devi˚_ªgi°îs.h
"

74 
	#NVALMAX
 (0x100)

	)

75 
	#PVALMAX
 (0x20)

	)

76 
	#MVALMAX
 (0x8000)

	)

77 
	#PLL_MDEC_VAL_P
 (0Ë

	)

78 
	#PLL_MDEC_VAL_M
 (0x1FFFFUL << 
PLL_MDEC_VAL_P
)

	)

79 
	#PLL_NDEC_VAL_P
 (0Ë

	)

80 
	#PLL_NDEC_VAL_M
 (0x3FFUL << 
PLL_NDEC_VAL_P
)

	)

81 
	#PLL_PDEC_VAL_P
 (0Ë

	)

82 
	#PLL_PDEC_VAL_M
 (0x7FUL << 
PLL_PDEC_VAL_P
)

	)

84 *
__Ve˘‹s
;

86 c⁄° 
uöt8_t
 
	gwdtFªqLookup
[32] = {0, 8, 12, 15, 18, 20, 24, 26, 28, 30, 32, 34, 36, 38, 40, 41, 42, 44, 45, 46,

89 
uöt32_t
 
	$gëWdtOscFªq
()

91 
uöt8_t
 
‰eq_£l
, 
div_£l
;

92 i‡(
SYSCON
->
PDRUNCFG
[0] & 
SYSCON_PDRUNCFG_PDEN_WDT_OSC_MASK
)

98 
div_£l
 = ((
SYSCON
->
WDTOSCCTRL
 & 0x1f) + 1) << 1;

99 
‰eq_£l
 = 
wdtFªqLookup
[((
SYSCON
->
WDTOSCCTRL
 & 
SYSCON_WDTOSCCTRL_FREQSEL_MASK
Ë>> 
SYSCON_WDTOSCCTRL_FREQSEL_SHIFT
)];

100  ((
uöt32_t
Ë
‰eq_£l
 * 50000U)/((uöt32_t)
div_£l
);

102 
	}
}

104 
uöt32_t
 
	$∂lDecodeN
(
uöt32_t
 
NDEC
)

106 
uöt32_t
 
n
, 
x
, 
i
;

109 
NDEC
)

112 
n
 = 0;

115 
n
 = 1;

118 
n
 = 2;

121 
x
 = 0x080;

122 
n
 = 0xFFFFFFFFU;

123 
i
 = 
NVALMAX
; ((ò>3Ë&& (
n
 == 0xFFFFFFFFU)); i--)

125 
x
 = (((x ^ (x >> 2) ^ (x >> 3) ^ (x >> 4)) & 1) << 7) | ((x >> 1) & 0x7F);

126 i‡((
x
 & (
PLL_NDEC_VAL_M
 >> 
PLL_NDEC_VAL_P
)Ë=
NDEC
)

129 
n
 = 
i
;

134  
n
;

135 
	}
}

138 
uöt32_t
 
	$∂lDecodeP
(
uöt32_t
 
PDEC
)

140 
uöt32_t
 
p
, 
x
, 
i
;

142 
PDEC
)

145 
p
 = 0;

148 
p
 = 1;

151 
p
 = 2;

154 
x
 = 0x10;

155 
p
 = 0xFFFFFFFFU;

156 
i
 = 
PVALMAX
; ((ò>3Ë&& (
p
 == 0xFFFFFFFFU)); i--)

158 
x
 = (((x ^ (x >> 2)) & 1) << 4) | ((x >> 1) & 0xFU);

159 i‡((
x
 & (
PLL_PDEC_VAL_M
 >> 
PLL_PDEC_VAL_P
)Ë=
PDEC
)

162 
p
 = 
i
;

167  
p
;

168 
	}
}

171 
uöt32_t
 
	$∂lDecodeM
(
uöt32_t
 
MDEC
)

173 
uöt32_t
 
m
, 
i
, 
x
;

176 
MDEC
)

179 
m
 = 0;

182 
m
 = 1;

185 
m
 = 2;

188 
x
 = 0x04000;

189 
m
 = 0xFFFFFFFFU;

190 
i
 = 
MVALMAX
; ((ò>3Ë&& (
m
 == 0xFFFFFFFFU)); i--)

192 
x
 = (((x ^ (x >> 1)) & 1) << 14) | ((x >> 1) & 0x3FFFU);

193 i‡((
x
 & (
PLL_MDEC_VAL_M
 >> 
PLL_MDEC_VAL_P
)Ë=
MDEC
)

196 
m
 = 
i
;

201  
m
;

202 
	}
}

205 
uöt32_t
 
	$födPŒPªDiv
(
uöt32_t
 
˘æReg
, uöt32_à
nDecReg
)

207 
uöt32_t
 
¥eDiv
 = 1;

210 i‡((
˘æReg
 & 
SYSCON_SYSPLLCTRL_DIRECTI_MASK
) == 0)

213 
¥eDiv
 = 
	`∂lDecodeN
(
nDecReg
 & 0x3FF);

214 i‡(
¥eDiv
 == 0)

216 
¥eDiv
 = 1;

220  
¥eDiv
;

221 
	}
}

224 
uöt32_t
 
	$födPŒPo°Div
(
uöt32_t
 
˘æReg
, uöt32_à
pDecReg
)

226 
uöt32_t
 
po°Div
 = 1;

229 i‡((
˘æReg
 & 
SYSCON_SYSPLLCTRL_DIRECTO_MASK
) == 0)

232 
po°Div
 = 2 * 
	`∂lDecodeP
(
pDecReg
 & 0x7F);

233 i‡(
po°Div
 == 0)

235 
po°Div
 = 2;

239  
po°Div
;

240 
	}
}

243 
uöt32_t
 
	$födPŒMMu…
(
uöt32_t
 
˘æReg
, uöt32_à
mDecReg
)

245 
uöt32_t
 
mMu…
 = 1;

248 
mMu…
 = 
	`∂lDecodeM
(
mDecReg
 & 0x1FFFF);

249 i‡(
mMu…
 == 0)

251 
mMu…
 = 1;

253  
mMu…
;

254 
	}
}

262 
uöt32_t
 
	gSy°emC‹eClock
 = 
DEFAULT_SYSTEM_CLOCK
;

268 
	$Sy°emInô
 () {

269 #i‡((
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1))

270 
SCB
->
CPACR
 |= ((3UL << 10*2) | (3UL << 11*2));

273 #i‡
	`deföed
(
__MCUXPRESSO
)

274 (*c⁄° 
g_p‚Ve˘‹s
[]) ();

275 
SCB
->
VTOR
 = (
uöt32_t
Ë&
g_p‚Ve˘‹s
;

277 *
__Ve˘‹s
;

278 
SCB
->
VTOR
 = (
uöt32_t
Ë&
__Ve˘‹s
;

280 
SYSCON
->
ARMTRACECLKDIV
 = 0;

282 #i‡!
	`deföed
(
DONT_ENABLE_DISABLED_RAMBANKS
)

283 
SYSCON
->
AHBCLKCTRLSET
[0] = 
SYSCON_AHBCLKCTRL_SRAM1_MASK
 | 
SYSCON_AHBCLKCTRL_SRAM2_MASK
 | 
SYSCON_AHBCLKCTRL_SRAM3_MASK
;

285 
	}
}

291 
	$Sy°emC‹eClockUpd©e
 () {

292 
uöt32_t
 
˛kR©e
 = 0;

293 
uöt32_t
 
¥ediv
, 
po°div
;

294 
uöt64_t
 
w‹kR©e
;

296 
SYSCON
->
MAINCLKSELB
 & 
SYSCON_MAINCLKSELB_SEL_MASK
)

299 
SYSCON
->
MAINCLKSELA
 & 
SYSCON_MAINCLKSELA_SEL_MASK
)

302 
˛kR©e
 = 
CLK_FRO_12MHZ
;

305 
˛kR©e
 = 
CLK_CLK_IN
;

308 
˛kR©e
 = 
	`gëWdtOscFªq
();

311 i‡(
SYSCON
->
FROCTRL
 & 
SYSCON_FROCTRL_SEL_MASK
)

313 
˛kR©e
 = 
CLK_FRO_96MHZ
;

317 
˛kR©e
 = 
CLK_FRO_48MHZ
;

323 
SYSCON
->
SYSPLLCLKSEL
 & 
SYSCON_SYSPLLCLKSEL_SEL_MASK
)

326 
˛kR©e
 = 
CLK_FRO_12MHZ
;

329 
˛kR©e
 = 
CLK_CLK_IN
;

332 
˛kR©e
 = 
	`gëWdtOscFªq
();

335 
˛kR©e
 = 
CLK_RTC_32K_CLK
;

340 i‡((
SYSCON
->
SYSPLLCTRL
 & 
SYSCON_SYSPLLCTRL_BYPASS_MASK
) == 0)

343 
¥ediv
 = 
	`födPŒPªDiv
(
SYSCON
->
SYSPLLCTRL
, SYSCON->
SYSPLLNDEC
);

344 
po°div
 = 
	`födPŒPo°Div
(
SYSCON
->
SYSPLLCTRL
, SYSCON->
SYSPLLPDEC
);

346 
˛kR©e
 = clkR©ê/ 
¥ediv
;

349 
w‹kR©e
 = (
uöt64_t
)
˛kR©e
 * (uöt64_t)
	`födPŒMMu…
(
SYSCON
->
SYSPLLCTRL
, SYSCON->
SYSPLLMDEC
);

350 
˛kR©e
 = 
w‹kR©e
 / ((
uöt64_t
)
po°div
);

351 
˛kR©e
 = 
w‹kR©e
 * 2;

355 
˛kR©e
 = 
CLK_RTC_32K_CLK
;

360 
Sy°emC‹eClock
 = 
˛kR©e
 / ((
SYSCON
->
AHBCLKDIV
 & 0xFF) + 1);

361 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\system_LPC54608.h

71 #i‚de‡
_SYSTEM_LPC54608_H_


72 
	#_SYSTEM_LPC54608_H_


	)

74 #ifde‡
__˝lu•lus


78 
	~<°döt.h
>

80 
	#DEFAULT_SYSTEM_CLOCK
 12000000u

	)

81 
	#CLK_RTC_32K_CLK
 32768u

	)

82 
	#CLK_FRO_12MHZ
 12000000u

	)

83 
	#CLK_FRO_48MHZ
 48000000u

	)

84 
	#CLK_FRO_96MHZ
 96000000u

	)

85 
	#CLK_CLK_IN
 0u

	)

97 
uöt32_t
 
Sy°emC‹eClock
;

106 
Sy°emInô
 ();

115 
Sy°emC‹eClockUpd©e
 ();

117 #ifde‡
__˝lu•lus


	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\middleware\usb\device\usb_device.h

35 #i‚de‡
__USB_DEVICE_H__


36 
	#__USB_DEVICE_H__


	)

48 
	e_usb_devi˚_°©us


50 
	mkUSB_Devi˚SètusTe°Mode
 = 1U,

51 
	mkUSB_Devi˚SètusS≥ed
,

52 
	mkUSB_Devi˚SètusOtg
,

53 
	mkUSB_Devi˚SètusDevi˚
,

54 
	mkUSB_Devi˚SètusEndpoöt
,

55 
	mkUSB_Devi˚SètusDevi˚Sèã
,

56 
	mkUSB_Devi˚SètusAddªss
,

57 
	mkUSB_Devi˚SètusSynchFøme
,

58 
	mkUSB_Devi˚SètusBus
,

59 
	mkUSB_Devi˚SètusBusSu•íd
,

60 
	mkUSB_Devi˚SètusBusSÀï
,

61 
	mkUSB_Devi˚SètusBusResume
,

62 
	mkUSB_Devi˚SètusRemŸeWakeup
,

63 
	mkUSB_Devi˚SètusBusSÀïResume
,

64 } 
	tusb_devi˚_°©us_t
;

67 
	e_usb_devi˚_°©e


69 
	mkUSB_Devi˚SèãC⁄figuªd
 = 0U,

70 
	mkUSB_Devi˚SèãAddªss
,

71 
	mkUSB_Devi˚SèãDeÁu…
,

72 
	mkUSB_Devi˚SèãAddªssög
,

73 
	mkUSB_Devi˚SèãTe°Mode
,

74 } 
	tusb_devi˚_°©e_t
;

76 #i‡(
deföed
(
USB_DEVICE_CHARGER_DETECT_ENABLE
) && (USB_DEVICE_CHARGER_DETECT_ENABLE > 0U))

77 
	e_usb_dcd_dëe˘i⁄_£quí˚_°©us


79 
	mkUSB_DcdDëe˘i⁄NŸE«bÀd
 = 0x0U,

80 
	mkUSB_DcdD©aPöDëe˘i⁄Com∂ëed
 = 0x01U,

81 
	mkUSB_DcdCh¨gögP‹tDëe˘i⁄Com∂ëed
 = 0x02U,

82 
	mkUSB_DcdCh¨gîTy≥Dëe˘i⁄Com∂ëed
 = 0x03U,

83 } 
	tusb_dcd_dëe˘i⁄_£quí˚_°©us_t
;

85 
	e_usb_dcd_dëe˘i⁄_£quí˚_ªsu…s


87 
	mkUSB_DcdDëe˘i⁄NoResu…s
 = 0x0U,

88 
	mkUSB_DcdDëe˘i⁄Sènd¨dHo°
 = 0x01U,

89 
	mkUSB_DcdDëe˘i⁄Ch¨gögP‹t
 = 0x02U,

90 
	mkUSB_DcdDëe˘i⁄DediˇãdCh¨gî
 = 0x03U,

91 } 
	tusb_dcd_dëe˘i⁄_£quí˚_ªsu…s_t
;

95 
	e_usb_ídpoöt_°©us


97 
	mkUSB_Devi˚EndpoötSèãIdÀ
 = 0U,

98 
	mkUSB_Devi˚EndpoötSèãSèŒed
,

99 } 
	tusb_devi˚_ídpoöt_°©us_t
;

102 
	#USB_CONTROL_ENDPOINT
 (0U)

	)

104 
	#USB_CONTROL_MAX_PACKET_SIZE
 (64U)

	)

106 #i‡(
USB_DEVICE_CONFIG_EHCI
 && (
USB_CONTROL_MAX_PACKET_SIZE
 != (64U)))

107 #îr‹ 
F‹
 
high
 
•ìd
, 
USB_CONTROL_MAX_PACKET_SIZE
 
mu°
 
be
 64!!!

111 
	#USB_SETUP_PACKET_SIZE
 (8U)

	)

113 
	#USB_ENDPOINT_NUMBER_MASK
 (0x0FU)

	)

116 
	#USB_UNINITIALIZED_VAL_32
 (0xFFFFFFFFU)

	)

119 
	e_usb_devi˚_evít


121 
	mkUSB_Devi˚EvítBusRe£t
 = 1U,

122 
	mkUSB_Devi˚EvítSu•íd
,

123 
	mkUSB_Devi˚EvítResume
,

124 
	mkUSB_Devi˚EvítSÀïed
,

125 
	mkUSB_Devi˚EvítLPMResume
,

127 
	mkUSB_Devi˚EvítEº‹
,

128 
	mkUSB_Devi˚EvítDëach
,

129 
	mkUSB_Devi˚EvítAâach
,

130 
	mkUSB_Devi˚EvítSëC⁄figuøti⁄
,

131 
	mkUSB_Devi˚EvítSëI¡îÁ˚
,

133 
	mkUSB_Devi˚EvítGëDevi˚Des¸ùt‹
,

134 
	mkUSB_Devi˚EvítGëC⁄figuøti⁄Des¸ùt‹
,

135 
	mkUSB_Devi˚EvítGëSåögDes¸ùt‹
,

136 
	mkUSB_Devi˚EvítGëHidDes¸ùt‹
,

137 
	mkUSB_Devi˚EvítGëHidRï‹tDes¸ùt‹
,

138 
	mkUSB_Devi˚EvítGëHidPhysiˇlDes¸ùt‹
,

139 
	mkUSB_Devi˚EvítGëBOSDes¸ùt‹
,

140 
	mkUSB_Devi˚EvítGëDevi˚QuÆifõrDes¸ùt‹
,

141 
	mkUSB_Devi˚EvítVíd‹Reque°
,

142 
	mkUSB_Devi˚EvítSëRemŸeWakeup
,

143 
	mkUSB_Devi˚EvítGëC⁄figuøti⁄
,

144 
	mkUSB_Devi˚EvítGëI¡îÁ˚
,

145 
	mkUSB_Devi˚EvítSëBHNPE«bÀ
,

146 #i‡(
deföed
(
USB_DEVICE_CHARGER_DETECT_ENABLE
) && (USB_DEVICE_CHARGER_DETECT_ENABLE > 0U))

147 
	mkUSB_Devi˚EvítDcdTimeOut
,

148 
	mkUSB_Devi˚EvítDcdUnknownTy≥
,

149 
	mkUSB_Devi˚EvítSDPDëe˘ed
,

150 
	mkUSB_Devi˚EvítCh¨gögP‹tDëe˘ed
,

151 
	mkUSB_Devi˚EvítCh¨gögHo°Dëe˘ed
,

152 
	mkUSB_Devi˚EvítDediˇãdCh¨gîDëe˘ed
,

154 } 
	tusb_devi˚_evít_t
;

157 
	s_usb_devi˚_ídpoöt_ˇŒback_mesßge_°ru˘


159 
uöt8_t
 *
	mbuf„r
;

160 
uöt32_t
 
	mÀngth
;

161 
uöt8_t
 
	misSëup
;

162 } 
	tusb_devi˚_ídpoöt_ˇŒback_mesßge_°ru˘_t
;

179 
	$usb_°©us_t
 (*
	tusb_devi˚_ídpoöt_ˇŒback_t
)(
	tusb_devi˚_h™dÀ
 
	th™dÀ
,

180 
	tusb_devi˚_ídpoöt_ˇŒback_mesßge_°ru˘_t
 *
	tmesßge
,

181 *
	tˇŒbackP¨am
);

195 
	$usb_°©us_t
 (*
	tusb_devi˚_ˇŒback_t
)(
	tusb_devi˚_h™dÀ
 
	th™dÀ
, 
	tuöt32_t
 
	tˇŒbackEvít
, *
	tevítP¨am
);

198 
	s_usb_devi˚_ídpoöt_ˇŒback_°ru˘


200 
usb_devi˚_ídpoöt_ˇŒback_t
 
ˇŒbackFn
;

201 *
ˇŒbackP¨am
;

202 
uöt8_t
 
isBusy
;

203 } 
	tusb_devi˚_ídpoöt_ˇŒback_°ru˘_t
;

206 
	s_usb_devi˚_ídpoöt_öô_°ru˘


208 
uöt16_t
 
maxPackëSize
;

209 
uöt8_t
 
ídpoötAddªss
;

210 
uöt8_t
 
å™s„rTy≥
;

211 
uöt8_t
 
z…
;

212 } 
	tusb_devi˚_ídpoöt_öô_°ru˘_t
;

215 
	s_usb_devi˚_ídpoöt_°©us_°ru˘


217 
uöt8_t
 
ídpoötAddªss
;

218 
uöt16_t
 
ídpoötSètus
;

219 } 
	tusb_devi˚_ídpoöt_°©us_°ru˘_t
;

221 #i‡(
	`deföed
(
USB_DEVICE_CHARGER_DETECT_ENABLE
) && (USB_DEVICE_CHARGER_DETECT_ENABLE > 0U))

223 
	s_usb_devi˚_dcd_ch¨gög_time


225 
uöt16_t
 
dcdSeqInôTime
;

226 
uöt16_t
 
dcdDbncTime
;

227 
uöt16_t
 
dcdDpSrcOnTime
;

228 
uöt16_t
 
dcdTimeWaôA·îPrD
;

229 
uöt8_t
 
dcdTimeDMSrcOn
;

230 } 
	tusb_devi˚_dcd_ch¨gög_time_t
;

233 #i‡
	`deföed
(
__˝lu•lus
)

265 
usb_°©us_t
 
	`USB_Devi˚Inô
(
uöt8_t
 
c⁄åﬁÀrId
,

266 
usb_devi˚_ˇŒback_t
 
devi˚CÆlback
,

267 
usb_devi˚_h™dÀ
 *
h™dÀ
);

282 
usb_°©us_t
 
	`USB_Devi˚Run
(
usb_devi˚_h™dÀ
 
h™dÀ
);

297 
usb_°©us_t
 
	`USB_Devi˚St›
(
usb_devi˚_h™dÀ
 
h™dÀ
);

309 
usb_°©us_t
 
	`USB_Devi˚Deöô
(
usb_devi˚_h™dÀ
 
h™dÀ
);

336 
usb_°©us_t
 
	`USB_Devi˚SídReque°
(
usb_devi˚_h™dÀ
 
h™dÀ
,

337 
uöt8_t
 
ídpoötAddªss
,

338 
uöt8_t
 *
buf„r
,

339 
uöt32_t
 
Àngth
);

366 
usb_°©us_t
 
	`USB_Devi˚RecvReque°
(
usb_devi˚_h™dÀ
 
h™dÀ
,

367 
uöt8_t
 
ídpoötAddªss
,

368 
uöt8_t
 *
buf„r
,

369 
uöt32_t
 
Àngth
);

383 
usb_°©us_t
 
	`USB_Devi˚C™˚l
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
uöt8_t
 
ídpoötAddªss
);

402 
usb_°©us_t
 
	`USB_Devi˚InôEndpoöt
(
usb_devi˚_h™dÀ
 
h™dÀ
,

403 
usb_devi˚_ídpoöt_öô_°ru˘_t
 *
ïInô
,

404 
usb_devi˚_ídpoöt_ˇŒback_°ru˘_t
 *
ïCÆlback
);

420 
usb_°©us_t
 
	`USB_Devi˚DeöôEndpoöt
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
uöt8_t
 
ídpoötAddªss
);

435 
usb_°©us_t
 
	`USB_Devi˚SèŒEndpoöt
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
uöt8_t
 
ídpoötAddªss
);

450 
usb_°©us_t
 
	`USB_Devi˚Un°ÆlEndpoöt
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
uöt8_t
 
ídpoötAddªss
);

467 
usb_°©us_t
 
	`USB_Devi˚GëSètus
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
usb_devi˚_°©us_t
 
ty≥
, *
∑øm
);

483 
usb_°©us_t
 
	`USB_Devi˚SëSètus
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
usb_devi˚_°©us_t
 
ty≥
, *
∑øm
);

485 #i‡(
	`deföed
(
USB_DEVICE_CHARGER_DETECT_ENABLE
) && (USB_DEVICE_CHARGER_DETECT_ENABLE > 0U))

499 
usb_°©us_t
 
	`USB_Devi˚DcdInôModuÀ
(
usb_devi˚_h™dÀ
 
h™dÀ
, *
time_∑øm
);

511 
usb_°©us_t
 
	`USB_Devi˚DcdDeöôModuÀ
(
usb_devi˚_h™dÀ
 
h™dÀ
);

521 
	`USB_Devi˚TaskFun˘i⁄
(*
devi˚H™dÀ
);

523 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_KHCI
)) && (USB_DEVICE_CONFIG_KHCI > 0U))

533 
	#USB_Devi˚KhciTaskFun˘i⁄
(
devi˚H™dÀ
Ë
	`USB_Devi˚TaskFun˘i⁄
(devi˚H™dÀ)

	)

536 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_EHCI
)) && (USB_DEVICE_CONFIG_EHCI > 0U))

546 
	#USB_Devi˚EhciTaskFun˘i⁄
(
devi˚H™dÀ
Ë
	`USB_Devi˚TaskFun˘i⁄
(devi˚H™dÀ)

	)

547 #i‡(
	`deföed
(
USB_DEVICE_CHARGER_DETECT_ENABLE
) && (USB_DEVICE_CHARGER_DETECT_ENABLE > 0U))

555 
	`USB_Devi˚DcdHSI§Fun˘i⁄
(*
devi˚H™dÀ
);

559 #i‡(((
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511FS
)) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U)) || \

560 ((
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U)))

570 
	#USB_Devi˚LpcIp3511TaskFun˘i⁄
(
devi˚H™dÀ
Ë
	`USB_Devi˚TaskFun˘i⁄
(devi˚H™dÀ)

	)

573 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_KHCI
)) && (USB_DEVICE_CONFIG_KHCI > 0U))

581 
	`USB_Devi˚KhciI§Fun˘i⁄
(*
devi˚H™dÀ
);

582 #i‡(
	`deföed
(
USB_DEVICE_CHARGER_DETECT_ENABLE
) && (USB_DEVICE_CHARGER_DETECT_ENABLE > 0U))

590 
	`USB_Devi˚DcdI§Fun˘i⁄
(*
devi˚H™dÀ
);

594 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_EHCI
)) && (USB_DEVICE_CONFIG_EHCI > 0U))

602 
	`USB_Devi˚EhciI§Fun˘i⁄
(*
devi˚H™dÀ
);

605 #i‡(((
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511FS
)) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U)) || \

606 ((
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U)))

614 
	`USB_Devi˚LpcIp3511I§Fun˘i⁄
(*
devi˚H™dÀ
);

625 
	`USB_Devi˚GëVîsi⁄
(
uöt32_t
 *
vîsi⁄
);

627 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_REMOTE_WAKEUP
)) && (USB_DEVICE_CONFIG_REMOTE_WAKEUP > 0U))

637 
usb_°©us_t
 
	`USB_Devi˚Upd©eHwTick
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
uöt64_t
 
tick
);

642 #i‡
	`deföed
(
__˝lu•lus
)

643 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\middleware\usb\device\usb_device_dci.c

35 
	~"usb_devi˚_c⁄fig.h
"

36 
	~"usb.h
"

38 
	~"usb_devi˚.h
"

39 
	~"usb_devi˚_dci.h
"

41 
	~"f¶_devi˚_ªgi°îs.h
"

43 #i‡((
deföed
(
USB_DEVICE_CONFIG_NUM
)) && (USB_DEVICE_CONFIG_NUM > 0U))

45 #i‡((
deföed
(
USB_DEVICE_CONFIG_KHCI
)) && (USB_DEVICE_CONFIG_KHCI > 0U))

46 
	~"usb_devi˚_khci.h
"

49 #i‡((
deföed
(
USB_DEVICE_CONFIG_EHCI
)) && (USB_DEVICE_CONFIG_EHCI > 0U))

50 
	~"usb_devi˚_ehci.h
"

53 #i‡(((
deföed
(
USB_DEVICE_CONFIG_LPCIP3511FS
)) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U)) || \

54 ((
deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
)Ë&& (
	gUSB_DEVICE_CONFIG_LPCIP3511HS
 > 0U)))

55 
	~"usb_devi˚_Õcù3511.h
"

58 
	~"usb_devi˚_ch9.h
"

59 #i‡(
deföed
(
USB_DEVICE_CONFIG_BUFFER_PROPERTY_CACHEABLE
) && (USB_DEVICE_CONFIG_BUFFER_PROPERTY_CACHEABLE > 0U))

60 
	~"f¶_ˇche.h
"

69 
usb_°©us_t
 
USB_Devi˚AŒoˇãH™dÀ
(
uöt8_t
 
c⁄åﬁÀrId
, 
usb_devi˚_°ru˘_t
 **
h™dÀ
);

70 
usb_°©us_t
 
USB_Devi˚FªeH™dÀ
(
usb_devi˚_°ru˘_t
 *
h™dÀ
);

71 
usb_°©us_t
 
USB_Devi˚GëC⁄åﬁÀrI¡îÁ˚
(

72 
uöt8_t
 
c⁄åﬁÀrId
, c⁄° 
usb_devi˚_c⁄åﬁÀr_öãrÁ˚_°ru˘_t
 **
c⁄åﬁÀrI¡îÁ˚
);

73 
usb_°©us_t
 
USB_Devi˚Tøns„r
(
usb_devi˚_h™dÀ
 
h™dÀ
,

74 
uöt8_t
 
ídpoötAddªss
,

75 
uöt8_t
 *
buf„r
,

76 
uöt32_t
 
Àngth
);

77 
usb_°©us_t
 
USB_Devi˚C⁄åﬁ
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
usb_devi˚_c⁄åﬁ_ty≥_t
 
ty≥
, *
∑øm
);

78 
usb_°©us_t
 
USB_Devi˚Re£tNŸifiˇti⁄
(
usb_devi˚_°ru˘_t
 *
h™dÀ
,

79 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 *
mesßge
);

80 #i‡(
deföed
(
USB_DEVICE_CONFIG_LOW_POWER_MODE
) && (USB_DEVICE_CONFIG_LOW_POWER_MODE > 0U))

81 
usb_°©us_t
 
USB_Devi˚Su•ídNŸifiˇti⁄
(
usb_devi˚_°ru˘_t
 *
h™dÀ
,

82 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 *
mesßge
);

83 
usb_°©us_t
 
USB_Devi˚ResumeNŸifiˇti⁄
(
usb_devi˚_°ru˘_t
 *
h™dÀ
,

84 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 *
mesßge
);

85 #i‡(
deföed
(
USB_DEVICE_CONFIG_LPM_L1
) && (USB_DEVICE_CONFIG_LPM_L1 > 0U))

86 
usb_°©us_t
 
USB_Devi˚SÀïNŸifiˇti⁄
(
usb_devi˚_°ru˘_t
 *
h™dÀ
,

87 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 *
mesßge
);

91 #i‡(
deföed
(
USB_DEVICE_CONFIG_DETACH_ENABLE
) && (USB_DEVICE_CONFIG_DETACH_ENABLE > 0U))

92 
usb_°©us_t
 
USB_Devi˚DëachNŸifiˇti⁄
(
usb_devi˚_°ru˘_t
 *
h™dÀ
,

93 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 *
mesßge
);

94 
usb_°©us_t
 
USB_Devi˚AâachNŸifiˇti⁄
(
usb_devi˚_°ru˘_t
 *
h™dÀ
,

95 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 *
mesßge
);

97 
usb_°©us_t
 
USB_Devi˚NŸifiˇti⁄
(
usb_devi˚_°ru˘_t
 *
h™dÀ
, 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 *
mesßge
);

103 
USB_GLOBAL
 
usb_devi˚_°ru˘_t
 
	gs_UsbDevi˚
[
USB_DEVICE_CONFIG_NUM
];

121 
usb_°©us_t
 
	$USB_Devi˚AŒoˇãH™dÀ
(
uöt8_t
 
c⁄åﬁÀrId
, 
usb_devi˚_°ru˘_t
 **
h™dÀ
)

123 
uöt32_t
 
cou¡
;

124 
	`USB_OSA_SR_ALLOC
();

126 
	`USB_OSA_ENTER_CRITICAL
();

128 
cou¡
 = 0U; cou¡ < 
USB_DEVICE_CONFIG_NUM
; count++)

130 i‡((
NULL
 !
s_UsbDevi˚
[
cou¡
].
c⁄åﬁÀrH™dÀ
Ë&& (
c⁄åﬁÀrId
 == s_UsbDevice[count].controllerId))

132 
	`USB_OSA_EXIT_CRITICAL
();

133  
kSètus_USB_Eº‹
;

137 
cou¡
 = 0U; cou¡ < 
USB_DEVICE_CONFIG_NUM
; count++)

139 i‡(
NULL
 =
s_UsbDevi˚
[
cou¡
].
c⁄åﬁÀrH™dÀ
)

141 
s_UsbDevi˚
[
cou¡
].
c⁄åﬁÀrId
 = controllerId;

142 *
h™dÀ
 = &
s_UsbDevi˚
[
cou¡
];

143 
	`USB_OSA_EXIT_CRITICAL
();

144  
kSètus_USB_Suc˚ss
;

147 
	`USB_OSA_EXIT_CRITICAL
();

148  
kSètus_USB_Busy
;

149 
	}
}

160 
usb_°©us_t
 
	$USB_Devi˚FªeH™dÀ
(
usb_devi˚_°ru˘_t
 *
h™dÀ
)

162 
	`USB_OSA_SR_ALLOC
();

164 
	`USB_OSA_ENTER_CRITICAL
();

165 
h™dÀ
->
c⁄åﬁÀrH™dÀ
 = 
NULL
;

166 
h™dÀ
->
c⁄åﬁÀrId
 = 0U;

167 
	`USB_OSA_EXIT_CRITICAL
();

168  
kSètus_USB_Suc˚ss
;

169 
	}
}

171 #i‡((
deföed
(
USB_DEVICE_CONFIG_KHCI
)) && (USB_DEVICE_CONFIG_KHCI > 0U))

173 c⁄° 
usb_devi˚_c⁄åﬁÀr_öãrÁ˚_°ru˘_t
 
	gs_UsbDevi˚KhciI¡îÁ˚
 = {

174 
USB_Devi˚KhciInô
, 
USB_Devi˚KhciDeöô
, 
USB_Devi˚KhciSíd
,

175 
USB_Devi˚KhciRecv
, 
USB_Devi˚KhciC™˚l
, 
USB_Devi˚KhciC⁄åﬁ
};

178 #i‡((
deföed
(
USB_DEVICE_CONFIG_EHCI
)) && (USB_DEVICE_CONFIG_EHCI > 0U))

180 c⁄° 
usb_devi˚_c⁄åﬁÀr_öãrÁ˚_°ru˘_t
 
	gs_UsbDevi˚EhciI¡îÁ˚
 = {

181 
USB_Devi˚EhciInô
, 
USB_Devi˚EhciDeöô
, 
USB_Devi˚EhciSíd
,

182 
USB_Devi˚EhciRecv
, 
USB_Devi˚EhciC™˚l
, 
USB_Devi˚EhciC⁄åﬁ
};

185 #i‡(((
deföed
(
USB_DEVICE_CONFIG_LPCIP3511FS
)) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U)) || \

186 ((
deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
)Ë&& (
	gUSB_DEVICE_CONFIG_LPCIP3511HS
 > 0U)))

188 c⁄° 
usb_devi˚_c⁄åﬁÀr_öãrÁ˚_°ru˘_t
 
	gs_UsbDevi˚Lpc3511IpI¡îÁ˚
 = {

189 
USB_Devi˚Lpc3511IpInô
, 
USB_Devi˚Lpc3511IpDeöô
, 
USB_Devi˚Lpc3511IpSíd
,

190 
USB_Devi˚Lpc3511IpRecv
, 
USB_Devi˚Lpc3511IpC™˚l
, 
USB_Devi˚Lpc3511IpC⁄åﬁ
};

205 
usb_°©us_t
 
	$USB_Devi˚GëC⁄åﬁÀrI¡îÁ˚
(

206 
uöt8_t
 
c⁄åﬁÀrId
, c⁄° 
usb_devi˚_c⁄åﬁÀr_öãrÁ˚_°ru˘_t
 **
c⁄åﬁÀrI¡îÁ˚
)

208 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_C⁄åﬁÀrNŸFound
;

209 
c⁄åﬁÀrId
)

211 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_KHCI
)) && (USB_DEVICE_CONFIG_KHCI > 0U))

213 
kUSB_C⁄åﬁÀrKhci0
:

214 
kUSB_C⁄åﬁÀrKhci1
:

215 *
c⁄åﬁÀrI¡îÁ˚
 = (c⁄° 
usb_devi˚_c⁄åﬁÀr_öãrÁ˚_°ru˘_t
 *)&
s_UsbDevi˚KhciI¡îÁ˚
;

216 
îr‹
 = 
kSètus_USB_Suc˚ss
;

219 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_EHCI
)) && (USB_DEVICE_CONFIG_EHCI > 0U))

221 
kUSB_C⁄åﬁÀrEhci0
:

222 
kUSB_C⁄åﬁÀrEhci1
:

223 
îr‹
 = 
kSètus_USB_Suc˚ss
;

224 *
c⁄åﬁÀrI¡îÁ˚
 = (c⁄° 
usb_devi˚_c⁄åﬁÀr_öãrÁ˚_°ru˘_t
 *)&
s_UsbDevi˚EhciI¡îÁ˚
;

227 #i‡(((
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511FS
)) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U)) || \

228 ((
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U)))

230 
kUSB_C⁄åﬁÀrLpcIp3511Fs0
:

231 
kUSB_C⁄åﬁÀrLpcIp3511Fs1
:

232 
kUSB_C⁄åﬁÀrLpcIp3511Hs0
:

233 
kUSB_C⁄åﬁÀrLpcIp3511Hs1
:

234 
îr‹
 = 
kSètus_USB_Suc˚ss
;

235 *
c⁄åﬁÀrI¡îÁ˚
 = (c⁄° 
usb_devi˚_c⁄åﬁÀr_öãrÁ˚_°ru˘_t
 *)&
s_UsbDevi˚Lpc3511IpI¡îÁ˚
;

241  
îr‹
;

242 
	}
}

260 
usb_°©us_t
 
	$USB_Devi˚Tøns„r
(
usb_devi˚_h™dÀ
 
h™dÀ
,

261 
uöt8_t
 
ídpoötAddªss
,

262 
uöt8_t
 *
buf„r
,

263 
uöt32_t
 
Àngth
)

265 
usb_devi˚_°ru˘_t
 *
devi˚H™dÀ
 = (usb_devi˚_°ru˘_à*)
h™dÀ
;

266 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

267 
uöt8_t
 
ídpoöt
 = 
ídpoötAddªss
 & 
USB_ENDPOINT_NUMBER_MASK
;

268 
uöt8_t
 
dúe˘i⁄
 = (
ídpoötAddªss
 & 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK
) >>

269 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT
;

270 
	`USB_OSA_SR_ALLOC
();

272 i‡(
NULL
 =
devi˚H™dÀ
)

274  
kSètus_USB_InvÆidH™dÀ
;

277 i‡(
NULL
 !
devi˚H™dÀ
->
c⁄åﬁÀrI¡îÁ˚
)

279 i‡(
devi˚H™dÀ
->
ïCÆlback
[(
uöt8_t
)((
uöt32_t
)
ídpoöt
 << 1UË| 
dúe˘i⁄
].
isBusy
)

281  
kSètus_USB_Busy
;

283 
	`USB_OSA_ENTER_CRITICAL
();

284 
devi˚H™dÀ
->
ïCÆlback
[(
uöt8_t
)((
uöt32_t
)
ídpoöt
 << 1UË| 
dúe˘i⁄
].
isBusy
 = 1U;

285 
	`USB_OSA_EXIT_CRITICAL
();

286 i‡(
ídpoötAddªss
 & 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK
)

288 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_BUFFER_PROPERTY_CACHEABLE
) && (USB_DEVICE_CONFIG_BUFFER_PROPERTY_CACHEABLE > 0U))

289 i‡(
Àngth
)

291 
	`DCACHE_CÀ™ByR™ge
((
uöt32_t
)
buf„r
, 
Àngth
);

295 
îr‹
 = 
devi˚H™dÀ
->
c⁄åﬁÀrI¡îÁ˚
->
	`devi˚Síd
(devi˚H™dÀ->
c⁄åﬁÀrH™dÀ
, 
ídpoötAddªss
,

296 
buf„r
, 
Àngth
);

300 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_BUFFER_PROPERTY_CACHEABLE
) && (USB_DEVICE_CONFIG_BUFFER_PROPERTY_CACHEABLE > 0U))

301 i‡(
Àngth
)

303 
	`DCACHE_CÀ™InvÆid©eByR™ge
((
uöt32_t
)
buf„r
, 
Àngth
);

307 
îr‹
 = 
devi˚H™dÀ
->
c⁄åﬁÀrI¡îÁ˚
->
	`devi˚Recv
(devi˚H™dÀ->
c⁄åﬁÀrH™dÀ
, 
ídpoötAddªss
,

308 
buf„r
, 
Àngth
);

310 i‡(
kSètus_USB_Suc˚ss
 !
îr‹
)

312 
	`USB_OSA_ENTER_CRITICAL
();

313 
devi˚H™dÀ
->
ïCÆlback
[(
uöt8_t
)((
uöt32_t
)
ídpoöt
 << 1UË| 
dúe˘i⁄
].
isBusy
 = 0U;

314 
	`USB_OSA_EXIT_CRITICAL
();

319 
îr‹
 = 
kSètus_USB_C⁄åﬁÀrNŸFound
;

321  
îr‹
;

322 
	}
}

339 
usb_°©us_t
 
	$USB_Devi˚C⁄åﬁ
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
usb_devi˚_c⁄åﬁ_ty≥_t
 
ty≥
, *
∑øm
)

341 
usb_devi˚_°ru˘_t
 *
devi˚H™dÀ
 = (usb_devi˚_°ru˘_à*)
h™dÀ
;

342 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

344 i‡(
NULL
 =
devi˚H™dÀ
)

346  
kSètus_USB_InvÆidH™dÀ
;

349 i‡(
NULL
 !
devi˚H™dÀ
->
c⁄åﬁÀrI¡îÁ˚
)

352 
îr‹
 = 
devi˚H™dÀ
->
c⁄åﬁÀrI¡îÁ˚
->
	`devi˚C⁄åﬁ
(devi˚H™dÀ->
c⁄åﬁÀrH™dÀ
, 
ty≥
, 
∑øm
);

356 
îr‹
 = 
kSètus_USB_C⁄åﬁÀrNŸFound
;

358  
îr‹
;

359 
	}
}

371 
usb_°©us_t
 
	$USB_Devi˚Re£tNŸifiˇti⁄
(
usb_devi˚_°ru˘_t
 *
h™dÀ
,

372 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 *
mesßge
)

374 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_USE_TASK
) && (USB_DEVICE_CONFIG_USE_TASK > 0U))

375 
	`USB_OSA_SR_ALLOC
();

378 
h™dÀ
->
isRe£âög
 = 1U;

380 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_REMOTE_WAKEUP
)) && (USB_DEVICE_CONFIG_REMOTE_WAKEUP > 0U))

382 
h™dÀ
->
ªmŸewakeup
 = 0U;

385 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_USE_TASK
) && (USB_DEVICE_CONFIG_USE_TASK > 0U))

386 
	`USB_OSA_ENTER_CRITICAL
();

387 
h™dÀ
->
ïCÆlbackDúe˘ly
 = 1;

388 
	`USB_OSA_EXIT_CRITICAL
();

391 
	`USB_Devi˚C⁄åﬁ
(
h™dÀ
, 
kUSB_Devi˚C⁄åﬁSëDeÁu…Sètus
, 
NULL
);

392 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_USE_TASK
) && (USB_DEVICE_CONFIG_USE_TASK > 0U))

393 
	`USB_OSA_ENTER_CRITICAL
();

394 
h™dÀ
->
ïCÆlbackDúe˘ly
 = 0;

395 
	`USB_OSA_EXIT_CRITICAL
();

398 
h™dÀ
->
°©e
 = 
kUSB_Devi˚SèãDeÁu…
;

399 
h™dÀ
->
devi˚Addªss
 = 0U;

401 
uöt32_t
 
cou¡
 = 0U; cou¡ < (
USB_DEVICE_CONFIG_ENDPOINTS
 * 2U); count++)

403 
h™dÀ
->
ïCÆlback
[
cou¡
].
ˇŒbackFn
 = (
usb_devi˚_ídpoöt_ˇŒback_t
)
NULL
;

404 
h™dÀ
->
ïCÆlback
[
cou¡
].
ˇŒbackP¨am
 = 
NULL
;

405 
h™dÀ
->
ïCÆlback
[
cou¡
].
isBusy
 = 0U;

409 
h™dÀ
->
	`devi˚CÆlback
(h™dÀ, 
kUSB_Devi˚EvítBusRe£t
, 
NULL
);

411 
h™dÀ
->
isRe£âög
 = 0U;

412  
kSètus_USB_Suc˚ss
;

413 
	}
}

415 #i‡(
deföed
(
USB_DEVICE_CONFIG_LOW_POWER_MODE
) && (USB_DEVICE_CONFIG_LOW_POWER_MODE > 0U))

426 
usb_°©us_t
 
	$USB_Devi˚Su•ídNŸifiˇti⁄
(
usb_devi˚_°ru˘_t
 *
h™dÀ
,

427 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 *
mesßge
)

430  
h™dÀ
->
	`devi˚CÆlback
(h™dÀ, 
kUSB_Devi˚EvítSu•íd
, 
NULL
);

431 
	}
}

443 
usb_°©us_t
 
	$USB_Devi˚ResumeNŸifiˇti⁄
(
usb_devi˚_°ru˘_t
 *
h™dÀ
,

444 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 *
mesßge
)

447  
h™dÀ
->
	`devi˚CÆlback
(h™dÀ, 
kUSB_Devi˚EvítResume
, 
NULL
);

448 
	}
}

449 #i‡(
deföed
(
USB_DEVICE_CONFIG_LPM_L1
) && (USB_DEVICE_CONFIG_LPM_L1 > 0U))

460 
usb_°©us_t
 
	$USB_Devi˚SÀïNŸifiˇti⁄
(
usb_devi˚_°ru˘_t
 *
h™dÀ
,

461 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 *
mesßge
)

464  
h™dÀ
->
	`devi˚CÆlback
(h™dÀ, 
kUSB_Devi˚EvítSÀïed
, 
NULL
);

465 
	}
}

477 
usb_°©us_t
 
	$USB_Devi˚GëRemŸeWakeUp
(
usb_devi˚_°ru˘_t
 *
h™dÀ
, 
uöt8_t
 **
Êag
)

480  
	`USB_Devi˚C⁄åﬁ
(
h™dÀ
, 
kUSB_Devi˚C⁄åﬁGëRemŸeWakeUp
, 
Êag
);

481 
	}
}

485 #i‡(
deföed
(
USB_DEVICE_CONFIG_ERROR_HANDLING
) && (USB_DEVICE_CONFIG_ERROR_HANDLING > 0U))

486 
usb_°©us_t
 
	$USB_Devi˚Eº‹NŸifiˇti⁄
(
usb_devi˚_°ru˘_t
 *
h™dÀ
, 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 *
mesßge
)

489  
h™dÀ
->
	`devi˚CÆlback
(h™dÀ, 
kUSB_Devi˚EvítEº‹
, 
NULL
);

490 
	}
}

493 #i‡(
deföed
(
USB_DEVICE_CONFIG_DETACH_ENABLE
) && (USB_DEVICE_CONFIG_DETACH_ENABLE > 0U))

504 
usb_°©us_t
 
	$USB_Devi˚DëachNŸifiˇti⁄
(
usb_devi˚_°ru˘_t
 *
h™dÀ
,

505 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 *
mesßge
)

508  
h™dÀ
->
	`devi˚CÆlback
(h™dÀ, 
kUSB_Devi˚EvítDëach
, 
NULL
);

509 
	}
}

521 
usb_°©us_t
 
	$USB_Devi˚AâachNŸifiˇti⁄
(
usb_devi˚_°ru˘_t
 *
h™dÀ
,

522 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 *
mesßge
)

525  
h™dÀ
->
	`devi˚CÆlback
(h™dÀ, 
kUSB_Devi˚EvítAâach
, 
NULL
);

526 
	}
}

529 #i‡(
deföed
(
USB_DEVICE_CHARGER_DETECT_ENABLE
) && (USB_DEVICE_CHARGER_DETECT_ENABLE > 0U)) && \

530 ((
deföed
(
FSL_FEATURE_SOC_USBDCD_COUNT
Ë&& (
	gFSL_FEATURE_SOC_USBDCD_COUNT
 > 0U)) || \

531 (
deföed
(
FSL_FEATURE_SOC_USBHSDCD_COUNT
Ë&& (
	gFSL_FEATURE_SOC_USBHSDCD_COUNT
 > 0U)))

542 
usb_°©us_t
 
	$USB_Devi˚DcdTimeOutNŸifiˇti⁄
(
usb_devi˚_°ru˘_t
 *
h™dÀ
,

543 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 *
mesßge
)

546  
h™dÀ
->
	`devi˚CÆlback
(h™dÀ, 
kUSB_Devi˚EvítDcdTimeOut
, 
NULL
);

547 
	}
}

559 
usb_°©us_t
 
	$USB_Devi˚DcdUnknownP‹tTy≥NŸifiˇti⁄
(
usb_devi˚_°ru˘_t
 *
h™dÀ
,

560 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 *
mesßge
)

563  
h™dÀ
->
	`devi˚CÆlback
(h™dÀ, 
kUSB_Devi˚EvítDcdUnknownTy≥
, 
NULL
);

564 
	}
}

576 
usb_°©us_t
 
	$USB_Devi˚DcdSDPDëe˘NŸifiˇti⁄
(
usb_devi˚_°ru˘_t
 *
h™dÀ
,

577 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 *
mesßge
)

580  
h™dÀ
->
	`devi˚CÆlback
(h™dÀ, 
kUSB_Devi˚EvítSDPDëe˘ed
, 
NULL
);

581 
	}
}

593 
usb_°©us_t
 
	$USB_Devi˚DcdCh¨gögP‹tDëe˘NŸifiˇti⁄
(
usb_devi˚_°ru˘_t
 *
h™dÀ
,

594 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 *
mesßge
)

597  
h™dÀ
->
	`devi˚CÆlback
(h™dÀ, 
kUSB_Devi˚EvítCh¨gögP‹tDëe˘ed
, 
NULL
);

598 
	}
}

610 
usb_°©us_t
 
	$USB_Devi˚DcdCh¨gögHo°Dëe˘NŸifiˇti⁄
(
usb_devi˚_°ru˘_t
 *
h™dÀ
,

611 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 *
mesßge
)

614  
h™dÀ
->
	`devi˚CÆlback
(h™dÀ, 
kUSB_Devi˚EvítCh¨gögHo°Dëe˘ed
, 
NULL
);

615 
	}
}

628 
usb_°©us_t
 
	$USB_Devi˚DcdDediˇãdCh¨gîDëe˘NŸifiˇti⁄
(
usb_devi˚_°ru˘_t
 *
h™dÀ
,

629 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 *
mesßge
)

632  
h™dÀ
->
	`devi˚CÆlback
(h™dÀ, 
kUSB_Devi˚EvítDediˇãdCh¨gîDëe˘ed
, 
NULL
);

633 
	}
}

646 
usb_°©us_t
 
	$USB_Devi˚NŸifiˇti⁄
(
usb_devi˚_°ru˘_t
 *
h™dÀ
, 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 *
mesßge
)

648 
uöt8_t
 
ídpoöt
 = 
mesßge
->
code
 & 
USB_ENDPOINT_NUMBER_MASK
;

649 
uöt8_t
 
dúe˘i⁄
 = (
mesßge
->
code
 & 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK
) >>

650 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT
;

651 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

653 
mesßge
->
code
)

655 
kUSB_Devi˚NŸifyBusRe£t
:

656 
îr‹
 = 
	`USB_Devi˚Re£tNŸifiˇti⁄
(
h™dÀ
, 
mesßge
);

658 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_LOW_POWER_MODE
) && (USB_DEVICE_CONFIG_LOW_POWER_MODE > 0U))

659 
kUSB_Devi˚NŸifySu•íd
:

660 
îr‹
 = 
	`USB_Devi˚Su•ídNŸifiˇti⁄
(
h™dÀ
, 
mesßge
);

662 
kUSB_Devi˚NŸifyResume
:

663 
îr‹
 = 
	`USB_Devi˚ResumeNŸifiˇti⁄
(
h™dÀ
, 
mesßge
);

665 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_LPM_L1
) && (USB_DEVICE_CONFIG_LPM_L1 > 0U))

666 
kUSB_Devi˚NŸifyLPMSÀï
:

667 
îr‹
 = 
	`USB_Devi˚SÀïNŸifiˇti⁄
(
h™dÀ
, 
mesßge
);

672 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_ERROR_HANDLING
) && (USB_DEVICE_CONFIG_ERROR_HANDLING > 0U))

673 
kUSB_Devi˚NŸifyEº‹
:

674 
îr‹
 = 
	`USB_Devi˚Eº‹NŸifiˇti⁄
(
h™dÀ
, 
mesßge
);

678 #i‡
USB_DEVICE_CONFIG_DETACH_ENABLE


679 
kUSB_Devi˚NŸifyDëach
:

680 
îr‹
 = 
	`USB_Devi˚DëachNŸifiˇti⁄
(
h™dÀ
, 
mesßge
);

682 
kUSB_Devi˚NŸifyAâach
:

683 
îr‹
 = 
	`USB_Devi˚AâachNŸifiˇti⁄
(
h™dÀ
, 
mesßge
);

686 #i‡(
	`deföed
(
USB_DEVICE_CHARGER_DETECT_ENABLE
) && (USB_DEVICE_CHARGER_DETECT_ENABLE > 0U)) && \

687 ((
	`deföed
(
FSL_FEATURE_SOC_USBDCD_COUNT
) && (FSL_FEATURE_SOC_USBDCD_COUNT > 0U)) || \

688 (
	`deföed
(
FSL_FEATURE_SOC_USBHSDCD_COUNT
) && (FSL_FEATURE_SOC_USBHSDCD_COUNT > 0U)))

689 
kUSB_Devi˚NŸifyDcdTimeOut
:

690 
îr‹
 = 
	`USB_Devi˚DcdTimeOutNŸifiˇti⁄
(
h™dÀ
, 
mesßge
);

692 
kUSB_Devi˚NŸifyDcdUnknownP‹tTy≥
:

693 
îr‹
 = 
	`USB_Devi˚DcdUnknownP‹tTy≥NŸifiˇti⁄
(
h™dÀ
, 
mesßge
);

695 
kUSB_Devi˚NŸifySDPDëe˘ed
:

696 
îr‹
 = 
	`USB_Devi˚DcdSDPDëe˘NŸifiˇti⁄
(
h™dÀ
, 
mesßge
);

698 
kUSB_Devi˚NŸifyCh¨gögP‹tDëe˘ed
:

699 
îr‹
 = 
	`USB_Devi˚DcdCh¨gögP‹tDëe˘NŸifiˇti⁄
(
h™dÀ
, 
mesßge
);

701 
kUSB_Devi˚NŸifyCh¨gögHo°Dëe˘ed
:

702 
îr‹
 = 
	`USB_Devi˚DcdCh¨gögHo°Dëe˘NŸifiˇti⁄
(
h™dÀ
, 
mesßge
);

704 
kUSB_Devi˚NŸifyDediˇãdCh¨gîDëe˘ed
:

705 
îr‹
 = 
	`USB_Devi˚DcdDediˇãdCh¨gîDëe˘NŸifiˇti⁄
(
h™dÀ
, 
mesßge
);

710 i‡(
ídpoöt
 < 
USB_DEVICE_CONFIG_ENDPOINTS
)

712 i‡(
h™dÀ
->
ïCÆlback
[(
uöt8_t
)((
uöt32_t
)
ídpoöt
 << 1UË| 
dúe˘i⁄
].
ˇŒbackFn
)

714 
usb_devi˚_ídpoöt_ˇŒback_mesßge_°ru˘_t
 
ídpoötCÆlbackMesßge
;

715 
ídpoötCÆlbackMesßge
.
buf„r
 = 
mesßge
->buffer;

716 
ídpoötCÆlbackMesßge
.
Àngth
 = 
mesßge
->length;

717 
ídpoötCÆlbackMesßge
.
isSëup
 = 
mesßge
->isSetup;

718 i‡(
mesßge
->
isSëup
)

720 
h™dÀ
->
ïCÆlback
[0].
isBusy
 = 0U;

721 
h™dÀ
->
ïCÆlback
[1].
isBusy
 = 0U;

725 
h™dÀ
->
ïCÆlback
[(
uöt8_t
)((
uöt32_t
)
ídpoöt
 << 1UË| 
dúe˘i⁄
].
isBusy
 = 0U;

728 
îr‹
 = 
h™dÀ
->
ïCÆlback
[(
uöt8_t
)((
uöt32_t
)
ídpoöt
 << 1UË| 
dúe˘i⁄
].
	`ˇŒbackFn
(

729 
h™dÀ
, &
ídpoötCÆlbackMesßge
,

730 
h™dÀ
->
ïCÆlback
[(
uöt8_t
)((
uöt32_t
)
ídpoöt
 << 1UË| 
dúe˘i⁄
].
ˇŒbackP¨am
);

735  
îr‹
;

736 
	}
}

748 
usb_°©us_t
 
	$USB_Devi˚NŸifiˇti⁄Triggî
(*
h™dÀ
, *
msg
)

750 
usb_devi˚_°ru˘_t
 *
devi˚H™dÀ
 = (usb_devi˚_°ru˘_à*)
h™dÀ
;

751 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 *
mesßge
 = (usb_devi˚_ˇŒback_mesßge_°ru˘_à*)
msg
;

753 i‡((
NULL
 =
msg
Ë|| (NULL =
h™dÀ
))

755  
kSètus_USB_InvÆidH™dÀ
;

759 i‡(!
devi˚H™dÀ
->
devi˚CÆlback
)

761  
kSètus_USB_Eº‹
;

764 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_USE_TASK
) && (USB_DEVICE_CONFIG_USE_TASK > 0U))

765 i‡(
devi˚H™dÀ
->
ïCÆlbackDúe˘ly
)

767 i‡((
mesßge
->
code
 & 
USB_ENDPOINT_NUMBER_MASK
) && (!(message->code & 0x70U)))

769  
	`USB_Devi˚NŸifiˇti⁄
(
devi˚H™dÀ
, 
mesßge
);

774 i‡(
kSètus_USB_OSA_Suc˚ss
 !
	`USB_OßMsgqSíd
(
devi˚H™dÀ
->
nŸifiˇti⁄Queue
, (*)
mesßge
))

776  
kSètus_USB_Busy
;

778  
kSètus_USB_Suc˚ss
;

781  
	`USB_Devi˚NŸifiˇti⁄
(
devi˚H™dÀ
, 
mesßge
);

783 
	}
}

804 
usb_°©us_t
 
	$USB_Devi˚Inô
(
uöt8_t
 
c⁄åﬁÀrId
, 
usb_devi˚_ˇŒback_t
 
devi˚CÆlback
, 
usb_devi˚_h™dÀ
 *
h™dÀ
)

806 
usb_devi˚_°ru˘_t
 *
devi˚H™dÀ
 = 
NULL
;

807 
usb_°©us_t
 
îr‹
;

808 
uöt32_t
 
cou¡
;

810 i‡(
NULL
 =
h™dÀ
)

812  
kSètus_USB_InvÆidH™dÀ
;

816 
îr‹
 = 
	`USB_Devi˚AŒoˇãH™dÀ
(
c⁄åﬁÀrId
, &
devi˚H™dÀ
);

818 i‡(
kSètus_USB_Suc˚ss
 !
îr‹
)

820  
îr‹
;

824 
devi˚H™dÀ
->
devi˚CÆlback
 = deviceCallback;

826 
devi˚H™dÀ
->
c⁄åﬁÀrId
 = controllerId;

828 
devi˚H™dÀ
->
devi˚Addªss
 = 0U;

830 
devi˚H™dÀ
->
isRe£âög
 = 0U;

833 
cou¡
 = 0U; cou¡ < (
USB_DEVICE_CONFIG_ENDPOINTS
 * 2U); count++)

835 
devi˚H™dÀ
->
ïCÆlback
[
cou¡
].
ˇŒbackFn
 = (
usb_devi˚_ídpoöt_ˇŒback_t
)
NULL
;

836 
devi˚H™dÀ
->
ïCÆlback
[
cou¡
].
ˇŒbackP¨am
 = 
NULL
;

837 
devi˚H™dÀ
->
ïCÆlback
[
cou¡
].
isBusy
 = 0U;

841 
îr‹
 = 
	`USB_Devi˚GëC⁄åﬁÀrI¡îÁ˚
(
c⁄åﬁÀrId
, &
devi˚H™dÀ
->
c⁄åﬁÀrI¡îÁ˚
);

842 i‡(
kSètus_USB_Suc˚ss
 !
îr‹
)

844 
	`USB_Devi˚FªeH™dÀ
(
devi˚H™dÀ
);

845  
îr‹
;

847 i‡(
NULL
 =
devi˚H™dÀ
->
c⁄åﬁÀrI¡îÁ˚
)

849 
	`USB_Devi˚FªeH™dÀ
(
devi˚H™dÀ
);

850  
kSètus_USB_C⁄åﬁÀrNŸFound
;

852 i‡(((
usb_devi˚_c⁄åﬁÀr_öô_t
)
NULL
 =
devi˚H™dÀ
->
c⁄åﬁÀrI¡îÁ˚
->
devi˚Inô
) ||

853 ((
usb_devi˚_c⁄åﬁÀr_deöô_t
)
NULL
 =
devi˚H™dÀ
->
c⁄åﬁÀrI¡îÁ˚
->
devi˚Deöô
) ||

854 ((
usb_devi˚_c⁄åﬁÀr_£nd_t
)
NULL
 =
devi˚H™dÀ
->
c⁄åﬁÀrI¡îÁ˚
->
devi˚Síd
) ||

855 ((
usb_devi˚_c⁄åﬁÀr_ªcv_t
)
NULL
 =
devi˚H™dÀ
->
c⁄åﬁÀrI¡îÁ˚
->
devi˚Recv
) ||

856 ((
usb_devi˚_c⁄åﬁÀr_ˇn˚l_t
)
NULL
 =
devi˚H™dÀ
->
c⁄åﬁÀrI¡îÁ˚
->
devi˚C™˚l
) ||

857 ((
usb_devi˚_c⁄åﬁÀr_c⁄åﬁ_t
)
NULL
 =
devi˚H™dÀ
->
c⁄åﬁÀrI¡îÁ˚
->
devi˚C⁄åﬁ
))

859 
	`USB_Devi˚FªeH™dÀ
(
devi˚H™dÀ
);

860  
kSètus_USB_InvÆidC⁄åﬁÀrI¡îÁ˚
;

863 #i‡
USB_DEVICE_CONFIG_USE_TASK


865 i‡(
kSètus_USB_OSA_Suc˚ss
 !=

866 
	`USB_OßMsgqCª©e
(&
devi˚H™dÀ
->
nŸifiˇti⁄Queue
, 
USB_DEVICE_CONFIG_MAX_MESSAGES
,

867 (1U + ((
usb_devi˚_ˇŒback_mesßge_°ru˘_t
Ë- 1UË/ (
uöt32_t
))))

869 
	`USB_Devi˚Deöô
(
devi˚H™dÀ
);

870  
kSètus_USB_Eº‹
;

874 *
h™dÀ
 = 
devi˚H™dÀ
;

877 
îr‹
 = 
devi˚H™dÀ
->
c⁄åﬁÀrI¡îÁ˚
->
	`devi˚Inô
(
c⁄åﬁÀrId
, devi˚H™dÀ, &devi˚H™dÀ->
c⁄åﬁÀrH™dÀ
);

878 i‡(
kSètus_USB_Suc˚ss
 !
îr‹
)

880 
	`USB_Devi˚Deöô
(
devi˚H™dÀ
);

881 *
h™dÀ
 = 
NULL
;

882  
îr‹
;

885 
devi˚H™dÀ
->
°©e
 = 
kUSB_Devi˚SèãDeÁu…
;

887  
îr‹
;

888 
	}
}

903 
usb_°©us_t
 
	$USB_Devi˚Run
(
usb_devi˚_h™dÀ
 
h™dÀ
)

905  
	`USB_Devi˚C⁄åﬁ
(
h™dÀ
, 
kUSB_Devi˚C⁄åﬁRun
, 
NULL
);

906 
	}
}

919 
usb_°©us_t
 
	$USB_Devi˚St›
(
usb_devi˚_h™dÀ
 
h™dÀ
)

921  
	`USB_Devi˚C⁄åﬁ
(
h™dÀ
, 
kUSB_Devi˚C⁄åﬁSt›
, 
NULL
);

922 
	}
}

933 
usb_°©us_t
 
	$USB_Devi˚Deöô
(
usb_devi˚_h™dÀ
 
h™dÀ
)

935 
usb_devi˚_°ru˘_t
 *
devi˚H™dÀ
 = (usb_devi˚_°ru˘_à*)
h™dÀ
;

937 i‡(
NULL
 =
devi˚H™dÀ
)

939  
kSètus_USB_InvÆidH™dÀ
;

942 i‡(
NULL
 !
devi˚H™dÀ
->
c⁄åﬁÀrI¡îÁ˚
)

944 
devi˚H™dÀ
->
c⁄åﬁÀrI¡îÁ˚
->
	`devi˚Deöô
(devi˚H™dÀ->
c⁄åﬁÀrH™dÀ
);

945 
devi˚H™dÀ
->
c⁄åﬁÀrI¡îÁ˚
 = (
usb_devi˚_c⁄åﬁÀr_öãrÁ˚_°ru˘_t
 *)
NULL
;

948 #i‡
USB_DEVICE_CONFIG_USE_TASK


950 i‡(
NULL
 !
devi˚H™dÀ
->
nŸifiˇti⁄Queue
)

952 
	`USB_OßMsgqDe°roy
(
devi˚H™dÀ
->
nŸifiˇti⁄Queue
);

953 
devi˚H™dÀ
->
nŸifiˇti⁄Queue
 = 
NULL
;

958 
	`USB_Devi˚FªeH™dÀ
(
devi˚H™dÀ
);

959  
kSètus_USB_Suc˚ss
;

960 
	}
}

986 
usb_°©us_t
 
	$USB_Devi˚SídReque°
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
uöt8_t
 
ídpoötAddªss
, uöt8_à*
buf„r
, 
uöt32_t
 
Àngth
)

988  
	`USB_Devi˚Tøns„r
(
h™dÀ
, (
ídpoötAddªss
 & 
USB_ENDPOINT_NUMBER_MASK
) |

989 (
USB_IN
 << 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT
),

990 
buf„r
, 
Àngth
);

991 
	}
}

1017 
usb_°©us_t
 
	$USB_Devi˚RecvReque°
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
uöt8_t
 
ídpoötAddªss
, uöt8_à*
buf„r
, 
uöt32_t
 
Àngth
)

1019  
	`USB_Devi˚Tøns„r
(
h™dÀ
, (
ídpoötAddªss
 & 
USB_ENDPOINT_NUMBER_MASK
) |

1020 (
USB_OUT
 << 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT
),

1021 
buf„r
, 
Àngth
);

1022 
	}
}

1036 
usb_°©us_t
 
	$USB_Devi˚C™˚l
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
uöt8_t
 
ídpoötAddªss
)

1038 
usb_devi˚_°ru˘_t
 *
devi˚H™dÀ
 = (usb_devi˚_°ru˘_à*)
h™dÀ
;

1039 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

1041 i‡(
NULL
 =
devi˚H™dÀ
)

1043  
kSètus_USB_InvÆidH™dÀ
;

1046 i‡(
NULL
 !
devi˚H™dÀ
->
c⁄åﬁÀrI¡îÁ˚
)

1048 
îr‹
 = 
devi˚H™dÀ
->
c⁄åﬁÀrI¡îÁ˚
->
	`devi˚C™˚l
(devi˚H™dÀ->
c⁄åﬁÀrH™dÀ
, 
ídpoötAddªss
);

1052 
îr‹
 = 
kSètus_USB_C⁄åﬁÀrNŸFound
;

1054  
îr‹
;

1055 
	}
}

1074 
usb_°©us_t
 
	$USB_Devi˚InôEndpoöt
(
usb_devi˚_h™dÀ
 
h™dÀ
,

1075 
usb_devi˚_ídpoöt_öô_°ru˘_t
 *
ïInô
,

1076 
usb_devi˚_ídpoöt_ˇŒback_°ru˘_t
 *
ïCÆlback
)

1078 
usb_devi˚_°ru˘_t
 *
devi˚H™dÀ
 = (usb_devi˚_°ru˘_à*)
h™dÀ
;

1079 
uöt8_t
 
ídpoöt
;

1080 
uöt8_t
 
dúe˘i⁄
;

1082 i‡(!
devi˚H™dÀ
)

1084  
kSètus_USB_InvÆidH™dÀ
;

1087 i‡((!
ïInô
Ë|| (!
ïCÆlback
))

1089  
kSètus_USB_InvÆidP¨amëî
;

1092 
ídpoöt
 = 
ïInô
->
ídpoötAddªss
 & 
USB_ENDPOINT_NUMBER_MASK
;

1093 
dúe˘i⁄
 = (
ïInô
->
ídpoötAddªss
 & 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK
) >>

1094 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT
;

1096 i‡(
ídpoöt
 < 
USB_DEVICE_CONFIG_ENDPOINTS
)

1098 
devi˚H™dÀ
->
ïCÆlback
[(
uöt8_t
)((
uöt32_t
)
ídpoöt
 << 1UË| 
dúe˘i⁄
].
ˇŒbackFn
 =ÉpCallback->callbackFn;

1099 
devi˚H™dÀ
->
ïCÆlback
[(
uöt8_t
)((
uöt32_t
)
ídpoöt
 << 1UË| 
dúe˘i⁄
].
ˇŒbackP¨am
 =

1100 
ïCÆlback
->
ˇŒbackP¨am
;

1101 
devi˚H™dÀ
->
ïCÆlback
[(
uöt8_t
)((
uöt32_t
)
ídpoöt
 << 1UË| 
dúe˘i⁄
].
isBusy
 = 0U;

1105  
kSètus_USB_InvÆidP¨amëî
;

1107  
	`USB_Devi˚C⁄åﬁ
(
h™dÀ
, 
kUSB_Devi˚C⁄åﬁEndpoötInô
, 
ïInô
);

1108 
	}
}

1124 
usb_°©us_t
 
	$USB_Devi˚DeöôEndpoöt
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
uöt8_t
 
ídpoötAddªss
)

1126 
usb_devi˚_°ru˘_t
 *
devi˚H™dÀ
 = (usb_devi˚_°ru˘_à*)
h™dÀ
;

1127 
uöt8_t
 
ídpoöt
 = 
ídpoötAddªss
 & 
USB_ENDPOINT_NUMBER_MASK
;

1128 
uöt8_t
 
dúe˘i⁄
 = (
ídpoötAddªss
 & 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK
) >>

1129 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT
;

1130 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

1131 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_USE_TASK
) && (USB_DEVICE_CONFIG_USE_TASK > 0U))

1132 
	`USB_OSA_SR_ALLOC
();

1135 i‡(!
devi˚H™dÀ
)

1137  
kSètus_USB_InvÆidH™dÀ
;

1139 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_USE_TASK
) && (USB_DEVICE_CONFIG_USE_TASK > 0U))

1140 
	`USB_OSA_ENTER_CRITICAL
();

1141 
devi˚H™dÀ
->
ïCÆlbackDúe˘ly
 = 1;

1142 
	`USB_OSA_EXIT_CRITICAL
();

1144 
îr‹
 = 
	`USB_Devi˚C⁄åﬁ
(
h™dÀ
, 
kUSB_Devi˚C⁄åﬁEndpoötDeöô
, &
ídpoötAddªss
);

1145 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_USE_TASK
) && (USB_DEVICE_CONFIG_USE_TASK > 0U))

1146 
	`USB_OSA_ENTER_CRITICAL
();

1147 
devi˚H™dÀ
->
ïCÆlbackDúe˘ly
 = 0;

1148 
	`USB_OSA_EXIT_CRITICAL
();

1151 i‡(
ídpoöt
 < 
USB_DEVICE_CONFIG_ENDPOINTS
)

1153 
devi˚H™dÀ
->
ïCÆlback
[(
uöt8_t
)((
uöt32_t
)
ídpoöt
 << 1UË| 
dúe˘i⁄
].
ˇŒbackFn
 =

1154 (
usb_devi˚_ídpoöt_ˇŒback_t
)
NULL
;

1155 
devi˚H™dÀ
->
ïCÆlback
[(
uöt8_t
)((
uöt32_t
)
ídpoöt
 << 1UË| 
dúe˘i⁄
].
ˇŒbackP¨am
 = 
NULL
;

1156 
devi˚H™dÀ
->
ïCÆlback
[(
uöt8_t
)((
uöt32_t
)
ídpoöt
 << 1UË| 
dúe˘i⁄
].
isBusy
 = 0U;

1160  
kSètus_USB_InvÆidP¨amëî
;

1162  
îr‹
;

1163 
	}
}

1178 
usb_°©us_t
 
	$USB_Devi˚SèŒEndpoöt
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
uöt8_t
 
ídpoötAddªss
)

1180 i‡((
ídpoötAddªss
 & 
USB_ENDPOINT_NUMBER_MASK
Ë< 
USB_DEVICE_CONFIG_ENDPOINTS
)

1182  
	`USB_Devi˚C⁄åﬁ
(
h™dÀ
, 
kUSB_Devi˚C⁄åﬁEndpoötSèŒ
, &
ídpoötAddªss
);

1186  
kSètus_USB_InvÆidP¨amëî
;

1188 
	}
}

1203 
usb_°©us_t
 
	$USB_Devi˚Un°ÆlEndpoöt
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
uöt8_t
 
ídpoötAddªss
)

1205 i‡((
ídpoötAddªss
 & 
USB_ENDPOINT_NUMBER_MASK
Ë< 
USB_DEVICE_CONFIG_ENDPOINTS
)

1207  
	`USB_Devi˚C⁄åﬁ
(
h™dÀ
, 
kUSB_Devi˚C⁄åﬁEndpoötUn°Æl
, &
ídpoötAddªss
);

1211  
kSètus_USB_InvÆidP¨amëî
;

1213 
	}
}

1230 
usb_°©us_t
 
	$USB_Devi˚GëSètus
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
usb_devi˚_°©us_t
 
ty≥
, *
∑øm
)

1232 
uöt8_t
 *
ãmp8
;

1233 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

1235 i‡(
NULL
 =
∑øm
)

1237  
kSètus_USB_InvÆidP¨amëî
;

1239 
ty≥
)

1241 
kUSB_Devi˚SètusS≥ed
:

1242 
îr‹
 = 
	`USB_Devi˚C⁄åﬁ
(
h™dÀ
, 
kUSB_Devi˚C⁄åﬁGëS≥ed
, 
∑øm
);

1244 
kUSB_Devi˚SètusOtg
:

1245 
îr‹
 = 
	`USB_Devi˚C⁄åﬁ
(
h™dÀ
, 
kUSB_Devi˚C⁄åﬁGëOtgSètus
, 
∑øm
);

1247 
kUSB_Devi˚SètusDevi˚Sèã
:

1248 
ãmp8
 = (
uöt8_t
 *)
∑øm
;

1249 
îr‹
 = 
kSètus_USB_Suc˚ss
;

1250 *
ãmp8
 = ((
usb_devi˚_°ru˘_t
 *)
h™dÀ
)->
°©e
;

1252 
kUSB_Devi˚SètusAddªss
:

1253 
ãmp8
 = (
uöt8_t
 *)
∑øm
;

1254 
îr‹
 = 
kSètus_USB_Suc˚ss
;

1255 *
ãmp8
 = ((
usb_devi˚_°ru˘_t
 *)
h™dÀ
)->
devi˚Addªss
;

1257 
kUSB_Devi˚SètusDevi˚
:

1258 
îr‹
 = 
	`USB_Devi˚C⁄åﬁ
(
h™dÀ
, 
kUSB_Devi˚C⁄åﬁGëDevi˚Sètus
, 
∑øm
);

1260 
kUSB_Devi˚SètusEndpoöt
:

1261 
îr‹
 = 
	`USB_Devi˚C⁄åﬁ
(
h™dÀ
, 
kUSB_Devi˚C⁄åﬁGëEndpoötSètus
, 
∑øm
);

1263 
kUSB_Devi˚SètusSynchFøme
:

1264 
îr‹
 = 
	`USB_Devi˚C⁄åﬁ
(
h™dÀ
, 
kUSB_Devi˚C⁄åﬁGëSynchFøme
, 
∑øm
);

1266 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_REMOTE_WAKEUP
)) && (USB_DEVICE_CONFIG_REMOTE_WAKEUP > 0U))

1267 
kUSB_Devi˚SètusRemŸeWakeup
:

1268 
ãmp8
 = (
uöt8_t
 *)
∑øm
;

1269 
îr‹
 = 
kSètus_USB_Suc˚ss
;

1270 *
ãmp8
 = ((
usb_devi˚_°ru˘_t
 *)
h™dÀ
)->
ªmŸewakeup
;

1276  
îr‹
;

1277 
	}
}

1293 
usb_°©us_t
 
	$USB_Devi˚SëSètus
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
usb_devi˚_°©us_t
 
ty≥
, *
∑øm
)

1295 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

1296 
ty≥
)

1298 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_EHCI
) && (USB_DEVICE_CONFIG_EHCI > 0U) || \

1299 (
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))) && \

1300 (
	`deföed
(
USB_DEVICE_CONFIG_USB20_TEST_MODE
) && (USB_DEVICE_CONFIG_USB20_TEST_MODE > 0U))

1301 
kUSB_Devi˚SètusTe°Mode
:

1302 
îr‹
 = 
	`USB_Devi˚C⁄åﬁ
(
h™dÀ
, 
kUSB_Devi˚C⁄åﬁSëTe°Mode
, 
∑øm
);

1305 
kUSB_Devi˚SètusOtg
:

1306 
îr‹
 = 
	`USB_Devi˚C⁄åﬁ
(
h™dÀ
, 
kUSB_Devi˚C⁄åﬁSëOtgSètus
, 
∑øm
);

1308 
kUSB_Devi˚SètusDevi˚Sèã
:

1309 i‡(
NULL
 !
∑øm
)

1311 
îr‹
 = 
kSètus_USB_Suc˚ss
;

1312 ((
usb_devi˚_°ru˘_t
 *)
h™dÀ
)->
°©e
 = (
uöt8_t
)(*(uöt8_à*)
∑øm
);

1315 
kUSB_Devi˚SètusAddªss
:

1316 i‡(
kUSB_Devi˚SèãAddªssög
 !((
usb_devi˚_°ru˘_t
 *)
h™dÀ
)->
°©e
)

1318 i‡(
NULL
 !
∑øm
)

1320 
îr‹
 = 
kSètus_USB_Suc˚ss
;

1321 ((
usb_devi˚_°ru˘_t
 *)
h™dÀ
)->
devi˚Addªss
 = (
uöt8_t
)(*(uöt8_à*)
∑øm
);

1322 ((
usb_devi˚_°ru˘_t
 *)
h™dÀ
)->
°©e
 = 
kUSB_Devi˚SèãAddªssög
;

1327 
îr‹
 = 
	`USB_Devi˚C⁄åﬁ
(
h™dÀ
, 
kUSB_Devi˚C⁄åﬁSëDevi˚Addªss
,

1328 &((
usb_devi˚_°ru˘_t
 *)
h™dÀ
)->
devi˚Addªss
);

1331 
kUSB_Devi˚SètusBusResume
:

1332 
îr‹
 = 
	`USB_Devi˚C⁄åﬁ
(
h™dÀ
, 
kUSB_Devi˚C⁄åﬁResume
, 
∑øm
);

1334 
kUSB_Devi˚SètusBusSÀïResume
:

1335 
îr‹
 = 
	`USB_Devi˚C⁄åﬁ
(
h™dÀ
, 
kUSB_Devi˚C⁄åﬁSÀïResume
, 
∑øm
);

1337 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_REMOTE_WAKEUP
)) && (USB_DEVICE_CONFIG_REMOTE_WAKEUP > 0U))

1338 
kUSB_Devi˚SètusRemŸeWakeup
:

1339 i‡(
NULL
 !
∑øm
)

1341 
îr‹
 = 
kSètus_USB_Suc˚ss
;

1342 ((
usb_devi˚_°ru˘_t
 *)
h™dÀ
)->
ªmŸewakeup
 = (
uöt8_t
)(*(uöt8_à*)
∑øm
);

1346 
kUSB_Devi˚SètusBusSu•íd
:

1347 
îr‹
 = 
	`USB_Devi˚C⁄åﬁ
(
h™dÀ
, 
kUSB_Devi˚C⁄åﬁSu•íd
, 
∑øm
);

1349 
kUSB_Devi˚SètusBusSÀï
:

1350 
îr‹
 = 
	`USB_Devi˚C⁄åﬁ
(
h™dÀ
, 
kUSB_Devi˚C⁄åﬁSÀï
, 
∑øm
);

1355  
îr‹
;

1356 
	}
}

1358 #i‡(
deföed
(
USB_DEVICE_CHARGER_DETECT_ENABLE
) && (USB_DEVICE_CHARGER_DETECT_ENABLE > 0U)) && \

1359 ((
deföed
(
FSL_FEATURE_SOC_USBDCD_COUNT
Ë&& (
	gFSL_FEATURE_SOC_USBDCD_COUNT
 > 0U)) || \

1360 (
deföed
(
FSL_FEATURE_SOC_USBHSDCD_COUNT
Ë&& (
	gFSL_FEATURE_SOC_USBHSDCD_COUNT
 > 0U)))

1373 
usb_°©us_t
 
	$USB_Devi˚DcdInôModuÀ
(
usb_devi˚_h™dÀ
 
h™dÀ
, *
time_∑øm
)

1375  
	`USB_Devi˚C⁄åﬁ
(
h™dÀ
, 
kUSB_Devi˚C⁄åﬁDcdInôModuÀ
, 
time_∑øm
);

1376 
	}
}

1389 
usb_°©us_t
 
	$USB_Devi˚DcdDeöôModuÀ
(
usb_devi˚_h™dÀ
 
h™dÀ
)

1391  
	`USB_Devi˚C⁄åﬁ
(
h™dÀ
, 
kUSB_Devi˚C⁄åﬁDcdDeöôModuÀ
, 
NULL
);

1392 
	}
}

1395 #i‡
USB_DEVICE_CONFIG_USE_TASK


1404 
	$USB_Devi˚TaskFun˘i⁄
(*
devi˚H™dÀ
)

1406 
usb_devi˚_°ru˘_t
 *
h™dÀ
 = (usb_devi˚_°ru˘_à*)
devi˚H™dÀ
;

1407 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 
mesßge
;

1409 i‡(
devi˚H™dÀ
)

1412 i‡(
kSètus_USB_OSA_Suc˚ss
 =
	`USB_OßMsgqRecv
(
h™dÀ
->
nŸifiˇti⁄Queue
, (
uöt32_t
 *)&
mesßge
, 0U))

1415 
	`USB_Devi˚NŸifiˇti⁄
(
h™dÀ
, &
mesßge
);

1418 
	}
}

1429 
	$USB_Devi˚GëVîsi⁄
(
uöt32_t
 *
vîsi⁄
)

1431 i‡(
vîsi⁄
)

1433 *
vîsi⁄
 =

1434 (
uöt32_t
)
	`USB_MAKE_VERSION
(
USB_STACK_VERSION_MAJOR
, 
USB_STACK_VERSION_MINOR
, 
USB_STACK_VERSION_BUGFIX
);

1436 
	}
}

1438 #i‡((
deföed
(
USB_DEVICE_CONFIG_REMOTE_WAKEUP
)) && (USB_DEVICE_CONFIG_REMOTE_WAKEUP > 0U))

1448 
usb_°©us_t
 
	$USB_Devi˚Upd©eHwTick
(
usb_devi˚_h™dÀ
 
h™dÀ
, 
uöt64_t
 
tick
)

1450 
usb_devi˚_°ru˘_t
 *
devi˚H™dÀ
;

1451 
usb_°©us_t
 
°©us
 = 
kSètus_USB_Suc˚ss
;

1453 i‡(
h™dÀ
 =
NULL
)

1455  
kSètus_USB_InvÆidH™dÀ
;

1457 
devi˚H™dÀ
 = (
usb_devi˚_°ru˘_t
 *)
h™dÀ
;

1459 
devi˚H™dÀ
->
hwTick
 = 
tick
;

1461  
°©us
;

1462 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\middleware\usb\device\usb_device_lpcip3511.c

35 
	~"usb_devi˚_c⁄fig.h
"

36 
	~"usb.h
"

37 
	~"usb_devi˚.h
"

38 
	~"f¶_devi˚_ªgi°îs.h
"

40 #i‡(((
deföed
(
USB_DEVICE_CONFIG_LPCIP3511FS
)) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U)) || \

41 ((
deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
)Ë&& (
	gUSB_DEVICE_CONFIG_LPCIP3511HS
 > 0U)))

42 
	~"usb_devi˚_dci.h
"

43 
	~"usb_devi˚_Õcù3511.h
"

50 
	#USB_LPC3511IP_MAX_PHY_ENDPOINT_MASK
 (0xFFFFu)

	)

53 
	#USB_LPC3511IPHS_ENDPOINT_BUFFER_ADDRESS_OFFSET_MASK
 (0x000007FFu)

	)

54 
	#USB_LPC3511IPHS_ENDPOINT_BUFFER_NBYTES_SHIFT
 (11)

	)

55 
	#USB_LPC3511IPHS_ENDPOINT_BUFFER_NBYTES_MASK
 (0x03FFF800u)

	)

56 
	#USB_LPC3511IPFS_ENDPOINT_BUFFER_ADDRESS_OFFSET_MASK
 (0x0000FFFFu)

	)

57 
	#USB_LPC3511IPFS_ENDPOINT_BUFFER_NBYTES_SHIFT
 (16)

	)

58 
	#USB_LPC3511IPFS_ENDPOINT_BUFFER_NBYTES_MASK
 (0x03FF0000u)

	)

60 
	#USB_LPC3511IP_ENDPOINT_ENDPOINT_TYPE_MASK
 (0x01U << 26)

	)

61 
	#USB_LPC3511IP_ENDPOINT_RFTV_MASK
 (0x01U << 27)

	)

62 
	#USB_LPC3511IP_ENDPOINT_TOGGLE_RESET_MASK
 (0x01U << 28)

	)

63 
	#USB_LPC3511IP_ENDPOINT_STALL_MASK
 (0x01U << 29)

	)

64 
	#USB_LPC3511IP_ENDPOINT_DISABLE_MASK
 (0x01U << 30)

	)

65 
	#USB_LPC3511IP_ENDPOINT_ACTIVE_MASK
 (0x01U << 31)

	)

66 
	#USB_LPC3511IP_ENDPOINT_CONFIGURE_BITS_SHIFT
 (26)

	)

68 
	#USB_LPC3511IP_DEVCMDSTAT_INTERRUPT_WC_MASK
 (0x0F000000u)

	)

70 
	#USB_LPC3511IP_ENDPOINT_SET_ENDPOINT_AND
(
ÕcSèã
, 
ödex
, 
odd
, 
vÆue
) \

71 *((vﬁ©ûê
uöt32_t
 *)(((uöt32_t)(
ÕcSèã
->
ïComm™dSètusLi°
)Ë| ((uöt32_t)(
ödex
) << 3) | \

72 (((
uöt32_t
)(
odd
)&1UË<< 2U))Ë&(
vÆue
)

	)

75 #i‡((
deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))

76 
	#USB_LPC3511IP_ENDPOINT_SET_ENDPOINT
(
ÕcSèã
, 
ödex
, 
odd
, 
vÆue
, 
NByãs
, 
addªss
) \

78 *((vﬁ©ûê
uöt32_t
 *)(((uöt32_t)(
ÕcSèã
->
ïComm™dSètusLi°
)Ë| ((uöt32_t)(
ödex
) << 3) | \

79 (((
uöt32_t
)(
odd
 & 1U)) << 2U))) = \

80 ((
Õc3511IpSèã
->
c⁄åﬁÀrS≥ed
) ? \

82 ((
uöt32_t
)(
vÆue
Ë| ((uöt32_t)(
NByãs
Ë<< 
USB_LPC3511IPHS_ENDPOINT_BUFFER_NBYTES_SHIFT
) | \

83 (((
uöt32_t
)(
addªss
Ë>> 6Ë& 
USB_LPC3511IPHS_ENDPOINT_BUFFER_ADDRESS_OFFSET_MASK
)) : \

85 ((
uöt32_t
)(
vÆue
Ë| ((uöt32_t)(
NByãs
Ë<< 
USB_LPC3511IPFS_ENDPOINT_BUFFER_NBYTES_SHIFT
) | \

86 (((
uöt32_t
)(
addªss
Ë>> 6Ë& 
USB_LPC3511IPFS_ENDPOINT_BUFFER_ADDRESS_OFFSET_MASK
)))

	)

88 
	#USB_LPC3511IP_ENDPOINT_SET_ENDPOINT
(
ÕcSèã
, 
ödex
, 
odd
, 
vÆue
, 
NByãs
, 
addªss
) \

90 *((vﬁ©ûê
uöt32_t
 *)(((uöt32_t)(
ÕcSèã
->
ïComm™dSètusLi°
)Ë| ((uöt32_t)(
ödex
) << 3) | \

91 (((
uöt32_t
)(
odd
 & 1U)) << 2U))) = \

92 ((
uöt32_t
)(
vÆue
Ë| ((uöt32_t)(
NByãs
Ë<< 
USB_LPC3511IPFS_ENDPOINT_BUFFER_NBYTES_SHIFT
) | \

93 (((
uöt32_t
)(
addªss
Ë>> 6Ë& 
USB_LPC3511IPFS_ENDPOINT_BUFFER_ADDRESS_OFFSET_MASK
))

	)

96 
	#USB_LPC3511IP_ENDPOINT_DES_INDEX
(
ídpoöt
) \

97 (((((
uöt32_t
)
ídpoöt
) & 0x0F) << 1) + \

98 ((((
uöt32_t
)
ídpoöt
Ë& 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK
Ë? (1Ë: (0)))

	)

100 
	#USB_LPC3511IP_GET_MULTIPLE_OF_64
(
n
Ë(“ + 63UË& 0xFFFFFFC0U)

	)

106 
usb_°©us_t
 
USB_Devi˚NŸifiˇti⁄Triggî
(*
h™dÀ
, *
msg
);

107 
usb_°©us_t
 
USB_Devi˚Lpc3511IpTønß˘i⁄
(
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
,

108 
usb_devi˚_Õc3511ù_ídpoöt_°©e_°ru˘_t
 *
ïSèã
,

109 
uöt8_t
 
ídpoötIndex
);

116 #i‡
deföed
(
USB_DEVICE_IP3511_RESERVED_BUFFER_FOR_COPY
) && (USB_DEVICE_IP3511_RESERVED_BUFFER_FOR_COPY)

117 
USB_GLOBAL
 
	$USB_RAM_ADDRESS_ALIGNMENT
(
USB_DATA_ALIGN_SIZE
Ë
uöt32_t


118 
s_EpRe£rvedBuf„r
[
USB_DEVICE_IP3511_RESERVED_BUFFER_FOR_COPY
][
	`USB_DATA_ALIGN_SIZE_MULTIPLE
(

119 (
USB_DEVICE_IP3511_ENDPOINT_RESERVED_BUFFER_SIZE
 >> 2))];

121 
USB_GLOBAL
 
	$USB_RAM_ADDRESS_ALIGNMENT
(
USB_DATA_ALIGN_SIZE
Ë
uöt8_t


122 
s_C⁄åﬁTøns„rD©a
[
USB_DEVICE_CONFIG_LPCIP3511FS
 +

123 
USB_DEVICE_CONFIG_LPCIP3511HS
][
	`USB_DATA_ALIGN_SIZE_MULTIPLE
(64U)];

124 
USB_GLOBAL
 
	$USB_RAM_ADDRESS_ALIGNMENT
(
USB_DATA_ALIGN_SIZE
Ë
uöt8_t


125 
s_SëupD©a
[
USB_DEVICE_CONFIG_LPCIP3511FS
 + 
USB_DEVICE_CONFIG_LPCIP3511HS
][
	`USB_DATA_ALIGN_SIZE_MULTIPLE
(8U)];

126 
USB_GLOBAL
 
	$USB_RAM_ADDRESS_ALIGNMENT
(
USB_DATA_ALIGN_SIZE
Ë
uöt8_t


127 
s_ZîoTønß˘i⁄D©a
[
USB_DEVICE_CONFIG_LPCIP3511FS
 +

128 
USB_DEVICE_CONFIG_LPCIP3511HS
][
	`USB_DATA_ALIGN_SIZE_MULTIPLE
(4)];

129 
usb_devi˚_Õc3511ù_°©e_°ru˘_t


130 
s_UsbDevi˚Lpc3511IpSèã
[
USB_DEVICE_CONFIG_LPCIP3511FS
 + 
USB_DEVICE_CONFIG_LPCIP3511HS
];

133 #i‡((
USB_DEVICE_CONFIG_LPCIP3511FS
 + 
USB_DEVICE_CONFIG_LPCIP3511HS
) == 1U)

134 
USB_CONTROLLER_DATA
 
	$USB_RAM_ADDRESS_ALIGNMENT
(256Ë
uöt32_t


135 
s_EpComm™dSètusLi°1
[((
USB_DEVICE_CONFIG_ENDPOINTS
 + 0x03U) & 0xFFFFFFFCU) * 4];

136 
	#LPC_CONTROLLER_ENDPOINT_LIST_ARRAY
 \

138 &
s_EpComm™dSètusLi°1
[0] \

139 
	}

	)
}

141 #ñif((
USB_DEVICE_CONFIG_LPCIP3511FS
 + 
USB_DEVICE_CONFIG_LPCIP3511HS
) == 2U)

142 
USB_CONTROLLER_DATA
 
	$USB_RAM_ADDRESS_ALIGNMENT
(256Ë
uöt32_t


143 
s_EpComm™dSètusLi°1
[((
USB_DEVICE_CONFIG_ENDPOINTS
 + 0x03U) & 0xFFFFFFFCU) * 4];

144 
USB_CONTROLLER_DATA
 
	$USB_RAM_ADDRESS_ALIGNMENT
(256Ë
uöt32_t


145 
s_EpComm™dSètusLi°2
[((
USB_DEVICE_CONFIG_ENDPOINTS
 + 0x03U) & 0xFFFFFFFCU) * 4];

146 
	#LPC_CONTROLLER_ENDPOINT_LIST_ARRAY
 \

148 &
s_EpComm™dSètusLi°1
[0], &
s_EpComm™dSètusLi°2
[0] \

149 
	}

	)
}

155 #i‡(
deföed
 
USB_DEVICE_IP3511_RESERVED_BUFFER_FOR_COPY
)

156 #i‡(
USB_DEVICE_IP3511_RESERVED_BUFFER_FOR_COPY
 =(
USB_DEVICE_CONFIG_LPCIP3511FS
 + 
USB_DEVICE_CONFIG_LPCIP3511HS
))

157 
	#USB_DEVICE_IP3511_ALL_IP_SUPPORT_RESERVED_BUFFER
 1u

	)

158 #ñif((
USB_DEVICE_IP3511_RESERVED_BUFFER_FOR_COPY
 =
USB_DEVICE_CONFIG_LPCIP3511FS
Ë&& (!
USB_DEVICE_CONFIG_LPCIP3511HS
))

159 
	#USB_DEVICE_IP3511_ALL_IP_SUPPORT_RESERVED_BUFFER
 1u

	)

160 #ñif((
USB_DEVICE_IP3511_RESERVED_BUFFER_FOR_COPY
 =
USB_DEVICE_CONFIG_LPCIP3511HS
Ë&& (!
USB_DEVICE_CONFIG_LPCIP3511FS
))

161 
	#USB_DEVICE_IP3511_ALL_IP_SUPPORT_RESERVED_BUFFER
 1u

	)

163 
	#USB_DEVICE_IP3511_ALL_IP_SUPPORT_RESERVED_BUFFER
 0u

	)

167 
	#USB_DEVICE_IP3511_ALL_IP_SUPPORT_RESERVED_BUFFER
 0u

	)

174 #i‡(
deföed
 
USB_DEVICE_IP3511_RESERVED_BUFFER_FOR_COPY
) && (USB_DEVICE_IP3511_RESERVED_BUFFER_FOR_COPY)

176 
ölöe
 
uöt8_t
 
	$USB_Devi˚LpcIp3511MaxPackëNìdC›y
(
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
)

178 #i‡(
USB_DEVICE_IP3511_RESERVED_BUFFER_FOR_COPY
 =(
USB_DEVICE_CONFIG_LPCIP3511HS
 + 
USB_DEVICE_CONFIG_LPCIP3511FS
))

180 #ñif(
USB_DEVICE_IP3511_RESERVED_BUFFER_FOR_COPY
 =
USB_DEVICE_CONFIG_LPCIP3511HS
)

181  (
Õc3511IpSèã
->
c⁄åﬁÀrS≥ed
);

182 #ñif(
USB_DEVICE_IP3511_RESERVED_BUFFER_FOR_COPY
 =
USB_DEVICE_CONFIG_LPCIP3511FS
)

183 #i‡(
deföed
 
USB_DEVICE_CONFIG_LPCIP3511HS
) && (USB_DEVICE_CONFIG_LPCIP3511HS)

184 i‡(
Õc3511IpSèã
->
c⁄åﬁÀrS≥ed
)

196 
	}
}

198 
uöt8_t
 *
	$USB_Devi˚LpcIp3511MÆlocMaxPackëBuf„r
(
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
,

199 
uöt32_t
 
mu…ûe64
)

201 
uöt32_t
 
bôsIndex
;

202 
uöt8_t
 
numIndex
;

203 
	`USB_OSA_SR_ALLOC
();

205 
mu…ûe64
 = ((multile64 + 63) / 64);

206 
bôsIndex
 = 0;

207 
	`USB_OSA_ENTER_CRITICAL
();

210 
numIndex
 = 0;

211 ; 
numIndex
 < 
mu…ûe64
; ++numIndex)

213 i‡(
bôsIndex
 >
USB_DEVICE_IP3511_BITS_FOR_RESERVED_BUFFER
)

215 
	`USB_OSA_EXIT_CRITICAL
();

216  
NULL
;

218 i‡(
Õc3511IpSèã
->
ïRe£rvedBuf„rBôs
[(
bôsIndex
 / 8)] &

219 (
uöt8_t
)(0x01u << (
bôsIndex
 & 0x00000007u)))

221 
bôsIndex
++;

224 
bôsIndex
++;

226 } 
numIndex
 < 
mu…ûe64
);

228 i‡(
numIndex
 >
mu…ûe64
)

231 
numIndex
 = 0;ÇumIndex < 
mu…ûe64
; ++numIndex)

233 
Õc3511IpSèã
->
ïRe£rvedBuf„rBôs
[((
bôsIndex
 - 
mu…ûe64
 + 
numIndex
) / 8)] |=

234 (
uöt8_t
)(0x01u << ((
bôsIndex
 - 
mu…ûe64
 + 
numIndex
) & 0x00000007u));

236 
	`USB_OSA_EXIT_CRITICAL
();

237  
Õc3511IpSèã
->
ïRe£rvedBuf„r
 + ((
bôsIndex
 - 
mu…ûe64
) * 64);

241 
	`USB_OSA_EXIT_CRITICAL
();

242  
NULL
;

244 
	}
}

246 
	$USB_Devi˚LpcIp3511Rñó£MaxPackëBuf„r
(
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
,

247 
uöt8_t
 *
buf„r
,

248 
uöt32_t
 
buf„rSize
)

250 
uöt32_t
 
bôsIndex
;

251 
uöt8_t
 
bôsNum
;

252 
	`USB_OSA_SR_ALLOC
();

254 i‡((
buf„r
 < 
Õc3511IpSèã
->
ïRe£rvedBuf„r
) ||

255 (
buf„r
 >(
Õc3511IpSèã
->
ïRe£rvedBuf„r
 + 
USB_DEVICE_IP3511_ENDPOINT_RESERVED_BUFFER_SIZE
)))

259 
bôsIndex
 = (
buf„r
 - 
Õc3511IpSèã
->
ïRe£rvedBuf„r
) / 64;

261 
	`USB_OSA_ENTER_CRITICAL
();

262 
bôsNum
 = 0; bôsNum < ((
buf„rSize
 + 63) / 64); ++bitsNum)

264 
Õc3511IpSèã
->
ïRe£rvedBuf„rBôs
[((
bôsIndex
 + 
bôsNum
) / 8)] &=

265 (
uöt8_t
)(~(0x01u << ((
bôsIndex
 + 
bôsNum
) & 0x00000007u)));

267 
	`USB_OSA_EXIT_CRITICAL
();

268 
	}
}

271 
usb_devi˚_Õc3511ù_ídpoöt_°©e_°ru˘_t
 *
	$USB_Devi˚Lpc3511IpGëEndpoötSèãSåu˘
(

272 
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
, 
uöt8_t
 
ídpoötIndex
)

274 i‡(
ídpoötIndex
 <(
USB_DEVICE_CONFIG_ENDPOINTS
 * 2))

276  &(
Õc3511IpSèã
->
ídpoötSèã
[
ídpoötIndex
]);

279  
NULL
;

280 
	}
}

296 
usb_°©us_t
 
	$USB_Devi˚Lpc3511IpEndpoötPrime
(
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
,

297 
usb_devi˚_Õc3511ù_ídpoöt_°©e_°ru˘_t
 *
ïSèã
,

298 
uöt8_t
 
ídpoötIndex
,

299 
uöt8_t
 *
buf„r
,

300 
uöt32_t
 
Àngth
)

302 
uöt8_t
 
odd
;

304 
	`USB_OSA_SR_ALLOC
();

307 
	`USB_OSA_ENTER_CRITICAL
();

310 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
å™s„ºög
 = 1U;

313 
ïSèã
->
å™s„rPrimedLígth
 +
Àngth
;

314 #i‡(
deföed
 
USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE
) && (USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE)

315 i‡((
ídpoötIndex
 >> 1UË!
USB_ENDPOINT_CONTROL
)

317 
odd
 = 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
¥odu˚rOdd
;

318 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
doubÀBuf„rBusy
++;

319 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
¥odu˚rOdd
 ^= 1;

324 
odd
 = 0U;

326 
ïSèã
->
ïBuf„rSètusUni⁄
[
odd
].
ïBuf„rSètusFõld
.
å™ß˘i⁄Lígth
 = 
Àngth
;

329 i‡(
buf„r
 =
NULL
)

331 
buf„r
 = 
Õc3511IpSèã
->
zîoTønß˘i⁄D©a
;

334 
	`USB_LPC3511IP_ENDPOINT_SET_ENDPOINT
(

335 
Õc3511IpSèã
, 
ídpoötIndex
, 
odd
,

336 (
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ïC⁄åﬁDeÁu…
 << 
USB_LPC3511IP_ENDPOINT_CONFIGURE_BITS_SHIFT
) |

337 
USB_LPC3511IP_ENDPOINT_ACTIVE_MASK
,

338 
Àngth
, (
uöt32_t
)
buf„r
);

339 i‡(
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ïC⁄åﬁDeÁu…
 &

340 ((
USB_LPC3511IP_ENDPOINT_TOGGLE_RESET_MASK
Ë>> 
USB_LPC3511IP_ENDPOINT_CONFIGURE_BITS_SHIFT
))

342 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ïC⁄åﬁDeÁu…
 &=

343 (~((
USB_LPC3511IP_ENDPOINT_TOGGLE_RESET_MASK
Ë>> 
USB_LPC3511IP_ENDPOINT_CONFIGURE_BITS_SHIFT
));

346 
	`USB_OSA_EXIT_CRITICAL
();

347  
kSètus_USB_Suc˚ss
;

348 
	}
}

359 
	$USB_Devi˚Lpc3511IpPrimeNextSëup
(
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
)

361 
	`USB_LPC3511IP_ENDPOINT_SET_ENDPOINT
(
Õc3511IpSèã
, 0, 1, 0, 8,Üpc3511IpSèã->
£tupD©a
);

362 
	}
}

371 
	$USB_Devi˚Lpc3511IpSëDeÁu…Sèã
(
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
)

373 
uöt32_t
 
ödex
 = 0;

374 
uöt8_t
 
usbAddªss
;

377 
ödex
 = 0; index < 4; ++index)

379 
Õc3511IpSèã
->
ïComm™dSètusLi°
[
ödex
] = 0x00000000U;

381 
ödex
 = 4; index < 
USB_DEVICE_CONFIG_ENDPOINTS
 * 4; ++index)

383 
Õc3511IpSèã
->
ïComm™dSètusLi°
[
ödex
] = 
USB_LPC3511IP_ENDPOINT_DISABLE_MASK
;

387 
usbAddªss
 = 0U;

388 
	`USB_Devi˚Lpc3511IpC⁄åﬁ
(
Õc3511IpSèã
, 
kUSB_Devi˚C⁄åﬁSëDevi˚Addªss
, &
usbAddªss
);

390 
Õc3511IpSèã
->
ªgi°îBa£
->
EPLISTSTART
 = (
uöt32_t
Ópc3511IpSèã->
ïComm™dSètusLi°
;

392 
Õc3511IpSèã
->
ªgi°îBa£
->
DATABUFSTART
 = (
uöt32_t
Ópc3511IpSèã->
£tupD©a
;

394 
Õc3511IpSèã
->
ªgi°îBa£
->
EPINUSE
 = 0x0;

395 
Õc3511IpSèã
->
ªgi°îBa£
->
EPSKIP
 = 0x0;

397 #i‡(
deföed
 
USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE
) && (USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE)

398 
Õc3511IpSèã
->
ªgi°îBa£
->
EPBUFCFG
 = 
USB_LPC3511IP_MAX_PHY_ENDPOINT_MASK
;

400 
Õc3511IpSèã
->
ªgi°îBa£
->
EPBUFCFG
 = 0x00000000u;

403 
Õc3511IpSèã
->
ªgi°îBa£
->
INTSTAT
 =

404 (
USB_INTSTAT_DEV_INT_MASK
 | 
USB_INTSTAT_FRAME_INT_MASK
 | 
USB_LPC3511IP_MAX_PHY_ENDPOINT_MASK
);

406 
Õc3511IpSèã
->
ªgi°îBa£
->
INTEN
 = 
USB_INTSTAT_DEV_INT_MASK
 | 
USB_LPC3511IP_MAX_PHY_ENDPOINT_MASK
;

409 
Õc3511IpSèã
->
isRe£âög
 = 0U;

410 
	}
}

413 
usb_°©us_t
 
	$USB_Devi˚Lpc3511IpEndpoötInô
(
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
,

414 
usb_devi˚_ídpoöt_öô_°ru˘_t
 *
ïInô
)

416 
uöt8_t
 
ídpoötIndex
 = 
	`USB_LPC3511IP_ENDPOINT_DES_INDEX
(
ïInô
->
ídpoötAddªss
);

417 
usb_devi˚_Õc3511ù_ídpoöt_°©e_°ru˘_t
 *
ïSèã
 =

418 
	`USB_Devi˚Lpc3511IpGëEndpoötSèãSåu˘
(
Õc3511IpSèã
, 
ídpoötIndex
);

419 
uöt16_t
 
maxPackëSize
 = 
ïInô
->maxPacketSize;

422 
ïSèã
->
°©eUni⁄
.
°©e
 = 0x00000000u;

423 
Õc3511IpSèã
->
ªgi°îBa£
->
EPINUSE
 &(~(0x01u << 
ídpoötIndex
));

425 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
maxPackëSize
 = maxPacketSize;

427 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
z…
 = 
ïInô
->zlt;

428 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ídpoötTy≥
 = 
ïInô
->
å™s„rTy≥
;

431 i‡(
USB_ENDPOINT_ISOCHRONOUS
 =
ïInô
->
å™s„rTy≥
)

433 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ïC⁄åﬁDeÁu…
 =

434 (
USB_LPC3511IP_ENDPOINT_ENDPOINT_TYPE_MASK
 >> 
USB_LPC3511IP_ENDPOINT_CONFIGURE_BITS_SHIFT
);

438 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ïC⁄åﬁDeÁu…
 = 0x00U;

441 
	`USB_LPC3511IP_ENDPOINT_SET_ENDPOINT
(

442 
Õc3511IpSèã
, 
ídpoötIndex
, 0,

443 (
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ïC⁄åﬁDeÁu…
 << 
USB_LPC3511IP_ENDPOINT_CONFIGURE_BITS_SHIFT
), 0, 0);

444 i‡((
ïInô
->
ídpoötAddªss
 & 
USB_ENDPOINT_NUMBER_MASK
Ë=
USB_CONTROL_ENDPOINT
)

446 i‡(!(
ïInô
->
ídpoötAddªss
 & 
USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK
))

449 
	`USB_LPC3511IP_ENDPOINT_SET_ENDPOINT
(
Õc3511IpSèã
, 0, 1, 0, 0, (
uöt32_t
Ópc3511IpSèã->
£tupD©a
);

454 
	`USB_LPC3511IP_ENDPOINT_SET_ENDPOINT
(

455 
Õc3511IpSèã
, 
ídpoötIndex
, 1,

456 (
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ïC⁄åﬁDeÁu…
 << 
USB_LPC3511IP_ENDPOINT_CONFIGURE_BITS_SHIFT
), 0, 0);

458 i‡((
ídpoötIndex
 >> 1Ë!
USB_CONTROL_ENDPOINT
)

461 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ïC⁄åﬁDeÁu…
 |=

462 ((
USB_LPC3511IP_ENDPOINT_TOGGLE_RESET_MASK
Ë>> 
USB_LPC3511IP_ENDPOINT_CONFIGURE_BITS_SHIFT
);

465 
ïSèã
->
ïPackëBuf„r
 = 
NULL
;

466 i‡((
ídpoötIndex
 >> 1UË=
USB_CONTROL_ENDPOINT
)

468 
ïSèã
->
ïPackëBuf„r
 = 
Õc3511IpSèã
->
c⁄åﬁD©a
;

470 #i‡(
deföed
 
USB_DEVICE_IP3511_RESERVED_BUFFER_FOR_COPY
) && (USB_DEVICE_IP3511_RESERVED_BUFFER_FOR_COPY)

473 i‡(
	`USB_Devi˚LpcIp3511MaxPackëNìdC›y
(
Õc3511IpSèã
))

475 #i‡(
deföed
 
USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE
) && (USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE)

476 
uöt8_t
 *
maxPackëBuf„r
 = 
	`USB_Devi˚LpcIp3511MÆlocMaxPackëBuf„r
(

477 
Õc3511IpSèã
, 
	`USB_LPC3511IP_GET_MULTIPLE_OF_64
(
maxPackëSize
) * 2);

479 
uöt8_t
 *
maxPackëBuf„r
 = 
	`USB_Devi˚LpcIp3511MÆlocMaxPackëBuf„r
(
Õc3511IpSèã
, 
maxPackëSize
);

481 i‡(
maxPackëBuf„r
 =
NULL
)

483  
kSètus_USB_AŒocFaû
;

485 
ïSèã
->
ïPackëBuf„r
 = 
maxPackëBuf„r
;

490  
kSètus_USB_Suc˚ss
;

491 
	}
}

504 
usb_°©us_t
 
	$USB_Devi˚Lpc3511IpEndpoötDeöô
(
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
, 
uöt8_t
 
ï
)

506 
uöt8_t
 
ídpoötIndex
 = 
	`USB_LPC3511IP_ENDPOINT_DES_INDEX
(
ï
);

507 
usb_devi˚_Õc3511ù_ídpoöt_°©e_°ru˘_t
 *
ïSèã
 =

508 
	`USB_Devi˚Lpc3511IpGëEndpoötSèãSåu˘
(
Õc3511IpSèã
, 
ídpoötIndex
);

511 
	`USB_Devi˚Lpc3511IpC™˚l
(
Õc3511IpSèã
, 
ï
);

513 #i‡(
deföed
 
USB_DEVICE_IP3511_RESERVED_BUFFER_FOR_COPY
) && (USB_DEVICE_IP3511_RESERVED_BUFFER_FOR_COPY)

514 i‡(
	`USB_Devi˚LpcIp3511MaxPackëNìdC›y
(
Õc3511IpSèã
))

516 i‡((
ídpoötIndex
 >> 1UË!
USB_CONTROL_ENDPOINT
)

518 #i‡(
deföed
 
USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE
) && (USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE)

519 
	`USB_Devi˚LpcIp3511Rñó£MaxPackëBuf„r
(

520 
Õc3511IpSèã
, 
ïSèã
->
ïPackëBuf„r
,

521 
	`USB_LPC3511IP_GET_MULTIPLE_OF_64
(
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
maxPackëSize
) * 2);

523 
	`USB_Devi˚LpcIp3511Rñó£MaxPackëBuf„r
(
Õc3511IpSèã
, 
ïSèã
->
ïPackëBuf„r
,

524 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
maxPackëSize
);

527 
ïSèã
->
ïPackëBuf„r
 = 
NULL
;

532 
Õc3511IpSèã
->
ªgi°îBa£
->
EPINUSE
 &~(0x01U << 
ídpoötIndex
);

534 
	`USB_LPC3511IP_ENDPOINT_SET_ENDPOINT
(
Õc3511IpSèã
, 
ídpoötIndex
, 0, 
USB_LPC3511IP_ENDPOINT_DISABLE_MASK
, 0, 0);

536 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
maxPackëSize
 = 0U;

538  
kSètus_USB_Suc˚ss
;

539 
	}
}

552 
usb_°©us_t
 
	$USB_Devi˚Lpc3511IpEndpoötSèŒ
(
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
, 
uöt8_t
 
ï
)

554 
uöt8_t
 
ídpoötIndex
 = 
	`USB_LPC3511IP_ENDPOINT_DES_INDEX
(
ï
);

555 
usb_devi˚_Õc3511ù_ídpoöt_°©e_°ru˘_t
 *
ïSèã
 =

556 
	`USB_Devi˚Lpc3511IpGëEndpoötSèãSåu˘
(
Õc3511IpSèã
, 
ídpoötIndex
);

559 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
°ÆÀd
 = 1U;

562 
	`USB_LPC3511IP_ENDPOINT_SET_ENDPOINT
(
Õc3511IpSèã
, 
ídpoötIndex
, 0, 
USB_LPC3511IP_ENDPOINT_STALL_MASK
, 0, 0);

563 i‡((
ï
 & 
USB_ENDPOINT_NUMBER_MASK
Ë!
USB_CONTROL_ENDPOINT
)

566 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ïC⁄åﬁDeÁu…
 |=

567 ((
USB_LPC3511IP_ENDPOINT_TOGGLE_RESET_MASK
Ë>> 
USB_LPC3511IP_ENDPOINT_CONFIGURE_BITS_SHIFT
);

568 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 |(
USB_DEVCMDSTAT_INTONNAK_AO_MASK
 | 
USB_DEVCMDSTAT_INTONNAK_AI_MASK
);

569 
	`USB_LPC3511IP_ENDPOINT_SET_ENDPOINT
(
Õc3511IpSèã
, 
ídpoötIndex
, 1, 
USB_LPC3511IP_ENDPOINT_STALL_MASK
, 0, 0);

571 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))

572 i‡((
Õc3511IpSèã
->
c⁄åﬁÀrS≥ed
Ë&& (
USB_ENDPOINT_INTERRUPT
 =
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ídpoötTy≥
))

574 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ïC⁄åﬁDeÁu…
 &=

575 (~((
USB_LPC3511IP_ENDPOINT_ENDPOINT_TYPE_MASK
 | 
USB_LPC3511IP_ENDPOINT_RFTV_MASK
) >>

576 
USB_LPC3511IP_ENDPOINT_CONFIGURE_BITS_SHIFT
));

581 
	`USB_Devi˚Lpc3511IpC™˚l
(
Õc3511IpSèã
, 
ï
);

582  
kSètus_USB_Suc˚ss
;

583 
	}
}

596 
usb_°©us_t
 
	$USB_Devi˚Lpc3511IpEndpoötUn°Æl
(
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
, 
uöt8_t
 
ï
)

598 
uöt8_t
 
ídpoötIndex
 = 
	`USB_LPC3511IP_ENDPOINT_DES_INDEX
(
ï
);

599 
usb_devi˚_Õc3511ù_ídpoöt_°©e_°ru˘_t
 *
ïSèã
 =

600 
	`USB_Devi˚Lpc3511IpGëEndpoötSèãSåu˘
(
Õc3511IpSèã
, 
ídpoötIndex
);

604 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
°ÆÀd
 = 0U;

607 
	`USB_LPC3511IP_ENDPOINT_SET_ENDPOINT_AND
(
Õc3511IpSèã
, 
ídpoötIndex
, 0, (~
USB_LPC3511IP_ENDPOINT_STALL_MASK
));

608 i‡((
ï
 & 
USB_ENDPOINT_NUMBER_MASK
Ë!
USB_CONTROL_ENDPOINT
)

610 
	`USB_LPC3511IP_ENDPOINT_SET_ENDPOINT_AND
(
Õc3511IpSèã
, 
ídpoötIndex
, 1, (~
USB_LPC3511IP_ENDPOINT_STALL_MASK
));

613 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ïC⁄åﬁDeÁu…
 |=

614 ((
USB_LPC3511IP_ENDPOINT_TOGGLE_RESET_MASK
Ë>> 
USB_LPC3511IP_ENDPOINT_CONFIGURE_BITS_SHIFT
);

615 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))

616 i‡((
Õc3511IpSèã
->
c⁄åﬁÀrS≥ed
) &&

617 (
USB_ENDPOINT_INTERRUPT
 =
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ídpoötTy≥
))

619 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ïC⁄åﬁDeÁu…
 &=

620 (~((
USB_LPC3511IP_ENDPOINT_ENDPOINT_TYPE_MASK
 | 
USB_LPC3511IP_ENDPOINT_RFTV_MASK
) >>

621 
USB_LPC3511IP_ENDPOINT_CONFIGURE_BITS_SHIFT
));

625  
kSètus_USB_Suc˚ss
;

626 
	}
}

628 #i‡((
deföed
(
USB_DEVICE_CONFIG_LOW_POWER_MODE
)) && (USB_DEVICE_CONFIG_LOW_POWER_MODE > 0U))

639 
usb_°©us_t
 
	$USB_Devi˚Lpc3511IpI¡îru±Su•íd
(
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
)

641 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 
mesßge
;

643 
mesßge
.
buf„r
 = (
uöt8_t
 *)
NULL
;

644 
mesßge
.
code
 = 
kUSB_Devi˚NŸifySu•íd
;

645 
mesßge
.
Àngth
 = 0U;

646 
mesßge
.
isSëup
 = 0U;

649 
	`USB_Devi˚NŸifiˇti⁄Triggî
(
Õc3511IpSèã
->
devi˚H™dÀ
, &
mesßge
);

651  
kSètus_USB_Suc˚ss
;

652 
	}
}

664 
usb_°©us_t
 
	$USB_Devi˚Lpc3511IpI¡îru±Resume
(
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
)

666 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 
mesßge
;

668 
mesßge
.
buf„r
 = (
uöt8_t
 *)
NULL
;

669 
mesßge
.
code
 = 
kUSB_Devi˚NŸifyResume
;

670 
mesßge
.
Àngth
 = 0U;

671 
mesßge
.
isSëup
 = 0U;

674 
	`USB_Devi˚NŸifiˇti⁄Triggî
(
Õc3511IpSèã
->
devi˚H™dÀ
, &
mesßge
);

676  
kSètus_USB_Suc˚ss
;

677 
	}
}

678 #i‡(
deföed
(
USB_DEVICE_CONFIG_LPM_L1
) && (USB_DEVICE_CONFIG_LPM_L1 > 0U))

689 
usb_°©us_t
 
	$USB_Devi˚Lpc3511IpI¡îru±LPMSÀï
(
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
)

691 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 
mesßge
;

692 
uöt8_t
 
ªmŸewakeup
;

694 
mesßge
.
buf„r
 = (
uöt8_t
 *)
NULL
;

695 
mesßge
.
code
 = 
kUSB_Devi˚NŸifyLPMSÀï
;

696 
mesßge
.
Àngth
 = 0U;

697 
mesßge
.
isSëup
 = 0U;

699 
ªmŸewakeup
 =

700 (
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 & 
USB_DEVCMDSTAT_LPM_REWP_MASK
Ë>> 
USB_DEVCMDSTAT_LPM_REWP_SHIFT
;

701 
	`USB_Devi˚SëSètus
(
Õc3511IpSèã
->
devi˚H™dÀ
, 
kUSB_Devi˚SètusRemŸeWakeup
, &
ªmŸewakeup
);

704 
	`USB_Devi˚NŸifiˇti⁄Triggî
(
Õc3511IpSèã
->
devi˚H™dÀ
, &
mesßge
);

706  
kSètus_USB_Suc˚ss
;

707 
	}
}

712 
uöt32_t
 
	$USB_Devi˚Lpc3511IpTokíUpd©e
(
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
,

713 
usb_devi˚_Õc3511ù_ídpoöt_°©e_°ru˘_t
 *
ïSèã
,

714 
uöt8_t
 
ídpoötIndex
,

715 
uöt8_t
 
ch™gedOdd
)

717 
uöt32_t
 
Àngth
;

718 
uöt32_t
 
ödex
;

719 
uöt8_t
 *
de°Buf„r
;

720 
uöt8_t
 *
sour˚Buf„r
;

721 
uöt8_t
 
odd
;

723 #i‡(
deföed
 
USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE
) && (USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE)

724 i‡(
ch™gedOdd
)

726 
odd
 = 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
c⁄sumîOdd
;

727 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
c⁄sumîOdd
 ^= 1;

728 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
doubÀBuf„rBusy
--;

733 
odd
 = 0U;

737 i‡((
ídpoötIndex
 & 0x01U) == 0x00u)

740 
Àngth
 = *(((
uöt32_t
 *)
Õc3511IpSèã
->
ªgi°îBa£
->
EPLISTSTART
Ë+ 
ídpoötIndex
 * 2 + 
odd
);

742 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))

743 i‡(
Õc3511IpSèã
->
c⁄åﬁÀrS≥ed
)

745 
Àngth
 =

746 (
Àngth
 & 
USB_LPC3511IPHS_ENDPOINT_BUFFER_NBYTES_MASK
Ë>> 
USB_LPC3511IPHS_ENDPOINT_BUFFER_NBYTES_SHIFT
;

751 
Àngth
 =

752 (
Àngth
 & 
USB_LPC3511IPFS_ENDPOINT_BUFFER_NBYTES_MASK
Ë>> 
USB_LPC3511IPFS_ENDPOINT_BUFFER_NBYTES_SHIFT
;

754 
Àngth
 = 
ïSèã
->
ïBuf„rSètusUni⁄
[
odd
].
ïBuf„rSètusFõld
.
å™ß˘i⁄Lígth
 -Üength;

759 
Àngth
 = 
ïSèã
->
ïBuf„rSètusUni⁄
[
odd
].
ïBuf„rSètusFõld
.
å™ß˘i⁄Lígth
;

762 #i‡((
	`deföed
(
USB_DEVICE_IP3511_RESERVED_BUFFER_FOR_COPY
)) && (USB_DEVICE_IP3511_RESERVED_BUFFER_FOR_COPY > 0U))

763 #i‡
USB_DEVICE_IP3511_ALL_IP_SUPPORT_RESERVED_BUFFER


764 i‡((
ïSèã
->
ïBuf„rSètusUni⁄
[
odd
].
ïBuf„rSètusFõld
.
ïPackëC›yed
Ë&& (
Àngth
 > 0U) &&

765 ((
ídpoötIndex
 & 0x01u) == 0U))

767 i‡(
	`USB_Devi˚LpcIp3511MaxPackëNìdC›y
(
Õc3511IpSèã
) &&

768 (
ïSèã
->
ïBuf„rSètusUni⁄
[
odd
].
ïBuf„rSètusFõld
.
ïPackëC›yed
Ë&& (
Àngth
 > 0U) &&

769 ((
ídpoötIndex
 & 0x01u) == 0U))

773 i‡(((
ídpoötIndex
 >> 1UË=
USB_CONTROL_ENDPOINT
) &&

774 (
ïSèã
->
ïBuf„rSètusUni⁄
[
odd
].
ïBuf„rSètusFõld
.
ïPackëC›yed
Ë&& (
Àngth
 > 0U) &&

775 ((
ídpoötIndex
 & 0x01u) == 0U))

778 
de°Buf„r
 = &(
ïSèã
->
å™s„rBuf„r
[ïSèã->
å™s„rD⁄e
]);

779 #i‡(
deföed
 
USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE
) && (USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE)

780 
sour˚Buf„r
 = 
ïSèã
->
ïPackëBuf„r
 +

781 
odd
 * 
	`USB_LPC3511IP_GET_MULTIPLE_OF_64
(
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
maxPackëSize
);

783 
sour˚Buf„r
 = 
ïSèã
->
ïPackëBuf„r
;

787 i‡(!(((
uöt32_t
)(
de°Buf„r
)) & 0x00000003U))

789 
ödex
 = 0; index < (
Àngth
 >> 2U); ++index)

791 ((
uöt32_t
 *)(
de°Buf„r
))[
ödex
] = ((uöt32_à*)(
sour˚Buf„r
))[index];

793 
ödex
 = index * 4; index < 
Àngth
; ++index)

795 
de°Buf„r
[
ödex
] = 
sour˚Buf„r
[index];

800 
ödex
 = 0; index < 
Àngth
; ++index)

802 
de°Buf„r
[
ödex
] = 
sour˚Buf„r
[index];

807 
ïSèã
->
å™s„rD⁄e
 +
Àngth
;

809  
Àngth
;

810 
	}
}

812 
	$USB_Devi˚Lpc3511IpI¡îru±Tokí
(
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
,

813 
uöt8_t
 
ídpoötIndex
,

814 
uöt8_t
 
isSëup
,

815 
uöt32_t
 
îr‹Sètus
)

817 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 
mesßge
;

818 
uöt32_t
 
Àngth
;

819 
uöt32_t
 
ªmaöLígth
;

820 
usb_£tup_°ru˘_t
 *
£tupPackë
;

821 
usb_devi˚_Õc3511ù_ídpoöt_°©e_°ru˘_t
 *
ïSèã
 =

822 
	`USB_Devi˚Lpc3511IpGëEndpoötSèãSåu˘
(
Õc3511IpSèã
, 
ídpoötIndex
);

823 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))

825 i‡((
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ïC⁄åﬁDeÁu…
 &

826 ((
USB_LPC3511IP_ENDPOINT_TOGGLE_RESET_MASK
Ë>> 
USB_LPC3511IP_ENDPOINT_CONFIGURE_BITS_SHIFT
)) &&

827 (
USB_ENDPOINT_INTERRUPT
 =
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ídpoötTy≥
) &&

828 (
Õc3511IpSèã
->
c⁄åﬁÀrS≥ed
) &&

829 (
Õc3511IpSèã
->
ïComm™dSètusLi°
[
ídpoötIndex
 * 2 + 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
c⁄sumîOdd
] &

830 
USB_LPC3511IP_ENDPOINT_TOGGLE_RESET_MASK
))

832 i‡(!(
Õc3511IpSèã
->
ªgi°îBa£
->
EPTOGGLE
 & (0x01u << 
ídpoötIndex
)))

834 
uöt32_t
 
ödex
;

835 
Àngth
 = 0;

836 
ödex
 = 0; index < ((
USB_DEVICE_CONFIG_ENDPOINTS
 + 0x03U) & 0xFFFFFFFCU) * 4; ++index)

838 i‡(
Õc3511IpSèã
->
ïComm™dSètusLi°
[
ödex
] & 
USB_LPC3511IP_ENDPOINT_TOGGLE_RESET_MASK
)

840 
Àngth
++;

844 i‡(
Àngth
 <= 1)

846 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 &=

847 ~(
USB_DEVCMDSTAT_INTONNAK_AO_MASK
 | 
USB_DEVCMDSTAT_INTONNAK_AI_MASK
);

849 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ïC⁄åﬁDeÁu…
 &=

850 (~((
USB_LPC3511IP_ENDPOINT_TOGGLE_RESET_MASK
Ë>> 
USB_LPC3511IP_ENDPOINT_CONFIGURE_BITS_SHIFT
));

851 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))

853 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ïC⁄åﬁDeÁu…
 |=

854 ((
USB_LPC3511IP_ENDPOINT_RFTV_MASK
 | 
USB_LPC3511IP_ENDPOINT_ENDPOINT_TYPE_MASK
) >>

855 
USB_LPC3511IP_ENDPOINT_CONFIGURE_BITS_SHIFT
);

856 
	`USB_Devi˚Lpc3511IpTønß˘i⁄
(
Õc3511IpSèã
, 
ïSèã
, 
ídpoötIndex
);

863 i‡((!
isSëup
Ë&& (0U =
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
å™s„ºög
))

867 i‡(
isSëup
)

869 
mesßge
.
Àngth
 = 8U;

870 
mesßge
.
buf„r
 = (
Õc3511IpSèã
->
£tupD©a
);

872 i‡(
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
å™s„ºög
)

874 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
å™s„ºög
 = 0U;

875 i‡(
Õc3511IpSèã
->
ïComm™dSètusLi°
[0] & 
USB_LPC3511IP_ENDPOINT_ACTIVE_MASK
)

877 
	`USB_Devi˚Lpc3511IpC™˚l
(
Õc3511IpSèã
, 
USB_CONTROL_ENDPOINT
);

880 i‡(
Õc3511IpSèã
->
ídpoötSèã
[1].
°©eUni⁄
.
°©eBôFõld
.
å™s„ºög
)

882 
Õc3511IpSèã
->
ídpoötSèã
[1].
°©eUni⁄
.
°©eBôFõld
.
å™s„ºög
 = 0U;

883 i‡(
Õc3511IpSèã
->
ïComm™dSètusLi°
[2] & 
USB_LPC3511IP_ENDPOINT_ACTIVE_MASK
)

885 
	`USB_Devi˚Lpc3511IpC™˚l
(
Õc3511IpSèã
, (0x80u | 
USB_CONTROL_ENDPOINT
));

889 
	`USB_LPC3511IP_ENDPOINT_SET_ENDPOINT_AND
(

890 
Õc3511IpSèã
, 0, 0, (~(
USB_LPC3511IP_ENDPOINT_STALL_MASK
 | 
USB_LPC3511IP_ENDPOINT_ACTIVE_MASK
)));

891 
	`USB_LPC3511IP_ENDPOINT_SET_ENDPOINT_AND
(

892 
Õc3511IpSèã
, 1, 0, (~(
USB_LPC3511IP_ENDPOINT_STALL_MASK
 | 
USB_LPC3511IP_ENDPOINT_ACTIVE_MASK
)));

894 
Õc3511IpSèã
->
ªgi°îBa£
->
INTSTAT
 = 0x03u;

896 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 |
USB_DEVCMDSTAT_SETUP_MASK
;

900 
Àngth
 = 0;

901 #i‡(
deföed
 
USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE
) && (USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE)

902 i‡(
Õc3511IpSèã
->
ïComm™dSètusLi°
[
ídpoötIndex
 * 2 + 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
c⁄sumîOdd
] &

903 
USB_LPC3511IP_ENDPOINT_ACTIVE_MASK
)

908 i‡(
Õc3511IpSèã
->
ïComm™dSètusLi°
[
ídpoötIndex
 * 2] & 
USB_LPC3511IP_ENDPOINT_ACTIVE_MASK
)

914 #i‡(
deföed
 
USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE
) && (USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE)

915 i‡((
ídpoötIndex
 >> 1UË!
USB_CONTROL_ENDPOINT
)

917 
Àngth
 +
	`USB_Devi˚Lpc3511IpTokíUpd©e
(
Õc3511IpSèã
, 
ïSèã
, 
ídpoötIndex
, 1U);

919 i‡((
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
doubÀBuf„rBusy
 > 0) &&

920 (!(
Õc3511IpSèã


921 ->
ïComm™dSètusLi°
[
ídpoötIndex
 * 2 + 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
c⁄sumîOdd
] &

922 
USB_LPC3511IP_ENDPOINT_ACTIVE_MASK
)))

924 
Àngth
 +
	`USB_Devi˚Lpc3511IpTokíUpd©e
(
Õc3511IpSèã
, 
ïSèã
, 
ídpoötIndex
, 1U);

930 
Àngth
 = 
	`USB_Devi˚Lpc3511IpTokíUpd©e
(
Õc3511IpSèã
, 
ïSèã
, 
ídpoötIndex
, 0U);

934 
ªmaöLígth
 = 
ïSèã
->
å™s„rLígth
 -ÉpSèã->
å™s„rD⁄e
;

941 i‡((
Àngth
 > 0UË&& (!÷ígth % 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
maxPackëSize
)Ë&& (
ªmaöLígth
 > 0U))

943 ()
	`USB_Devi˚Lpc3511IpTønß˘i⁄
(
Õc3511IpSèã
, 
ïSèã
, 
ídpoötIndex
);

948 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
å™s„ºög
 = 0U;

949 
mesßge
.
Àngth
 = 
ïSèã
->
å™s„rD⁄e
;

950 
mesßge
.
buf„r
 = 
ïSèã
->
å™s„rBuf„r
;

956 i‡((
ídpoötIndex
 & 0x01UË&& (
Àngth
Ë&& (!÷ígth % 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
maxPackëSize
)))

958 i‡((
ídpoötIndex
 >> 1UË=
USB_CONTROL_ENDPOINT
)

960 
£tupPackë
 = (
usb_£tup_°ru˘_t
 *)(&(
Õc3511IpSèã
->
£tupD©a
[0]));

964 i‡(
	`USB_SHORT_FROM_LITTLE_ENDIAN
(
£tupPackë
->
wLígth
Ë> 
ïSèã
->
å™s„rLígth
)

966 ()
	`USB_Devi˚Lpc3511IpEndpoötPrime
(
Õc3511IpSèã
, 
ïSèã
, 1U, 
NULL
, 0U);

970 i‡((
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
z…
))

972 ()
	`USB_Devi˚Lpc3511IpEndpoötPrime
(
Õc3511IpSèã
, 
ïSèã
, 
ídpoötIndex
, 
NULL
, 0U);

982 
mesßge
.
isSëup
 = isSetup;

983 
mesßge
.
code
 = ((
uöt8_t
)(
ídpoötIndex
 >> 1Ë| (uöt8_t)(((
uöt32_t
)(endpointIndex & 0x01U) << 0x07U)));

986 
	`USB_Devi˚NŸifiˇti⁄Triggî
(
Õc3511IpSèã
->
devi˚H™dÀ
, &
mesßge
);

987 
	}
}

997 
	$USB_Devi˚Lpc3511IpI¡îru±Re£t
(
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
)

999 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 
mesßge
;

1002 
Õc3511IpSèã
->
isRe£âög
 = 1U;

1004 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))

1005 i‡(
Õc3511IpSèã
->
c⁄åﬁÀrS≥ed
)

1007 i‡(((
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 & 
USBHSD_DEVCMDSTAT_S≥ed_MASK
) >>

1008 
USBHSD_DEVCMDSTAT_S≥ed_SHIFT
) == 0x02U)

1010 
Õc3511IpSèã
->
devi˚S≥ed
 = 
USB_SPEED_HIGH
;

1012 i‡(((
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 & 
USBHSD_DEVCMDSTAT_S≥ed_MASK
) >>

1013 
USBHSD_DEVCMDSTAT_S≥ed_SHIFT
) == 0x01U)

1015 
Õc3511IpSèã
->
devi˚S≥ed
 = 
USB_SPEED_FULL
;

1024 
Õc3511IpSèã
->
devi˚S≥ed
 = 
USB_SPEED_FULL
;

1027 
mesßge
.
buf„r
 = (
uöt8_t
 *)
NULL
;

1028 
mesßge
.
code
 = 
kUSB_Devi˚NŸifyBusRe£t
;

1029 
mesßge
.
Àngth
 = 0U;

1030 
mesßge
.
isSëup
 = 0U;

1032 
	`USB_Devi˚NŸifiˇti⁄Triggî
(
Õc3511IpSèã
->
devi˚H™dÀ
, &
mesßge
);

1033 
	}
}

1035 #i‡(
deföed
(
USB_DEVICE_CONFIG_DETACH_ENABLE
) && (USB_DEVICE_CONFIG_DETACH_ENABLE))

1044 
	$USB_Devi˚Lpc3511IpI¡îru±Dëach
(
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
)

1046 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 
mesßge
;

1048 
mesßge
.
buf„r
 = (
uöt8_t
 *)
NULL
;

1049 
mesßge
.
code
 = 
kUSB_Devi˚NŸifyDëach
;

1050 
mesßge
.
Àngth
 = 0U;

1051 
mesßge
.
isSëup
 = 0U;

1054 
	`USB_Devi˚NŸifiˇti⁄Triggî
(
Õc3511IpSèã
->
devi˚H™dÀ
, &
mesßge
);

1055 
	}
}

1058 
usb_°©us_t
 
	$USB_Devi˚Lpc3511IpInô
(
uöt8_t
 
c⁄åﬁÀrId
,

1059 
usb_devi˚_h™dÀ
 
h™dÀ
,

1060 
usb_devi˚_c⁄åﬁÀr_h™dÀ
 *
c⁄åﬁÀrH™dÀ
)

1062 
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
 = 
NULL
;

1063 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511FS
)) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U))

1064 
uöt32_t
 
ù3511FsBa£s
[] = 
USB_BASE_ADDRS
;

1066 
uöt32_t
 *
ídpoötLi°Aºay
[] = 
LPC_CONTROLLER_ENDPOINT_LIST_ARRAY
;

1068 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))

1069 
uöt32_t
 
ù3511HsBa£s
[] = 
USBHSD_BASE_ADDRS
;

1070 i‡((
c⁄åﬁÀrId
 >
kUSB_C⁄åﬁÀrLpcIp3511Hs0
Ë&& (c⁄åﬁÀrId <
kUSB_C⁄åﬁÀrLpcIp3511Hs1
))

1072 i‡((
uöt32_t
)(
c⁄åﬁÀrId
 - 
kUSB_C⁄åﬁÀrLpcIp3511Hs0
Ë>((
ù3511HsBa£s
) / (uint32_t)))

1074  
kSètus_USB_C⁄åﬁÀrNŸFound
;

1076 
Õc3511IpSèã
 =

1077 &
s_UsbDevi˚Lpc3511IpSèã
[
c⁄åﬁÀrId
 - 
kUSB_C⁄åﬁÀrLpcIp3511Hs0
 + 
USB_DEVICE_CONFIG_LPCIP3511FS
];

1078 
Õc3511IpSèã
->
c⁄åﬁD©a
 =

1079 
s_C⁄åﬁTøns„rD©a
[
c⁄åﬁÀrId
 - 
kUSB_C⁄åﬁÀrLpcIp3511Hs0
 + 
USB_DEVICE_CONFIG_LPCIP3511FS
];

1080 
Õc3511IpSèã
->
£tupD©a
 =

1081 
s_SëupD©a
[
c⁄åﬁÀrId
 - 
kUSB_C⁄åﬁÀrLpcIp3511Hs0
 + 
USB_DEVICE_CONFIG_LPCIP3511FS
];

1082 
Õc3511IpSèã
->
zîoTønß˘i⁄D©a
 =

1083 
s_ZîoTønß˘i⁄D©a
[
c⁄åﬁÀrId
 - 
kUSB_C⁄åﬁÀrLpcIp3511Hs0
 + 
USB_DEVICE_CONFIG_LPCIP3511FS
];

1085 
Õc3511IpSèã
->
ïComm™dSètusLi°
 =

1086 
ídpoötLi°Aºay
[
c⁄åﬁÀrId
 - 
kUSB_C⁄åﬁÀrLpcIp3511Hs0
 + 
USB_DEVICE_CONFIG_LPCIP3511FS
];

1088 
Õc3511IpSèã
->
ªgi°îBa£
 = (
USB_Ty≥
 *)
ù3511HsBa£s
[
c⁄åﬁÀrId
 - 
kUSB_C⁄åﬁÀrLpcIp3511Hs0
];

1092 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511FS
)) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U))

1095 i‡((
c⁄åﬁÀrId
 < 
kUSB_C⁄åﬁÀrLpcIp3511Fs0
) ||

1096 ((
c⁄åﬁÀrId
 - 
kUSB_C⁄åﬁÀrLpcIp3511Fs0
Ë>(
uöt8_t
)
USB_DEVICE_CONFIG_LPCIP3511FS
) ||

1097 ((
uöt32_t
)(
c⁄åﬁÀrId
 - 
kUSB_C⁄åﬁÀrLpcIp3511Fs0
Ë>((
ù3511FsBa£s
) / (uint32_t))))

1099  
kSètus_USB_C⁄åﬁÀrNŸFound
;

1101 
Õc3511IpSèã
 = &
s_UsbDevi˚Lpc3511IpSèã
[
c⁄åﬁÀrId
 - 
kUSB_C⁄åﬁÀrLpcIp3511Fs0
];

1102 
Õc3511IpSèã
->
c⁄åﬁD©a
 = 
s_C⁄åﬁTøns„rD©a
[
c⁄åﬁÀrId
 - 
kUSB_C⁄åﬁÀrLpcIp3511Fs0
];

1103 
Õc3511IpSèã
->
£tupD©a
 = 
s_SëupD©a
[
c⁄åﬁÀrId
 - 
kUSB_C⁄åﬁÀrLpcIp3511Fs0
];

1104 
Õc3511IpSèã
->
zîoTønß˘i⁄D©a
 = 
s_ZîoTønß˘i⁄D©a
[
c⁄åﬁÀrId
 - 
kUSB_C⁄åﬁÀrLpcIp3511Fs0
];

1106 
Õc3511IpSèã
->
ïComm™dSètusLi°
 = 
ídpoötLi°Aºay
[
c⁄åﬁÀrId
 - 
kUSB_C⁄åﬁÀrLpcIp3511Fs0
];

1108 
Õc3511IpSèã
->
ªgi°îBa£
 = (
USB_Ty≥
 *)
ù3511FsBa£s
[
c⁄åﬁÀrId
 - 
kUSB_C⁄åﬁÀrLpcIp3511Fs0
];

1112  
kSètus_USB_C⁄åﬁÀrNŸFound
;

1116 
Õc3511IpSèã
->
c⁄åﬁÀrId
 = controllerId;

1117 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))

1118 i‡((
Õc3511IpSèã
->
c⁄åﬁÀrId
 >
kUSB_C⁄åﬁÀrLpcIp3511Hs0
) &&

1119 (
Õc3511IpSèã
->
c⁄åﬁÀrId
 <
kUSB_C⁄åﬁÀrLpcIp3511Hs1
))

1121 
Õc3511IpSèã
->
c⁄åﬁÀrS≥ed
 = 1U;

1125 
Õc3511IpSèã
->
c⁄åﬁÀrS≥ed
 = 0U;

1129 #i‡((
	`deföed
(
USB_DEVICE_IP3511_RESERVED_BUFFER_FOR_COPY
)) && (USB_DEVICE_IP3511_RESERVED_BUFFER_FOR_COPY > 0U))

1131 i‡(
	`USB_Devi˚LpcIp3511MaxPackëNìdC›y
(
Õc3511IpSèã
))

1133 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))

1134 i‡((
c⁄åﬁÀrId
 >
kUSB_C⁄åﬁÀrLpcIp3511Hs0
Ë&& (c⁄åﬁÀrId <
kUSB_C⁄åﬁÀrLpcIp3511Hs1
))

1136 #i‡(
USB_DEVICE_IP3511_ALL_IP_SUPPORT_RESERVED_BUFFER
)

1138 
Õc3511IpSèã
->
ïRe£rvedBuf„r
 = (
uöt8_t
 *)

1139 
s_EpRe£rvedBuf„r
[
c⁄åﬁÀrId
 - 
kUSB_C⁄åﬁÀrLpcIp3511Hs0
 + 
USB_DEVICE_CONFIG_LPCIP3511FS
];

1141 
Õc3511IpSèã
->
ïRe£rvedBuf„r
 =

1142 (
uöt8_t
 *)
s_EpRe£rvedBuf„r
[
c⁄åﬁÀrId
 - 
kUSB_C⁄åﬁÀrLpcIp3511Hs0
];

1148 
Õc3511IpSèã
->
ïRe£rvedBuf„r
 =

1149 (
uöt8_t
 *)
s_EpRe£rvedBuf„r
[
c⁄åﬁÀrId
 - 
kUSB_C⁄åﬁÀrLpcIp3511Fs0
];

1152 
c⁄åﬁÀrId
 = 0; c⁄åﬁÀrId < ((
USB_DEVICE_IP3511_BITS_FOR_RESERVED_BUFFER
 + 7) / 8); ++controllerId)

1154 
Õc3511IpSèã
->
ïRe£rvedBuf„rBôs
[
c⁄åﬁÀrId
] = 0u;

1159 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 &=

1160 (~(
USB_DEVCMDSTAT_DCON_MASK
 | 
USB_DEVCMDSTAT_DEV_EN_MASK
 | 
USB_DEVCMDSTAT_LPM_SUP_MASK
));

1162 
	`USB_Devi˚Lpc3511IpSëDeÁu…Sèã
(
Õc3511IpSèã
);

1164 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 |(
USB_DEVCMDSTAT_DEV_EN_MASK


1165 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_LOW_POWER_MODE
)) && (USB_DEVICE_CONFIG_LOW_POWER_MODE > 0U))

1167 | 
USB_DEVCMDSTAT_FORCE_NEEDCLK_MASK


1170 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_LPM_L1
) && (USB_DEVICE_CONFIG_LPM_L1 > 0U))

1171 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 |
USB_DEVCMDSTAT_LPM_SUP_MASK
;

1172 
Õc3511IpSèã
->
ªgi°îBa£
->
LPM
 |
	`USB_LPM_HIRD_SW
(4);

1173 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 &~(
USB_DEVCMDSTAT_FORCE_NEEDCLK_MASK
);

1175 
Õc3511IpSèã
->
devi˚H™dÀ
 = 
h™dÀ
;

1176 *
c⁄åﬁÀrH™dÀ
 = 
Õc3511IpSèã
;

1178  
kSètus_USB_Suc˚ss
;

1179 
	}
}

1181 
usb_°©us_t
 
	$USB_Devi˚Lpc3511IpDeöô
(
usb_devi˚_c⁄åﬁÀr_h™dÀ
 
c⁄åﬁÀrH™dÀ
)

1183 
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
 = (usb_devi˚_Õc3511ù_°©e_°ru˘_à*)
c⁄åﬁÀrH™dÀ
;

1184 
uöt32_t
 
usbAddªss
;

1186 i‡(
c⁄åﬁÀrH™dÀ
 =
NULL
)

1188  
kSètus_USB_InvÆidH™dÀ
;

1191 
Õc3511IpSèã
->
ªgi°îBa£
->
INTSTAT
 =

1192 (
USB_INTSTAT_DEV_INT_MASK
 | 
USB_INTSTAT_FRAME_INT_MASK
 | 
USB_LPC3511IP_MAX_PHY_ENDPOINT_MASK
);

1194 
Õc3511IpSèã
->
ªgi°îBa£
->
INTEN
 = 0U;

1196 
usbAddªss
 = 0U;

1197 
	`USB_Devi˚Lpc3511IpC⁄åﬁ
(
Õc3511IpSèã
, 
kUSB_Devi˚C⁄åﬁSëDevi˚Addªss
, &
usbAddªss
);

1198 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_LPM_L1
) && (USB_DEVICE_CONFIG_LPM_L1 > 0U))

1199 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 &~
USB_DEVCMDSTAT_LPM_SUP_MASK
;

1202 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 &(~(
USB_DEVCMDSTAT_DCON_MASK
 | 
USB_DEVCMDSTAT_DEV_EN_MASK
));

1204  
kSètus_USB_Suc˚ss
;

1205 
	}
}

1207 
usb_°©us_t
 
	$USB_Devi˚Lpc3511IpGëA˘uÆBuf„rAndPrime
(
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
,

1208 
usb_devi˚_Õc3511ù_ídpoöt_°©e_°ru˘_t
 *
ïSèã
,

1209 
uöt8_t
 
ídpoötIndex
,

1210 
uöt8_t
 
ch™gedOdd
)

1212 
uöt32_t
 
ödex
;

1213 
uöt8_t
 *
de°Buf„r
;

1214 
uöt8_t
 *
a˘uÆBuf„r
;

1215 
uöt32_t
 
Àngth
;

1216 
uöt8_t
 
odd
;

1218 #i‡(
deföed
 
USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE
) && (USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE)

1219 i‡(
ch™gedOdd
)

1221 
odd
 = 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
¥odu˚rOdd
;

1226 
odd
 = 0;

1228 
a˘uÆBuf„r
 = 
ïSèã
->
å™s„rBuf„r
 +ÉpSèã->
å™s„rPrimedLígth
;

1229 
Àngth
 = 
ïSèã
->
å™s„rLígth
 -ÉpSèã->
å™s„rPrimedLígth
;

1231 i‡(
Àngth
 > 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
maxPackëSize
)

1233 
Àngth
 = 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
maxPackëSize
;

1236 
ïSèã
->
ïBuf„rSètusUni⁄
[
odd
].
ïBuf„rSètusFõld
.
ïPackëC›yed
 = 0;

1238 
ödex
 = (
ídpoötIndex
 & 0x01u);

1239 i‡(
Àngth
 > 0U)

1241 #i‡((
	`deföed
(
USB_DEVICE_IP3511_RESERVED_BUFFER_FOR_COPY
)) && (USB_DEVICE_IP3511_RESERVED_BUFFER_FOR_COPY > 0U))

1243 #i‡(!
USB_DEVICE_IP3511_ALL_IP_SUPPORT_RESERVED_BUFFER
)

1244 
	#USB_DEVICE_IP3511_NEED_CHECK_BUFFER
 (1u)

	)

1246 i‡(
	`USB_Devi˚LpcIp3511MaxPackëNìdC›y
(
Õc3511IpSèã
))

1249 
	#USB_DEVICE_IP3511_NEED_CHECK_BUFFER
 (1u)

	)

1251 i‡(((
ídpoötIndex
 >> 1UË=
USB_CONTROL_ENDPOINT
))

1255 i‡((((
uöt32_t
)
a˘uÆBuf„r
 & 0x0000003FU) != 0U) ||

1256 (((
uöt32_t
)
a˘uÆBuf„r
 & 0xFFC00000UË!(
Õc3511IpSèã
->
ªgi°îBa£
->
DATABUFSTART
 & 0xFFC00000U))

1257 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))

1258 || ((
Õc3511IpSèã
->
c⁄åﬁÀrS≥ed
Ë&& (!
ödex
) &&

1259 (
Àngth
 !
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
maxPackëSize
)))

1264 
ïSèã
->
ïBuf„rSètusUni⁄
[
odd
].
ïBuf„rSètusFõld
.
ïPackëC›yed
 = 1U;

1266 #i‡(
deföed
 
USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE
) && (USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE)

1267 
de°Buf„r
 =

1268 (
uöt8_t
 *)(
ïSèã
->
ïPackëBuf„r
 + (
odd
 * 
	`USB_LPC3511IP_GET_MULTIPLE_OF_64
(

1269 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
maxPackëSize
)));

1271 
de°Buf„r
 = (
uöt8_t
 *)(
ïSèã
->
ïPackëBuf„r
);

1273 i‡(
ödex
)

1276 i‡(!(((
uöt32_t
)
a˘uÆBuf„r
) & 0x00000003U))

1278 
ödex
 = 0; index < ((
Àngth
 + 0x03U) >> 2U); ++index)

1280 ((
uöt32_t
 *)(
de°Buf„r
))[
ödex
] = ((uöt32_à*)
a˘uÆBuf„r
)[index];

1285 
ödex
 = 0; index < 
Àngth
; ++index)

1287 
de°Buf„r
[
ödex
] = 
a˘uÆBuf„r
[index];

1293 
Àngth
 = 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
maxPackëSize
;

1295 
a˘uÆBuf„r
 = 
de°Buf„r
;

1298 #i‡(
deföed
 
USB_DEVICE_IP3511_NEED_CHECK_BUFFER
) && (USB_DEVICE_IP3511_NEED_CHECK_BUFFER)

1302 i‡((((
uöt32_t
)
a˘uÆBuf„r
 & 0x0000003FU) != 0U) ||

1303 (((
uöt32_t
)
a˘uÆBuf„r
 & 0xFFC00000UË!(
Õc3511IpSèã
->
ªgi°îBa£
->
DATABUFSTART
 & 0xFFC00000U))

1304 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))

1305 || ((
Õc3511IpSèã
->
c⁄åﬁÀrS≥ed
Ë&& (!
ödex
Ë&& ((
Àngth
 & 0x00000003u) != 0u)))

1310  
kSètus_USB_Eº‹
;

1317 i‡(0U =
Õc3511IpSèã
->
isRe£âög
)

1319  
	`USB_Devi˚Lpc3511IpEndpoötPrime
(
Õc3511IpSèã
, 
ïSèã
, 
ídpoötIndex
, 
a˘uÆBuf„r
, 
Àngth
);

1323  
kSètus_USB_Eº‹
;

1325 
	}
}

1326 
usb_°©us_t
 
	$USB_Devi˚Lpc3511IpTønß˘i⁄
(
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
,

1327 
usb_devi˚_Õc3511ù_ídpoöt_°©e_°ru˘_t
 *
ïSèã
,

1328 
uöt8_t
 
ídpoötIndex
)

1330 
usb_°©us_t
 
°©us
 = 
kSètus_USB_Eº‹
;

1332 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))

1334 i‡((
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ïC⁄åﬁDeÁu…
 &

1335 ((
USB_LPC3511IP_ENDPOINT_TOGGLE_RESET_MASK
Ë>> 
USB_LPC3511IP_ENDPOINT_CONFIGURE_BITS_SHIFT
)) &&

1336 (
USB_ENDPOINT_INTERRUPT
 =
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ídpoötTy≥
Ë&& (
Õc3511IpSèã
->
c⁄åﬁÀrS≥ed
))

1338 
uöt32_t
 
öãºu±Mask
;

1339 
öãºu±Mask
 = 
Õc3511IpSèã
->
ªgi°îBa£
->
INTEN
;

1340 
Õc3511IpSèã
->
ªgi°îBa£
->
INTEN
 = 0;

1342 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 |(
USB_DEVCMDSTAT_INTONNAK_AO_MASK
 | 
USB_DEVCMDSTAT_INTONNAK_AI_MASK
);

1343 
uöt32_t
 
comm™dlütVÆue
 = 
USB_LPC3511IP_ENDPOINT_STALL_MASK
;

1344 
comm™dlütVÆue
 &=

1345 
Õc3511IpSèã
->
ïComm™dSètusLi°
[
ídpoötIndex
 * 2 + 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
¥odu˚rOdd
];

1347 #i‡(
deföed
 
USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE
) && (USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE)

1348 
	`USB_LPC3511IP_ENDPOINT_SET_ENDPOINT
(

1349 
Õc3511IpSèã
, 
ídpoötIndex
, 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
¥odu˚rOdd
,

1350 (
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ïC⁄åﬁDeÁu…
 << 
USB_LPC3511IP_ENDPOINT_CONFIGURE_BITS_SHIFT
) |

1351 
comm™dlütVÆue
,

1352 0U, (
uöt32_t
)
Õc3511IpSèã
->
zîoTønß˘i⁄D©a
);

1354 
	`USB_LPC3511IP_ENDPOINT_SET_ENDPOINT
(

1355 
Õc3511IpSèã
, 
ídpoötIndex
, 0,

1356 (
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
ïC⁄åﬁDeÁu…
 << 
USB_LPC3511IP_ENDPOINT_CONFIGURE_BITS_SHIFT
) |

1357 
comm™dlütVÆue
,

1358 0U, (
uöt32_t
)
Õc3511IpSèã
->
zîoTønß˘i⁄D©a
);

1360 
Õc3511IpSèã
->
ªgi°îBa£
->
INTEN
 = 
öãºu±Mask
;

1361  
kSètus_USB_Suc˚ss
;

1366 i‡((
ïSèã
->
å™s„rLígth
 <ïSèã->
å™s„rPrimedLígth
) && (epState->transferLength != 0))

1368  
kSètus_USB_Suc˚ss
;

1371 #i‡(
deföed
 
USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE
) && (USB_DEVICE_IP3511_DOUBLE_BUFFER_ENABLE)

1372 
uöt32_t
 
öãºu±Mask
;

1374 i‡((
ídpoötIndex
 >> 1UË!
USB_CONTROL_ENDPOINT
)

1377 
öãºu±Mask
 = 
Õc3511IpSèã
->
ªgi°îBa£
->
INTEN
;

1378 
Õc3511IpSèã
->
ªgi°îBa£
->
INTEN
 = 0;

1383 
°©us
 = 
	`USB_Devi˚Lpc3511IpGëA˘uÆBuf„rAndPrime
(
Õc3511IpSèã
, 
ïSèã
, 
ídpoötIndex
, 1U);

1384 i‡(
°©us
 !
kSètus_USB_Suc˚ss
)

1388 } (
ïSèã
->
å™s„rLígth
 >ÉpSèã->
å™s„rPrimedLígth
) &&

1389 (
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
doubÀBuf„rBusy
 < 2));

1393 
Õc3511IpSèã
->
ªgi°îBa£
->
INTEN
 = 
öãºu±Mask
;

1398 
°©us
 = 
	`USB_Devi˚Lpc3511IpGëA˘uÆBuf„rAndPrime
(
Õc3511IpSèã
, 
ïSèã
, 
ídpoötIndex
, 0U);

1400  
°©us
;

1401 
	}
}

1403 
usb_°©us_t
 
	$USB_Devi˚Lpc3511IpSíd
(
usb_devi˚_c⁄åﬁÀr_h™dÀ
 
c⁄åﬁÀrH™dÀ
,

1404 
uöt8_t
 
ídpoötAddªss
,

1405 
uöt8_t
 *
buf„r
,

1406 
uöt32_t
 
Àngth
)

1408 
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
 = (usb_devi˚_Õc3511ù_°©e_°ru˘_à*)
c⁄åﬁÀrH™dÀ
;

1409 
uöt8_t
 
ídpoötIndex
 = 
	`USB_LPC3511IP_ENDPOINT_DES_INDEX
(
ídpoötAddªss
);

1410 
usb_devi˚_Õc3511ù_ídpoöt_°©e_°ru˘_t
 *
ïSèã
 =

1411 
	`USB_Devi˚Lpc3511IpGëEndpoötSèãSåu˘
(
Õc3511IpSèã
, 
ídpoötIndex
);

1413 i‡(1U =
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
å™s„ºög
)

1415  
kSètus_USB_Eº‹
;

1419 
ïSèã
->
å™s„rD⁄e
 = 0U;

1420 
ïSèã
->
å™s„rBuf„r
 = 
buf„r
;

1421 
ïSèã
->
å™s„rLígth
 = 
Àngth
;

1422 
ïSèã
->
å™s„rPrimedLígth
 = 0U;

1424  
	`USB_Devi˚Lpc3511IpTønß˘i⁄
(
Õc3511IpSèã
, 
ïSèã
, 
ídpoötIndex
);

1430 i‡((0U =
Àngth
Ë&& (
USB_CONTROL_ENDPOINT
 =(
ídpoötAddªss
 & 
USB_ENDPOINT_NUMBER_MASK
)))

1432 
	`USB_Devi˚Lpc3511IpPrimeNextSëup
(
Õc3511IpSèã
);

1435 
	}
}

1437 
usb_°©us_t
 
	$USB_Devi˚Lpc3511IpRecv
(
usb_devi˚_c⁄åﬁÀr_h™dÀ
 
c⁄åﬁÀrH™dÀ
,

1438 
uöt8_t
 
ídpoötAddªss
,

1439 
uöt8_t
 *
buf„r
,

1440 
uöt32_t
 
Àngth
)

1442  
	`USB_Devi˚Lpc3511IpSíd
(
c⁄åﬁÀrH™dÀ
, 
ídpoötAddªss
, 
buf„r
, 
Àngth
);

1443 
	}
}

1445 
usb_°©us_t
 
	$USB_Devi˚Lpc3511IpC™˚l
(
usb_devi˚_c⁄åﬁÀr_h™dÀ
 
c⁄åﬁÀrH™dÀ
, 
uöt8_t
 
ï
)

1447 
uöt8_t
 
dißbÀI¡îru±
;

1449 
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
 = (usb_devi˚_Õc3511ù_°©e_°ru˘_à*)
c⁄åﬁÀrH™dÀ
;

1450 
usb_devi˚_ˇŒback_mesßge_°ru˘_t
 
mesßge
;

1451 
uöt8_t
 
ídpoötIndex
 = 
	`USB_LPC3511IP_ENDPOINT_DES_INDEX
(
ï
);

1452 
usb_devi˚_Õc3511ù_ídpoöt_°©e_°ru˘_t
 *
ïSèã
 =

1453 
	`USB_Devi˚Lpc3511IpGëEndpoötSèãSåu˘
(
Õc3511IpSèã
, 
ídpoötIndex
);

1456 i‡(
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
å™s„ºög
)

1458 
dißbÀI¡îru±
 = 0u;

1460 i‡(
Õc3511IpSèã
->
ªgi°îBa£
->
INTEN
 & (
uöt32_t
)(0x01u << 
ídpoötIndex
))

1462 
dißbÀI¡îru±
 = 1u;

1463 
Õc3511IpSèã
->
ªgi°îBa£
->
INTEN
 &(
uöt32_t
)(~(0x01u << 
ídpoötIndex
));

1468 i‡(
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
doubÀBuf„rBusy
 == 2)

1470 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
doubÀBuf„rBusy
 = 1;

1474 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
doubÀBuf„rBusy
 = 0;

1477 
Õc3511IpSèã
->
ªgi°îBa£
->
EPSKIP
 |(0x01U << 
ídpoötIndex
);

1478 
Õc3511IpSèã
->
ªgi°îBa£
->
EPSKIP
 & (0x01U << 
ídpoötIndex
))

1481 i‡(
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
doubÀBuf„rBusy
)

1483 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
¥odu˚rOdd
 =

1484 ((
Õc3511IpSèã
->
ªgi°îBa£
->
EPINUSE
 & ((
uöt32_t
)(0x01 << 
ídpoötIndex
))) >>ÉndpointIndex);

1485 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
¥odu˚rOdd
 ^= 1;

1486 
Õc3511IpSèã
->
ªgi°îBa£
->
EPINUSE
 |=

1487 (
uöt32_t
)(
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
¥odu˚rOdd
 << 
ídpoötIndex
);

1489 } 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
doubÀBuf„rBusy
);

1491 i‡(
dißbÀI¡îru±
)

1494 
Õc3511IpSèã
->
ªgi°îBa£
->
INTSTAT
 = (0x01U << 
ídpoötIndex
);

1495 
Õc3511IpSèã
->
ªgi°îBa£
->
INTEN
 |(
uöt32_t
)(0x01u << 
ídpoötIndex
);

1498 
mesßge
.
Àngth
 = 
USB_UNINITIALIZED_VAL_32
;

1499 
mesßge
.
buf„r
 = 
ïSèã
->
å™s„rBuf„r
;

1500 
mesßge
.
code
 = 
ï
;

1501 
mesßge
.
isSëup
 = 0U;

1502 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
å™s„ºög
 = 0U;

1503 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
¥odu˚rOdd
 =

1504 ((
Õc3511IpSèã
->
ªgi°îBa£
->
EPINUSE
 & ((
uöt32_t
)(0x01 << 
ídpoötIndex
))) >>ÉndpointIndex);

1505 
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
c⁄sumîOdd
 =

1506 ((
Õc3511IpSèã
->
ªgi°îBa£
->
EPINUSE
 & ((
uöt32_t
)(0x01 << 
ídpoötIndex
))) >>ÉndpointIndex);

1507 
	`USB_Devi˚NŸifiˇti⁄Triggî
(
Õc3511IpSèã
->
devi˚H™dÀ
, &
mesßge
);

1509  
kSètus_USB_Suc˚ss
;

1510 
	}
}

1512 
usb_°©us_t
 
	$USB_Devi˚Lpc3511IpC⁄åﬁ
(
usb_devi˚_c⁄åﬁÀr_h™dÀ
 
c⁄åﬁÀrH™dÀ
,

1513 
usb_devi˚_c⁄åﬁ_ty≥_t
 
ty≥
,

1514 *
∑øm
)

1516 
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
 = (usb_devi˚_Õc3511ù_°©e_°ru˘_à*)
c⁄åﬁÀrH™dÀ
;

1517 
usb_°©us_t
 
îr‹
 = 
kSètus_USB_Eº‹
;

1518 
uöt32_t
 
tmp32VÆue
;

1519 
uöt8_t
 
tmp8VÆue
;

1520 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_REMOTE_WAKEUP
)) && (USB_DEVICE_CONFIG_REMOTE_WAKEUP > 0U))

1521 
usb_devi˚_°ru˘_t
 *
devi˚H™dÀ
;

1523 
usb_devi˚_Õc3511ù_ídpoöt_°©e_°ru˘_t
 *
ïSèã
;

1525 i‡(
c⁄åﬁÀrH™dÀ
 =
NULL
)

1527  
kSètus_USB_InvÆidH™dÀ
;

1530 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_REMOTE_WAKEUP
)) && (USB_DEVICE_CONFIG_REMOTE_WAKEUP > 0U))

1531 
devi˚H™dÀ
 = (
usb_devi˚_°ru˘_t
 *)
Õc3511IpSèã
->deviceHandle;

1534 
ty≥
)

1536 
kUSB_Devi˚C⁄åﬁRun
:

1537 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 |(
USB_DEVCMDSTAT_DCON_MASK
);

1540 
kUSB_Devi˚C⁄åﬁSt›
:

1541 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 &(~
USB_DEVCMDSTAT_DCON_MASK
);

1544 
kUSB_Devi˚C⁄åﬁEndpoötInô
:

1545 i‡(
∑øm
)

1547 
îr‹
 = 
	`USB_Devi˚Lpc3511IpEndpoötInô
(
Õc3511IpSèã
, (
usb_devi˚_ídpoöt_öô_°ru˘_t
 *)
∑øm
);

1551 
kUSB_Devi˚C⁄åﬁEndpoötDeöô
:

1552 i‡(
∑øm
)

1554 
tmp8VÆue
 = *((
uöt8_t
 *)
∑øm
);

1555 
îr‹
 = 
	`USB_Devi˚Lpc3511IpEndpoötDeöô
(
Õc3511IpSèã
, 
tmp8VÆue
);

1559 
kUSB_Devi˚C⁄åﬁEndpoötSèŒ
:

1560 i‡(
∑øm
)

1562 
tmp8VÆue
 = *((
uöt8_t
 *)
∑øm
);

1563 
îr‹
 = 
	`USB_Devi˚Lpc3511IpEndpoötSèŒ
(
Õc3511IpSèã
, 
tmp8VÆue
);

1567 
kUSB_Devi˚C⁄åﬁEndpoötUn°Æl
:

1568 i‡(
∑øm
)

1570 
tmp8VÆue
 = *((
uöt8_t
 *)
∑øm
);

1571 
îr‹
 = 
	`USB_Devi˚Lpc3511IpEndpoötUn°Æl
(
Õc3511IpSèã
, 
tmp8VÆue
);

1575 
kUSB_Devi˚C⁄åﬁGëDevi˚Sètus
:

1576 i‡(
∑øm
)

1578 *((
uöt16_t
 *)
∑øm
) =

1579 (
USB_DEVICE_CONFIG_SELF_POWER
 << (
USB_REQUEST_STANDARD_GET_STATUS_DEVICE_SELF_POWERED_SHIFT
))

1580 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_REMOTE_WAKEUP
)) && (USB_DEVICE_CONFIG_REMOTE_WAKEUP > 0U))

1581 | ((
uöt16_t
)(((
uöt32_t
)
devi˚H™dÀ
->
ªmŸewakeup
)

1582 << (
USB_REQUEST_STANDARD_GET_STATUS_DEVICE_REMOTE_WARKUP_SHIFT
)))

1585 
îr‹
 = 
kSètus_USB_Suc˚ss
;

1589 
kUSB_Devi˚C⁄åﬁGëEndpoötSètus
:

1590 i‡(
∑øm
)

1592 
usb_devi˚_ídpoöt_°©us_°ru˘_t
 *
ídpoötSètus
 = (usb_devi˚_ídpoöt_°©us_°ru˘_à*)
∑øm
;

1594 i‡(((
ídpoötSètus
->
ídpoötAddªss
Ë& 
USB_ENDPOINT_NUMBER_MASK
Ë< 
USB_DEVICE_CONFIG_ENDPOINTS
)

1596 
ïSèã
 = 
	`USB_Devi˚Lpc3511IpGëEndpoötSèãSåu˘
(

1597 
Õc3511IpSèã
, 
	`USB_LPC3511IP_ENDPOINT_DES_INDEX
(
ídpoötSètus
->
ídpoötAddªss
));

1598 
ídpoötSètus
->ídpoötSètu†(
uöt16_t
)(
ïSèã
->
°©eUni⁄
.
°©eBôFõld
.
°ÆÀd
 == 1U) ?

1599 
kUSB_Devi˚EndpoötSèãSèŒed
 :

1600 
kUSB_Devi˚EndpoötSèãIdÀ
;

1601 
îr‹
 = 
kSètus_USB_Suc˚ss
;

1606 
kUSB_Devi˚C⁄åﬁSëDevi˚Addªss
:

1607 i‡(
∑øm
)

1609 
tmp8VÆue
 = *((
uöt8_t
 *)
∑øm
);

1610 
tmp32VÆue
 = 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
;

1611 
tmp32VÆue
 &(~
USB_DEVCMDSTAT_DEV_ADDR_MASK
);

1612 
tmp32VÆue
 |(
tmp8VÆue
 & 
USB_DEVCMDSTAT_DEV_ADDR_MASK
);

1613 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 = 
tmp32VÆue
;

1614 
îr‹
 = 
kSètus_USB_Suc˚ss
;

1618 
kUSB_Devi˚C⁄åﬁGëSynchFøme
:

1621 #i‡
	`deföed
(
USB_DEVICE_CONFIG_REMOTE_WAKEUP
) && (USB_DEVICE_CONFIG_REMOTE_WAKEUP > 0U)

1622 
kUSB_Devi˚C⁄åﬁResume
:

1624 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 |
USB_DEVCMDSTAT_FORCE_NEEDCLK_MASK
;

1625 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 &~
USB_DEVCMDSTAT_DSUS_MASK
;

1626 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 & 
USB_DEVCMDSTAT_DSUS_MASK
)

1630 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 &=

1631 ~(
USB_DEVCMDSTAT_FORCE_NEEDCLK_MASK
 | 
USB_LPC3511IP_DEVCMDSTAT_INTERRUPT_WC_MASK
);

1632 
îr‹
 = 
kSètus_USB_Suc˚ss
;

1634 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_LPM_L1
) && (USB_DEVICE_CONFIG_LPM_L1 > 0U))

1635 
kUSB_Devi˚C⁄åﬁSÀïResume
:

1637 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 |
USB_DEVCMDSTAT_FORCE_NEEDCLK_MASK
;

1638 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 &~
USB_DEVCMDSTAT_LPM_SUS_MASK
;

1639 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 & 
USB_DEVCMDSTAT_LPM_SUS_MASK
)

1641 
	`__NOP
();

1644 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 &=

1645 ~(
USB_DEVCMDSTAT_FORCE_NEEDCLK_MASK
 | 
USB_LPC3511IP_DEVCMDSTAT_INTERRUPT_WC_MASK
);

1646 
îr‹
 = 
kSètus_USB_Suc˚ss
;

1649 
kUSB_Devi˚C⁄åﬁGëRemŸeWakeUp
:

1650 *((
uöt8_t
 *)
∑øm
Ë!!(
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 & 
USB_DEVCMDSTAT_LPM_REWP_MASK
);

1654 
kUSB_Devi˚C⁄åﬁSëDeÁu…Sètus
:

1655 
tmp32VÆue
 = 0U;Åmp32VÆuê< 
USB_DEVICE_CONFIG_ENDPOINTS
;Åmp32Value++)

1657 
	`USB_Devi˚Lpc3511IpEndpoötDeöô
(
Õc3511IpSèã
, (
tmp32VÆue
 | (
USB_IN
 << 0x07U)));

1658 
	`USB_Devi˚Lpc3511IpEndpoötDeöô
(
Õc3511IpSèã
, (
tmp32VÆue
 | (
USB_OUT
 << 0x07U)));

1660 
	`USB_Devi˚Lpc3511IpSëDeÁu…Sèã
(
Õc3511IpSèã
);

1661 
îr‹
 = 
kSètus_USB_Suc˚ss
;

1664 
kUSB_Devi˚C⁄åﬁGëS≥ed
:

1665 i‡(
∑øm
)

1667 *((
uöt8_t
 *)
∑øm
Ë
Õc3511IpSèã
->
devi˚S≥ed
;

1668 
îr‹
 = 
kSètus_USB_Suc˚ss
;

1671 
kUSB_Devi˚C⁄åﬁGëOtgSètus
:

1673 
kUSB_Devi˚C⁄åﬁSëOtgSètus
:

1675 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_USB20_TEST_MODE
) && (USB_DEVICE_CONFIG_USB20_TEST_MODE > 0U))

1676 
kUSB_Devi˚C⁄åﬁSëTe°Mode
:

1677 i‡(
∑øm
)

1679 
tmp8VÆue
 = *((
uöt8_t
 *)
∑øm
);

1680 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_LPCIP3511HS
)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))

1681 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 |=

1682 ((
uöt32_t
)(
tmp8VÆue
Ë<< 
USBHSD_DEVCMDSTAT_PHY_TEST_MODE_SHIFT
);

1684 
îr‹
 = 
kSètus_USB_Suc˚ss
;

1692  
îr‹
;

1693 
	}
}

1695 
	$USB_Devi˚LpcIp3511I§Fun˘i⁄
(*
devi˚H™dÀ
)

1697 
usb_devi˚_°ru˘_t
 *
h™dÀ
 = (usb_devi˚_°ru˘_à*)
devi˚H™dÀ
;

1698 
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *
Õc3511IpSèã
;

1699 
uöt32_t
 
öãºu±Sètus
;

1700 
uöt32_t
 
usbEº‹Code
;

1701 
uöt32_t
 
devSèã
;

1703 i‡(
NULL
 =
devi˚H™dÀ
)

1708 
Õc3511IpSèã
 = (
usb_devi˚_Õc3511ù_°©e_°ru˘_t
 *)(
h™dÀ
->
c⁄åﬁÀrH™dÀ
);

1710 
öãºu±Sètus
 = 
Õc3511IpSèã
->
ªgi°îBa£
->
INTSTAT
;

1711 
Õc3511IpSèã
->
ªgi°îBa£
->
INTSTAT
 = 
öãºu±Sètus
;

1712 
öãºu±Sètus
 &
Õc3511IpSèã
->
ªgi°îBa£
->
INTEN
;

1714 
usbEº‹Code
 = (
Õc3511IpSèã
->
ªgi°îBa£
->
INFO
 & 
USB_INFO_ERR_CODE_MASK
);

1717 i‡(
öãºu±Sètus
 & 
USB_INTSTAT_DEV_INT_MASK
)

1720 
devSèã
 = 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
;

1721 
devSèã
 &~(
USB_DEVCMDSTAT_SETUP_MASK
);

1722 
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 = (
devSèã
 | 
USB_LPC3511IP_DEVCMDSTAT_INTERRUPT_WC_MASK
);

1725 i‡(
devSèã
 & 
USB_DEVCMDSTAT_DRES_C_MASK
)

1727 
	`USB_Devi˚Lpc3511IpI¡îru±Re£t
(
Õc3511IpSèã
);

1730 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_DETACH_ENABLE
) && (USB_DEVICE_CONFIG_DETACH_ENABLE))

1732 i‡(
devSèã
 & 
USB_DEVCMDSTAT_DCON_C_MASK
)

1734 
	`USB_Devi˚Lpc3511IpI¡îru±Dëach
(
Õc3511IpSèã
);

1739 #i‡((
	`deföed
(
USB_DEVICE_CONFIG_LOW_POWER_MODE
)) && (USB_DEVICE_CONFIG_LOW_POWER_MODE > 0U))

1740 i‡(
devSèã
 & 
USB_DEVCMDSTAT_DSUS_C_MASK
)

1742 i‡(
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 & 
USB_DEVCMDSTAT_DSUS_MASK
)

1744 
	`USB_Devi˚Lpc3511IpI¡îru±Su•íd
(
Õc3511IpSèã
);

1748 
	`USB_Devi˚Lpc3511IpI¡îru±Resume
(
Õc3511IpSèã
);

1751 #i‡(
	`deföed
(
USB_DEVICE_CONFIG_LPM_L1
) && (USB_DEVICE_CONFIG_LPM_L1 > 0U))

1752 i‡(
devSèã
 & 
USB_DEVCMDSTAT_DSUS_C_MASK
)

1754 i‡(
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 & 
USB_DEVCMDSTAT_LPM_SUS_MASK
)

1756 
	`USB_Devi˚Lpc3511IpI¡îru±LPMSÀï
(
Õc3511IpSèã
);

1760 
	`USB_Devi˚Lpc3511IpI¡îru±Resume
(
Õc3511IpSèã
);

1769 i‡(
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 & 
USB_DEVCMDSTAT_OTG_C_MASK
)

1776 i‡(
öãºu±Sètus
 & 
USB_LPC3511IP_MAX_PHY_ENDPOINT_MASK
)

1778 
devSèã
 = 0;

1779 i‡(
öãºu±Sètus
 & 0x01u)

1781 i‡(
Õc3511IpSèã
->
ªgi°îBa£
->
DEVCMDSTAT
 & 
USB_DEVCMDSTAT_SETUP_MASK
)

1783 
devSèã
 = 2;

1784 i‡((
Õc3511IpSèã
->
ídpoötSèã
[0].
°©eUni⁄
.
°©eBôFõld
.
°ÆÀd
 == 1U) ||

1785 (
Õc3511IpSèã
->
ídpoötSèã
[1].
°©eUni⁄
.
°©eBôFõld
.
°ÆÀd
 == 1U))

1787 
	`USB_LPC3511IP_ENDPOINT_SET_ENDPOINT_AND
(

1788 
Õc3511IpSèã
, 0, 0,

1789 (~(
USB_LPC3511IP_ENDPOINT_STALL_MASK
 | 
USB_LPC3511IP_ENDPOINT_ACTIVE_MASK
)));

1790 
	`USB_LPC3511IP_ENDPOINT_SET_ENDPOINT_AND
(

1791 
Õc3511IpSèã
, 1, 0,

1792 (~(
USB_LPC3511IP_ENDPOINT_STALL_MASK
 | 
USB_LPC3511IP_ENDPOINT_ACTIVE_MASK
)));

1793 
Õc3511IpSèã
->
ídpoötSèã
[0].
°©eUni⁄
.
°©eBôFõld
.
°ÆÀd
 = 0U;

1794 
Õc3511IpSèã
->
ídpoötSèã
[1].
°©eUni⁄
.
°©eBôFõld
.
°ÆÀd
 = 0U;

1798 
	`USB_Devi˚Lpc3511IpI¡îru±Tokí
(
Õc3511IpSèã
, 0U, 1, 
usbEº‹Code
);

1802 ; 
devSèã
 < (
USB_DEVICE_CONFIG_ENDPOINTS
 * 2); ++devState)

1805 i‡(
öãºu±Sètus
 & (0x01U << 
devSèã
))

1807 
	`USB_Devi˚Lpc3511IpI¡îru±Tokí
(
Õc3511IpSèã
, 
devSèã
, 0, 
usbEº‹Code
);

1813 i‡(
öãºu±Sètus
 & 
USB_INTSTAT_FRAME_INT_MASK
)

1817 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\middleware\usb\include\usb.h

35 #i‚de‡
__USB_H__


36 
	#__USB_H__


	)

38 
	~<°döt.h
>

39 
	~<°dio.h
>

40 
	~"f¶_comm⁄.h
"

41 
	~"usb_oß.h
"

42 
	~"usb_misc.h
"

43 
	~"usb_•ec.h
"

54 
	#USB_STACK_VERSION_MAJOR
 (1U)

	)

56 
	#USB_STACK_VERSION_MINOR
 (6U)

	)

58 
	#USB_STACK_VERSION_BUGFIX
 (3U)

	)

61 
	#USB_MAKE_VERSION
(
maj‹
, 
mö‹
, 
bugfix
Ë(((maj‹Ë<< 16Ë| ((mö‹Ë<< 8Ë| (bugfix))

	)

64 
	e_usb_°©us


66 
	mkSètus_USB_Suc˚ss
 = 0x00U,

67 
	mkSètus_USB_Eº‹
,

69 
	mkSètus_USB_Busy
,

70 
	mkSètus_USB_InvÆidH™dÀ
,

71 
	mkSètus_USB_InvÆidP¨amëî
,

72 
	mkSètus_USB_InvÆidReque°
,

73 
	mkSètus_USB_C⁄åﬁÀrNŸFound
,

74 
	mkSètus_USB_InvÆidC⁄åﬁÀrI¡îÁ˚
,

76 
	mkSètus_USB_NŸSuµ‹ãd
,

77 
	mkSètus_USB_Rëry
,

78 
	mkSètus_USB_Tøns„rSèŒ
,

79 
	mkSètus_USB_Tøns„rFaûed
,

80 
	mkSètus_USB_AŒocFaû
,

81 
	mkSètus_USB_LackSw≠Buf„r
,

82 
	mkSètus_USB_Tøns„rC™˚l
,

83 
	mkSètus_USB_B™dwidthFaû
,

84 
	mkSètus_USB_MSDSètusFaû
,

85 
	mkSètus_USB_EHCIAâached
,

86 
	mkSètus_USB_EHCIDëached
,

87 } 
	tusb_°©us_t
;

90 *
	tusb_ho°_h™dÀ
;

94 *
	tusb_devi˚_h™dÀ
;

97 *
	tusb_Ÿg_h™dÀ
;

100 
	e_usb_c⁄åﬁÀr_ödex


102 
	mkUSB_C⁄åﬁÀrKhci0
 = 0U,

103 
	mkUSB_C⁄åﬁÀrKhci1
 = 1U,

105 
	mkUSB_C⁄åﬁÀrEhci0
 = 2U,

106 
	mkUSB_C⁄åﬁÀrEhci1
 = 3U,

109 
	mkUSB_C⁄åﬁÀrLpcIp3511Fs0
 = 4U,

110 
	mkUSB_C⁄åﬁÀrLpcIp3511Fs1
 =

114 
	mkUSB_C⁄åﬁÀrLpcIp3511Hs0
 = 6U,

115 
	mkUSB_C⁄åﬁÀrLpcIp3511Hs1
 =

119 
	mkUSB_C⁄åﬁÀrOhci0
 = 8U,

120 
	mkUSB_C⁄åﬁÀrOhci1
 = 9U,

123 
	mkUSB_C⁄åﬁÀrIp3516Hs0
 = 10U,

124 
	mkUSB_C⁄åﬁÀrIp3516Hs1
 =

127 } 
	tusb_c⁄åﬁÀr_ödex_t
;

132 
	s_usb_vîsi⁄


134 
uöt8_t
 
	mmaj‹
;

135 
uöt8_t
 
	mmö‹
;

136 
uöt8_t
 
	mbugfix
;

137 } 
	tusb_vîsi⁄_t
;

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\middleware\usb\osa\usb_osa.h

35 #i‚de‡
__USB_OSA_H__


36 
	#__USB_OSA_H__


	)

48 
	#USB_BIG_ENDIAN
 (0U)

	)

50 
	#USB_LITTLE_ENDIAN
 (1U)

	)

53 
	#ENDIANNESS
 
USB_LITTLE_ENDIAN


	)

56 *
	tusb_oß_evít_h™dÀ
;

59 *
	tusb_oß_£m_h™dÀ
;

62 *
	tusb_oß_muãx_h™dÀ
;

65 *
	tusb_oß_msgq_h™dÀ
;

68 
	e_usb_oß_°©us


70 
	mkSètus_USB_OSA_Suc˚ss
 = 0x00U,

71 
	mkSètus_USB_OSA_Eº‹
,

72 
	mkSètus_USB_OSA_TimeOut
,

73 } 
	tusb_oß_°©us_t
;

76 
	e_usb_oß_evít_mode


78 
	mkUSB_OßEvítM™uÆCÀ¨
 = 0U,

79 
	mkUSB_OßEvítAutoCÀ¨
 = 1U,

80 } 
	tusb_oß_evít_mode_t
;

83 #i‡
deföed
(
USB_STACK_BM
)

85 
	~"usb_oß_bm.h
"

87 #ñi‡
deföed
(
USB_STACK_FREERTOS
)

89 
	~"usb_oß_‰ìπos.h
"

91 #ñi‡
deföed
(
USB_STACK_UCOSII
)

93 
	~"usb_oß_ucosii.h
"

95 #ñi‡
deföed
(
USB_STACK_UCOSIII
)

97 
	~"usb_oß_ucosiii.h
"

100 #i‡
deföed
(
SDK_OS_BAREMETAL
)

102 
	#USB_STACK_BM


	)

103 
	~"usb_oß_bm.h
"

105 #ñi‡
deföed
(
SDK_OS_FREE_RTOS
)

107 
	#USB_STACK_FREERTOS


	)

108 
	~"usb_oß_‰ìπos.h
"

110 #ñi‡
deföed
(
SDK_OS_UCOSII
)

112 
	#USB_STACK_UCOSII


	)

113 
	~"usb_oß_ucosii.h
"

115 #ñi‡
deföed
(
SDK_OS_UCOSIII
)

117 
	#USB_STACK_UCOSIII


	)

118 
	~"usb_oß_ucosiii.h
"

122 #îr‹ 
NŸ
 
deföe
 
RTOS
 
ö
 
fûe
 "usb_osa.h".

130 #i‡
deföed
(
__˝lu•lus
)

148 *
USB_OßMem‹yAŒoˇã
(
uöt32_t
 
Àngth
);

158 
USB_OßMem‹yFªe
(*
p
);

188 
usb_oß_°©us_t
 
USB_OßEvítCª©e
(
usb_oß_evít_h™dÀ
 *
h™dÀ
, 
uöt32_t
 
Êag
);

205 
usb_oß_°©us_t
 
USB_OßEvítDe°roy
(
usb_oß_evít_h™dÀ
 
h™dÀ
);

225 
usb_oß_°©us_t
 
USB_OßEvítSë
(
usb_oß_evít_h™dÀ
 
h™dÀ
, 
uöt32_t
 
bôMask
);

254 
usb_oß_°©us_t
 
USB_OßEvítWaô
(

255 
usb_oß_evít_h™dÀ
 
h™dÀ
, 
uöt32_t
 
bôMask
, uöt32_à
Êag
, uöt32_à
timeout
, uöt32_à*
bôSë
);

277 
usb_oß_°©us_t
 
USB_OßEvítCheck
(
usb_oß_evít_h™dÀ
 
h™dÀ
, 
uöt32_t
 
bôMask
, uöt32_à*
bôSë
);

296 
usb_oß_°©us_t
 
USB_OßEvítCÀ¨
(
usb_oß_evít_h™dÀ
 
h™dÀ
, 
uöt32_t
 
bôMask
);

322 
usb_oß_°©us_t
 
USB_OßSemCª©e
(
usb_oß_£m_h™dÀ
 *
h™dÀ
, 
uöt32_t
 
cou¡
);

342 
usb_oß_°©us_t
 
USB_OßSemDe°roy
(
usb_oß_£m_h™dÀ
 
h™dÀ
);

363 
usb_oß_°©us_t
 
USB_OßSemPo°
(
usb_oß_£m_h™dÀ
 
h™dÀ
);

388 
usb_oß_°©us_t
 
USB_OßSemWaô
(
usb_oß_£m_h™dÀ
 
h™dÀ
, 
uöt32_t
 
timeout
);

413 
usb_oß_°©us_t
 
USB_OßMuãxCª©e
(
usb_oß_muãx_h™dÀ
 *
h™dÀ
);

433 
usb_oß_°©us_t
 
USB_OßMuãxDe°roy
(
usb_oß_muãx_h™dÀ
 
h™dÀ
);

455 
usb_oß_°©us_t
 
USB_OßMuãxLock
(
usb_oß_muãx_h™dÀ
 
h™dÀ
);

475 
usb_oß_°©us_t
 
USB_OßMuãxU∆ock
(
usb_oß_muãx_h™dÀ
 
h™dÀ
);

502 
usb_oß_°©us_t
 
USB_OßMsgqCª©e
(
usb_oß_msgq_h™dÀ
 *
h™dÀ
, 
uöt32_t
 
cou¡
, uöt32_à
size
);

522 
usb_oß_°©us_t
 
USB_OßMsgqDe°roy
(
usb_oß_msgq_h™dÀ
 
h™dÀ
);

544 
usb_oß_°©us_t
 
USB_OßMsgqSíd
(
usb_oß_msgq_h™dÀ
 
h™dÀ
, *
msg
);

570 
usb_oß_°©us_t
 
USB_OßMsgqRecv
(
usb_oß_msgq_h™dÀ
 
h™dÀ
, *
msg
, 
uöt32_t
 
timeout
);

592 
usb_oß_°©us_t
 
USB_OßMsgqCheck
(
usb_oß_msgq_h™dÀ
 
h™dÀ
, *
msg
);

596 #i‡
deföed
(
__˝lu•lus
)

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\middleware\usb\osa\usb_osa_bm.c

34 
	~"°döt.h
"

35 
	~"usb.h
"

36 
	~"usb_oß.h
"

37 
	~"°dlib.h
"

38 
	~"f¶_devi˚_ªgi°îs.h
"

39 
	~"f¶_comm⁄.h
"

44 
	#USB_OSA_BM_EVENT_COUNT
 (2U)

	)

45 
	#USB_OSA_BM_SEM_COUNT
 (1U)

	)

46 
	#USB_OSA_BM_MSGQ_COUNT
 (1U)

	)

47 
	#USB_OSA_BM_MSG_COUNT
 (8U)

	)

48 
	#USB_OSA_BM_MSG_SIZE
 (4U)

	)

51 
	s_usb_oß_evít_°ru˘


53 
uöt32_t
 
	mvÆue
;

54 
uöt32_t
 
	mÊag
;

55 
uöt8_t
 
	misU£d
;

56 } 
	tusb_oß_evít_°ru˘_t
;

59 
	s_usb_oß_£m_°ru˘


61 
uöt32_t
 
	mvÆue
;

62 
uöt8_t
 
	misU£d
;

63 } 
	tusb_oß_£m_°ru˘_t
;

66 
	s_usb_oß_msg_°ru˘


68 
uöt32_t
 
	mmsg
[
USB_OSA_BM_MSG_SIZE
];

69 } 
	tusb_oß_msg_°ru˘_t
;

72 
	s_usb_oß_msgq_°ru˘


74 
usb_oß_msg_°ru˘_t
 
	mmsgs
[
USB_OSA_BM_MSG_COUNT
];

75 
uöt32_t
 
	mcou¡
;

76 
uöt32_t
 
	mmsgSize
;

77 
uöt32_t
 
	mmsgCou¡
;

78 
uöt32_t
 
	mödex
;

79 
uöt32_t
 
	mcuºít
;

80 
uöt8_t
 
	misU£d
;

81 } 
	tusb_oß_msgq_°ru˘_t
;

91 
USB_GLOBAL
 
	$USB_RAM_ADDRESS_ALIGNMENT
(
USB_DATA_ALIGN_SIZE
Ë
usb_oß_£m_°ru˘_t


92 
s_UsbBmSemSåu˘
[
USB_OSA_BM_SEM_COUNT
];

93 
USB_GLOBAL
 
	$USB_RAM_ADDRESS_ALIGNMENT
(
USB_DATA_ALIGN_SIZE
Ë
usb_oß_evít_°ru˘_t


94 
s_UsbBmEvítSåu˘
[
USB_OSA_BM_EVENT_COUNT
];

95 
USB_GLOBAL
 
	$USB_RAM_ADDRESS_ALIGNMENT
(
USB_DATA_ALIGN_SIZE
Ë
usb_oß_msgq_°ru˘_t


96 
s_UsbBmMsgqSåu˘
[
USB_OSA_BM_MSGQ_COUNT
];

102 *
	$USB_OßMem‹yAŒoˇã
(
uöt32_t
 
Àngth
)

104 *
p
 = (*)
	`mÆloc
(
Àngth
);

105 
uöt8_t
 *
ãmp
 = (uöt8_à*)
p
;

106 i‡(
p
)

108 
uöt32_t
 
cou¡
 = 0U; cou¡ < 
Àngth
; count++)

110 
ãmp
[
cou¡
] = 0U;

113  
p
;

114 
	}
}

116 
	$USB_OßMem‹yFªe
(*
p
)

118 
	`‰ì
(
p
);

119 
	}
}

121 
	$USB_OßE¡îCrôiˇl
(
uöt32_t
 *
§
)

123 *
§
 = 
	`DißbÀGlobÆIRQ
();

124 
	`__ASM
("CPSID I");

125 
	}
}

127 
	$USB_OßExôCrôiˇl
(
uöt32_t
 
§
)

129 
	`E«bÀGlobÆIRQ
(
§
);

130 
	}
}

132 
usb_oß_°©us_t
 
	$USB_OßEvítCª©e
(
usb_oß_evít_h™dÀ
 *
h™dÀ
, 
uöt32_t
 
Êag
)

134 
usb_oß_evít_°ru˘_t
 *
evít
 = 
NULL
;

135 
	`USB_OSA_SR_ALLOC
();

137 i‡(!
h™dÀ
)

139  
kSètus_USB_OSA_Eº‹
;

142 
	`USB_OSA_ENTER_CRITICAL
();

143 
uöt32_t
 
i
 = 0; i < 
USB_OSA_BM_EVENT_COUNT
; i++)

145 i‡(0 =
s_UsbBmEvítSåu˘
[
i
].
isU£d
)

147 
evít
 = &
s_UsbBmEvítSåu˘
[
i
];

152 i‡(
NULL
 =
evít
)

154 
	`USB_OSA_EXIT_CRITICAL
();

155  
kSètus_USB_OSA_Eº‹
;

158 
evít
->
vÆue
 = 0U;

159 
evít
->
Êag
 = flag;

160 
evít
->
isU£d
 = 1;

161 *
h™dÀ
 = 
evít
;

162 
	`USB_OSA_EXIT_CRITICAL
();

163  
kSètus_USB_OSA_Suc˚ss
;

164 
	}
}

166 
usb_oß_°©us_t
 
	$USB_OßEvítDe°roy
(
usb_oß_evít_h™dÀ
 
h™dÀ
)

168 
usb_oß_evít_°ru˘_t
 *
evít
 = (usb_oß_evít_°ru˘_à*)
h™dÀ
;

169 
	`USB_OSA_SR_ALLOC
();

171 i‡(
h™dÀ
)

173 
	`USB_OSA_ENTER_CRITICAL
();

174 
evít
->
isU£d
 = 0;

175 
	`USB_OSA_EXIT_CRITICAL
();

176  
kSètus_USB_OSA_Suc˚ss
;

178  
kSètus_USB_OSA_Eº‹
;

179 
	}
}

181 
usb_oß_°©us_t
 
	$USB_OßEvítSë
(
usb_oß_evít_h™dÀ
 
h™dÀ
, 
uöt32_t
 
bôMask
)

183 
usb_oß_evít_°ru˘_t
 *
evít
 = (usb_oß_evít_°ru˘_à*)
h™dÀ
;

184 
	`USB_OSA_SR_ALLOC
();

186 i‡(
h™dÀ
)

188 
	`USB_OSA_ENTER_CRITICAL
();

189 
evít
->
vÆue
 |
bôMask
;

190 
	`USB_OSA_EXIT_CRITICAL
();

191  
kSètus_USB_OSA_Suc˚ss
;

193  
kSètus_USB_OSA_Eº‹
;

194 
	}
}

196 
usb_oß_°©us_t
 
	$USB_OßEvítWaô
(

197 
usb_oß_evít_h™dÀ
 
h™dÀ
, 
uöt32_t
 
bôMask
, uöt32_à
Êag
, uöt32_à
timeout
, uöt32_à*
bôSë
)

199 
usb_oß_evít_°ru˘_t
 *
evít
 = (usb_oß_evít_°ru˘_à*)
h™dÀ
;

200 
uöt32_t
 
bôs
;

201 
	`USB_OSA_SR_ALLOC
();

203 i‡(
h™dÀ
)

205 
	`USB_OSA_ENTER_CRITICAL
();

206 
bôs
 = 
evít
->
vÆue
 & 
bôMask
;

207 i‡(
Êag
)

209 i‡(
bôs
 !
bôMask
)

211 
	`USB_OSA_EXIT_CRITICAL
();

212  
kSètus_USB_OSA_TimeOut
;

217 i‡(!
bôs
)

219 
	`USB_OSA_EXIT_CRITICAL
();

220  
kSètus_USB_OSA_TimeOut
;

223 i‡(
bôSë
)

225 *
bôSë
 = 
bôs
;

227 i‡(
evít
->
Êag
)

229 
evít
->
vÆue
 &~
bôs
;

231 
	`USB_OSA_EXIT_CRITICAL
();

232  
kSètus_USB_OSA_Suc˚ss
;

234  
kSètus_USB_OSA_Eº‹
;

235 
	}
}

237 
usb_oß_°©us_t
 
	$USB_OßEvítCheck
(
usb_oß_evít_h™dÀ
 
h™dÀ
, 
uöt32_t
 
bôMask
, uöt32_à*
bôSë
)

239 
usb_oß_evít_°ru˘_t
 *
evít
 = (usb_oß_evít_°ru˘_à*)
h™dÀ
;

240 
uöt32_t
 
bôs
;

241 
	`USB_OSA_SR_ALLOC
();

243 i‡(
h™dÀ
)

245 
	`USB_OSA_ENTER_CRITICAL
();

246 
bôs
 = 
evít
->
vÆue
 & 
bôMask
;

248 i‡(!
bôs
)

250 
	`USB_OSA_EXIT_CRITICAL
();

251  
kSètus_USB_OSA_Eº‹
;

254 i‡(
bôSë
)

256 *
bôSë
 = 
bôs
;

258 
	`USB_OSA_EXIT_CRITICAL
();

259  
kSètus_USB_OSA_Suc˚ss
;

261  
kSètus_USB_OSA_Eº‹
;

262 
	}
}

264 
usb_oß_°©us_t
 
	$USB_OßEvítCÀ¨
(
usb_oß_evít_h™dÀ
 
h™dÀ
, 
uöt32_t
 
bôMask
)

266 
usb_oß_evít_°ru˘_t
 *
evít
 = (usb_oß_evít_°ru˘_à*)
h™dÀ
;

267 
uöt32_t
 
bôs
;

268 
	`USB_OSA_SR_ALLOC
();

270 i‡(
h™dÀ
)

272 
	`USB_OSA_ENTER_CRITICAL
();

273 
bôs
 = 
evít
->
vÆue
 & 
bôMask
;

274 
evít
->
vÆue
 &~
bôs
;

275 
	`USB_OSA_EXIT_CRITICAL
();

276  
kSètus_USB_OSA_Suc˚ss
;

278  
kSètus_USB_OSA_Eº‹
;

279 
	}
}

281 
usb_oß_°©us_t
 
	$USB_OßSemCª©e
(
usb_oß_£m_h™dÀ
 *
h™dÀ
, 
uöt32_t
 
cou¡
)

283 
usb_oß_£m_°ru˘_t
 *
£m
 = 
NULL
;

284 
	`USB_OSA_SR_ALLOC
();

286 i‡(!
h™dÀ
)

288  
kSètus_USB_OSA_Eº‹
;

291 
	`USB_OSA_ENTER_CRITICAL
();

292 
uöt32_t
 
i
 = 0; i < 
USB_OSA_BM_SEM_COUNT
; i++)

294 i‡(0 =
s_UsbBmSemSåu˘
[
i
].
isU£d
)

296 
£m
 = &
s_UsbBmSemSåu˘
[
i
];

300 i‡(
NULL
 =
£m
)

302 
	`USB_OSA_EXIT_CRITICAL
();

303  
kSètus_USB_OSA_Eº‹
;

306 
£m
->
vÆue
 = 
cou¡
;

307 
£m
->
isU£d
 = 1;

308 *
h™dÀ
 = 
£m
;

309 
	`USB_OSA_EXIT_CRITICAL
();

310  
kSètus_USB_OSA_Suc˚ss
;

311 
	}
}

313 
usb_oß_°©us_t
 
	$USB_OßSemDe°roy
(
usb_oß_£m_h™dÀ
 
h™dÀ
)

315 
usb_oß_£m_°ru˘_t
 *
£m
 = (usb_oß_£m_°ru˘_à*)
h™dÀ
;

316 
	`USB_OSA_SR_ALLOC
();

318 i‡(
h™dÀ
)

320 
	`USB_OSA_ENTER_CRITICAL
();

321 
£m
->
isU£d
 = 0;

322 
	`USB_OSA_EXIT_CRITICAL
();

323  
kSètus_USB_OSA_Suc˚ss
;

325  
kSètus_USB_OSA_Eº‹
;

326 
	}
}

328 
usb_oß_°©us_t
 
	$USB_OßSemPo°
(
usb_oß_£m_h™dÀ
 
h™dÀ
)

330 
usb_oß_£m_°ru˘_t
 *
£m
 = (usb_oß_£m_°ru˘_à*)
h™dÀ
;

331 
	`USB_OSA_SR_ALLOC
();

333 i‡(!
h™dÀ
)

335  
kSètus_USB_OSA_Eº‹
;

338 
	`USB_OSA_ENTER_CRITICAL
();

339 
£m
->
vÆue
++;

340 
	`USB_OSA_EXIT_CRITICAL
();

341  
kSètus_USB_OSA_Suc˚ss
;

342 
	}
}

344 
usb_oß_°©us_t
 
	$USB_OßSemWaô
(
usb_oß_£m_h™dÀ
 
h™dÀ
, 
uöt32_t
 
timeout
)

346 
usb_oß_£m_°ru˘_t
 *
£m
 = (usb_oß_£m_°ru˘_à*)
h™dÀ
;

347 
	`USB_OSA_SR_ALLOC
();

349 i‡(!
h™dÀ
)

351  
kSètus_USB_OSA_Eº‹
;

354 
	`USB_OSA_ENTER_CRITICAL
();

355 i‡(
£m
->
vÆue
)

357 
£m
->
vÆue
--;

361 
	`USB_OSA_EXIT_CRITICAL
();

362  
kSètus_USB_OSA_TimeOut
;

364 
	`USB_OSA_EXIT_CRITICAL
();

365  
kSètus_USB_OSA_Suc˚ss
;

366 
	}
}

368 
usb_oß_°©us_t
 
	$USB_OßMuãxCª©e
(
usb_oß_muãx_h™dÀ
 *
h™dÀ
)

370 i‡(!
h™dÀ
)

372  
kSètus_USB_OSA_Eº‹
;

374 *
h™dÀ
 = (
usb_oß_muãx_h™dÀ
)0xFFFF0000U;

375  
kSètus_USB_OSA_Suc˚ss
;

376 
	}
}

378 
usb_oß_°©us_t
 
	$USB_OßMuãxDe°roy
(
usb_oß_muãx_h™dÀ
 
h™dÀ
)

380  
kSètus_USB_OSA_Suc˚ss
;

381 
	}
}

382 
usb_oß_°©us_t
 
	$USB_OßMuãxLock
(
usb_oß_muãx_h™dÀ
 
h™dÀ
)

384  
kSètus_USB_OSA_Suc˚ss
;

385 
	}
}

386 
usb_oß_°©us_t
 
	$USB_OßMuãxU∆ock
(
usb_oß_muãx_h™dÀ
 
h™dÀ
)

388  
kSètus_USB_OSA_Suc˚ss
;

389 
	}
}

391 
usb_oß_°©us_t
 
	$USB_OßMsgqCª©e
(
usb_oß_msgq_h™dÀ
 *
h™dÀ
, 
uöt32_t
 
cou¡
, uöt32_à
size
)

393 
usb_oß_msgq_°ru˘_t
 *
msgq
 = 
NULL
;

394 
	`USB_OSA_SR_ALLOC
();

396 i‡(!
h™dÀ
)

398  
kSètus_USB_OSA_Eº‹
;

400 
	`USB_OSA_ENTER_CRITICAL
();

402 
uöt32_t
 
i
 = 0; i < 
USB_OSA_BM_MSGQ_COUNT
; i++)

404 i‡(0 =
s_UsbBmMsgqSåu˘
[
i
].
isU£d
)

406 
msgq
 = &
s_UsbBmMsgqSåu˘
[
i
];

410 i‡((
NULL
 =
msgq
Ë|| (
cou¡
 > 
USB_OSA_BM_MSG_COUNT
Ë|| (
size
 > 
USB_OSA_BM_MSG_SIZE
))

412 
	`USB_OSA_EXIT_CRITICAL
();

413  
kSètus_USB_OSA_Eº‹
;

415 
msgq
->
cou¡
 = count;

416 
msgq
->
msgSize
 = 
size
;

417 
msgq
->
msgCou¡
 = 0U;

418 
msgq
->
ödex
 = 0U;

419 
msgq
->
cuºít
 = 0U;

420 
msgq
->
isU£d
 = 1;

421 *
h™dÀ
 = 
msgq
;

422 
	`USB_OSA_EXIT_CRITICAL
();

423  
kSètus_USB_OSA_Suc˚ss
;

424 
	}
}

426 
usb_oß_°©us_t
 
	$USB_OßMsgqDe°roy
(
usb_oß_msgq_h™dÀ
 
h™dÀ
)

428 
usb_oß_msgq_°ru˘_t
 *
msgq
 = (usb_oß_msgq_°ru˘_à*)
h™dÀ
;

429 
	`USB_OSA_SR_ALLOC
();

431 i‡(!
h™dÀ
)

433  
kSètus_USB_OSA_Eº‹
;

435 
	`USB_OSA_ENTER_CRITICAL
();

436 
msgq
->
isU£d
 = 0;

437 
	`USB_OSA_EXIT_CRITICAL
();

438  
kSètus_USB_OSA_Suc˚ss
;

439 
	}
}

441 
usb_oß_°©us_t
 
	$USB_OßMsgqSíd
(
usb_oß_msgq_h™dÀ
 
h™dÀ
, *
msg
)

443 
usb_oß_msgq_°ru˘_t
 *
msgq
 = (usb_oß_msgq_°ru˘_à*)
h™dÀ
;

444 
usb_oß_msg_°ru˘_t
 *
msgE¡ôy
;

445 
uöt32_t
 *
p
;

446 
uöt32_t
 *
q
;

447 
uöt32_t
 
cou¡
;

448 
	`USB_OSA_SR_ALLOC
();

450 i‡(!
h™dÀ
)

452  
kSètus_USB_OSA_Eº‹
;

454 
	`USB_OSA_ENTER_CRITICAL
();

455 i‡(
msgq
->
msgCou¡
 >msgq->
cou¡
)

457 
	`USB_OSA_EXIT_CRITICAL
();

458  
kSètus_USB_OSA_Eº‹
;

461 
msgE¡ôy
 = &
msgq
->
msgs
[msgq->
ödex
];

462 
p
 = (
uöt32_t
 *)&
msgE¡ôy
->
msg
[0];

463 
q
 = (
uöt32_t
 *)
msg
;

465 
cou¡
 = 0U; cou¡ < 
msgq
->
msgSize
; count++)

467 
p
[
cou¡
] = 
q
[count];

470 i‡(0U =
msgq
->
msgCou¡
)

472 
msgq
->
cuºít
 = msgq->
ödex
;

475 
msgq
->
msgCou¡
++;

476 
msgq
->
ödex
++;

477 
msgq
->
ödex
 = msgq->ödex % msgq->
cou¡
;

479 
	`USB_OSA_EXIT_CRITICAL
();

481  
kSètus_USB_OSA_Suc˚ss
;

482 
	}
}

484 
usb_oß_°©us_t
 
	$USB_OßMsgqRecv
(
usb_oß_msgq_h™dÀ
 
h™dÀ
, *
msg
, 
uöt32_t
 
timeout
)

486 
usb_oß_msgq_°ru˘_t
 *
msgq
 = (usb_oß_msgq_°ru˘_à*)
h™dÀ
;

487 
usb_oß_msg_°ru˘_t
 *
msgE¡ôy
;

488 
uöt32_t
 *
p
;

489 
uöt32_t
 *
q
;

490 
uöt32_t
 
cou¡
;

491 
	`USB_OSA_SR_ALLOC
();

493 i‡(!
h™dÀ
)

495  
kSètus_USB_OSA_Eº‹
;

497 
	`USB_OSA_ENTER_CRITICAL
();

498 i‡(
msgq
->
msgCou¡
 < 1U)

500 
	`USB_OSA_EXIT_CRITICAL
();

501  
kSètus_USB_OSA_TimeOut
;

504 
msgE¡ôy
 = &
msgq
->
msgs
[msgq->
cuºít
];

505 
q
 = (
uöt32_t
 *)&
msgE¡ôy
->
msg
[0];

506 
p
 = (
uöt32_t
 *)
msg
;

508 
cou¡
 = 0U; cou¡ < 
msgq
->
msgSize
; count++)

510 
p
[
cou¡
] = 
q
[count];

513 
msgq
->
msgCou¡
--;

514 
msgq
->
cuºít
++;

515 
msgq
->
cuºít
 = msgq->cuºíà% msgq->
cou¡
;

517 
	`USB_OSA_EXIT_CRITICAL
();

519  
kSètus_USB_OSA_Suc˚ss
;

520 
	}
}

522 
usb_oß_°©us_t
 
	$USB_OßMsgqCheck
(
usb_oß_msgq_h™dÀ
 
h™dÀ
, *
msg
)

524 
usb_oß_msgq_°ru˘_t
 *
msgq
 = (usb_oß_msgq_°ru˘_à*)
h™dÀ
;

525 
uöt32_t
 
msgCou¡
;

526 
	`USB_OSA_SR_ALLOC
();

528 i‡(!
h™dÀ
)

530  
kSètus_USB_OSA_Eº‹
;

533 
	`USB_OSA_ENTER_CRITICAL
();

534 
msgCou¡
 = 
msgq
->msgCount;

535 
	`USB_OSA_EXIT_CRITICAL
();

537 i‡(
msgCou¡
)

539 i‡(
kSètus_USB_OSA_Suc˚ss
 =
	`USB_OßMsgqRecv
(
msgq
, 
msg
, 0U))

541  
kSètus_USB_OSA_Suc˚ss
;

545  
kSètus_USB_OSA_Eº‹
;

546 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\middleware\usb\osa\usb_osa_bm.h

35 #i‚de‡
__USB_OSA_BM_H__


36 
	#__USB_OSA_BM_H__


	)

42 
	#USB_OSA_SR_ALLOC
(Ë
uöt32_t
 
usbOßCuºítSr
;

	)

43 
	#USB_OSA_ENTER_CRITICAL
(Ë
	`USB_OßE¡îCrôiˇl
(&
usbOßCuºítSr
)

	)

44 
	#USB_OSA_EXIT_CRITICAL
(Ë
	`USB_OßExôCrôiˇl
(
usbOßCuºítSr
)

	)

50 #i‡
deföed
(
__˝lu•lus
)

54 
USB_OßE¡îCrôiˇl
(
uöt32_t
 *
§
);

55 
USB_OßExôCrôiˇl
(
uöt32_t
 
§
);

57 #i‡
deföed
(
__˝lu•lus
)

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\middleware\usb\osa\usb_osa_freertos.c

35 
	~"°döt.h
"

36 
	~"f¶_devi˚_ªgi°îs.h
"

37 
	~"usb.h
"

38 
	~"usb_oß.h
"

44 
	#MSEC_TO_TICK
(
m£c
Ë((1000L + ((
uöt32_t
)
c⁄figTICK_RATE_HZ
 * (uöt32_t)(m£¯- 1U))Ë/ 1000L)

	)

45 
	#TICKS_TO_MSEC
(
tick
Ë(—ick)*1000uL / (
uöt32_t
)
c⁄figTICK_RATE_HZ
)

	)

47 #i‡(
deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

49 
	#USB_OSA_FREERTOS_EVENT_COUNT
 (2U)

	)

50 
	#USB_OSA_FREERTOS_SEM_COUNT
 (1U)

	)

51 
	#USB_OSA_FREERTOS_MUTEX_COUNT
 (3U)

	)

52 
	#USB_OSA_FREERTOS_MSGQ_COUNT
 (1U)

	)

53 
	#USB_OSA_FREERTOS_MSG_COUNT
 (8U)

	)

54 
	#USB_OSA_FREERTOS_MSG_SIZE
 (4U)

	)

57 
	s_usb_oß_evít_°ru˘


59 
EvítGroupH™dÀ_t
 
	mh™dÀ
;

60 
uöt32_t
 
	mÊag
;

61 
SèticEvítGroup_t
 
	mevít
;

62 
uöt8_t
 
	misU£d
;

63 } 
	tusb_oß_evít_°ru˘_t
;

66 
	s_usb_oß_£m_°ru˘


68 
Sem≠h‹eH™dÀ_t
 
	mh™dÀ
;

69 
SèticSem≠h‹e_t
 
	m£m
;

70 
uöt8_t
 
	misU£d
;

71 } 
	tusb_oß_£m_°ru˘_t
;

74 
	s_usb_oß_msg_°ru˘


76 
uöt32_t
 
	mmsg
[
USB_OSA_FREERTOS_MSG_SIZE
];

77 } 
	tusb_oß_msg_°ru˘_t
;

80 
	s_usb_oß_msgq_°ru˘


82 
QueueH™dÀ_t
 
	mh™dÀ
;

83 
usb_oß_msg_°ru˘_t
 
	mmsgs
[
USB_OSA_FREERTOS_MSG_COUNT
];

84 
SèticQueue_t
 
	mqueue
;

85 
uöt8_t
 
	misU£d
;

86 } 
	tusb_oß_msgq_°ru˘_t
;

89 
usb_oß_evít_°ru˘_t
 
	gs_UsbFªîtosEvítSåu˘
[
USB_OSA_FREERTOS_EVENT_COUNT
];

92 
usb_oß_£m_°ru˘_t
 
	gs_UsbFªîtosSemSåu˘
[
USB_OSA_FREERTOS_SEM_COUNT
];

95 
usb_oß_£m_°ru˘_t
 
	gs_UsbFªîtosMuãxSåu˘
[
USB_OSA_FREERTOS_MUTEX_COUNT
];

98 
usb_oß_msgq_°ru˘_t
 
	gs_UsbFªîtosMsgqSåu˘
[
USB_OSA_FREERTOS_MSGQ_COUNT
];

102 
	s_usb_oß_evít_°ru˘


104 
EvítGroupH™dÀ_t
 
	mh™dÀ
;

105 
uöt32_t
 
	mÊag
;

106 } 
	tusb_oß_evít_°ru˘_t
;

121 *
	$USB_OßMem‹yAŒoˇã
(
uöt32_t
 
Àngth
)

123 *
p
 = (*)
	`pvP‹tMÆloc
(
Àngth
);

124 
uöt8_t
 *
ãmp
 = (uöt8_à*)
p
;

125 i‡(
p
)

127 
uöt32_t
 
cou¡
 = 0U; cou¡ < 
Àngth
; count++)

129 
ãmp
[
cou¡
] = 0U;

132  
p
;

133 
	}
}

135 
	$USB_OßMem‹yFªe
(*
p
)

137 
	`vP‹tFªe
(
p
);

138 
	}
}

139 
	$USB_OßE¡îCrôiˇl
(
uöt8_t
 *
§
)

141 #i‡
	`deföed
(
__GIC_PRIO_BITS
)

142 i‡((
	`__gë_CPSR
(Ë& 
CPSR_M_Msk
) == 0x13)

144 i‡(
	`__gë_IPSR
())

147 *
§
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

151 
	`p‹tENTER_CRITICAL
();

153 
	}
}

155 
	$USB_OßExôCrôiˇl
(
uöt8_t
 
§
)

157 #i‡
	`deföed
(
__GIC_PRIO_BITS
)

158 i‡((
	`__gë_CPSR
(Ë& 
CPSR_M_Msk
) == 0x13)

160 i‡(
	`__gë_IPSR
())

163 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
§
);

167 
	`p‹tEXIT_CRITICAL
();

169 
	}
}

171 
usb_oß_°©us_t
 
	$USB_OßEvítCª©e
(
usb_oß_evít_h™dÀ
 *
h™dÀ
, 
uöt32_t
 
Êag
)

173 
usb_oß_evít_°ru˘_t
 *
evít
 = 
NULL
;

174 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

175 
	`USB_OSA_SR_ALLOC
();

178 i‡(!
h™dÀ
)

180  
kSètus_USB_OSA_Eº‹
;

183 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

184 
	`USB_OSA_ENTER_CRITICAL
();

185 
uöt32_t
 
ödex
 = 0; index < 
USB_OSA_FREERTOS_EVENT_COUNT
; index++)

187 i‡(0 =
s_UsbFªîtosEvítSåu˘
[
ödex
].
isU£d
)

189 
evít
 = &
s_UsbFªîtosEvítSåu˘
[
ödex
];

190 
evít
->
isU£d
 = 1U;

194 
	`USB_OSA_EXIT_CRITICAL
();

196 
evít
 = (
usb_oß_evít_°ru˘_t
 *)
	`USB_OßMem‹yAŒoˇã
((usb_osa_event_struct_t));

198 i‡(
NULL
 =
evít
)

200  
kSètus_USB_OSA_Eº‹
;

203 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

204 
evít
->
h™dÀ
 = 
	`xEvítGroupCª©eSètic
(&event->event);

205 i‡(
NULL
 =
evít
->
h™dÀ
)

207 
	`USB_OSA_ENTER_CRITICAL
();

208 
evít
->
isU£d
 = 0U;

209 
	`USB_OSA_EXIT_CRITICAL
();

210  
kSètus_USB_OSA_Eº‹
;

213 
evít
->
h™dÀ
 = 
	`xEvítGroupCª©e
();

214 i‡(
NULL
 =
evít
->
h™dÀ
)

216 
	`USB_OßMem‹yFªe
(
evít
);

217  
kSètus_USB_OSA_Eº‹
;

220 
evít
->
Êag
 = flag;

221 *
h™dÀ
 = 
evít
;

222  
kSètus_USB_OSA_Suc˚ss
;

223 
	}
}

225 
usb_oß_°©us_t
 
	$USB_OßEvítDe°roy
(
usb_oß_evít_h™dÀ
 
h™dÀ
)

227 
usb_oß_evít_°ru˘_t
 *
evít
 = (usb_oß_evít_°ru˘_à*)
h™dÀ
;

228 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

229 
	`USB_OSA_SR_ALLOC
();

232 i‡(
h™dÀ
)

234 i‡(
evít
->
h™dÀ
)

236 
	`vEvítGroupDñëe
(
evít
->
h™dÀ
);

238 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

239 
	`USB_OSA_ENTER_CRITICAL
();

240 
evít
->
isU£d
 = 0U;

241 
	`USB_OSA_EXIT_CRITICAL
();

243 
	`USB_OßMem‹yFªe
(
h™dÀ
);

245  
kSètus_USB_OSA_Suc˚ss
;

247  
kSètus_USB_OSA_Eº‹
;

248 
	}
}

250 
usb_oß_°©us_t
 
	$USB_OßEvítSë
(
usb_oß_evít_h™dÀ
 
h™dÀ
, 
uöt32_t
 
bôMask
)

252 
usb_oß_evít_°ru˘_t
 *
evít
 = (usb_oß_evít_°ru˘_à*)
h™dÀ
;

253 
p‹tBASE_TYPE
 
èskToWake
 = 
pdFALSE
;

254 i‡(
h™dÀ
)

256 #i‡
	`deföed
(
__GIC_PRIO_BITS
)

257 i‡((
	`__gë_CPSR
(Ë& 
CPSR_M_Msk
) == 0x13)

259 i‡(
	`__gë_IPSR
())

262 i‡(
pdPASS
 =
	`xEvítGroupSëBôsFromISR
(
evít
->
h™dÀ
, (
EvítBôs_t
)
bôMask
, &
èskToWake
))

264 
MISRAC_DISABLE


265 
	`p‹tYIELD_FROM_ISR
(
èskToWake
);

266 
MISRAC_ENABLE


271 
	`xEvítGroupSëBôs
(
evít
->
h™dÀ
, (
EvítBôs_t
)
bôMask
);

273  
kSètus_USB_OSA_Suc˚ss
;

275  
kSètus_USB_OSA_Eº‹
;

276 
	}
}

278 
usb_oß_°©us_t
 
	$USB_OßEvítWaô
(

279 
usb_oß_evít_h™dÀ
 
h™dÀ
, 
uöt32_t
 
bôMask
, uöt32_à
Êag
, uöt32_à
timeout
, uöt32_à*
bôSë
)

281 
usb_oß_evít_°ru˘_t
 *
evít
 = (usb_oß_evít_°ru˘_à*)
h™dÀ
;

282 
Ba£Ty≥_t
 
autoCÀ¨
;

283 
EvítBôs_t
 
bôs
;

285 i‡(
h™dÀ
)

287 i‡(!
timeout
)

289 
timeout
 = 
p‹tMAX_DELAY
;

293 
timeout
 = 
	`MSEC_TO_TICK
(timeout);

296 i‡(
evít
->
Êag
)

298 
autoCÀ¨
 = 
pdTRUE
;

302 
autoCÀ¨
 = 
pdFALSE
;

305 
bôs
 = 
	`xEvítGroupWaôBôs
(
evít
->
h™dÀ
, (
EvítBôs_t
)
bôMask
, 
autoCÀ¨
, (
Ba£Ty≥_t
)
Êag
, 
timeout
);

307 i‡(
bôSë
)

309 *
bôSë
 = 
bôs
 & ((
EvítBôs_t
)
bôMask
);

310 i‡(*
bôSë
)

312  
kSètus_USB_OSA_Suc˚ss
;

314  
kSètus_USB_OSA_TimeOut
;

317  
kSètus_USB_OSA_Eº‹
;

318 
	}
}

320 
usb_oß_°©us_t
 
	$USB_OßEvítCheck
(
usb_oß_evít_h™dÀ
 
h™dÀ
, 
uöt32_t
 
bôMask
, uöt32_à*
bôSë
)

322 
usb_oß_evít_°ru˘_t
 *
evít
 = (usb_oß_evít_°ru˘_à*)
h™dÀ
;

323 
EvítBôs_t
 
bôs
;

325 i‡(
h™dÀ
)

327 #i‡
	`deföed
(
__GIC_PRIO_BITS
)

328 i‡((
	`__gë_CPSR
(Ë& 
CPSR_M_Msk
) == 0x13)

330 i‡(
	`__gë_IPSR
())

333 
bôs
 = 
	`xEvítGroupGëBôsFromISR
(
evít
->
h™dÀ
);

337 
bôs
 = 
	`xEvítGroupGëBôs
(
evít
->
h™dÀ
);

339 
bôs
 = (bô†& 
bôMask
);

340 i‡(
bôs
)

342 i‡(
bôSë
)

344 *
bôSë
 = 
bôs
 & ((
EvítBôs_t
)
bôMask
);

346  
kSètus_USB_OSA_Suc˚ss
;

349  
kSètus_USB_OSA_Eº‹
;

350 
	}
}

352 
usb_oß_°©us_t
 
	$USB_OßEvítCÀ¨
(
usb_oß_evít_h™dÀ
 
h™dÀ
, 
uöt32_t
 
bôMask
)

354 
EvítBôs_t
 
ev
;

355 
usb_oß_evít_°ru˘_t
 *
evít
 = (usb_oß_evít_°ru˘_à*)
h™dÀ
;

357 i‡(
h™dÀ
)

359 #i‡
	`deföed
(
__GIC_PRIO_BITS
)

360 i‡((
	`__gë_CPSR
(Ë& 
CPSR_M_Msk
) == 0x13)

362 i‡(
	`__gë_IPSR
())

365 
	`xEvítGroupCÀ¨BôsFromISR
(
evít
->
h™dÀ
, (
EvítBôs_t
)
bôMask
);

369 
ev
 = 
	`xEvítGroupCÀ¨Bôs
(
evít
->
h™dÀ
, (
EvítBôs_t
)
bôMask
);

370 i‡(
ev
 == 0)

372  
kSètus_USB_OSA_Eº‹
;

375  
kSètus_USB_OSA_Suc˚ss
;

377  
kSètus_USB_OSA_Eº‹
;

378 
	}
}

380 
usb_oß_°©us_t
 
	$USB_OßSemCª©e
(
usb_oß_£m_h™dÀ
 *
h™dÀ
, 
uöt32_t
 
cou¡
)

382 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

383 
usb_oß_£m_°ru˘_t
 *
£m
 = 
NULL
;

384 
	`USB_OSA_SR_ALLOC
();

386 i‡(!
h™dÀ
)

388  
kSètus_USB_OSA_Eº‹
;

391 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

392 
	`USB_OSA_ENTER_CRITICAL
();

393 
uöt32_t
 
ödex
 = 0; index < 
USB_OSA_FREERTOS_SEM_COUNT
; index++)

395 i‡(0 =
s_UsbFªîtosSemSåu˘
[
ödex
].
isU£d
)

397 
£m
 = &
s_UsbFªîtosSemSåu˘
[
ödex
];

398 
£m
->
isU£d
 = 1U;

402 
	`USB_OSA_EXIT_CRITICAL
();

403 i‡(
NULL
 =
£m
)

405  
kSètus_USB_OSA_Eº‹
;

407 
£m
->
h™dÀ
 = 
	`xSem≠h‹eCª©eCou¡ögSètic
(0xFFU, 
cou¡
, &sem->sem);

408 i‡(
NULL
 =(
£m
->
h™dÀ
))

410 
	`USB_OSA_ENTER_CRITICAL
();

411 
£m
->
isU£d
 = 0U;

412 
	`USB_OSA_EXIT_CRITICAL
();

413  
kSètus_USB_OSA_Eº‹
;

415 *
h™dÀ
 = (
usb_oß_£m_h™dÀ
)
£m
;

417 *
h™dÀ
 = (
usb_oß_£m_h™dÀ
)
	`xSem≠h‹eCª©eCou¡ög
(0xFFU, 
cou¡
);

418 i‡(
NULL
 =(*
h™dÀ
))

420  
kSètus_USB_OSA_Eº‹
;

424  
kSètus_USB_OSA_Suc˚ss
;

425 
	}
}

427 
usb_oß_°©us_t
 
	$USB_OßSemDe°roy
(
usb_oß_£m_h™dÀ
 
h™dÀ
)

429 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

430 
usb_oß_£m_°ru˘_t
 *
£m
 = (usb_oß_£m_°ru˘_à*)
h™dÀ
;

431 
	`USB_OSA_SR_ALLOC
();

433 i‡(
h™dÀ
)

435 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

436 
	`vSem≠h‹eDñëe
(
£m
->
h™dÀ
);

437 
	`USB_OSA_ENTER_CRITICAL
();

438 
£m
->
isU£d
 = 0U;

439 
	`USB_OSA_EXIT_CRITICAL
();

441 
	`vSem≠h‹eDñëe
(
h™dÀ
);

443  
kSètus_USB_OSA_Suc˚ss
;

445  
kSètus_USB_OSA_Eº‹
;

446 
	}
}

448 
usb_oß_°©us_t
 
	$USB_OßSemPo°
(
usb_oß_£m_h™dÀ
 
h™dÀ
)

450 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

451 
usb_oß_£m_°ru˘_t
 *
oßSem
 = (usb_oß_£m_°ru˘_à*)
h™dÀ
;

452 
Sem≠h‹eH™dÀ_t
 
£m
;

454 
Sem≠h‹eH™dÀ_t
 
£m
 = (Sem≠h‹eH™dÀ_t)
h™dÀ
;

456 
p‹tBASE_TYPE
 
èskToWake
 = 
pdFALSE
;

458 i‡(!
h™dÀ
)

460  
kSètus_USB_OSA_Eº‹
;

463 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

464 
£m
 = (
Sem≠h‹eH™dÀ_t
)
oßSem
->
h™dÀ
;

466 #i‡
	`deföed
(
__GIC_PRIO_BITS
)

467 i‡((
	`__gë_CPSR
(Ë& 
CPSR_M_Msk
) == 0x13)

469 i‡(
	`__gë_IPSR
())

472 i‡(
pdPASS
 =
	`xSem≠h‹eGiveFromISR
(
£m
, &
èskToWake
))

474 
MISRAC_DISABLE


475 
	`p‹tYIELD_FROM_ISR
(
èskToWake
);

476 
MISRAC_ENABLE


477  
kSètus_USB_OSA_Suc˚ss
;

482 i‡(
pdTRUE
 =
	`xSem≠h‹eGive
(
£m
))

484  
kSètus_USB_OSA_Suc˚ss
;

487  
kSètus_USB_OSA_Eº‹
;

488 
	}
}

490 
usb_oß_°©us_t
 
	$USB_OßSemWaô
(
usb_oß_£m_h™dÀ
 
h™dÀ
, 
uöt32_t
 
timeout
)

492 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

493 
usb_oß_£m_°ru˘_t
 *
oßSem
 = (usb_oß_£m_°ru˘_à*)
h™dÀ
;

494 
Sem≠h‹eH™dÀ_t
 
£m
;

496 
Sem≠h‹eH™dÀ_t
 
£m
 = (Sem≠h‹eH™dÀ_t)
h™dÀ
;

499 i‡(!
h™dÀ
)

501  
kSètus_USB_OSA_Eº‹
;

503 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

504 
£m
 = (
Sem≠h‹eH™dÀ_t
)
oßSem
->
h™dÀ
;

506 i‡(!
timeout
)

508 
timeout
 = 
p‹tMAX_DELAY
;

512 
timeout
 = 
	`MSEC_TO_TICK
(timeout);

515 i‡(
pdFALSE
 =
	`xSem≠h‹eTake
(
£m
, 
timeout
))

517  
kSètus_USB_OSA_TimeOut
;

519  
kSètus_USB_OSA_Suc˚ss
;

520 
	}
}

522 
usb_oß_°©us_t
 
	$USB_OßMuãxCª©e
(
usb_oß_muãx_h™dÀ
 *
h™dÀ
)

524 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

525 
usb_oß_£m_°ru˘_t
 *
muãx
 = 
NULL
;

526 
	`USB_OSA_SR_ALLOC
();

528 i‡(!
h™dÀ
)

530  
kSètus_USB_OSA_Eº‹
;

532 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

533 
	`USB_OSA_ENTER_CRITICAL
();

534 
uöt32_t
 
ödex
 = 0; index < 
USB_OSA_FREERTOS_MUTEX_COUNT
; index++)

536 i‡(0 =
s_UsbFªîtosMuãxSåu˘
[
ödex
].
isU£d
)

538 
muãx
 = &
s_UsbFªîtosMuãxSåu˘
[
ödex
];

539 
muãx
->
isU£d
 = 1U;

543 
	`USB_OSA_EXIT_CRITICAL
();

544 i‡(
NULL
 =
muãx
)

546  
kSètus_USB_OSA_Eº‹
;

548 
muãx
->
h™dÀ
 = 
	`xSem≠h‹eCª©eRecursiveMuãxSètic
(&muãx->
£m
);

549 i‡(
NULL
 =(
muãx
->
h™dÀ
))

551 
	`USB_OSA_ENTER_CRITICAL
();

552 
muãx
->
isU£d
 = 0U;

553 
	`USB_OSA_EXIT_CRITICAL
();

554  
kSètus_USB_OSA_Eº‹
;

556 *
h™dÀ
 = (
usb_oß_£m_h™dÀ
)
muãx
;

558 *
h™dÀ
 = (
usb_oß_£m_h™dÀ
)
	`xSem≠h‹eCª©eRecursiveMuãx
();

559 i‡(
NULL
 =(*
h™dÀ
))

561  
kSètus_USB_OSA_Eº‹
;

564  
kSètus_USB_OSA_Suc˚ss
;

565 
	}
}

567 
usb_oß_°©us_t
 
	$USB_OßMuãxDe°roy
(
usb_oß_muãx_h™dÀ
 
h™dÀ
)

569 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

570 
usb_oß_£m_°ru˘_t
 *
muãx
 = (usb_oß_£m_°ru˘_à*)
h™dÀ
;

571 
	`USB_OSA_SR_ALLOC
();

573 i‡(
h™dÀ
)

575 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

576 
	`vSem≠h‹eDñëe
(
muãx
->
h™dÀ
);

577 
	`USB_OSA_ENTER_CRITICAL
();

578 
muãx
->
isU£d
 = 0U;

579 
	`USB_OSA_EXIT_CRITICAL
();

581 
	`vSem≠h‹eDñëe
(
h™dÀ
);

583  
kSètus_USB_OSA_Suc˚ss
;

585  
kSètus_USB_OSA_Eº‹
;

586 
	}
}

588 
usb_oß_°©us_t
 
	$USB_OßMuãxLock
(
usb_oß_muãx_h™dÀ
 
h™dÀ
)

590 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

591 
usb_oß_£m_°ru˘_t
 *
oßMuãx
 = (usb_oß_£m_°ru˘_à*)
h™dÀ
;

592 
Sem≠h‹eH™dÀ_t
 
muãx
;

594 
Sem≠h‹eH™dÀ_t
 
muãx
 = (Sem≠h‹eH™dÀ_t)
h™dÀ
;

597 i‡(!
h™dÀ
)

599  
kSètus_USB_OSA_Eº‹
;

601 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

602 
muãx
 = (
Sem≠h‹eH™dÀ_t
)
oßMuãx
->
h™dÀ
;

604 i‡(
	`xSem≠h‹eTakeRecursive
(
muãx
, 
p‹tMAX_DELAY
Ë=
pdFALSE
)

606  
kSètus_USB_OSA_TimeOut
;

609  
kSètus_USB_OSA_Suc˚ss
;

610 
	}
}

612 
usb_oß_°©us_t
 
	$USB_OßMuãxU∆ock
(
usb_oß_muãx_h™dÀ
 
h™dÀ
)

614 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

615 
usb_oß_£m_°ru˘_t
 *
oßMuãx
 = (usb_oß_£m_°ru˘_à*)
h™dÀ
;

616 
Sem≠h‹eH™dÀ_t
 
muãx
;

618 
Sem≠h‹eH™dÀ_t
 
muãx
 = (Sem≠h‹eH™dÀ_t)
h™dÀ
;

621 i‡(!
h™dÀ
)

623  
kSètus_USB_OSA_Eº‹
;

625 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

626 
muãx
 = (
Sem≠h‹eH™dÀ_t
)
oßMuãx
->
h™dÀ
;

628 i‡(
	`xSem≠h‹eGiveRecursive
(
muãx
Ë=
pdFALSE
)

630  
kSètus_USB_OSA_Eº‹
;

632  
kSètus_USB_OSA_Suc˚ss
;

633 
	}
}

635 
usb_oß_°©us_t
 
	$USB_OßMsgqCª©e
(
usb_oß_msgq_h™dÀ
 *
h™dÀ
, 
uöt32_t
 
cou¡
, uöt32_à
size
)

637 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

638 
usb_oß_msgq_°ru˘_t
 *
msgq
 = 
NULL
;

639 
	`USB_OSA_SR_ALLOC
();

641 i‡(!
h™dÀ
)

643  
kSètus_USB_OSA_Eº‹
;

646 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

647 
	`USB_OSA_ENTER_CRITICAL
();

648 
uöt32_t
 
ödex
 = 0; index < 
USB_OSA_FREERTOS_MSGQ_COUNT
; index++)

650 i‡(0 =
s_UsbFªîtosMsgqSåu˘
[
ödex
].
isU£d
)

652 
msgq
 = &
s_UsbFªîtosMsgqSåu˘
[
ödex
];

653 
msgq
->
isU£d
 = 1U;

657 
	`USB_OSA_EXIT_CRITICAL
();

658 i‡(
NULL
 =
msgq
)

660  
kSètus_USB_OSA_Eº‹
;

662 
msgq
->
h™dÀ
 = 
	`xQueueCª©eSètic
(
cou¡
, 
size
 * (
uöt32_t
), (
uöt8_t
 *)&msgq->
msgs
[0], &msgq->
queue
);

663 i‡(
NULL
 =(
msgq
->
h™dÀ
))

665 
	`USB_OSA_ENTER_CRITICAL
();

666 
msgq
->
isU£d
 = 0U;

667 
	`USB_OSA_EXIT_CRITICAL
();

668  
kSètus_USB_OSA_Eº‹
;

670 *
h™dÀ
 = (
usb_oß_msgq_h™dÀ
)
msgq
;

672 *
h™dÀ
 = (
usb_oß_msgq_h™dÀ
)
	`xQueueCª©e
(
cou¡
, 
size
 * (
uöt32_t
));

673 i‡(
NULL
 =(*
h™dÀ
))

675  
kSètus_USB_OSA_Eº‹
;

679  
kSètus_USB_OSA_Suc˚ss
;

680 
	}
}

682 
usb_oß_°©us_t
 
	$USB_OßMsgqDe°roy
(
usb_oß_msgq_h™dÀ
 
h™dÀ
)

684 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

685 
usb_oß_msgq_°ru˘_t
 *
msgq
 = (usb_oß_msgq_°ru˘_à*)
h™dÀ
;

686 
	`USB_OSA_SR_ALLOC
();

688 i‡(!
h™dÀ
)

690  
kSètus_USB_OSA_Eº‹
;

693 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

694 
	`vQueueDñëe
((
QueueH™dÀ_t
)(
msgq
->
h™dÀ
));

695 
	`USB_OSA_ENTER_CRITICAL
();

696 
msgq
->
isU£d
 = 0U;

697 
	`USB_OSA_EXIT_CRITICAL
();

699 
	`vQueueDñëe
((
QueueH™dÀ_t
)
h™dÀ
);

701  
kSètus_USB_OSA_Suc˚ss
;

702 
	}
}

704 
usb_oß_°©us_t
 
	$USB_OßMsgqSíd
(
usb_oß_msgq_h™dÀ
 
h™dÀ
, *
msg
)

706 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

707 
usb_oß_msgq_°ru˘_t
 *
oßMsgq
 = (usb_oß_msgq_°ru˘_à*)
h™dÀ
;

708 
QueueH™dÀ_t
 
msgq
;

710 
QueueH™dÀ_t
 
msgq
 = (QueueH™dÀ_t)
h™dÀ
;

712 
p‹tBASE_TYPE
 
èskToWake
 = 
pdFALSE
;

714 i‡(!
h™dÀ
)

716  
kSètus_USB_OSA_Eº‹
;

719 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

720 
msgq
 = 
oßMsgq
->
h™dÀ
;

723 #i‡
	`deföed
(
__GIC_PRIO_BITS
)

724 i‡((
	`__gë_CPSR
(Ë& 
CPSR_M_Msk
) == 0x13)

726 i‡(
	`__gë_IPSR
())

729 i‡(
pdPASS
 =
	`xQueueSídToBackFromISR
(
msgq
, 
msg
, &
èskToWake
))

731 
MISRAC_DISABLE


732 
	`p‹tYIELD_FROM_ISR
(
èskToWake
);

733 
MISRAC_ENABLE


734  
kSètus_USB_OSA_Suc˚ss
;

739 i‡(
pdPASS
 =
	`xQueueSídToBack
(
msgq
, 
msg
, 0U))

741  
kSètus_USB_OSA_Suc˚ss
;

744  
kSètus_USB_OSA_Eº‹
;

745 
	}
}

747 
usb_oß_°©us_t
 
	$USB_OßMsgqRecv
(
usb_oß_msgq_h™dÀ
 
h™dÀ
, *
msg
, 
uöt32_t
 
timeout
)

749 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

750 
usb_oß_msgq_°ru˘_t
 *
oßMsgq
 = (usb_oß_msgq_°ru˘_à*)
h™dÀ
;

751 
QueueH™dÀ_t
 
msgq
;

753 
QueueH™dÀ_t
 
msgq
 = (QueueH™dÀ_t)
h™dÀ
;

756 i‡(!
h™dÀ
)

758  
kSètus_USB_OSA_Eº‹
;

761 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

762 
msgq
 = 
oßMsgq
->
h™dÀ
;

765 i‡(!
timeout
)

767 
timeout
 = 
p‹tMAX_DELAY
;

771 
timeout
 = 
	`MSEC_TO_TICK
(timeout);

773 i‡(
pdPASS
 !
	`xQueueRe˚ive
(
msgq
, 
msg
, 
timeout
))

775  
kSètus_USB_OSA_TimeOut
;

777  
kSètus_USB_OSA_Suc˚ss
;

778 
	}
}

780 
usb_oß_°©us_t
 
	$USB_OßMsgqCheck
(
usb_oß_msgq_h™dÀ
 
h™dÀ
, *
msg
)

782 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

783 
usb_oß_msgq_°ru˘_t
 *
oßMsgq
 = (usb_oß_msgq_°ru˘_à*)
h™dÀ
;

784 
QueueH™dÀ_t
 
msgq
;

786 
QueueH™dÀ_t
 
msgq
 = (QueueH™dÀ_t)
h™dÀ
;

789 i‡(!
h™dÀ
)

791  
kSètus_USB_OSA_Eº‹
;

794 #i‡(
	`deföed
(
c⁄figSUPPORT_STATIC_ALLOCATION
) && (configSUPPORT_STATIC_ALLOCATION > 0U))

795 
msgq
 = 
oßMsgq
->
h™dÀ
;

798 i‡(
	`uxQueueMesßgesWaôög
(
msgq
))

800 i‡(
pdPASS
 =
	`xQueueRe˚ive
(
msgq
, 
msg
, 1U))

802  
kSètus_USB_OSA_Suc˚ss
;

806  
kSètus_USB_OSA_Eº‹
;

807 
	}
}

	@C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\middleware\usb\osa\usb_osa_freertos.h

35 #i‚de‡
__USB_OSA_FREERTOS_H__


36 
	#__USB_OSA_FREERTOS_H__


	)

38 #i‡
deföed
(
__IAR_SYSTEMS_ICC__
)

43 
	#MISRAC_DISABLE
 \

44 
	`_Pøgma
( \

45 "düg_suµªss \
001,Pm002,Pm003,Pm004,Pm005,Pm006,Pm007,Pm008,Pm009,Pm010,Pm011,\
012,Pm013,Pm014,Pm015,Pm016,Pm017,Pm018,Pm019,Pm020,Pm021,Pm022,\
023,Pm024,Pm025,Pm026,Pm027,Pm028,Pm029,Pm030,Pm031,Pm032,Pm033,\
034,Pm035,Pm036,Pm037,Pm038,Pm039,Pm040,Pm041,Pm042,Pm043,Pm044,\
045,Pm046,Pm047,Pm048,Pm049,Pm050,Pm051,Pm052,Pm053,Pm054,Pm055,\
056,Pm057,Pm058,Pm059,Pm060,Pm061,Pm062,Pm063,Pm064,Pm065,Pm066,\
067,Pm068,Pm069,Pm070,Pm071,Pm072,Pm073,Pm074,Pm075,Pm076,Pm077,\
078,Pm079,Pm080,Pm081,Pm082,Pm083,Pm084,Pm085,Pm086,Pm087,Pm088,\
089,Pm090,Pm091,Pm092,Pm093,Pm094,Pm095,Pm096,Pm097,Pm098,Pm099,\
100,Pm101,Pm102,Pm103,Pm104,Pm105,Pm106,Pm107,Pm108,Pm109,Pm110,\
111,Pm112,Pm113,Pm114,Pm115,Pm116,Pm117,Pm118,Pm119,Pm120,Pm121,\
122,Pm123,Pm124,Pm125,Pm126,Pm127,Pm128,Pm129,Pm130,Pm131,Pm132,\
133,Pm134,Pm135,Pm136,Pm137,Pm138,Pm139,Pm140,Pm141,Pm142,Pm143,\
144,Pm145,Pm146,Pm147,Pm148,Pm149,Pm150,Pm151,Pm152,Pm153,Pm154,\
155")

	)

62 
	#MISRAC_ENABLE
 \

63 
	`_Pøgma
( \

64 "düg_deÁu… \
001,Pm002,Pm003,Pm004,Pm005,Pm006,Pm007,Pm008,Pm009,Pm010,Pm011,\
012,Pm013,Pm014,Pm015,Pm016,Pm017,Pm018,Pm019,Pm020,Pm021,Pm022,\
023,Pm024,Pm025,Pm026,Pm027,Pm028,Pm029,Pm030,Pm031,Pm032,Pm033,\
034,Pm035,Pm036,Pm037,Pm038,Pm039,Pm040,Pm041,Pm042,Pm043,Pm044,\
045,Pm046,Pm047,Pm048,Pm049,Pm050,Pm051,Pm052,Pm053,Pm054,Pm055,\
056,Pm057,Pm058,Pm059,Pm060,Pm061,Pm062,Pm063,Pm064,Pm065,Pm066,\
067,Pm068,Pm069,Pm070,Pm071,Pm072,Pm073,Pm074,Pm075,Pm076,Pm077,\
078,Pm079,Pm080,Pm081,Pm082,Pm083,Pm084,Pm085,Pm086,Pm087,Pm088,\
089,Pm090,Pm091,Pm092,Pm093,Pm094,Pm095,Pm096,Pm097,Pm098,Pm099,\
100,Pm101,Pm102,Pm103,Pm104,Pm105,Pm106,Pm107,Pm108,Pm109,Pm110,\
111,Pm112,Pm113,Pm114,Pm115,Pm116,Pm117,Pm118,Pm119,Pm120,Pm121,\
122,Pm123,Pm124,Pm125,Pm126,Pm127,Pm128,Pm129,Pm130,Pm131,Pm132,\
133,Pm134,Pm135,Pm136,Pm137,Pm138,Pm139,Pm140,Pm141,Pm142,Pm143,\
144,Pm145,Pm146,Pm147,Pm148,Pm149,Pm150,Pm151,Pm152,Pm153,Pm154,\
155")

	)

82 
	#MISRAC_DISABLE


	)

83 
	#MISRAC_ENABLE


	)

86 
	gMISRAC_DISABLE


87 
	~"FªeRTOS.h
"

88 
	~"£mphr.h
"

89 
	~"evít_groups.h
"

90 
	gMISRAC_ENABLE


96 
	#USB_OSA_SR_ALLOC
(Ë
uöt8_t
 
usbOßCuºítSr
;

	)

97 
	#USB_OSA_ENTER_CRITICAL
(Ë
	`USB_OßE¡îCrôiˇl
(&
usbOßCuºítSr
)

	)

98 
	#USB_OSA_EXIT_CRITICAL
(Ë
	`USB_OßExôCrôiˇl
(
usbOßCuºítSr
)

	)

104 #i‡
deföed
(
__˝lu•lus
)

108 
USB_OßE¡îCrôiˇl
(
uöt8_t
 *
§
);

109 
USB_OßExôCrôiˇl
(
uöt8_t
 
§
);

111 #i‡
deföed
(
__˝lu•lus
)

	@
1
.
0
199
16729
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\croutine.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\event_groups.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\FreeRTOS.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\StackMacros.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\croutine.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\deprecated_definitions.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\event_groups.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\list.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\message_buffer.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\mpu_prototypes.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\mpu_wrappers.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\portable.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\projdefs.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\queue.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\semphr.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\stack_macros.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\stream_buffer.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\task.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\include\timers.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\list.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\portable\GCC\ARM_CM4F\port.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\portable\GCC\ARM_CM4F\portmacro.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\portable\MemMang\heap_4.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\queue.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\stream_buffer.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\tasks.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\FreeRTOS\Source\timers.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\AnalogMeasurementHal\AnalogMeasurementHal.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\AnalogMeasurementHal\AnalogMeasurementHal.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\FanControllerHal\FanController.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\FanControllerHal\FanController.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalAdc\HalAdc.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalAdc\HalAdc.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalCommon\HalCommon.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalCommon\HalCommon.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalGpio\HalGpio.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalGpio\HalGpio.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalI2c\HalI2c.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalI2c\HalI2c.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalIFlash\HalIFlash.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalIFlash\HalIFlash.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalPwm\HalPwm.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalPwm\HalPwm.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalSpi\HalSpi.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\HalSpi\HalSpi.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\Lcd\Lcd.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\Lcd\Lcd.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\LedContorllerHal\LedController.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\LedContorllerHal\LedController.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\PmBusHal\PmBusHal.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Hal\PmBusHal\PmBusHal.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\LinkerScript\LinkerScript.ld
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\AnalogMeasurementSystem\AnalogMeasurementSystem.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\AnalogMeasurementSystem\AnalogMeasurementSystem.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\FanSystem\FanSystem.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\FanSystem\FanSystem.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\LightingSystem\led.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\LightingSystem\led.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\PidController\PidController.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\PidController\PidController.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\SpiFlash\SpiFlash.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\SpiFlash\SpiFlash.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbDevice\UsbHidDevice.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbDevice\UsbHidDevice.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbDevice\usb_device_ch9.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbDevice\usb_device_ch9.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbDevice\usb_device_class.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbDevice\usb_device_class.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbDevice\usb_device_config.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbDevice\usb_device_descriptor.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbDevice\usb_device_descriptor.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbDevice\usb_device_hid.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbDevice\usb_device_hid.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbProtocol\UsbProtocol.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\Modules\UsbProtocol\UsbProtocol.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\AnalogMeasurementTask.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\AnalogMeasurementTask.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\Anim.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_00.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_01.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_02.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_03.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_04.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_05.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_06.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_07.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_08.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_09.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_10.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_11.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_12.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_13.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_14.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_15.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_16.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_17.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_18.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_19.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_20.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_21.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_22.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_23.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_24.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_25.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_26.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_27.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_28.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_29.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_30.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_31.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_32.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_33.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_34.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_35.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_36.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_37.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_38.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_39.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_40.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_41.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_42.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_43.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_44.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_45.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_46.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_47.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_48.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_49.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_50.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_51.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_52.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_53.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_54.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_55.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_56.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_57.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_58.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_59.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_60.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Anim\frame_61.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\FanTask.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\FanTask.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\FreeRTOSConfig.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\LcdInterface.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\LcdTask.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\LcdTask.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\LightingTask.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\LightingTask.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\PmBusCommunicationTask.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\PmBusCommunicationTask.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Rtos.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\Rtos.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\UsbDeviceTask.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\UsbDeviceTask.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\clock_config.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\clock_config.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\app\main.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\CMSIS\Include\core_cm4.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\LPC54608.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_adc.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_adc.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_clock.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_clock.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_ctimer.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_ctimer.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_dma.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_dma.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_flexcomm.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_flexcomm.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_gpio.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_gpio.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_inputmux.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_inputmux.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_inputmux_connections.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_iocon.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_power.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_power.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_reset.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_reset.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_sctimer.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_sctimer.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_spi.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_spi.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_spi_dma.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\drivers\fsl_spi_dma.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\fsl_device_registers.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\mcuxpresso\libpower_hardabi.a
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\mcuxpresso\startup_LPC54608.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\system_LPC54608.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\devices\LPC54608\system_LPC54608.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\middleware\usb\device\usb_device.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\middleware\usb\device\usb_device_dci.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\middleware\usb\device\usb_device_lpcip3511.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\middleware\usb\include\usb.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\middleware\usb\osa\usb_osa.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\middleware\usb\osa\usb_osa_bm.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\middleware\usb\osa\usb_osa_bm.h
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\middleware\usb\osa\usb_osa_freertos.c
C:\Private\Programing\LPC\CheddarFirmware-feature-gpio\sdk\middleware\usb\osa\usb_osa_freertos.h
